/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <reference types="rxjs" />
import { Subject, Subscription } from 'rxjs';
class EventEmitter_ extends Subject {
    constructor(isAsync = false) {
        super();
        this.__isAsync = isAsync;
    }
    emit(value) {
        super.next(value);
    }
    subscribe(observerOrNext, error, complete) {
        let schedulerFn;
        let errorFn = (err) => null;
        let completeFn = () => null;
        if (observerOrNext && typeof observerOrNext === 'object') {
            schedulerFn = this.__isAsync ? (value) => {
                setTimeout(() => observerOrNext.next(value));
            } : (value) => {
                observerOrNext.next(value);
            };
            if (observerOrNext.error) {
                errorFn = this.__isAsync ? (err) => {
                    setTimeout(() => observerOrNext.error(err));
                } : (err) => {
                    observerOrNext.error(err);
                };
            }
            if (observerOrNext.complete) {
                completeFn = this.__isAsync ? () => {
                    setTimeout(() => observerOrNext.complete());
                } : () => {
                    observerOrNext.complete();
                };
            }
        }
        else {
            schedulerFn = this.__isAsync ? (value) => {
                setTimeout(() => observerOrNext(value));
            } : (value) => {
                observerOrNext(value);
            };
            if (error) {
                errorFn = this.__isAsync ? (err) => {
                    setTimeout(() => error(err));
                } : (err) => {
                    error(err);
                };
            }
            if (complete) {
                completeFn = this.__isAsync ? () => {
                    setTimeout(() => complete());
                } : () => {
                    complete();
                };
            }
        }
        const sink = super.subscribe(schedulerFn, errorFn, completeFn);
        if (observerOrNext instanceof Subscription) {
            observerOrNext.add(sink);
        }
        return sink;
    }
}
/**
 * @publicApi
 */
export const EventEmitter = EventEmitter_;
//# sourceMappingURL=data:application/json;base64,