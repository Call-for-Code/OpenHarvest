{"version":3,"file":"select.component.d.ts","sources":["select.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | select.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, TemplateRef } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\n/**\n * `ibm-select` provides a styled `select` component.\n *\n * [See demo](../../?path=/story/select--basic)\n *\n * Example:\n *\n * ```\n * <ibm-select [(ngModel)]=\"model\">\n * \t<option value=\"default\" disabled selected hidden>Choose an option</option>\n * \t<option value=\"option1\">Option 1</option>\n *\t<option value=\"option2\">Option 2</option>\n * \t<option value=\"option3\">Option 3</option>\n * </ibm-select>\n *\t```\n *\n * <example-url>../../iframe.html?id=select--basic</example-url>\n */\nexport declare class Select implements ControlValueAccessor {\n    /**\n     * Tracks the total number of selects instantiated. Used to generate unique IDs\n     */\n    static selectCount: number;\n    /**\n     * `inline` or `default` select displays\n     */\n    display: \"inline\" | \"default\";\n    /**\n     * Label for the select. Appears above the input.\n     */\n    label: string | TemplateRef<any>;\n    /**\n     * Optional helper text that appears under the label.\n     */\n    helperText: string | TemplateRef<any>;\n    /**\n     * Sets the invalid text.\n     */\n    invalidText: string | TemplateRef<any>;\n    /**\n     * Sets the unique ID. Defaults to `select-${total count of selects instantiated}`\n     */\n    id: string;\n    /**\n     * Number input field render size\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Set to true to disable component.\n     */\n    disabled: boolean;\n    /**\n     * Set to true for a loading select.\n     */\n    skeleton: boolean;\n    /**\n     * Set to `true` for an invalid select component.\n     */\n    invalid: boolean;\n    /**\n     * `light` or `dark` select theme\n     */\n    theme: \"light\" | \"dark\";\n    ariaLabel: string;\n    valueChange: EventEmitter<{}>;\n    value: string;\n    protected _value: string;\n    /**\n     * Receives a value from the model.\n     */\n    writeValue(obj: any): void;\n    /**\n     * Registers a listener that notifies the model when the control updates\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Registers a listener that notifies the model when the control is blurred\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets the disabled state through the model\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Handles the change event from the `select`.\n     * Sends events to the change handler and emits a `selected` event.\n     */\n    onChange(event: any): void;\n    /**\n     * Listens for the host blurring, and notifies the model\n     */\n    focusOut(): void;\n    isTemplate(value: any): boolean;\n    /**\n     * placeholder declarations. Replaced by the functions provided to `registerOnChange` and `registerOnTouched`\n     */\n    protected onChangeHandler: (_: any) => void;\n    protected onTouchedHandler: () => void;\n}\n"]}