{"version":3,"file":"i18n.service.d.ts","sources":["i18n.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | i18n.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { BehaviorSubject, Observable, Subscription } from \"rxjs\";\n/**\n * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.\n *\n * The keys specify the variable name in the string.\n *\n * Example:\n * ```typescript\n * service.set({ \"TEST\": \"{{foo}} {{bar}}\" });\n *\n * service.replace(service.get(\"TEST\"), { foo: \"test\", bar: \"asdf\" })\n * ```\n *\n * Produces: `\"test asdf\"`\n *\n * @param subject the translation to replace variables on\n * @param variables object of variables to replace\n */\nexport declare const replace: (subject: any, variables: any) => any;\n/**\n * Represents an \"overridable\" translation value.\n *\n * Largely an internal usecase. There are situations where we want an `Observable` that\n * can emit events from a centralized source **OR** an `Observable` that will emit events\n * from a component local source. The key example being on/off text in a `Toggle` - In some cases\n * we want the `Toggle` to use `I18n`s global translations, but in others we'd prefer to use a local\n * override. We don't ever need to return to a non-overridden state, but we do need the ability to\n * switch _to_ an overridden sate.\n */\nexport declare class Overridable {\n    protected path: string;\n    protected i18n: I18n;\n    /**\n     * The raw value of the translation. Defaults to the string value, but will return the value passed to `override`\n     *\n     * @readonly\n     */\n    value: string | Observable<string>;\n    /**\n     * The translation subject. Returns either a stream of overridden values, or our base translation values.\n     *\n     * @readonly\n     */\n    readonly subject: Observable<string>;\n    /**\n     * Overridden value. Accessed by the readonly getter `value` and set through `override`\n     */\n    protected _value: string | Observable<string>;\n    /**\n     * Subject of overridden values. Initialized with our default value.\n     */\n    protected $override: BehaviorSubject<string>;\n    /**\n     * Our base non-overridden translation.\n     */\n    protected baseTranslation: Observable<string>;\n    /**\n     * Subscription to the observable provided as an override (if any)\n     */\n    protected subscription: Subscription;\n    /**\n     * A boolean to flip between overridden and non-overridden states.\n     */\n    protected isOverridden: boolean;\n    constructor(path: string, i18n: I18n);\n    /**\n     * Takes a string or an `Observable` that emits strings.\n     * Overrides the value provided by the `I18n` service.\n     */\n    override(value: string | Observable<string>): void;\n}\n/**\n * An object of strings, should follow the same format as src/i18n/en.json\n */\nexport declare type TranslationStrings = {\n    [key: string]: string;\n};\n/**\n * The I18n service is a minimal internal singleton service used to supply our components with translated strings.\n *\n * All the components that support I18n also support directly passed strings.\n * Usage of I18n is optional, and it is not recommended for application use (libraries like ngx-translate\n * are a better choice)\n *\n */\nexport declare class I18n {\n    protected translationStrings: {\n        \"BANNER\": {\n            \"CLOSE_BUTTON\": string;\n        };\n        \"CALENDAR\": {\n            \"MONTHS\": {\n                \"JANUARY\": string;\n                \"FEBRUARY\": string;\n                \"MARCH\": string;\n                \"APRIL\": string;\n                \"MAY\": string;\n                \"JUNE\": string;\n                \"JULY\": string;\n                \"AUGUST\": string;\n                \"SEPTEMBER\": string;\n                \"OCTOBER\": string;\n                \"NOVEMBER\": string;\n                \"DECEMBER\": string;\n            };\n            \"SHORTWEEKDAYS\": {\n                \"SUNDAY\": string;\n                \"MONDAY\": string;\n                \"TUESDAY\": string;\n                \"WEDNESDAY\": string;\n                \"THURSDAY\": string;\n                \"FRIDAY\": string;\n                \"SATURDAY\": string;\n            };\n            \"QUARTERS\": {\n                \"name\": string;\n                \"months\": string;\n            }[];\n        };\n        \"CODE_SNIPPET\": {\n            \"CODE_SNIPPET_TEXT\": string;\n            \"SHOW_MORE\": string;\n            \"SHOW_LESS\": string;\n            \"SHOW_MORE_ICON\": string;\n            \"COPY_CODE\": string;\n            \"COPIED\": string;\n        };\n        \"COMBOBOX\": {\n            \"PLACEHOLDER\": string;\n            \"CLEAR_SELECTIONS\": string;\n            \"CLEAR_SELECTED\": string;\n            \"A11Y\": {\n                \"OPEN_MENU\": string;\n                \"CLOSE_MENU\": string;\n                \"CLEAR_SELECTIONS\": string;\n                \"CLEAR_SELECTED\": string;\n            };\n        };\n        \"DIALOG\": {\n            \"POPOVER\": {\n                \"CLOSE\": string;\n            };\n        };\n        \"DROPDOWN\": {\n            \"OPEN\": string;\n            \"SELECTED\": string;\n            \"CLEAR\": string;\n            \"FILTER\": {\n                \"SELECTED_ONLY\": string;\n                \"SEARCH\": string;\n                /**\n                 * The raw value of the translation. Defaults to the string value, but will return the value passed to `override`\n                 *\n                 * @readonly\n                 */\n                \"NO_RESULTS\": string;\n                \"RESET_SEARCH\": string;\n            };\n        };\n        \"DROPDOWN_LIST\": {\n            \"LABEL\": string;\n        };\n        \"FILE_UPLOADER\": {\n            \"CHECKMARK\": string;\n            \"CHECKMARK_TITLE\": string;\n            \"OPEN\": string;\n            \"REMOVE_BUTTON\": string;\n            \"REMOVE_TITLE\": string;\n        };\n        \"LOADING\": {\n            \"TITLE\": string;\n        };\n        \"MODAL\": {\n            \"CLOSE\": string;\n        };\n        \"NOTIFICATION\": {\n            \"CLOSE_BUTTON\": string;\n        };\n        \"NUMBER\": {\n            \"INCREMENT\": string;\n            \"DECREMENT\": string;\n        };\n        \"OVERFLOW_MENU\": {\n            \"OVERFLOW\": string;\n        };\n        \"SEARCH\": {\n            \"LABEL\": string;\n            \"PLACEHOLDER\": string;\n            \"CLEAR_BUTTON\": string;\n            \"TOOLBAR_SEARCH\": string;\n        };\n        \"PAGINATION\": {\n            \"ITEMS_PER_PAGE\": string;\n            \"OPEN_LIST_OF_OPTIONS\": string;\n            \"BACKWARD\": string;\n            \"FORWARD\": string;\n            \"TOTAL_ITEMS_UNKNOWN\": string;\n            \"TOTAL_ITEMS\": string;\n            \"TOTAL_ITEM\": string;\n            /**\n             * Our base non-overridden translation.\n             */\n            \"PAGE\": string;\n            \"OF_LAST_PAGES\": string;\n            \"OF_LAST_PAGE\": string;\n            \"NEXT\": string;\n            \"PREVIOUS\": string;\n        };\n        \"TABLE\": {\n            \"GO_TO_PAGE\": string;\n            \"PREVIOUS_PAGE\": string;\n            \"NEXT_PAGE\": string;\n            \"PREVIOUS_3\": string;\n            \"NEXT_3\": string;\n            \"FILTER\": string;\n            \"END_OF_DATA\": string;\n            \"SCROLL_TOP\": string;\n            \"CHECKBOX_HEADER\": string;\n            \"CHECKBOX_ROW\": string;\n            \"EXPAND_BUTTON\": string;\n            \"SORT_DESCENDING\": string;\n            \"SORT_ASCENDING\": string;\n            \"ROW\": string;\n        };\n        \"TABLE_TOOLBAR\": {\n            \"ACTION_BAR\": string;\n            \"BATCH_TEXT\": string;\n            \"BATCH_TEXT_SINGLE\": string;\n            \"BATCH_TEXT_MULTIPLE\": string;\n            \"CANCEL\": string;\n        };\n        \"TABS\": {\n            \"BUTTON_ARIA_LEFT\": string;\n            \"BUTTON_ARIA_RIGHT\": string;\n        };\n        \"TILES\": {\n            \"TILE\": string;\n            \"EXPAND\": string;\n            \"COLLAPSE\": string;\n        };\n        \"TOGGLE\": {\n            \"OFF\": string;\n            \"ON\": string;\n        };\n        \"UI_SHELL\": {\n            \"SKIP_TO\": string;\n            \"HEADER\": {\n                \"OPEN_MENU\": string;\n                \"CLOSE_MENU\": string;\n            };\n            \"SIDE_NAV\": {\n                \"LABEL\": string;\n                \"SWITCHER\": string;\n                \"TOGGLE_OPEN\": string;\n                \"TOGGLE_CLOSE\": string;\n            };\n        };\n    };\n    protected translations: Map<any, any>;\n    protected locale: BehaviorSubject<string>;\n    /**\n     * Sets the locale and optionally the translation strings. Locale is used by components that\n     * are already locale aware (datepicker for example) while the translation strings are used\n     * for components that are not.\n     *\n     * Locales set here will override locales/languages set in components\n     * @param language an ISO 639-1 language code - https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n     * @param strings an object of strings, optional\n     */\n    setLocale(language: string, strings?: TranslationStrings): void;\n    /**\n     * Returns the current locale\n     */\n    getLocale(): string;\n    /**\n     * Returns an observable that resolves to the current locale, and will update when changed\n     */\n    getLocaleObservable(): Observable<string>;\n    /**\n     * Set/update the translations from an object. Also notifies all participating components of the update.\n     *\n     * @param strings an object of strings, should follow the same format as src/i18n/en.json\n     */\n    set(strings: TranslationStrings): void;\n    /**\n     * When a path is specified returns an observable that will resolve to the translation string value.\n     *\n     * Returns the full translations object if path is not specified.\n     *\n     * @param path optional, looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    get(path?: string): any;\n    /**\n     * Returns all descendents of some path fragment as an object.\n     *\n     * @param partialPath a path fragment, for example `\"NOTIFICATION\"`\n     */\n    getMultiple(partialPath: string): {\n        [key: string]: Observable<string>;\n    };\n    /**\n     * Returns an instance of `Overridable` that can be used to optionally override the value provided by `I18n`\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    getOverridable(path: string): Overridable;\n    /**\n     * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.\n     *\n     * The keys specify the variable name in the string.\n     *\n     * Example:\n     * ```\n     * service.set({ \"TEST\": \"{{foo}} {{bar}}\" });\n     *\n     * service.replace(service.get(\"TEST\"), { foo: \"test\", bar: \"asdf\" })\n     * ```\n     *\n     * Produces: `\"test asdf\"`\n     *\n     * @param subject the translation to replace variables on\n     * @param variables object of variables to replace\n     */\n    replace(subject: Observable<string>, variables: {\n        [key: string]: string;\n    }): any;\n    /**\n     * Trys to resolve a value from the provided path.\n     *\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    getValueFromPath(path: any): string | {\n        [key: string]: string;\n    };\n    /**\n     * Helper method that returns an observable from the internal cache based on the path\n     *\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n    protected getSubject(path: string): Observable<string>;\n}\n"]}