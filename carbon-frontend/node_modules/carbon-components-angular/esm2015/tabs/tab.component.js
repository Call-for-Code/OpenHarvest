/**
 *
 * carbon-angular v0.0.0 | tab.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, TemplateRef, HostBinding } from "@angular/core";
let nextId = 0;
/**
* The `Tab` component is a child of the `Tabs` component.
* It represents one `Tab` item and its content within a panel of other `Tab` items.
*
*
* `Tab` takes a string or `TemplateRef` for the header, and any content for the body of the tab.
* Disabled states should be handled by the application (ie. switch to the tab, but display some
* indication as to _why_ the tab is disabled).
*
* When the tab is selected the `select` output will be triggered.
* The `select` output will also be triggered for the active tab when the tabs are loaded or updated.
*
*
* Tab with string header:
*
* ```html
* <ibm-tab heading='tab1'>
* 	tab 1 content
* </ibm-tab>
* ```
*
* Tab with custom header:
*
* ```html
* <ng-template #tabHeading>
* 	<svg ibmIcon="facebook"
* 		size="sm"
* 		style="margin-right: 7px;">
* 	</svg>
* 	Hello Tab 1
* </ng-template>
* <ibm-tabs>
* 	<ibm-tab [heading]="tabHeading">
* 		Tab 1 content <svg ibmIcon="alert" size="lg"></svg>
* 	</ibm-tab>
* 	<ibm-tab heading='Tab2'>
* 		Tab 2 content
* 	</ibm-tab>
* 	<ibm-tab heading='Tab3'>
* 		Tab 3 content
* 	</ibm-tab>
* </ibm-tabs>
* ```
*/
export class Tab {
    constructor() {
        /**
         * Boolean value reflects if the `Tab` is using a custom template for the heading.
         * Default value is false.
         */
        this.headingIsTemplate = false;
        /**
         * Indicates whether the `Tab` is active/selected.
         * Determines whether it's `TabPanel` is rendered.
         */
        this.active = false;
        /**
         * Indicates whether or not the `Tab` item is disabled.
         */
        this.disabled = false;
        this.tabIndex = 0;
        // do we need id's?
        /**
         * Sets the id of the `Tab`. Will be uniquely generated if not provided.
         */
        this.id = `n-tab-${nextId++}`;
        /**
         * Value 'selected' to be emitted after a new `Tab` is selected.
         */
        this.selected = new EventEmitter();
        /**
         * Used to set the id property on the element.
         */
        this.attrClass = this.id;
        this._cacheActive = false;
    }
    /**
     * Set to true to have Tab items cached and not reloaded on tab switching.
     */
    set cacheActive(shouldCache) {
        this._cacheActive = shouldCache;
    }
    get cacheActive() {
        return this._cacheActive;
    }
    /**
     * Checks for custom heading template on initialization and updates the value
     * of the boolean 'headingIsTemplate'.
     */
    ngOnInit() {
        if (this.heading instanceof TemplateRef) {
            this.headingIsTemplate = true;
        }
    }
    /**
     * Emit the status of the `Tab`, specifically 'select' and 'selected' properties.
     */
    doSelect() {
        this.selected.emit();
    }
    /**
    * Returns value indicating whether this `Tab` should be rendered in a `TabPanel`.
    */
    shouldRender() {
        return this.active || this.cacheActive;
    }
}
Tab.decorators = [
    { type: Component, args: [{
                selector: "ibm-tab",
                template: `
		<div
			[attr.tabindex]="tabIndex"
			role="tabpanel"
			*ngIf="shouldRender()"
			class="bx--tab-content"
			[ngStyle]="{'display': active ? null : 'none'}"
			[attr.aria-labelledby]="id + '-header'"
			aria-live="polite">
			<ng-content></ng-content>
		</div>
	`
            }] }
];
Tab.propDecorators = {
    heading: [{ type: Input }],
    title: [{ type: Input }],
    context: [{ type: Input }],
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    tabIndex: [{ type: Input }],
    id: [{ type: Input }],
    cacheActive: [{ type: Input }],
    selected: [{ type: Output }],
    attrClass: [{ type: HostBinding, args: ["attr.id",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFicy8iLCJzb3VyY2VzIjpbInRhYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFFWixXQUFXLEVBQ1gsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkNFO0FBZ0JGLE1BQU0sT0FBTyxHQUFHO0lBZmhCO1FBZ0JDOzs7V0FHRztRQUNJLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQWlCakM7OztXQUdHO1FBQ00sV0FBTSxHQUFHLEtBQUssQ0FBQztRQUN4Qjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUN0QixtQkFBbUI7UUFDbkI7O1dBRUc7UUFDTSxPQUFFLEdBQUcsU0FBUyxNQUFNLEVBQUUsRUFBRSxDQUFDO1FBT2xDOztXQUVHO1FBQ08sYUFBUSxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRWxFOztXQUVHO1FBQ3FCLGNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBTWxDLGlCQUFZLEdBQUcsS0FBSyxDQUFDO0lBeUJoQyxDQUFDO0lBN0NBOztPQUVHO0lBQ0gsSUFBYSxXQUFXLENBQUMsV0FBb0I7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7SUFDakMsQ0FBQztJQVdELElBQUksV0FBVztRQUNkLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMxQixDQUFDO0lBSUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNQLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxXQUFXLEVBQUU7WUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztTQUM5QjtJQUNGLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7TUFFRTtJQUNGLFlBQVk7UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOzs7WUFqR0QsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0VBV1Q7YUFDRDs7O3NCQVdDLEtBQUs7b0JBT0wsS0FBSztzQkFJTCxLQUFLO3FCQUtMLEtBQUs7dUJBSUwsS0FBSzt1QkFFTCxLQUFLO2lCQUtMLEtBQUs7MEJBSUwsS0FBSzt1QkFNTCxNQUFNO3dCQUtOLFdBQVcsU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRPbkluaXQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0Q29udGVudENoaWxkLFxuXHRUZW1wbGF0ZVJlZixcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuXG5sZXQgbmV4dElkID0gMDtcblxuLyoqXG4qIFRoZSBgVGFiYCBjb21wb25lbnQgaXMgYSBjaGlsZCBvZiB0aGUgYFRhYnNgIGNvbXBvbmVudC5cbiogSXQgcmVwcmVzZW50cyBvbmUgYFRhYmAgaXRlbSBhbmQgaXRzIGNvbnRlbnQgd2l0aGluIGEgcGFuZWwgb2Ygb3RoZXIgYFRhYmAgaXRlbXMuXG4qXG4qXG4qIGBUYWJgIHRha2VzIGEgc3RyaW5nIG9yIGBUZW1wbGF0ZVJlZmAgZm9yIHRoZSBoZWFkZXIsIGFuZCBhbnkgY29udGVudCBmb3IgdGhlIGJvZHkgb2YgdGhlIHRhYi5cbiogRGlzYWJsZWQgc3RhdGVzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiAoaWUuIHN3aXRjaCB0byB0aGUgdGFiLCBidXQgZGlzcGxheSBzb21lXG4qIGluZGljYXRpb24gYXMgdG8gX3doeV8gdGhlIHRhYiBpcyBkaXNhYmxlZCkuXG4qXG4qIFdoZW4gdGhlIHRhYiBpcyBzZWxlY3RlZCB0aGUgYHNlbGVjdGAgb3V0cHV0IHdpbGwgYmUgdHJpZ2dlcmVkLlxuKiBUaGUgYHNlbGVjdGAgb3V0cHV0IHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBhY3RpdmUgdGFiIHdoZW4gdGhlIHRhYnMgYXJlIGxvYWRlZCBvciB1cGRhdGVkLlxuKlxuKlxuKiBUYWIgd2l0aCBzdHJpbmcgaGVhZGVyOlxuKlxuKiBgYGBodG1sXG4qIDxpYm0tdGFiIGhlYWRpbmc9J3RhYjEnPlxuKiBcdHRhYiAxIGNvbnRlbnRcbiogPC9pYm0tdGFiPlxuKiBgYGBcbipcbiogVGFiIHdpdGggY3VzdG9tIGhlYWRlcjpcbipcbiogYGBgaHRtbFxuKiA8bmctdGVtcGxhdGUgI3RhYkhlYWRpbmc+XG4qIFx0PHN2ZyBpYm1JY29uPVwiZmFjZWJvb2tcIlxuKiBcdFx0c2l6ZT1cInNtXCJcbiogXHRcdHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA3cHg7XCI+XG4qIFx0PC9zdmc+XG4qIFx0SGVsbG8gVGFiIDFcbiogPC9uZy10ZW1wbGF0ZT5cbiogPGlibS10YWJzPlxuKiBcdDxpYm0tdGFiIFtoZWFkaW5nXT1cInRhYkhlYWRpbmdcIj5cbiogXHRcdFRhYiAxIGNvbnRlbnQgPHN2ZyBpYm1JY29uPVwiYWxlcnRcIiBzaXplPVwibGdcIj48L3N2Zz5cbiogXHQ8L2libS10YWI+XG4qIFx0PGlibS10YWIgaGVhZGluZz0nVGFiMic+XG4qIFx0XHRUYWIgMiBjb250ZW50XG4qIFx0PC9pYm0tdGFiPlxuKiBcdDxpYm0tdGFiIGhlYWRpbmc9J1RhYjMnPlxuKiBcdFx0VGFiIDMgY29udGVudFxuKiBcdDwvaWJtLXRhYj5cbiogPC9pYm0tdGFicz5cbiogYGBgXG4qL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS10YWJcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8ZGl2XG5cdFx0XHRbYXR0ci50YWJpbmRleF09XCJ0YWJJbmRleFwiXG5cdFx0XHRyb2xlPVwidGFicGFuZWxcIlxuXHRcdFx0Km5nSWY9XCJzaG91bGRSZW5kZXIoKVwiXG5cdFx0XHRjbGFzcz1cImJ4LS10YWItY29udGVudFwiXG5cdFx0XHRbbmdTdHlsZV09XCJ7J2Rpc3BsYXknOiBhY3RpdmUgPyBudWxsIDogJ25vbmUnfVwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiaWQgKyAnLWhlYWRlcidcIlxuXHRcdFx0YXJpYS1saXZlPVwicG9saXRlXCI+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVGFiIGltcGxlbWVudHMgT25Jbml0IHtcblx0LyoqXG5cdCAqIEJvb2xlYW4gdmFsdWUgcmVmbGVjdHMgaWYgdGhlIGBUYWJgIGlzIHVzaW5nIGEgY3VzdG9tIHRlbXBsYXRlIGZvciB0aGUgaGVhZGluZy5cblx0ICogRGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cblx0ICovXG5cdHB1YmxpYyBoZWFkaW5nSXNUZW1wbGF0ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBUaGUgYFRhYmAncyB0aXRsZSB0byBiZSBkaXNwbGF5ZWQgb3IgY3VzdG9tIHRlbWFwbGF0ZSBmb3IgdGhlIGBUYWJgIGhlYWRpbmcuXG5cdCAqL1xuXHRASW5wdXQoKSBoZWFkaW5nOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXHQvKipcblx0ICogT3B0aW9uYWwgb3ZlcnJpZGUgZm9yIHRoZSBgdGFiSXRlbSdzYCdzIHRpdGxlIGF0dHJpYnV0ZSB3aGljaCBpcyBzZXQgaW4gYFRhYkhlYWRlcnNgLlxuXHQgKiBgdGFiSXRlbWAncyB0aXRsZSBhdHRyaWJ1dGUgaXMgYXV0b21hdGljYWxseSBzZXQgdG8gYGhlYWRpbmdgLlxuXHQgKlxuXHQgKiBZb3UgbWlnaHQgd2FudCB0byB1c2UgdGhpcyBpZiB5b3Ugc2V0IGBoZWFkaW5nYCB0byBhIGBUZW1wbGF0ZVJlZmAuXG5cdCAqL1xuXHRASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuXHQvKipcblx0ICogQWxsb3dzIHRoZSB1c2VyIHRvIHBhc3MgZGF0YSB0byB0aGUgY3VzdG9tIHRlbXBsYXRlIGZvciB0aGUgYFRhYmAgaGVhZGluZy5cblx0ICovXG5cdEBJbnB1dCgpIGNvbnRleHQ6IGFueTtcblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBgVGFiYCBpcyBhY3RpdmUvc2VsZWN0ZWQuXG5cdCAqIERldGVybWluZXMgd2hldGhlciBpdCdzIGBUYWJQYW5lbGAgaXMgcmVuZGVyZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBhY3RpdmUgPSBmYWxzZTtcblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgYFRhYmAgaXRlbSBpcyBkaXNhYmxlZC5cblx0ICovXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cblx0QElucHV0KCkgdGFiSW5kZXggPSAwO1xuXHQvLyBkbyB3ZSBuZWVkIGlkJ3M/XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBpZCBvZiB0aGUgYFRhYmAuIFdpbGwgYmUgdW5pcXVlbHkgZ2VuZXJhdGVkIGlmIG5vdCBwcm92aWRlZC5cblx0ICovXG5cdEBJbnB1dCgpIGlkID0gYG4tdGFiLSR7bmV4dElkKyt9YDtcblx0LyoqXG5cdCAqIFNldCB0byB0cnVlIHRvIGhhdmUgVGFiIGl0ZW1zIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgY2FjaGVBY3RpdmUoc2hvdWxkQ2FjaGU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9jYWNoZUFjdGl2ZSA9IHNob3VsZENhY2hlO1xuXHR9XG5cdC8qKlxuXHQgKiBWYWx1ZSAnc2VsZWN0ZWQnIHRvIGJlIGVtaXR0ZWQgYWZ0ZXIgYSBuZXcgYFRhYmAgaXMgc2VsZWN0ZWQuXG5cdCAqL1xuXHRAT3V0cHV0KCkgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuXHQvKipcblx0ICogVXNlZCB0byBzZXQgdGhlIGlkIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50LlxuXHQgKi9cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5pZFwiKSBhdHRyQ2xhc3MgPSB0aGlzLmlkO1xuXG5cdGdldCBjYWNoZUFjdGl2ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2FjaGVBY3RpdmU7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2NhY2hlQWN0aXZlID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIENoZWNrcyBmb3IgY3VzdG9tIGhlYWRpbmcgdGVtcGxhdGUgb24gaW5pdGlhbGl6YXRpb24gYW5kIHVwZGF0ZXMgdGhlIHZhbHVlXG5cdCAqIG9mIHRoZSBib29sZWFuICdoZWFkaW5nSXNUZW1wbGF0ZScuXG5cdCAqL1xuXHRuZ09uSW5pdCgpIHtcblx0XHRpZiAodGhpcy5oZWFkaW5nIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcblx0XHRcdHRoaXMuaGVhZGluZ0lzVGVtcGxhdGUgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0IHRoZSBzdGF0dXMgb2YgdGhlIGBUYWJgLCBzcGVjaWZpY2FsbHkgJ3NlbGVjdCcgYW5kICdzZWxlY3RlZCcgcHJvcGVydGllcy5cblx0ICovXG5cdGRvU2VsZWN0KCkge1xuXHRcdHRoaXMuc2VsZWN0ZWQuZW1pdCgpO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyBgVGFiYCBzaG91bGQgYmUgcmVuZGVyZWQgaW4gYSBgVGFiUGFuZWxgLlxuXHQqL1xuXHRzaG91bGRSZW5kZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlIHx8IHRoaXMuY2FjaGVBY3RpdmU7XG5cdH1cbn1cbiJdfQ==