/**
 *
 * carbon-angular v0.0.0 | skeleton-text.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input } from "@angular/core";
export class SkeletonText {
    constructor() {
        this.lines = 5;
        this.minLineWidth = 100;
        this.maxLineWidth = 300;
    }
    /**
     * Returns a random width in pixels based off a min width, and a max width.
     */
    getRandomInt(min, max) {
        return `${Math.floor(Math.random() * (max - min + 1) + min) + "px"}`;
    }
    ngOnChanges() {
        // Creates an array of length defined by input lines with content from
        // 0 to lines - 1, maps each value to a random width in pixels.
        this.lineWidths =
            Array.from(Array(this.lines).keys())
                .map(num => this.getRandomInt(this.minLineWidth, this.maxLineWidth));
    }
}
SkeletonText.decorators = [
    { type: Component, args: [{
                selector: "ibm-skeleton-text",
                template: `
		<p
			*ngFor="let width of lineWidths"
			class="bx--skeleton__text"
			[style.width]="width">
		</p>
	`
            }] }
];
SkeletonText.propDecorators = {
    lines: [{ type: Input }],
    minLineWidth: [{ type: Input }],
    maxLineWidth: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tlbGV0b24tdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3NrZWxldG9uLyIsInNvdXJjZXMiOlsic2tlbGV0b24tdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFZNUQsTUFBTSxPQUFPLFlBQVk7SUFWekI7UUFXVSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRVYsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFFbkIsaUJBQVksR0FBRyxHQUFHLENBQUM7SUFrQjdCLENBQUM7SUFkQTs7T0FFRztJQUNILFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRztRQUNwQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO0lBQ3RFLENBQUM7SUFFRCxXQUFXO1FBQ1Ysc0VBQXNFO1FBQ3RFLCtEQUErRDtRQUMvRCxJQUFJLENBQUMsVUFBVTtZQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDbEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7OztZQWhDRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7Ozs7RUFNVDthQUNEOzs7b0JBRUMsS0FBSzsyQkFFTCxLQUFLOzJCQUVMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXNrZWxldG9uLXRleHRcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8cFxuXHRcdFx0Km5nRm9yPVwibGV0IHdpZHRoIG9mIGxpbmVXaWR0aHNcIlxuXHRcdFx0Y2xhc3M9XCJieC0tc2tlbGV0b25fX3RleHRcIlxuXHRcdFx0W3N0eWxlLndpZHRoXT1cIndpZHRoXCI+XG5cdFx0PC9wPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFNrZWxldG9uVGV4dCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cdEBJbnB1dCgpIGxpbmVzID0gNTtcblxuXHRASW5wdXQoKSBtaW5MaW5lV2lkdGggPSAxMDA7XG5cblx0QElucHV0KCkgbWF4TGluZVdpZHRoID0gMzAwO1xuXG5cdGxpbmVXaWR0aHM6IEFycmF5PHN0cmluZz47XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSByYW5kb20gd2lkdGggaW4gcGl4ZWxzIGJhc2VkIG9mZiBhIG1pbiB3aWR0aCwgYW5kIGEgbWF4IHdpZHRoLlxuXHQgKi9cblx0Z2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XG5cdFx0cmV0dXJuIGAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbikgKyBcInB4XCJ9YDtcblx0fVxuXG5cdG5nT25DaGFuZ2VzKCkge1xuXHRcdC8vIENyZWF0ZXMgYW4gYXJyYXkgb2YgbGVuZ3RoIGRlZmluZWQgYnkgaW5wdXQgbGluZXMgd2l0aCBjb250ZW50IGZyb21cblx0XHQvLyAwIHRvIGxpbmVzIC0gMSwgbWFwcyBlYWNoIHZhbHVlIHRvIGEgcmFuZG9tIHdpZHRoIGluIHBpeGVscy5cblx0XHR0aGlzLmxpbmVXaWR0aHMgPVxuXHRcdFx0QXJyYXkuZnJvbShBcnJheSh0aGlzLmxpbmVzKS5rZXlzKCkpXG5cdFx0XHRcdC5tYXAobnVtID0+IHRoaXMuZ2V0UmFuZG9tSW50KHRoaXMubWluTGluZVdpZHRoLCB0aGlzLm1heExpbmVXaWR0aCkpO1xuXHR9XG59XG4iXX0=