/**
 *
 * carbon-angular v0.0.0 | experimental.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
export class ExperimentalService {
    constructor() {
        /**
         * Map to hold all our experiments
         */
        this.experiments = new Map();
    }
    /**
     * Adds an experiment if it doesn't exist.
     */
    addExperiment(name, options = { enabled: false }) {
        if (!this.experiments.has(name)) {
            this.experiments.set(name, options);
        }
    }
    /**
     * Enables an experiment by name
     * @param name name of the experiment to enable
     */
    enableExperiment(name) {
        const experiment = this.getExperiment(name);
        experiment.enabled = true;
    }
    /**
     * Disables an experiment by name
     * @param name name of the experiment to disable
     */
    disableExperiment(name) {
        const experiment = this.getExperiment(name);
        experiment.enabled = false;
    }
    /**
     * Get the options for an experiment by name
     * @param name name of experiment to get
     */
    getExperiment(name) {
        if (!this.experiments.has(name)) {
            this.addExperiment(name);
            return this.getExperiment(name);
        }
        return this.experiments.get(name);
    }
    /**
     * Get an array of tuples representing an experiment and it's options
     */
    getExperiments() {
        return Array.from(this.experiments.entries());
    }
}
ExperimentalService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2V4cGVyaW1lbnRhbC8iLCJzb3VyY2VzIjpbImV4cGVyaW1lbnRhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFXM0MsTUFBTSxPQUFPLG1CQUFtQjtJQURoQztRQUVDOztXQUVHO1FBQ0ssZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBc0IsQ0FBQztJQWdEckQsQ0FBQztJQTlDQTs7T0FFRztJQUNILGFBQWEsQ0FBQyxJQUFZLEVBQUUsVUFBc0IsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDO1FBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDcEM7SUFDRixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0JBQWdCLENBQUMsSUFBWTtRQUM1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxpQkFBaUIsQ0FBQyxJQUFZO1FBQzdCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGFBQWEsQ0FBQyxJQUFZO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsY0FBYztRQUNiLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7O1lBcERELFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIG9wdGlvbnMgZm9yIGFuIGV4cGVyaW1lbnQuIFRoZSBvbmx5IHJlcXVpcmVkIHByb3BlcnR5IGlzIGBlbmFibGVkYCwgaG93ZXZlciBvdGhlciBvcHRpb25zIG1heSBiZSBzdXBwbGllZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeHBlcmltZW50IHtcblx0ZW5hYmxlZDogYm9vbGVhbjtcblx0W2tleTogc3RyaW5nXTogYW55O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudGFsU2VydmljZSB7XG5cdC8qKlxuXHQgKiBNYXAgdG8gaG9sZCBhbGwgb3VyIGV4cGVyaW1lbnRzXG5cdCAqL1xuXHRwcml2YXRlIGV4cGVyaW1lbnRzID0gbmV3IE1hcDxzdHJpbmcsIEV4cGVyaW1lbnQ+KCk7XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gZXhwZXJpbWVudCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuXHQgKi9cblx0YWRkRXhwZXJpbWVudChuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IEV4cGVyaW1lbnQgPSB7ZW5hYmxlZDogZmFsc2V9KSB7XG5cdFx0aWYgKCF0aGlzLmV4cGVyaW1lbnRzLmhhcyhuYW1lKSkge1xuXHRcdFx0dGhpcy5leHBlcmltZW50cy5zZXQobmFtZSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgYW4gZXhwZXJpbWVudCBieSBuYW1lXG5cdCAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgdGhlIGV4cGVyaW1lbnQgdG8gZW5hYmxlXG5cdCAqL1xuXHRlbmFibGVFeHBlcmltZW50KG5hbWU6IHN0cmluZykge1xuXHRcdGNvbnN0IGV4cGVyaW1lbnQgPSB0aGlzLmdldEV4cGVyaW1lbnQobmFtZSk7XG5cdFx0ZXhwZXJpbWVudC5lbmFibGVkID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNhYmxlcyBhbiBleHBlcmltZW50IGJ5IG5hbWVcblx0ICogQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgZXhwZXJpbWVudCB0byBkaXNhYmxlXG5cdCAqL1xuXHRkaXNhYmxlRXhwZXJpbWVudChuYW1lOiBzdHJpbmcpIHtcblx0XHRjb25zdCBleHBlcmltZW50ID0gdGhpcy5nZXRFeHBlcmltZW50KG5hbWUpO1xuXHRcdGV4cGVyaW1lbnQuZW5hYmxlZCA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgb3B0aW9ucyBmb3IgYW4gZXhwZXJpbWVudCBieSBuYW1lXG5cdCAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgZXhwZXJpbWVudCB0byBnZXRcblx0ICovXG5cdGdldEV4cGVyaW1lbnQobmFtZTogc3RyaW5nKTogRXhwZXJpbWVudCB7XG5cdFx0aWYgKCF0aGlzLmV4cGVyaW1lbnRzLmhhcyhuYW1lKSkge1xuXHRcdFx0dGhpcy5hZGRFeHBlcmltZW50KG5hbWUpO1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0RXhwZXJpbWVudChuYW1lKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5leHBlcmltZW50cy5nZXQobmFtZSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGFuIGFycmF5IG9mIHR1cGxlcyByZXByZXNlbnRpbmcgYW4gZXhwZXJpbWVudCBhbmQgaXQncyBvcHRpb25zXG5cdCAqL1xuXHRnZXRFeHBlcmltZW50cygpOiBBcnJheTxbc3RyaW5nLCBFeHBlcmltZW50XT4ge1xuXHRcdHJldHVybiBBcnJheS5mcm9tKHRoaXMuZXhwZXJpbWVudHMuZW50cmllcygpKTtcblx0fVxufVxuIl19