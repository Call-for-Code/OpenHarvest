/**
 *
 * carbon-angular v0.0.0 | slider.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, ElementRef, TemplateRef, ViewChildren, QueryList } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { EventService } from "carbon-components-angular/utils";
/**
 * Used to select from ranges of values. [See here](https://www.carbondesignsystem.com/components/slider/usage) for usage information.
 *
 * [See demo](../../?path=/story/slider--advanced)
 *
 * The simplest possible slider usage looks something like:
 * ```html
 * <ibm-slider></ibm-slider>
 * ```
 *
 * That will render a slider without labels or alternative value input. Labels can be provided by
 * elements with `[minLabel]` and `[maxLabel]` attributes, and an `input` (may use the `ibmInput` directive) can be supplied
 * for use as an alternative value field.
 *
 * ex:
 * ```html
 * <!-- full example -->
 * <ibm-slider>
 *		<span minLabel>0GB</span>
 *		<span maxLabel>100GB</span>
 *		<input/>
 *	</ibm-slider>
 * <!-- with just an input -->
 * <ibm-slider>
 *		<input/>
 *	</ibm-slider>
 * <!-- with just one label -->
 * <ibm-slider>
 *		<span maxLabel>Maximum</span>
 *	</ibm-slider>
 * ```
 *
 * Slider supports `NgModel` by default, as well as two way binding to the `value` input.
 *
 * <example-url>../../iframe.html?id=slider--advanced</example-url>
 */
export class Slider {
    constructor(elementRef, eventService) {
        this.elementRef = elementRef;
        this.eventService = eventService;
        /** The interval for our range */
        this.step = 1;
        /** Base ID for the slider. The min and max labels get IDs `${this.id}-bottom-range` and `${this.id}-top-range` respectively */
        this.id = `slider-${Slider.count++}`;
        /** Value used to "multiply" the `step` when using arrow keys to select values */
        this.shiftMultiplier = 4;
        /** Set to `true` for a loading slider */
        this.skeleton = false;
        /** Set to `true` for a slider without arrow key interactions. */
        this.disableArrowKeys = false;
        /** Emits every time a new value is selected */
        this.valueChange = new EventEmitter();
        this.hostClass = true;
        this.bottomRangeId = `${this.id}-bottom-range`;
        this.topRangeId = `${this.id}-top-range`;
        this.fractionComplete = 0;
        this.isMouseDown = false;
        this._min = 0;
        this._max = 100;
        this._value = [this.min];
        this._previousValue = [this.min];
        this._disabled = false;
        this._focusedThumbIndex = 0;
        /** Send changes back to the model */
        this.propagateChange = (_) => { };
        /** Callback to notify the model when our input has been touched */
        this.onTouched = () => { };
    }
    /** The lower bound of our range */
    set min(v) {
        if (!v) {
            return;
        }
        this._min = v;
        // force the component to update
        this.value = this.value;
    }
    get min() {
        return this._min;
    }
    /** The upper bound of our range */
    set max(v) {
        if (!v) {
            return;
        }
        this._max = v;
        // force the component to update
        this.value = this.value;
    }
    get max() {
        return this._max;
    }
    /** Set the initial value. Available for two way binding */
    set value(v) {
        if (!v) {
            v = [this.min];
        }
        if (typeof v === "number" || typeof v === "string") {
            v = [Number(v)];
        }
        if (v[0] < this.min) {
            v[0] = this.min;
        }
        if (v[0] > this.max) {
            v[0] = this.max;
        }
        if (this.isRange()) {
            if (this._previousValue[0] !== v[0]) { // left moved
                if (v[0] > v[1] - this.step) {
                    // stop the left handle if surpassing the right one
                    v[0] = v[1] - this.step;
                }
                else if (v[0] > this.max) {
                    v[0] = this.max;
                }
                else if (v[0] < this.min) {
                    v[0] = this.min;
                }
            }
            if (this._previousValue[1] !== v[1]) { // right moved
                if (v[1] > this.max) {
                    v[1] = this.max;
                }
                else if (v[1] < this._value[0] + this.step) {
                    // stop the right handle if surpassing the left one
                    v[1] = this._value[0] + this.step;
                }
                else if (v[1] < this.min) {
                    v[1] = this.min;
                }
            }
        }
        this._previousValue = [...this._value]; // store a copy, enable detection which handle moved
        this._value = [...v]; // triggers change detection when ngModel value is an array (for range)
        if (this.isRange() && this.filledTrack) {
            this.updateTrackRangeWidth();
        }
        else if (this.filledTrack) {
            this.filledTrack.nativeElement.style.transform = `translate(0%, -50%) ${this.scaleX(this.getFractionComplete(v[0]))}`;
        }
        if (this.inputs && this.inputs.length) {
            this.inputs.forEach((input, index) => {
                input.value = this._value[index].toString();
            });
        }
        const valueToEmit = this.isRange() ? v : v[0];
        this.propagateChange(valueToEmit);
        this.valueChange.emit(valueToEmit);
    }
    get value() {
        if (this.isRange()) {
            return this._value;
        }
        return this._value[0];
    }
    /** Disables the range visually and functionally */
    set disabled(v) {
        this._disabled = v;
        // for some reason `this.input` never exists here, so we have to query for it here too
        const inputs = this.getInputs();
        if (inputs && inputs.length > 0) {
            inputs.forEach(input => input.disabled = v);
        }
    }
    get disabled() {
        return this._disabled;
    }
    ngAfterViewInit() {
        // bind mousemove and mouseup to the document so we don't have issues tracking the mouse
        this.eventService.onDocument("mousemove", this.onMouseMove.bind(this));
        this.eventService.onDocument("mouseup", this.onMouseUp.bind(this));
        // apply any values we got from before the view initialized
        this.value = this.value;
        // TODO: ontouchstart/ontouchmove/ontouchend
        // set up the optional input
        this.inputs = this.getInputs();
        if (this.inputs && this.inputs.length > 0) {
            this.inputs.forEach((input, index) => {
                input.type = "number";
                input.classList.add("bx--slider-text-input");
                input.classList.add("bx--text-input");
                input.setAttribute("aria-labelledby", `${this.bottomRangeId} ${this.topRangeId}`);
                input.value = index < this._value.length ? this._value[index].toString() : this.max.toString();
                // bind events on our optional input
                this.eventService.on(input, "change", event => this.onChange(event, index));
                if (index === 0) {
                    this.eventService.on(input, "focus", this.onFocus.bind(this));
                }
            });
        }
    }
    trackThumbsBy(index, item) {
        return index;
    }
    /** Register a change propagation function for `ControlValueAccessor` */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /** Register a callback to notify when our input has been touched */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /** Receives a value from the model */
    writeValue(v) {
        this.value = v;
    }
    /**
     * Returns the amount of "completeness" of a value as a fraction of the total track width
     */
    getFractionComplete(value) {
        if (!this.track) {
            return 0;
        }
        const trackWidth = this.track.nativeElement.getBoundingClientRect().width;
        return this.convertToPx(value) / trackWidth;
    }
    /** Helper function to return the CSS transform `scaleX` function */
    scaleX(complete) {
        return `scaleX(${complete})`;
    }
    /** Converts a given px value to a "real" value in our range */
    convertToValue(pxAmount) {
        // basic concept borrowed from carbon-components
        // ref: https://github.com/IBM/carbon-components/blob/43bf3abdc2f8bdaa38aa84e0f733adde1e1e8894/src/components/slider/slider.js#L147-L151
        const range = this.max - this.min;
        const trackWidth = this.track.nativeElement.getBoundingClientRect().width;
        const unrounded = pxAmount / trackWidth;
        const rounded = Math.round((range * unrounded) / this.step) * this.step;
        return rounded + this.min;
    }
    /** Converts a given "real" value to a px value we can update the view with */
    convertToPx(value) {
        if (!this.track) {
            return 0;
        }
        const trackWidth = this.track.nativeElement.getBoundingClientRect().width;
        if (value >= this.max) {
            return trackWidth;
        }
        if (value <= this.min) {
            return 0;
        }
        // account for value shifting by subtracting min from value and max
        return Math.round(trackWidth * ((value - this.min) / (this.max - this.min)));
    }
    /**
     * Increments the value by the step value, or the step value multiplied by the `multiplier` argument.
     *
     * @argument multiplier Defaults to `1`, multiplied with the step value.
     */
    incrementValue(multiplier = 1, index = 0) {
        this._value[index] = this._value[index] + (this.step * multiplier);
        this.value = this.value; // run the setter
    }
    /**
     * Decrements the value by the step value, or the step value multiplied by the `multiplier` argument.
     *
     * @argument multiplier Defaults to `1`, multiplied with the step value.
     */
    decrementValue(multiplier = 1, index = 0) {
        this._value[index] = this._value[index] - (this.step * multiplier);
        this.value = this.value; // run the setter
    }
    /**
     * Determines if the slider is in range mode.
     */
    isRange() {
        return this._value.length > 1;
    }
    /**
     * Range mode only.
     * Updates the track width to span from the low thumb to the high thumb
     */
    updateTrackRangeWidth() {
        const fraction = this.getFractionComplete(this._value[0]);
        const fraction2 = this.getFractionComplete(this._value[1]);
        this.filledTrack.nativeElement.style.transform = `translate(${fraction * 100}%, -50%) ${this.scaleX(fraction2 - fraction)}`;
    }
    /** Change handler for the optional input */
    onChange(event, index) {
        this._value[index] = Number(event.target.value);
        this.value = this.value;
    }
    /** Handles clicks on the range track, and setting the value to it's "real" equivalent */
    onClick(event) {
        if (this.disabled) {
            return;
        }
        const trackLeft = this.track.nativeElement.getBoundingClientRect().left;
        this._value[0] = this.convertToValue(event.clientX - trackLeft);
        this.value = this.value;
    }
    /** Focus handler for the optional input */
    onFocus({ target }) {
        target.select();
    }
    /** Mouse move handler. Responsible for updating the value and visual selection based on mouse movement */
    onMouseMove(event) {
        if (this.disabled || !this.isMouseDown) {
            return;
        }
        const track = this.track.nativeElement.getBoundingClientRect();
        let value;
        if (event.clientX - track.left <= track.width
            && event.clientX - track.left >= 0) {
            value = this.convertToValue(event.clientX - track.left);
        }
        // if the mouse is beyond the max, set the value to `max`
        if (event.clientX - track.left > track.width) {
            value = this.max;
        }
        // if the mouse is below the min, set the value to `min`
        if (event.clientX - track.left < 0) {
            value = this.min;
        }
        if (value !== undefined) {
            this._value[this._focusedThumbIndex] = value;
            this.value = this.value;
        }
    }
    /**
     * Enables the `onMouseMove` handler
     *
     * @param {boolean} thumb If true then `thumb` is clicked down, otherwise `thumb2` is clicked down.
     */
    onMouseDown(event, index = 0) {
        event.preventDefault();
        if (this.disabled) {
            return;
        }
        this._focusedThumbIndex = index;
        this.thumbs.toArray()[index].nativeElement.focus();
        this.isMouseDown = true;
    }
    /** Disables the `onMouseMove` handler */
    onMouseUp() {
        this.isMouseDown = false;
    }
    /**
     * Calls `incrementValue` for ArrowRight and ArrowUp, `decrementValue` for ArrowLeft and ArrowDown.
     *
     * @param {boolean} thumb If true then `thumb` is pressed down, otherwise `thumb2` is pressed down.
     */
    onKeyDown(event, index = 0) {
        if (this.disableArrowKeys) {
            return;
        }
        const multiplier = event.shiftKey ? this.shiftMultiplier : 1;
        if (event.key === "ArrowLeft" || event.key === "ArrowDown") {
            this.decrementValue(multiplier, index);
            this.thumbs.toArray()[index].nativeElement.focus();
            event.preventDefault();
        }
        else if (event.key === "ArrowRight" || event.key === "ArrowUp") {
            this.incrementValue(multiplier, index);
            this.thumbs.toArray()[index].nativeElement.focus();
            event.preventDefault();
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    /** Get optional input fields */
    getInputs() {
        return this.elementRef.nativeElement.querySelectorAll("input:not([type=range])");
    }
}
/** Used to generate unique IDs */
Slider.count = 0;
Slider.decorators = [
    { type: Component, args: [{
                selector: "ibm-slider",
                template: `
		<ng-container *ngIf="!skeleton; else skeletonTemplate">
			<label *ngIf="label" [for]="id" class="bx--label">
				<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
				<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
			</label>
			<div class="bx--slider-container">
				<label [id]="bottomRangeId" class="bx--slider__range-label">
					<ng-content select="[minLabel]"></ng-content>
				</label>
				<div
					class="bx--slider"
					[ngClass]="{'bx--slider--disabled': disabled}">
					<ng-container *ngIf="!isRange()">
						<div
							#thumbs
							role="slider"
							[id]="id"
							class="bx--slider__thumb"
							[ngStyle]="{left: getFractionComplete(value) * 100 + '%'}"
							tabindex="0"
							(mousedown)="onMouseDown($event)"
							(keydown)="onKeyDown($event)">
						</div>
					</ng-container>
					<ng-container *ngIf="isRange()">
						<div
							#thumbs
							*ngFor="let thumb of value; let i = index; trackBy: trackThumbsBy"
							role="slider"
							[id]="id + (i > 0 ? '-' + i : '')"
							class="bx--slider__thumb"
							[ngStyle]="{left: getFractionComplete(thumb) * 100 + '%'}"
							tabindex="0"
							(mousedown)="onMouseDown($event, i)"
							(keydown)="onKeyDown($event, i)">
						</div>
					</ng-container>
					<div
						#track
						class="bx--slider__track"
						(click)="onClick($event)">
					</div>
					<div
						#filledTrack
						class="bx--slider__filled-track">
					</div>
					<input
						#range
						aria-label="slider"
						class="bx--slider__input"
						type="range"
						[step]="step"
						[min]="min"
						[max]="max"
						[value]="value.toString()">
				</div>
				<label [id]="topRangeId" class="bx--slider__range-label">
					<ng-content select="[maxLabel]"></ng-content>
				</label>
				<ng-content select="input"></ng-content>
			</div>
		</ng-container>

		<ng-template #skeletonTemplate>
			<label *ngIf="label" class="bx--label bx--skeleton"></label>
			<div class="bx--slider-container bx--skeleton">
				<span class="bx--slider__range-label"></span>
				<div class="bx--slider">
					<div class="bx--slider__thumb"></div>
					<div class="bx--slider__track"></div>
					<div class="bx--slider__filled-track"></div>
				</div>
				<span class="bx--slider__range-label"></span>
			</div>
		</ng-template>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Slider,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
Slider.ctorParameters = () => [
    { type: ElementRef },
    { type: EventService }
];
Slider.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    value: [{ type: Input }],
    id: [{ type: Input }],
    shiftMultiplier: [{ type: Input }],
    skeleton: [{ type: Input }],
    label: [{ type: Input }],
    disableArrowKeys: [{ type: Input }],
    disabled: [{ type: Input }],
    valueChange: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    thumbs: [{ type: ViewChildren, args: ["thumbs",] }],
    track: [{ type: ViewChild, args: ["track", { static: false },] }],
    filledTrack: [{ type: ViewChild, args: ["filledTrack", { static: false },] }],
    range: [{ type: ViewChild, args: ["range", { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,