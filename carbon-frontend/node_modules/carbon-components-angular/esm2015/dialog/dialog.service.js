/**
 *
 * carbon-angular v0.0.0 | dialog.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injector, ComponentFactoryResolver, Injectable } from "@angular/core";
import { CloseReasons } from "./dialog-config.interface";
import { PlaceholderService } from "carbon-components-angular/placeholder";
import { tabbableSelector } from "carbon-components-angular/common";
/**
 * `Dialog` object to be injected into other components.
 */
export class DialogService {
    /**
     * Creates an instance of `DialogService`.
     */
    constructor(componentFactoryResolver, injector, placeholderService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.placeholderService = placeholderService;
    }
    /**
     * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct
     */
    static closeAll() {
        DialogService.dialogRefs.forEach(ref => ref.instance.doClose({
            reason: CloseReasons.programmatic
        }));
        DialogService.dialogRefs.clear();
    }
    /**
     * Set the context for the service. For example, the `component` property can be used to set the
     * default component that should be created by the service, for a given instance of the service.
     * @param options `{ component: any }` where `component` is a component that extends `dialog.component`
     */
    setContext(options) {
        this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(options.component);
    }
    /**
     * If `dialogRef` is defined, the Dialog is already open. If
     * `dialogRef` is undefined, we create the `Dialog` component and reference to it.
     * A subscription is created to track if the `Dialog` should close.
     *
     * @param viewContainer a `ViewContainerRef` to instantiate the component against.
     * May be `null` if an `ibm-placeholder` exists and `dialogConfig.appendInline` is false
     * @param dialogConfig the `DialogConfig` for the component
     */
    open(viewContainer, dialogConfig, component) {
        let componentFactory = this.componentFactory;
        if (component) {
            componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        }
        let dialogRef;
        if (dialogConfig.appendInline) {
            // add our component to the view
            dialogRef = viewContainer.createComponent(componentFactory, 0, this.injector);
        }
        else if (!this.placeholderService.hasPlaceholderRef()) {
            dialogRef = viewContainer.createComponent(componentFactory, 0, this.injector);
            if (dialogRef) {
                setTimeout(() => {
                    window.document.querySelector("body").appendChild(dialogRef.location.nativeElement);
                });
            }
        }
        else {
            dialogRef = this.placeholderService.createComponent(componentFactory, this.injector);
        }
        // keep track of all initialized dialogs
        DialogService.dialogRefs.add(dialogRef);
        // initialize some extra options
        dialogConfig["previouslyFocusedElement"] = document.activeElement;
        dialogRef.instance.dialogConfig = dialogConfig;
        dialogRef.instance.elementRef.nativeElement.focus();
        return dialogRef;
    }
    /**
     * On close of `Dialog` item, sets focus back to previous item, unsets
     * the current `dialogRef` item. Unsubscribes to the event of `Dialog` close.
     *
     * @param dialogRef the dialogRef to close
     */
    close(dialogRef) {
        // to handle the case where we have a null `this.dialogRef`
        if (!dialogRef) {
            return;
        }
        const elementToFocus = dialogRef.instance.dialogConfig["previouslyFocusedElement"];
        dialogRef.destroy();
        // update the globally tracked dialogRefs
        if (DialogService.dialogRefs.has(dialogRef)) {
            DialogService.dialogRefs.delete(dialogRef);
        }
        // Keeps the focus on the dialog trigger if there are no focusable elements. Change focus to previously focused element
        // if there are focusable elements in the dialog.
        if (!dialogRef.location.nativeElement.querySelectorAll(tabbableSelector)) {
            elementToFocus.focus();
        }
    }
    /**
     * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct
     *
     * @deprecated since v4. Use the static `DialogService.closeAll` instead
     */
    closeAll() {
        DialogService.closeAll();
    }
    /**
     * Fix for safari hijacking clicks.
     *
     * Runs on `ngOnInit` of every dialog. Ensures we don't have multiple listeners
     * because having many of them could degrade performance in certain cases (and is
     * not necessary for our use case)
     *
     * This is an internally used function, can change at any point (even get removed)
     * and changes to it won't be considered a breaking change. Use at your own risk.
     */
    singletonClickListen() {
        if (!DialogService.listeningForBodyClicks) {
            document.body.firstElementChild.addEventListener("click", () => null, true);
            DialogService.listeningForBodyClicks = true;
        }
    }
}
/**
 * Used in `singletonClickListen`, don't count on its existence and values.
 */
DialogService.listeningForBodyClicks = false;
/**
 * A set of all known dialog components
 */
DialogService.dialogRefs = new Set();
DialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DialogService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: PlaceholderService }
];
//# sourceMappingURL=data:application/json;base64,