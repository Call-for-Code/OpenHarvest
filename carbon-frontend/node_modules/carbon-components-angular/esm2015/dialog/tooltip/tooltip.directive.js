/**
 *
 * carbon-angular v0.0.0 | tooltip.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, Input, ElementRef, ViewContainerRef, HostBinding } from "@angular/core";
import { DialogDirective } from "../dialog.directive";
import { Tooltip } from "./tooltip.component";
import { DialogService } from "../dialog.service";
import { EventService } from "carbon-components-angular/utils";
/**
 * Directive for extending `Dialog` to create tooltips.
 *
 * [See demo](../../?path=/story/tooltip--basic)
 *
 * class: TooltipDirective (extends PopoverDirective)
 *
 *
 * selector: `nTooltip`
 *
 *
 * ```html
 * <button nTooltip="I am a tooltip" placement="right" trigger="mouseenter" type="danger">Tooltip Right</button>
 * <button nTooltip="I am a tooltip" type="warning">Tooltip Top warning on click</button>
 * ```
 *
 * <example-url>../../iframe.html?id=tooltip--basic</example-url>
 */
export class TooltipDirective extends DialogDirective {
    /**
     * Creates an instance of `TooltipDirective`.
     */
    constructor(elementRef, viewContainerRef, dialogService, eventService) {
        super(elementRef, viewContainerRef, dialogService, eventService);
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.dialogService = dialogService;
        this.eventService = eventService;
        /**
         * Set tooltip type to reflect 'warning' or 'error' styles.
         */
        // tslint:disable-next-line:no-input-rename
        this.tooltipType = "";
        this.tabIndex = 0;
        this.className = true;
        dialogService.setContext({ component: Tooltip });
    }
    get descriptorId() {
        return this.isOpen ? this.dialogConfig.compID : null;
    }
    updateConfig() {
        this.dialogConfig.content = this.ibmTooltip;
        this.dialogConfig.type = this.tooltipType;
        this.dialogConfig.offset = this.offset;
    }
}
TooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmTooltip]",
                exportAs: "ibmTooltip",
                providers: [
                    DialogService
                ]
            },] }
];
/** @nocollapse */
TooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: DialogService },
    { type: EventService }
];
TooltipDirective.propDecorators = {
    ibmTooltip: [{ type: Input }],
    tooltipType: [{ type: Input, args: ["tooltip-type",] }],
    tabIndex: [{ type: HostBinding, args: ["tabindex",] }],
    className: [{ type: HostBinding, args: ["class.bx--tooltip__trigger",] }],
    descriptorId: [{ type: HostBinding, args: ["attr.aria-describedby",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbInRvb2x0aXAvdG9vbHRpcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBRUwsVUFBVSxFQUdWLGdCQUFnQixFQUNoQixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRy9EOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQVFILE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxlQUFlO0lBbUJwRDs7T0FFRztJQUNILFlBQ1csVUFBc0IsRUFDdEIsZ0JBQWtDLEVBQ2xDLGFBQTRCLEVBQzVCLFlBQTBCO1FBRXBDLEtBQUssQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBTHZELGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQXJCckM7O1dBRUc7UUFDSCwyQ0FBMkM7UUFDcEIsZ0JBQVcsR0FBNkIsRUFBRSxDQUFDO1FBRXpDLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFSyxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBZ0IzRCxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQWZELElBQTBDLFlBQVk7UUFDckQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3RELENBQUM7SUFlRCxZQUFZO1FBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDeEMsQ0FBQzs7O1lBM0NELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFNBQVMsRUFBRTtvQkFDVixhQUFhO2lCQUNiO2FBQ0Q7Ozs7WUFwQ0EsVUFBVTtZQUdWLGdCQUFnQjtZQUtSLGFBQWE7WUFDYixZQUFZOzs7eUJBZ0NuQixLQUFLOzBCQUtMLEtBQUssU0FBQyxjQUFjO3VCQUVwQixXQUFXLFNBQUMsVUFBVTt3QkFFdEIsV0FBVyxTQUFDLDRCQUE0QjsyQkFFeEMsV0FBVyxTQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERpcmVjdGl2ZSxcblx0SW5wdXQsXG5cdFRlbXBsYXRlUmVmLFxuXHRFbGVtZW50UmVmLFxuXHRJbmplY3Rvcixcblx0Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuXHRWaWV3Q29udGFpbmVyUmVmLFxuXHRIb3N0QmluZGluZ1xufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGlhbG9nRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpYWxvZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tIFwiLi90b29sdGlwLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gXCIuLi9kaWFsb2cuc2VydmljZVwiO1xuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcblxuXG4vKipcbiAqIERpcmVjdGl2ZSBmb3IgZXh0ZW5kaW5nIGBEaWFsb2dgIHRvIGNyZWF0ZSB0b29sdGlwcy5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS90b29sdGlwLS1iYXNpYylcbiAqXG4gKiBjbGFzczogVG9vbHRpcERpcmVjdGl2ZSAoZXh0ZW5kcyBQb3BvdmVyRGlyZWN0aXZlKVxuICpcbiAqXG4gKiBzZWxlY3RvcjogYG5Ub29sdGlwYFxuICpcbiAqXG4gKiBgYGBodG1sXG4gKiA8YnV0dG9uIG5Ub29sdGlwPVwiSSBhbSBhIHRvb2x0aXBcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHRyaWdnZXI9XCJtb3VzZWVudGVyXCIgdHlwZT1cImRhbmdlclwiPlRvb2x0aXAgUmlnaHQ8L2J1dHRvbj5cbiAqIDxidXR0b24gblRvb2x0aXA9XCJJIGFtIGEgdG9vbHRpcFwiIHR5cGU9XCJ3YXJuaW5nXCI+VG9vbHRpcCBUb3Agd2FybmluZyBvbiBjbGljazwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPXRvb2x0aXAtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1Ub29sdGlwXVwiLFxuXHRleHBvcnRBczogXCJpYm1Ub29sdGlwXCIsXG5cdHByb3ZpZGVyczogW1xuXHRcdERpYWxvZ1NlcnZpY2Vcblx0XVxufSlcbmV4cG9ydCBjbGFzcyBUb29sdGlwRGlyZWN0aXZlIGV4dGVuZHMgRGlhbG9nRGlyZWN0aXZlIHtcblx0LyoqXG5cdCAqIFRoZSBzdHJpbmcgb3IgdGVtcGxhdGUgY29udGVudCB0byBiZSBleHBvc2VkIGJ5IHRoZSB0b29sdGlwLlxuXHQgKi9cblx0QElucHV0KCkgaWJtVG9vbHRpcDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pjtcblx0LyoqXG5cdCAqIFNldCB0b29sdGlwIHR5cGUgdG8gcmVmbGVjdCAnd2FybmluZycgb3IgJ2Vycm9yJyBzdHlsZXMuXG5cdCAqL1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG5cdEBJbnB1dChcInRvb2x0aXAtdHlwZVwiKSB0b29sdGlwVHlwZTogXCJ3YXJuaW5nXCIgfCBcImVycm9yXCIgfCBcIlwiID0gXCJcIjtcblxuXHRASG9zdEJpbmRpbmcoXCJ0YWJpbmRleFwiKSB0YWJJbmRleCA9IDA7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvb2x0aXBfX3RyaWdnZXJcIikgY2xhc3NOYW1lID0gdHJ1ZTtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmFyaWEtZGVzY3JpYmVkYnlcIikgZ2V0IGRlc2NyaXB0b3JJZCgpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmlzT3BlbiA/IHRoaXMuZGlhbG9nQ29uZmlnLmNvbXBJRCA6IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgVG9vbHRpcERpcmVjdGl2ZWAuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcblx0XHRwcm90ZWN0ZWQgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcblx0XHRwcm90ZWN0ZWQgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2Vcblx0KSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZiwgdmlld0NvbnRhaW5lclJlZiwgZGlhbG9nU2VydmljZSwgZXZlbnRTZXJ2aWNlKTtcblx0XHRkaWFsb2dTZXJ2aWNlLnNldENvbnRleHQoeyBjb21wb25lbnQ6IFRvb2x0aXAgfSk7XG5cdH1cblxuXHR1cGRhdGVDb25maWcoKSB7XG5cdFx0dGhpcy5kaWFsb2dDb25maWcuY29udGVudCA9IHRoaXMuaWJtVG9vbHRpcDtcblx0XHR0aGlzLmRpYWxvZ0NvbmZpZy50eXBlID0gdGhpcy50b29sdGlwVHlwZTtcblx0XHR0aGlzLmRpYWxvZ0NvbmZpZy5vZmZzZXQgPSB0aGlzLm9mZnNldDtcblx0fVxufVxuIl19