/**
 *
 * carbon-angular v0.0.0 | ellipsis-tooltip.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostListener } from "@angular/core";
import { TooltipDirective } from "./tooltip.directive";
import { DialogService } from "../dialog.service";
/**
 * A directive that creates a tooltip `Dialog` for exposing truncated text.
 *
 * class: EllipsisTooltip (extends PopoverDirective)
 *
 * selector: `nEllipsisTooltip`
 *
 * ```html
 * <div class="ellipsis" nEllipsisTooltip>Tooltip for ellipsis because I can and I am really really long</div>
 * ```
 */
export class EllipsisTooltip extends TooltipDirective {
    /**
     * If text is truncated, this appends the text to the dialog as content.
     * @returns null
     * @memberof EllipsisTooltip
     */
    updateTooltipContent() {
        if (this.elementRef.nativeElement.scrollWidth <= this.elementRef.nativeElement.offsetWidth) {
            this.disabled = true;
            return;
        }
        this.disabled = false;
        this.dialogConfig.content = this.elementRef.nativeElement.innerText;
    }
    onClick() {
        if (this.trigger === "click") {
            this.updateTooltipContent();
        }
    }
    onHover() {
        if (this.trigger === "hover" || this.trigger === "mouseenter") {
            this.updateTooltipContent();
        }
    }
    onFocus() {
        this.updateTooltipContent();
    }
}
EllipsisTooltip.decorators = [
    { type: Directive, args: [{
                selector: "[ibmEllipsisTooltip]",
                providers: [
                    DialogService
                ]
            },] }
];
EllipsisTooltip.propDecorators = {
    onClick: [{ type: HostListener, args: ["click",] }],
    onHover: [{ type: HostListener, args: ["mouseenter",] }],
    onFocus: [{ type: HostListener, args: ["focus",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMtdG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbInRvb2x0aXAvZWxsaXBzaXMtdG9vbHRpcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFPVCxZQUFZLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSWxEOzs7Ozs7Ozs7O0dBVUc7QUFPSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxnQkFBZ0I7SUFDcEQ7Ozs7T0FJRztJQUNILG9CQUFvQjtRQUNuQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUU7WUFDM0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsT0FBTztTQUNQO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3JFLENBQUM7SUFHRCxPQUFPO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtZQUM3QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUM1QjtJQUNGLENBQUM7SUFHRCxPQUFPO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFlBQVksRUFBRTtZQUM5RCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUM1QjtJQUNGLENBQUM7SUFHRCxPQUFPO1FBQ04sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBdkNELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxTQUFTLEVBQUU7b0JBQ1YsYUFBYTtpQkFDYjthQUNEOzs7c0JBaUJDLFlBQVksU0FBQyxPQUFPO3NCQU9wQixZQUFZLFNBQUMsWUFBWTtzQkFPekIsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdElucHV0LFxuXHRUZW1wbGF0ZVJlZixcblx0RWxlbWVudFJlZixcblx0SW5qZWN0b3IsXG5cdENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcblx0Vmlld0NvbnRhaW5lclJlZixcblx0SG9zdExpc3RlbmVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBUb29sdGlwRGlyZWN0aXZlIH0gZnJvbSBcIi4vdG9vbHRpcC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tIFwiLi4vZGlhbG9nLnNlcnZpY2VcIjtcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tIFwiLi90b29sdGlwLmNvbXBvbmVudFwiO1xuXG5cbi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBjcmVhdGVzIGEgdG9vbHRpcCBgRGlhbG9nYCBmb3IgZXhwb3NpbmcgdHJ1bmNhdGVkIHRleHQuXG4gKlxuICogY2xhc3M6IEVsbGlwc2lzVG9vbHRpcCAoZXh0ZW5kcyBQb3BvdmVyRGlyZWN0aXZlKVxuICpcbiAqIHNlbGVjdG9yOiBgbkVsbGlwc2lzVG9vbHRpcGBcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IGNsYXNzPVwiZWxsaXBzaXNcIiBuRWxsaXBzaXNUb29sdGlwPlRvb2x0aXAgZm9yIGVsbGlwc2lzIGJlY2F1c2UgSSBjYW4gYW5kIEkgYW0gcmVhbGx5IHJlYWxseSBsb25nPC9kaXY+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1FbGxpcHNpc1Rvb2x0aXBdXCIsXG5cdHByb3ZpZGVyczogW1xuXHRcdERpYWxvZ1NlcnZpY2Vcblx0XVxufSlcbmV4cG9ydCBjbGFzcyBFbGxpcHNpc1Rvb2x0aXAgZXh0ZW5kcyBUb29sdGlwRGlyZWN0aXZlIHtcblx0LyoqXG5cdCAqIElmIHRleHQgaXMgdHJ1bmNhdGVkLCB0aGlzIGFwcGVuZHMgdGhlIHRleHQgdG8gdGhlIGRpYWxvZyBhcyBjb250ZW50LlxuXHQgKiBAcmV0dXJucyBudWxsXG5cdCAqIEBtZW1iZXJvZiBFbGxpcHNpc1Rvb2x0aXBcblx0ICovXG5cdHVwZGF0ZVRvb2x0aXBDb250ZW50KCkge1xuXHRcdGlmICh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aCA8PSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCkge1xuXHRcdFx0dGhpcy5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdHRoaXMuZGlhbG9nQ29uZmlnLmNvbnRlbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lclRleHQ7XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwiY2xpY2tcIilcblx0b25DbGljaygpIHtcblx0XHRpZiAodGhpcy50cmlnZ2VyID09PSBcImNsaWNrXCIpIHtcblx0XHRcdHRoaXMudXBkYXRlVG9vbHRpcENvbnRlbnQoKTtcblx0XHR9XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwibW91c2VlbnRlclwiKVxuXHRvbkhvdmVyKCkge1xuXHRcdGlmICh0aGlzLnRyaWdnZXIgPT09IFwiaG92ZXJcIiB8fCB0aGlzLnRyaWdnZXIgPT09IFwibW91c2VlbnRlclwiKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZVRvb2x0aXBDb250ZW50KCk7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcImZvY3VzXCIpXG5cdG9uRm9jdXMoKSB7XG5cdFx0dGhpcy51cGRhdGVUb29sdGlwQ29udGVudCgpO1xuXHR9XG59XG4iXX0=