/**
 *
 * carbon-angular v0.0.0 | dialog.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, HostListener, Optional } from "@angular/core";
import { Subscription } from "rxjs";
// the AbsolutePosition is required to import the declaration correctly
import Position, { position } from "@carbon/utils-position";
import { cycleTabs, getFocusElementList } from "carbon-components-angular/common";
import { CloseReasons } from "./dialog-config.interface";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
/**
 * Implements a `Dialog` that can be positioned anywhere on the page.
 * Used to implement a popover or tooltip.
 */
export class Dialog {
    /**
     * Creates an instance of `Dialog`.
     * @param elementRef
     * @param elementService
     */
    constructor(elementRef, elementService, animationFrameService = null) {
        this.elementRef = elementRef;
        this.elementService = elementService;
        this.animationFrameService = animationFrameService;
        /**
         * Emits event that handles the closing of a `Dialog` object.
         */
        this.close = new EventEmitter();
        /**
         * Stores the data received from `dialogConfig`.
         */
        this.data = {};
        this.visibilitySubscription = new Subscription();
        this.animationFrameSubscription = new Subscription();
        /**
         * Handles offsetting the `Dialog` item based on the defined position
         * to not obscure the content beneath.
         */
        this.addGap = {
            "left": pos => position.addOffset(pos, 0, -this.dialogConfig.gap),
            "right": pos => position.addOffset(pos, 0, this.dialogConfig.gap),
            "top": pos => position.addOffset(pos, -this.dialogConfig.gap),
            "bottom": pos => position.addOffset(pos, this.dialogConfig.gap),
            "left-bottom": pos => position.addOffset(pos, 0, -this.dialogConfig.gap),
            "right-bottom": pos => position.addOffset(pos, 0, this.dialogConfig.gap)
        };
        /**
         * Extra placements. Child classes can add to this for use in `placeDialog`.
         */
        this.placements = {};
    }
    /**
     * Initialize the `Dialog`, set the placement and gap, and add a `Subscription` to resize events.
     */
    ngOnInit() {
        this.placement = this.dialogConfig.placement.split(",")[0];
        this.data = this.dialogConfig.data;
        // run any additional initialization code that consuming classes may have
        this.onDialogInit();
    }
    /**
     * After the DOM is ready, focus is set and dialog is placed
     * in respect to the parent element.
     */
    ngAfterViewInit() {
        const dialogElement = this.dialog.nativeElement;
        // split the wrapper class list and apply separately to avoid IE
        // 1. throwing an error due to assigning a readonly property (classList)
        // 2. throwing a SyntaxError due to passing an empty string to `add`
        if (this.dialogConfig.wrapperClass) {
            for (const extraClass of this.dialogConfig.wrapperClass.split(" ")) {
                dialogElement.classList.add(extraClass);
            }
        }
        // only focus the dialog if there are focusable elements within the dialog
        if (getFocusElementList(this.dialog.nativeElement).length > 0) {
            dialogElement.focus();
        }
        const parentElement = this.dialogConfig.parentRef.nativeElement;
        if (this.animationFrameService) {
            this.animationFrameSubscription = this.animationFrameService.tick.subscribe(() => {
                this.placeDialog();
            });
        }
        if (this.dialogConfig.closeWhenHidden) {
            this.visibilitySubscription = this.elementService
                .visibility(parentElement, parentElement)
                .subscribe(value => {
                this.placeDialog();
                if (!value.visible) {
                    this.doClose({
                        reason: CloseReasons.hidden
                    });
                }
            });
        }
        this.placeDialog();
        // run afterDialogViewInit on the next tick
        setTimeout(() => this.afterDialogViewInit());
    }
    /**
     * Empty method to be overridden by consuming classes to run any additional initialization code.
     */
    onDialogInit() { }
    /**
     * Empty method to be overridden by consuming classes to run any additional initialization code after the view is available.
     * NOTE: this does _not_ guarantee the dialog will be positioned, simply that it will exist in the DOM
     */
    afterDialogViewInit() { }
    /**
     * Uses the position service to position the `Dialog` in screen space
     */
    placeDialog() {
        const positionService = new Position(this.placements);
        // helper to find the position based on the current/given environment
        const findPosition = (reference, target, placement) => {
            let pos;
            if (this.dialogConfig.appendInline) {
                pos = this.addGap[placement](positionService.findRelative(reference, target, placement));
            }
            else {
                pos = this.addGap[placement](positionService.findAbsolute(reference, target, placement));
            }
            if (this.dialogConfig.offset) {
                // Apply vertical and horizontal offsets given through the dialogConfig
                pos.top = pos.top + this.dialogConfig.offset.y;
                pos.left = pos.left + this.dialogConfig.offset.x;
            }
            return pos;
        };
        let parentEl = this.dialogConfig.parentRef.nativeElement;
        let el = this.dialog.nativeElement;
        let dialogPlacement = this.placement;
        // split always returns an array, so we can just use the auto position logic
        // for single positions too
        const placements = this.dialogConfig.placement.split(",");
        // find the best placement
        dialogPlacement = positionService.findBestPlacement(parentEl, el, placements);
        // calculate the final position
        const pos = findPosition(parentEl, el, dialogPlacement);
        // update the element
        positionService.setElement(el, pos);
        setTimeout(() => { this.placement = dialogPlacement; });
    }
    /**
     * Sets up a KeyboardEvent to close `Dialog` with Escape key.
     * @param event
     */
    escapeClose(event) {
        switch (event.key) {
            case "Esc": // IE specific value
            case "Escape": {
                event.stopImmediatePropagation();
                this.doClose({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
                break;
            }
            case "Tab": {
                cycleTabs(event, this.elementRef.nativeElement);
                break;
            }
        }
    }
    /**
     * Sets up a event Listener to close `Dialog` if click event occurs outside
     * `Dialog` object.
     * @param event
     */
    clickClose(event) {
        if (!this.elementRef.nativeElement.contains(event.target)
            && !this.dialogConfig.parentRef.nativeElement.contains(event.target)) {
            this.doClose({
                reason: CloseReasons.interaction,
                target: event.target
            });
        }
    }
    /**
     * Closes `Dialog` object by emitting the close event upwards to parents.
     */
    doClose(meta = { reason: CloseReasons.interaction }) {
        this.close.emit(meta);
    }
    /**
     * At destruction of component, `Dialog` unsubscribes from all the subscriptions.
     */
    ngOnDestroy() {
        this.visibilitySubscription.unsubscribe();
        if (this.animationFrameSubscription) {
            this.animationFrameSubscription.unsubscribe();
        }
    }
}
Dialog.decorators = [
    { type: Component, args: [{
                selector: "ibm-dialog",
                template: ""
            }] }
];
/** @nocollapse */
Dialog.ctorParameters = () => [
    { type: ElementRef },
    { type: ElementService },
    { type: AnimationFrameService, decorators: [{ type: Optional }] }
];
Dialog.propDecorators = {
    close: [{ type: Output }],
    dialogConfig: [{ type: Input }],
    dialog: [{ type: ViewChild, args: ["dialog", { static: false },] }],
    escapeClose: [{ type: HostListener, args: ["keydown", ["$event"],] }],
    clickClose: [{ type: HostListener, args: ["document:click", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,