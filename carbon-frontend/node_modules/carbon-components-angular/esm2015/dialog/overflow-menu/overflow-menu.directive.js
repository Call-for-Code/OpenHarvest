/**
 *
 * carbon-angular v0.0.0 | overflow-menu.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, ElementRef, ViewContainerRef, Input, TemplateRef, HostListener } from "@angular/core";
import { DialogDirective } from "../dialog.directive";
import { DialogService } from "../dialog.service";
import { OverflowMenuPane } from "./overflow-menu-pane.component";
import { OverflowMenuCustomPane } from "./overflow-menu-custom-pane.component";
import { EventService } from "carbon-components-angular/utils";
/**
 * Directive for extending `Dialog` to create overflow menus.
 *
 * class: OverflowMenuDirective (extends DialogDirective)
 *
 *
 * selector: `ibmOverflowMenu`
 *
 *
 * ```html
 * <div [ibmOverflowMenu]="templateRef"></div>
 * <ng-template #templateRef>
 * 	<!-- overflow menu options here -->
 * </ng-template>
 * ```
 *
 * ```html
 * <div [ibmOverflowMenu]="templateRef" [customPane]="true"></div>
 * <ng-template #templateRef>
 *  <!-- custom content goes here -->
 * </ng-template>
 * ```
 */
export class OverflowMenuDirective extends DialogDirective {
    /**
     * Creates an instance of `OverflowMenuDirective`.
     */
    constructor(elementRef, viewContainerRef, dialogService, eventService) {
        super(elementRef, viewContainerRef, dialogService, eventService);
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.dialogService = dialogService;
        this.eventService = eventService;
        /**
         * Controls wether the overflow menu is flipped
         */
        this.flip = false;
        /**
         * Classes to add to the dialog container
         */
        this.wrapperClass = "";
        /**
         * Set to true to for custom content
         */
        this.customPane = false;
    }
    ngAfterContentInit() {
        this.dialogService.setContext({ component: this.customPane ? OverflowMenuCustomPane : OverflowMenuPane });
    }
    updateConfig() {
        this.dialogConfig.content = this.ibmOverflowMenu;
        this.dialogConfig.flip = this.flip;
        this.dialogConfig.offset = this.offset;
        this.dialogConfig.wrapperClass = this.wrapperClass;
    }
    hostkeys(event) {
        switch (event.key) {
            case "Enter":
            case " ":
                event.preventDefault();
                break;
        }
    }
}
OverflowMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmOverflowMenu]",
                exportAs: "ibmOverflowMenu",
                providers: [
                    DialogService
                ]
            },] }
];
/** @nocollapse */
OverflowMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: DialogService },
    { type: EventService }
];
OverflowMenuDirective.propDecorators = {
    ibmOverflowMenu: [{ type: Input }],
    flip: [{ type: Input }],
    offset: [{ type: Input }],
    wrapperClass: [{ type: Input }],
    customPane: [{ type: Input }],
    hostkeys: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLEtBQUssRUFDTCxXQUFXLEVBQ1gsWUFBWSxFQUVaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRy9EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBUUgsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWU7SUFzQnpEOztPQUVHO0lBQ0gsWUFDVyxVQUFzQixFQUN0QixnQkFBa0MsRUFDbEMsYUFBNEIsRUFDNUIsWUFBMEI7UUFFcEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFMdkQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBeEJyQzs7V0FFRztRQUNNLFNBQUksR0FBRyxLQUFLLENBQUM7UUFLdEI7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUMzQjs7V0FFRztRQUNNLGVBQVUsR0FBRyxLQUFLLENBQUM7SUFZNUIsQ0FBQztJQUVELGtCQUFrQjtRQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzNHLENBQUM7SUFFRCxZQUFZO1FBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNwRCxDQUFDO0lBR0QsUUFBUSxDQUFDLEtBQW9CO1FBQzVCLFFBQVEsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNsQixLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssR0FBRztnQkFDUCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLE1BQU07U0FDUDtJQUNGLENBQUM7OztZQTVERCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsU0FBUyxFQUFFO29CQUNWLGFBQWE7aUJBQ2I7YUFDRDs7OztZQTNDQSxVQUFVO1lBQ1YsZ0JBQWdCO1lBT1IsYUFBYTtZQUdiLFlBQVk7Ozs4QkFxQ25CLEtBQUs7bUJBSUwsS0FBSztxQkFJTCxLQUFLOzJCQUlMLEtBQUs7eUJBSUwsS0FBSzt1QkF5QkwsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERpcmVjdGl2ZSxcblx0RWxlbWVudFJlZixcblx0Vmlld0NvbnRhaW5lclJlZixcblx0SW5wdXQsXG5cdFRlbXBsYXRlUmVmLFxuXHRIb3N0TGlzdGVuZXIsXG5cdEFmdGVyQ29udGVudEluaXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IERpYWxvZ0RpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaWFsb2cuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSBcIi4uL2RpYWxvZy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBPdmVyZmxvd01lbnVQYW5lIH0gZnJvbSBcIi4vb3ZlcmZsb3ctbWVudS1wYW5lLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgT3ZlcmZsb3dNZW51Q3VzdG9tUGFuZSB9IGZyb20gXCIuL292ZXJmbG93LW1lbnUtY3VzdG9tLXBhbmUuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlsc1wiO1xuXG5cbi8qKlxuICogRGlyZWN0aXZlIGZvciBleHRlbmRpbmcgYERpYWxvZ2AgdG8gY3JlYXRlIG92ZXJmbG93IG1lbnVzLlxuICpcbiAqIGNsYXNzOiBPdmVyZmxvd01lbnVEaXJlY3RpdmUgKGV4dGVuZHMgRGlhbG9nRGlyZWN0aXZlKVxuICpcbiAqXG4gKiBzZWxlY3RvcjogYGlibU92ZXJmbG93TWVudWBcbiAqXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBbaWJtT3ZlcmZsb3dNZW51XT1cInRlbXBsYXRlUmVmXCI+PC9kaXY+XG4gKiA8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPlxuICogXHQ8IS0tIG92ZXJmbG93IG1lbnUgb3B0aW9ucyBoZXJlIC0tPlxuICogPC9uZy10ZW1wbGF0ZT5cbiAqIGBgYFxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgW2libU92ZXJmbG93TWVudV09XCJ0ZW1wbGF0ZVJlZlwiIFtjdXN0b21QYW5lXT1cInRydWVcIj48L2Rpdj5cbiAqIDxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVSZWY+XG4gKiAgPCEtLSBjdXN0b20gY29udGVudCBnb2VzIGhlcmUgLS0+XG4gKiA8L25nLXRlbXBsYXRlPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtT3ZlcmZsb3dNZW51XVwiLFxuXHRleHBvcnRBczogXCJpYm1PdmVyZmxvd01lbnVcIixcblx0cHJvdmlkZXJzOiBbXG5cdFx0RGlhbG9nU2VydmljZVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIE92ZXJmbG93TWVudURpcmVjdGl2ZSBleHRlbmRzIERpYWxvZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXHQvKipcblx0ICogVGFrZXMgYSB0ZW1wbGF0ZSByZWYgb2YgYE92ZXJmbG93TWVudU9wdGlvbnNgc1xuXHQgKi9cblx0QElucHV0KCkgaWJtT3ZlcmZsb3dNZW51OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXHQvKipcblx0ICogQ29udHJvbHMgd2V0aGVyIHRoZSBvdmVyZmxvdyBtZW51IGlzIGZsaXBwZWRcblx0ICovXG5cdEBJbnB1dCgpIGZsaXAgPSBmYWxzZTtcblx0LyoqXG5cdCAqIFRoaXMgc3BlY2lmaWVzIGFueSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBvZmZzZXQgZm9yIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGlhbG9nXG5cdCAqL1xuXHRASW5wdXQoKSBvZmZzZXQ6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcblx0LyoqXG5cdCAqIENsYXNzZXMgdG8gYWRkIHRvIHRoZSBkaWFsb2cgY29udGFpbmVyXG5cdCAqL1xuXHRASW5wdXQoKSB3cmFwcGVyQ2xhc3MgPSBcIlwiO1xuXHQvKipcblx0ICogU2V0IHRvIHRydWUgdG8gZm9yIGN1c3RvbSBjb250ZW50XG5cdCAqL1xuXHRASW5wdXQoKSBjdXN0b21QYW5lID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYE92ZXJmbG93TWVudURpcmVjdGl2ZWAuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcblx0XHRwcm90ZWN0ZWQgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZSxcblx0XHRwcm90ZWN0ZWQgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2Vcblx0KSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZiwgdmlld0NvbnRhaW5lclJlZiwgZGlhbG9nU2VydmljZSwgZXZlbnRTZXJ2aWNlKTtcblx0fVxuXG5cdG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblx0XHR0aGlzLmRpYWxvZ1NlcnZpY2Uuc2V0Q29udGV4dCh7IGNvbXBvbmVudDogdGhpcy5jdXN0b21QYW5lID8gT3ZlcmZsb3dNZW51Q3VzdG9tUGFuZSA6IE92ZXJmbG93TWVudVBhbmUgfSk7XG5cdH1cblxuXHR1cGRhdGVDb25maWcoKSB7XG5cdFx0dGhpcy5kaWFsb2dDb25maWcuY29udGVudCA9IHRoaXMuaWJtT3ZlcmZsb3dNZW51O1xuXHRcdHRoaXMuZGlhbG9nQ29uZmlnLmZsaXAgPSB0aGlzLmZsaXA7XG5cdFx0dGhpcy5kaWFsb2dDb25maWcub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG5cdFx0dGhpcy5kaWFsb2dDb25maWcud3JhcHBlckNsYXNzID0gdGhpcy53cmFwcGVyQ2xhc3M7XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwia2V5ZG93blwiLCBbXCIkZXZlbnRcIl0pXG5cdGhvc3RrZXlzKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG5cdFx0c3dpdGNoIChldmVudC5rZXkpIHtcblx0XHRcdGNhc2UgXCJFbnRlclwiOlxuXHRcdFx0Y2FzZSBcIiBcIjpcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG59XG4iXX0=