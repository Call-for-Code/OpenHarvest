/**
 *
 * carbon-angular v0.0.0 | overflow-menu-option.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { HostBinding, Component, Input, ElementRef, Output, EventEmitter } from "@angular/core";
/**
 * Available HTML anchor targets
 */
export var Target;
(function (Target) {
    Target["self"] = "_self";
    Target["blank"] = "_blank";
    Target["parent"] = "_parent";
    Target["top"] = "_top";
})(Target || (Target = {}));
/**
 * Security HTML anchor rel when target is set
 */
const REL = "noreferrer noopener";
/**
 * `OverflowMenuOption` represents a single option in an overflow menu
 *
 * Presently it has three possible states - normal, disabled, and danger:
 * ```
 * <ibm-overflow-menu-option>Simple option</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option disabled="true">Disabled</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option type="danger">Danger option</ibm-overflow-menu-option>
 * ```
 *
 * For content that expands beyond the overflow menu `OverflowMenuOption` automatically adds a title attribute.
 */
export class OverflowMenuOption {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.optionClass = "bx--overflow-menu-options__option";
        this.role = "presentation";
        /**
         * toggles between `normal` and `danger` states
         */
        this.type = "normal";
        /**
         * disable/enable interactions
         */
        this.disabled = false;
        this.selected = new EventEmitter();
        this.tabIndex = -1;
        // note: title must be a real attribute (i.e. not a getter) as of Angular@6 due to
        // change after checked errors
        this.title = null;
    }
    get isDanger() {
        return this.type === "danger";
    }
    get isDisabled() {
        return this.disabled;
    }
    /**
     * Allows to add a target to the anchor
     */
    set target(value) {
        if (!Object.values(Target).includes(value)) {
            console.warn(`\`target\` must have one of the following values: ${Object.values(Target).join(", ")}.
Please use the \`Target\` enum exported by carbon-components-angular`);
            return;
        }
        this._target = value;
    }
    get target() {
        return this._target;
    }
    /**
     * rel only returns its value if target is defined
     */
    get rel() {
        return this._target ? REL : null;
    }
    onClick() {
        this.selected.emit();
    }
    onFocus() {
        setTimeout(() => this.tabIndex = 0);
    }
    onBlur() {
        setTimeout(() => this.tabIndex = -1);
    }
    ngAfterViewInit() {
        const button = this.elementRef.nativeElement.querySelector("button, a");
        const textContainer = button.querySelector(".bx--overflow-menu-options__option-content");
        if (textContainer.scrollWidth > textContainer.offsetWidth) {
            this.title = button.textContent;
        }
    }
}
OverflowMenuOption.decorators = [
    { type: Component, args: [{
                selector: "ibm-overflow-menu-option",
                template: `
		<button
			*ngIf="!href"
			class="bx--overflow-menu-options__btn"
			role="menuitem"
			[tabindex]="tabIndex"
			(focus)="onFocus()"
			(blur)="onBlur()"
			(click)="onClick()"
			[disabled]="disabled"
			[attr.title]="title">
			<ng-container *ngTemplateOutlet="tempOutlet"></ng-container>
		</button>

		<a
			*ngIf="href"
			class="bx--overflow-menu-options__btn"
			role="menuitem"
			[tabindex]="tabIndex"
			(focus)="onFocus()"
			(blur)="onBlur()"
			(click)="onClick()"
			[attr.disabled]="disabled"
			[href]="href"
			[attr.target]="target"
			[attr.rel]="rel"
			[attr.title]="title">
			<ng-container *ngTemplateOutlet="tempOutlet"></ng-container>
		</a>

		<ng-template #tempOutlet>
			<div class="bx--overflow-menu-options__option-content">
				<ng-content></ng-content>
			</div>
		</ng-template>
	`
            }] }
];
/** @nocollapse */
OverflowMenuOption.ctorParameters = () => [
    { type: ElementRef }
];
OverflowMenuOption.propDecorators = {
    optionClass: [{ type: HostBinding, args: ["class",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    isDanger: [{ type: HostBinding, args: ["class.bx--overflow-menu-options__option--danger",] }],
    isDisabled: [{ type: HostBinding, args: ["class.bx--overflow-menu-options__option--disabled",] }],
    type: [{ type: Input }],
    disabled: [{ type: Input }],
    href: [{ type: Input }],
    target: [{ type: Input }],
    selected: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,