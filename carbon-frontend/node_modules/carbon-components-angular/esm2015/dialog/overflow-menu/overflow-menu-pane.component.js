/**
 *
 * carbon-angular v0.0.0 | overflow-menu-pane.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostListener, ElementRef, Optional } from "@angular/core";
import { Dialog } from "../dialog.component";
import { position } from "@carbon/utils-position";
import { isFocusInLastItem, isFocusInFirstItem } from "carbon-components-angular/common";
import { I18n } from "carbon-components-angular/i18n";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { CloseReasons } from "../dialog-config.interface";
import { closestAttr } from "carbon-components-angular/utils";
/**
 * Extend the `Dialog` component to create an overflow menu.
 *
 * Not used directly. See overflow-menu.component and overflow-menu.directive for more
 */
export class OverflowMenuPane extends Dialog {
    constructor(elementRef, i18n, experimental, animationFrameService = null, 
    // mark `elementService` as optional since making it mandatory would be a breaking change
    elementService = null) {
        super(elementRef, elementService, animationFrameService);
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.experimental = experimental;
        this.animationFrameService = animationFrameService;
        this.elementService = elementService;
    }
    onDialogInit() {
        const positionOverflowMenu = pos => {
            let offset;
            /*
            * 20 is half the width of the overflow menu trigger element.
            * we also move the element by half of it's own width, since
            * position service will try and center everything
            */
            const closestRel = closestAttr("position", ["relative", "fixed", "absolute"], this.elementRef.nativeElement);
            const topFix = closestRel ? closestRel.getBoundingClientRect().top * -1 : 0;
            const leftFix = closestRel ? closestRel.getBoundingClientRect().left * -1 : 0;
            offset = Math.round(this.dialog.nativeElement.offsetWidth / 2) - 20;
            if (this.dialogConfig.flip) {
                return position.addOffset(pos, topFix, (-offset + leftFix));
            }
            return position.addOffset(pos, topFix, (offset + leftFix));
        };
        this.addGap["bottom"] = positionOverflowMenu;
        this.addGap["top"] = positionOverflowMenu;
        if (!this.dialogConfig.menuLabel) {
            this.dialogConfig.menuLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        }
    }
    hostkeys(event) {
        const listItems = this.listItems();
        switch (event.key) {
            case "Down": // IE specific value
            case "ArrowDown":
                event.preventDefault();
                if (!isFocusInLastItem(event, listItems)) {
                    const index = listItems.findIndex(item => item === event.target);
                    listItems[index + 1].focus();
                }
                else {
                    listItems[0].focus();
                }
                break;
            case "Up": // IE specific value
            case "ArrowUp":
                event.preventDefault();
                if (!isFocusInFirstItem(event, listItems)) {
                    const index = listItems.findIndex(item => item === event.target);
                    listItems[index - 1].focus();
                }
                else {
                    listItems[listItems.length - 1].focus();
                }
                break;
            case "Home":
                event.preventDefault();
                listItems[0].focus();
                break;
            case "End":
                event.preventDefault();
                listItems[listItems.length - 1].focus();
                break;
            case "Esc": // IE specific value
            case "Escape":
            case "Tab":
                event.stopImmediatePropagation();
                this.doClose({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
                break;
            default: break;
        }
    }
    onClose(event) {
        this.doClose({
            reason: CloseReasons.interaction,
            target: event.target
        });
    }
    afterDialogViewInit() {
        const focusElementList = this.listItems();
        focusElementList.forEach(button => {
            // Allows user to set tabindex to 0.
            if (button.getAttribute("tabindex") === null) {
                button.tabIndex = -1;
            }
        });
        if (focusElementList[0]) {
            focusElementList[0].tabIndex = 0;
            focusElementList[0].focus();
        }
    }
    listItems() {
        const selector = ".bx--overflow-menu-options__option:not([disabled]) .bx--overflow-menu-options__btn";
        return Array.from(this.elementRef.nativeElement.querySelectorAll(selector));
    }
}
OverflowMenuPane.decorators = [
    { type: Component, args: [{
                selector: "ibm-overflow-menu-pane",
                template: `
		<ul
			[attr.aria-label]="dialogConfig.menuLabel"
			[ngClass]="{'bx--overflow-menu--flip': dialogConfig.flip}"
			role="menu"
			#dialog
			class="bx--overflow-menu-options bx--overflow-menu-options--open"
			role="menu"
			(click)="onClose($event)"
			[attr.aria-label]="dialogConfig.menuLabel">
			<ng-template
				[ngTemplateOutlet]="dialogConfig.content"
				[ngTemplateOutletContext]="{overflowMenu: this}">
			</ng-template>
		</ul>
	`
            }] }
];
/** @nocollapse */
OverflowMenuPane.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n },
    { type: ExperimentalService },
    { type: AnimationFrameService, decorators: [{ type: Optional }] },
    { type: ElementService, decorators: [{ type: Optional }] }
];
OverflowMenuPane.propDecorators = {
    hostkeys: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1wYW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvZGlhbG9nLyIsInNvdXJjZXMiOlsib3ZlcmZsb3ctbWVudS9vdmVyZmxvdy1tZW51LXBhbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFFVixRQUFRLEVBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN6RixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFOUQ7Ozs7R0FJRztBQW9CSCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsTUFBTTtJQUMzQyxZQUNXLFVBQXNCLEVBQ3RCLElBQVUsRUFDVixZQUFpQyxFQUNyQix3QkFBK0MsSUFBSTtJQUN6RSx5RkFBeUY7SUFDbkUsaUJBQWlDLElBQUk7UUFDM0QsS0FBSyxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQU4vQyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFNBQUksR0FBSixJQUFJLENBQU07UUFDVixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7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WSxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDN0MsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNyQjtRQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4QixnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzVCO0lBQ0YsQ0FBQztJQUVTLFNBQVM7UUFDbEIsTUFBTSxRQUFRLEdBQUcsb0ZBQW9GLENBQUM7UUFDdEcsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFjLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDMUYsQ0FBQzs7O1lBcElELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7OztFQWVUO2FBQ0Q7Ozs7WUFwQ0EsVUFBVTtZQU9GLElBQUk7WUFDSixtQkFBbUI7WUFDbkIscUJBQXFCLHVCQWlDM0IsUUFBUTtZQWpDcUIsY0FBYyx1QkFtQzNDLFFBQVE7Ozt1QkFnQ1QsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SG9zdExpc3RlbmVyLFxuXHRFbGVtZW50UmVmLFxuXHRBZnRlclZpZXdJbml0LFxuXHRPcHRpb25hbFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSBcIi4uL2RpYWxvZy5jb21wb25lbnRcIjtcbmltcG9ydCB7IHBvc2l0aW9uIH0gZnJvbSBcIkBjYXJib24vdXRpbHMtcG9zaXRpb25cIjtcbmltcG9ydCB7IGlzRm9jdXNJbkxhc3RJdGVtLCBpc0ZvY3VzSW5GaXJzdEl0ZW0gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBFeHBlcmltZW50YWxTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvZXhwZXJpbWVudGFsXCI7XG5pbXBvcnQgeyBBbmltYXRpb25GcmFtZVNlcnZpY2UsIEVsZW1lbnRTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcbmltcG9ydCB7IENsb3NlUmVhc29ucyB9IGZyb20gXCIuLi9kaWFsb2ctY29uZmlnLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgY2xvc2VzdEF0dHIgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlsc1wiO1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYERpYWxvZ2AgY29tcG9uZW50IHRvIGNyZWF0ZSBhbiBvdmVyZmxvdyBtZW51LlxuICpcbiAqIE5vdCB1c2VkIGRpcmVjdGx5LiBTZWUgb3ZlcmZsb3ctbWVudS5jb21wb25lbnQgYW5kIG92ZXJmbG93LW1lbnUuZGlyZWN0aXZlIGZvciBtb3JlXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tb3ZlcmZsb3ctbWVudS1wYW5lXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PHVsXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImRpYWxvZ0NvbmZpZy5tZW51TGFiZWxcIlxuXHRcdFx0W25nQ2xhc3NdPVwieydieC0tb3ZlcmZsb3ctbWVudS0tZmxpcCc6IGRpYWxvZ0NvbmZpZy5mbGlwfVwiXG5cdFx0XHRyb2xlPVwibWVudVwiXG5cdFx0XHQjZGlhbG9nXG5cdFx0XHRjbGFzcz1cImJ4LS1vdmVyZmxvdy1tZW51LW9wdGlvbnMgYngtLW92ZXJmbG93LW1lbnUtb3B0aW9ucy0tb3BlblwiXG5cdFx0XHRyb2xlPVwibWVudVwiXG5cdFx0XHQoY2xpY2spPVwib25DbG9zZSgkZXZlbnQpXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiZGlhbG9nQ29uZmlnLm1lbnVMYWJlbFwiPlxuXHRcdFx0PG5nLXRlbXBsYXRlXG5cdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0XT1cImRpYWxvZ0NvbmZpZy5jb250ZW50XCJcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntvdmVyZmxvd01lbnU6IHRoaXN9XCI+XG5cdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdDwvdWw+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dNZW51UGFuZSBleHRlbmRzIERpYWxvZyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgaTE4bjogSTE4bixcblx0XHRwcm90ZWN0ZWQgZXhwZXJpbWVudGFsOiBFeHBlcmltZW50YWxTZXJ2aWNlLFxuXHRcdEBPcHRpb25hbCgpIHByb3RlY3RlZCBhbmltYXRpb25GcmFtZVNlcnZpY2U6IEFuaW1hdGlvbkZyYW1lU2VydmljZSA9IG51bGwsXG5cdFx0Ly8gbWFyayBgZWxlbWVudFNlcnZpY2VgIGFzIG9wdGlvbmFsIHNpbmNlIG1ha2luZyBpdCBtYW5kYXRvcnkgd291bGQgYmUgYSBicmVha2luZyBjaGFuZ2Vcblx0XHRAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgZWxlbWVudFNlcnZpY2U6IEVsZW1lbnRTZXJ2aWNlID0gbnVsbCkge1xuXHRcdHN1cGVyKGVsZW1lbnRSZWYsIGVsZW1lbnRTZXJ2aWNlLCBhbmltYXRpb25GcmFtZVNlcnZpY2UpO1xuXHR9XG5cblx0b25EaWFsb2dJbml0KCkge1xuXHRcdGNvbnN0IHBvc2l0aW9uT3ZlcmZsb3dNZW51ID0gcG9zID0+IHtcblx0XHRcdGxldCBvZmZzZXQ7XG5cdFx0XHQvKlxuXHRcdFx0KiAyMCBpcyBoYWxmIHRoZSB3aWR0aCBvZiB0aGUgb3ZlcmZsb3cgbWVudSB0cmlnZ2VyIGVsZW1lbnQuXG5cdFx0XHQqIHdlIGFsc28gbW92ZSB0aGUgZWxlbWVudCBieSBoYWxmIG9mIGl0J3Mgb3duIHdpZHRoLCBzaW5jZVxuXHRcdFx0KiBwb3NpdGlvbiBzZXJ2aWNlIHdpbGwgdHJ5IGFuZCBjZW50ZXIgZXZlcnl0aGluZ1xuXHRcdFx0Ki9cblx0XHRcdGNvbnN0IGNsb3Nlc3RSZWwgPSBjbG9zZXN0QXR0cihcInBvc2l0aW9uXCIsIFtcInJlbGF0aXZlXCIsIFwiZml4ZWRcIiwgXCJhYnNvbHV0ZVwiXSwgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuXHRcdFx0Y29uc3QgdG9wRml4ID0gY2xvc2VzdFJlbCA/IGNsb3Nlc3RSZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICogLTEgOiAwO1xuXHRcdFx0Y29uc3QgbGVmdEZpeCA9IGNsb3Nlc3RSZWwgPyBjbG9zZXN0UmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKiAtMSA6IDA7XG5cblx0XHRcdG9mZnNldCA9IE1hdGgucm91bmQodGhpcy5kaWFsb2cubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAvIDIpIC0gMjA7XG5cdFx0XHRpZiAodGhpcy5kaWFsb2dDb25maWcuZmxpcCkge1xuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb24uYWRkT2Zmc2V0KHBvcywgdG9wRml4LCAoLW9mZnNldCArIGxlZnRGaXgpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwb3NpdGlvbi5hZGRPZmZzZXQocG9zLCB0b3BGaXgsIChvZmZzZXQgKyBsZWZ0Rml4KSk7XG5cdFx0fTtcblxuXHRcdHRoaXMuYWRkR2FwW1wiYm90dG9tXCJdID0gcG9zaXRpb25PdmVyZmxvd01lbnU7XG5cblx0XHR0aGlzLmFkZEdhcFtcInRvcFwiXSA9IHBvc2l0aW9uT3ZlcmZsb3dNZW51O1xuXG5cdFx0aWYgKCF0aGlzLmRpYWxvZ0NvbmZpZy5tZW51TGFiZWwpIHtcblx0XHRcdHRoaXMuZGlhbG9nQ29uZmlnLm1lbnVMYWJlbCA9IHRoaXMuaTE4bi5nZXQoKS5PVkVSRkxPV19NRU5VLk9WRVJGTE9XO1xuXHRcdH1cblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJrZXlkb3duXCIsIFtcIiRldmVudFwiXSlcblx0aG9zdGtleXMoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRjb25zdCBsaXN0SXRlbXMgPSB0aGlzLmxpc3RJdGVtcygpO1xuXG5cdFx0c3dpdGNoIChldmVudC5rZXkpIHtcblx0XHRcdGNhc2UgXCJEb3duXCI6IC8vIElFIHNwZWNpZmljIHZhbHVlXG5cdFx0XHRjYXNlIFwiQXJyb3dEb3duXCI6XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGlmICghaXNGb2N1c0luTGFzdEl0ZW0oZXZlbnQsIGxpc3RJdGVtcykpICB7XG5cdFx0XHRcdFx0Y29uc3QgaW5kZXggPSBsaXN0SXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbSA9PT0gZXZlbnQudGFyZ2V0KTtcblx0XHRcdFx0XHRsaXN0SXRlbXNbaW5kZXggKyAxXS5mb2N1cygpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3RJdGVtc1swXS5mb2N1cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiVXBcIjogLy8gSUUgc3BlY2lmaWMgdmFsdWVcblx0XHRcdGNhc2UgXCJBcnJvd1VwXCI6XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGlmICghaXNGb2N1c0luRmlyc3RJdGVtKGV2ZW50LCBsaXN0SXRlbXMpKSAge1xuXHRcdFx0XHRcdGNvbnN0IGluZGV4ID0gbGlzdEl0ZW1zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0gPT09IGV2ZW50LnRhcmdldCk7XG5cdFx0XHRcdFx0bGlzdEl0ZW1zW2luZGV4IC0gMV0uZm9jdXMoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0SXRlbXNbbGlzdEl0ZW1zLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJIb21lXCI6XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGxpc3RJdGVtc1swXS5mb2N1cygpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcIkVuZFwiOlxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRsaXN0SXRlbXNbbGlzdEl0ZW1zLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiRXNjXCI6IC8vIElFIHNwZWNpZmljIHZhbHVlXG5cdFx0XHRjYXNlIFwiRXNjYXBlXCI6XG5cdFx0XHRjYXNlIFwiVGFiXCI6XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR0aGlzLmRvQ2xvc2Uoe1xuXHRcdFx0XHRcdHJlYXNvbjogQ2xvc2VSZWFzb25zLmludGVyYWN0aW9uLFxuXHRcdFx0XHRcdHRhcmdldDogZXZlbnQudGFyZ2V0XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6IGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdG9uQ2xvc2UoZXZlbnQpIHtcblx0XHR0aGlzLmRvQ2xvc2Uoe1xuXHRcdFx0cmVhc29uOiBDbG9zZVJlYXNvbnMuaW50ZXJhY3Rpb24sXG5cdFx0XHR0YXJnZXQ6IGV2ZW50LnRhcmdldFxuXHRcdH0pO1xuXHR9XG5cblx0YWZ0ZXJEaWFsb2dWaWV3SW5pdCgpIHtcblx0XHRjb25zdCBmb2N1c0VsZW1lbnRMaXN0ID0gdGhpcy5saXN0SXRlbXMoKTtcblx0XHRmb2N1c0VsZW1lbnRMaXN0LmZvckVhY2goYnV0dG9uID0+IHtcblx0XHRcdC8vIEFsbG93cyB1c2VyIHRvIHNldCB0YWJpbmRleCB0byAwLlxuXHRcdFx0aWYgKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSA9PT0gbnVsbCkge1xuXHRcdFx0XHRidXR0b24udGFiSW5kZXggPSAtMTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAoZm9jdXNFbGVtZW50TGlzdFswXSkge1xuXHRcdFx0Zm9jdXNFbGVtZW50TGlzdFswXS50YWJJbmRleCA9IDA7XG5cdFx0XHRmb2N1c0VsZW1lbnRMaXN0WzBdLmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIGxpc3RJdGVtcygpIHtcblx0XHRjb25zdCBzZWxlY3RvciA9IFwiLmJ4LS1vdmVyZmxvdy1tZW51LW9wdGlvbnNfX29wdGlvbjpub3QoW2Rpc2FibGVkXSkgLmJ4LS1vdmVyZmxvdy1tZW51LW9wdGlvbnNfX2J0blwiO1xuXHRcdHJldHVybiBBcnJheS5mcm9tPEhUTUxFbGVtZW50Pih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG5cdH1cbn1cbiJdfQ==