/**
 *
 * carbon-angular v0.0.0 | overflow-menu.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewEncapsulation } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { OverflowMenuDirective } from "./overflow-menu.directive";
/**
 * The OverFlow menu component encapsulates the OverFlowMenu directive, and the menu iconography into one convienent component
 *
 * [See demo](../../?path=/story/overflow-menu--basic)
 *
 * html:
 * ```
 * <ibm-overflow-menu>
 *	<ibm-overflow-menu-option>Option 1</ibm-overflow-menu-option>
 *	<ibm-overflow-menu-option>Option 2</ibm-overflow-menu-option>
 * </ibm-overflow-menu>
 * ```
 *
 * <example-url>../../iframe.html?id=overflow-menu--basic</example-url>
 */
export class OverflowMenu {
    constructor(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.buttonLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        this.flip = false;
        this.placement = "bottom";
        this.open = false;
        this.openChange = new EventEmitter();
        this.wrapperClass = "";
        /**
         * This appends additional classes to the overflow trigger/button.
         */
        this.triggerClass = "";
    }
    handleOpenChange(event) {
        this.open = event;
        this.openChange.emit(event);
    }
}
OverflowMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-overflow-menu",
                template: `
		<button
			[ibmOverflowMenu]="options"
			[ngClass]="{'bx--overflow-menu--open': open}"
			class="bx--overflow-menu {{triggerClass}}"
			[attr.aria-label]="buttonLabel"
			[flip]="flip"
			[isOpen]="open"
			(isOpenChange)="handleOpenChange($event)"
			[offset]="offset"
			[wrapperClass]="wrapperClass"
			aria-haspopup="true"
			class="bx--overflow-menu"
			type="button"
			[placement]="placement">
			<ng-template *ngIf="customTrigger; else defaultIcon" [ngTemplateOutlet]="customTrigger"></ng-template>
		</button>
		<ng-template #options>
			<ng-content></ng-content>
		</ng-template>
		<ng-template #defaultIcon>
			<svg ibmIcon="overflow-menu--vertical" size="16" class="bx--overflow-menu__icon"></svg>
		</ng-template>
	`,
                encapsulation: ViewEncapsulation.None,
                styles: [`
		.bx--overflow-menu--open {
			opacity: 1
		}

		/*
		Rotate the overflow menu container as well as the icon, since
		we calculate our menu position based on the container, not the icon.
		*/
		.bx--data-table-v2 .bx--overflow-menu {
			transform: rotate(90deg);
		}

		.bx--data-table-v2 .bx--overflow-menu__icon {
			transform: rotate(180deg);
		}
	`]
            }] }
];
/** @nocollapse */
OverflowMenu.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n }
];
OverflowMenu.propDecorators = {
    buttonLabel: [{ type: Input }],
    flip: [{ type: Input }],
    placement: [{ type: Input }],
    open: [{ type: Input }],
    openChange: [{ type: Output }],
    customTrigger: [{ type: Input }],
    offset: [{ type: Input }],
    wrapperClass: [{ type: Input }],
    triggerClass: [{ type: Input }],
    overflowMenuDirective: [{ type: ContentChild, args: [OverflowMenuDirective, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBOENILE1BQU0sT0FBTyxZQUFZO0lBOEJ4QixZQUFzQixVQUFzQixFQUFZLElBQVU7UUFBNUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFZLFNBQUksR0FBSixJQUFJLENBQU07UUE3QnpELGdCQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBRXJELFNBQUksR0FBRyxLQUFLLENBQUM7UUFFYixjQUFTLEdBQXFCLFFBQVEsQ0FBQztRQUV2QyxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBRVosZUFBVSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFXMUMsaUJBQVksR0FBRyxFQUFFLENBQUM7UUFFM0I7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLEVBQUUsQ0FBQztJQUswQyxDQUFDO0lBRXRFLGdCQUFnQixDQUFDLEtBQWM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7O1lBaEZELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBdUJUO2dCQWtCRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTt5QkFqQjVCOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JSO2FBRUQ7Ozs7WUFyRUEsVUFBVTtZQU9GLElBQUk7OzswQkFnRVgsS0FBSzttQkFFTCxLQUFLO3dCQUVMLEtBQUs7bUJBRUwsS0FBSzt5QkFFTCxNQUFNOzRCQUlOLEtBQUs7cUJBS0wsS0FBSzsyQkFFTCxLQUFLOzJCQUtMLEtBQUs7b0NBR0wsWUFBWSxTQUFDLHFCQUFxQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0Q29udGVudENoaWxkLFxuXHRFbGVtZW50UmVmLFxuXHRFdmVudEVtaXR0ZXIsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdFRlbXBsYXRlUmVmLFxuXHRWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmltcG9ydCB7IE92ZXJmbG93TWVudURpcmVjdGl2ZSB9IGZyb20gXCIuL292ZXJmbG93LW1lbnUuZGlyZWN0aXZlXCI7XG5cbi8qKlxuICogVGhlIE92ZXJGbG93IG1lbnUgY29tcG9uZW50IGVuY2Fwc3VsYXRlcyB0aGUgT3ZlckZsb3dNZW51IGRpcmVjdGl2ZSwgYW5kIHRoZSBtZW51IGljb25vZ3JhcGh5IGludG8gb25lIGNvbnZpZW5lbnQgY29tcG9uZW50XG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3Rvcnkvb3ZlcmZsb3ctbWVudS0tYmFzaWMpXG4gKlxuICogaHRtbDpcbiAqIGBgYFxuICogPGlibS1vdmVyZmxvdy1tZW51PlxuICpcdDxpYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24+T3B0aW9uIDE8L2libS1vdmVyZmxvdy1tZW51LW9wdGlvbj5cbiAqXHQ8aWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPk9wdGlvbiAyPC9pYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24+XG4gKiA8L2libS1vdmVyZmxvdy1tZW51PlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPW92ZXJmbG93LW1lbnUtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1vdmVyZmxvdy1tZW51XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGJ1dHRvblxuXHRcdFx0W2libU92ZXJmbG93TWVudV09XCJvcHRpb25zXCJcblx0XHRcdFtuZ0NsYXNzXT1cInsnYngtLW92ZXJmbG93LW1lbnUtLW9wZW4nOiBvcGVufVwiXG5cdFx0XHRjbGFzcz1cImJ4LS1vdmVyZmxvdy1tZW51IHt7dHJpZ2dlckNsYXNzfX1cIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJidXR0b25MYWJlbFwiXG5cdFx0XHRbZmxpcF09XCJmbGlwXCJcblx0XHRcdFtpc09wZW5dPVwib3BlblwiXG5cdFx0XHQoaXNPcGVuQ2hhbmdlKT1cImhhbmRsZU9wZW5DaGFuZ2UoJGV2ZW50KVwiXG5cdFx0XHRbb2Zmc2V0XT1cIm9mZnNldFwiXG5cdFx0XHRbd3JhcHBlckNsYXNzXT1cIndyYXBwZXJDbGFzc1wiXG5cdFx0XHRhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXG5cdFx0XHRjbGFzcz1cImJ4LS1vdmVyZmxvdy1tZW51XCJcblx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0W3BsYWNlbWVudF09XCJwbGFjZW1lbnRcIj5cblx0XHRcdDxuZy10ZW1wbGF0ZSAqbmdJZj1cImN1c3RvbVRyaWdnZXI7IGVsc2UgZGVmYXVsdEljb25cIiBbbmdUZW1wbGF0ZU91dGxldF09XCJjdXN0b21UcmlnZ2VyXCI+PC9uZy10ZW1wbGF0ZT5cblx0XHQ8L2J1dHRvbj5cblx0XHQ8bmctdGVtcGxhdGUgI29wdGlvbnM+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHQ8bmctdGVtcGxhdGUgI2RlZmF1bHRJY29uPlxuXHRcdFx0PHN2ZyBpYm1JY29uPVwib3ZlcmZsb3ctbWVudS0tdmVydGljYWxcIiBzaXplPVwiMTZcIiBjbGFzcz1cImJ4LS1vdmVyZmxvdy1tZW51X19pY29uXCI+PC9zdmc+XG5cdFx0PC9uZy10ZW1wbGF0ZT5cblx0YCxcblx0c3R5bGVzOiBbYFxuXHRcdC5ieC0tb3ZlcmZsb3ctbWVudS0tb3BlbiB7XG5cdFx0XHRvcGFjaXR5OiAxXG5cdFx0fVxuXG5cdFx0Lypcblx0XHRSb3RhdGUgdGhlIG92ZXJmbG93IG1lbnUgY29udGFpbmVyIGFzIHdlbGwgYXMgdGhlIGljb24sIHNpbmNlXG5cdFx0d2UgY2FsY3VsYXRlIG91ciBtZW51IHBvc2l0aW9uIGJhc2VkIG9uIHRoZSBjb250YWluZXIsIG5vdCB0aGUgaWNvbi5cblx0XHQqL1xuXHRcdC5ieC0tZGF0YS10YWJsZS12MiAuYngtLW92ZXJmbG93LW1lbnUge1xuXHRcdFx0dHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xuXHRcdH1cblxuXHRcdC5ieC0tZGF0YS10YWJsZS12MiAuYngtLW92ZXJmbG93LW1lbnVfX2ljb24ge1xuXHRcdFx0dHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcblx0XHR9XG5cdGBdLFxuXHRlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIE92ZXJmbG93TWVudSB7XG5cdEBJbnB1dCgpIGJ1dHRvbkxhYmVsID0gdGhpcy5pMThuLmdldCgpLk9WRVJGTE9XX01FTlUuT1ZFUkZMT1c7XG5cblx0QElucHV0KCkgZmxpcCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIHBsYWNlbWVudDogXCJib3R0b21cIiB8IFwidG9wXCIgPSBcImJvdHRvbVwiO1xuXG5cdEBJbnB1dCgpIG9wZW4gPSBmYWxzZTtcblxuXHRAT3V0cHV0KCkgb3BlbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblx0LyoqXG5cdCAqIFNldHMgdGhlIGN1c3RvbSBvdmVyZmxvdyBtZW51IHRyaWdnZXJcblx0ICovXG5cdEBJbnB1dCgpIGN1c3RvbVRyaWdnZXI6IFRlbXBsYXRlUmVmPGFueT47XG5cblx0LyoqXG5cdCAqIFRoaXMgc3BlY2lmaWVzIGFueSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBvZmZzZXQgZm9yIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGlhbG9nXG5cdCAqL1xuXHRASW5wdXQoKSBvZmZzZXQ6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcblxuXHRASW5wdXQoKSB3cmFwcGVyQ2xhc3MgPSBcIlwiO1xuXG5cdC8qKlxuXHQgKiBUaGlzIGFwcGVuZHMgYWRkaXRpb25hbCBjbGFzc2VzIHRvIHRoZSBvdmVyZmxvdyB0cmlnZ2VyL2J1dHRvbi5cblx0ICovXG5cdEBJbnB1dCgpIHRyaWdnZXJDbGFzcyA9IFwiXCI7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRAQ29udGVudENoaWxkKE92ZXJmbG93TWVudURpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlIH0pIG92ZXJmbG93TWVudURpcmVjdGl2ZTogT3ZlcmZsb3dNZW51RGlyZWN0aXZlO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgaTE4bjogSTE4bikge31cblxuXHRoYW5kbGVPcGVuQ2hhbmdlKGV2ZW50OiBib29sZWFuKSB7XG5cdFx0dGhpcy5vcGVuID0gZXZlbnQ7XG5cdFx0dGhpcy5vcGVuQ2hhbmdlLmVtaXQoZXZlbnQpO1xuXHR9XG59XG4iXX0=