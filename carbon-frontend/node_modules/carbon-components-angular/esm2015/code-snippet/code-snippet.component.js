/**
 *
 * carbon-angular v0.0.0 | code-snippet.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, ViewChild, HostListener } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
export var SnippetType;
(function (SnippetType) {
    SnippetType["single"] = "single";
    SnippetType["multi"] = "multi";
    SnippetType["inline"] = "inline";
})(SnippetType || (SnippetType = {}));
/**
 * [See demo](../../?path=/story/code-snippet--basic)
 *
 * ```html
 * <ibm-code-snippet>Code</ibm-code-snippet>
 * ```
 *
 * <example-url>../../iframe.html?id=code-snippet--basic</example-url>
 */
export class CodeSnippet {
    /**
     * Creates an instance of CodeSnippet.
     */
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * It can be `"single"`, `"multi"` or `"inline"`
         *
         */
        this.display = SnippetType.single;
        this.translations = this.i18n.get().CODE_SNIPPET;
        /**
         * Set to `"light"` to apply the light style on the code snippet.
         */
        this.theme = "dark";
        /**
         * Text displayed in the tooltip when user clicks button to copy code.
         *
         */
        this.feedbackText = this.translations.COPIED;
        /**
         * Time in miliseconds to keep the feedback tooltip displayed.
         *
         */
        this.feedbackTimeout = 2000;
        this.expanded = false;
        this.skeleton = false;
        this.snippetClass = true;
        this.showFeedback = false;
        this.hasExpandButton = null;
        CodeSnippet.codeSnippetCount++;
    }
    get snippetSingleClass() {
        return this.display === SnippetType.single;
    }
    get snippetMultiClass() {
        return this.display === SnippetType.multi;
    }
    get snippetInlineClass() {
        return this.display === SnippetType.inline;
    }
    get snippetInlineLightClass() {
        return this.display === SnippetType.inline && this.theme === "light";
    }
    get btnCopyClass() {
        return this.display === SnippetType.inline;
    }
    get displayStyle() {
        return this.display !== SnippetType.inline ? "block" : null;
    }
    get attrType() {
        return this.display === SnippetType.inline ? "button" : null;
    }
    get shouldShowExpandButton() {
        // Checks if `hasExpand` button has been initialized in `AfterViewInit` before detecting whether or not to
        // show the expand button when the code displayed in the component changes during the life of the component.
        // This is to avoid the `ExpressionChangedAfterItHasBeenCheckedError`.
        if (this.hasExpandButton === null) {
            return this.hasExpandButton;
        }
        return this.canExpand();
    }
    toggleSnippetExpansion() {
        this.expanded = !this.expanded;
    }
    /**
     * Copies the code from the `<code>` block to clipboard.
     *
     */
    copyCode() {
        // create invisible, uneditable textarea with our code in it
        const textarea = document.createElement("textarea");
        textarea.value = this.code.nativeElement.innerText || this.code.nativeElement.textContent;
        textarea.setAttribute("readonly", "");
        textarea.style.position = "absolute";
        textarea.style.right = "-99999px";
        document.body.appendChild(textarea);
        // save user selection
        const selected = document.getSelection().rangeCount ? document.getSelection().getRangeAt(0) : null;
        // copy to clipboard
        textarea.select();
        document.execCommand("copy");
        // remove textarea
        document.body.removeChild(textarea);
        // restore user selection
        if (selected) {
            document.getSelection().removeAllRanges();
            document.getSelection().addRange(selected);
        }
    }
    onCopyButtonClicked() {
        this.copyCode();
        this.showFeedback = true;
        setTimeout(() => {
            this.showFeedback = false;
        }, this.feedbackTimeout);
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.canExpand()) {
                this.hasExpandButton = true;
            }
            else {
                this.hasExpandButton = false;
            }
        });
    }
    /**
     * Inline code snippet acts as button and makes the whole component clickable.
     *
     * This handles clicks in that case.
     */
    hostClick() {
        if (this.display !== SnippetType.inline) {
            return;
        }
        this.onCopyButtonClicked();
    }
    canExpand() {
        return (this.code && this.code.nativeElement.getBoundingClientRect().height > 255) && this.display === "multi";
    }
}
/**
 * Variable used for creating unique ids for code-snippet components.
 */
CodeSnippet.codeSnippetCount = 0;
CodeSnippet.decorators = [
    { type: Component, args: [{
                selector: "ibm-code-snippet",
                template: `
		<ng-container *ngIf="display === 'inline'; else notInline">
			<ng-container *ngTemplateOutlet="codeTemplate"></ng-container>
			<ng-container *ngTemplateOutlet="feedbackTemplate"></ng-container>
		</ng-container>

		<ng-template #notInline>
			<div class="bx--snippet-container" [attr.aria-label]="translations.CODE_SNIPPET_TEXT">
				<ng-container *ngIf="skeleton">
					<span *ngIf="display === 'single'; else multiSkeleton"></span>
					<ng-template #multiSkeleton>
						<span></span>
						<span></span>
						<span></span>
					</ng-template>
				</ng-container>
				<pre *ngIf="!skeleton"><ng-container *ngTemplateOutlet="codeTemplate"></ng-container></pre>
			</div>
			<button
				*ngIf="!skeleton"
				class="bx--snippet-button"
				[attr.aria-label]="translations.COPY_CODE"
				(click)="onCopyButtonClicked()"
				tabindex="0">
				<svg ibmIcon="copy" size="16" class="bx--snippet__icon"></svg>
				<ng-container *ngTemplateOutlet="feedbackTemplate"></ng-container>
			</button>
			<button
				*ngIf="shouldShowExpandButton"
				class="bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand"
				(click)="toggleSnippetExpansion()"
				type="button">
				<span class="bx--snippet-btn--text">{{expanded ? translations.SHOW_LESS : translations.SHOW_MORE}}</span>
				<svg ibmIcon="chevron--down" size="16" class="bx--icon-chevron--down" [ariaLabel]="translations.SHOW_MORE_ICON"></svg>
			</button>
		</ng-template>

		<ng-template #codeTemplate>
			<code #code><ng-content></ng-content></code>
		</ng-template>

		<ng-template #feedbackTemplate>
			<div
			class="bx--btn--copy__feedback"
			[ngClass]="{
				'bx--btn--copy__feedback--displayed': showFeedback
			}"
			[attr.data-feedback]="feedbackText">
			</div>
		</ng-template>
	`
            }] }
];
/** @nocollapse */
CodeSnippet.ctorParameters = () => [
    { type: I18n }
];
CodeSnippet.propDecorators = {
    display: [{ type: Input }],
    translations: [{ type: Input }],
    theme: [{ type: Input }],
    feedbackText: [{ type: Input }],
    feedbackTimeout: [{ type: Input }],
    expanded: [{ type: HostBinding, args: ["class.bx--snippet--expand",] }, { type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    snippetClass: [{ type: HostBinding, args: ["class.bx--snippet",] }],
    snippetSingleClass: [{ type: HostBinding, args: ["class.bx--snippet--single",] }],
    snippetMultiClass: [{ type: HostBinding, args: ["class.bx--snippet--multi",] }],
    snippetInlineClass: [{ type: HostBinding, args: ["class.bx--snippet--inline",] }],
    snippetInlineLightClass: [{ type: HostBinding, args: ["class.bx--snippet--light",] }],
    btnCopyClass: [{ type: HostBinding, args: ["class.bx--btn--copy",] }],
    displayStyle: [{ type: HostBinding, args: ["style.display",] }],
    attrType: [{ type: HostBinding, args: ["attr.type",] }],
    code: [{ type: ViewChild, args: ["code", { static: false },] }],
    hostClick: [{ type: HostListener, args: ["click",] }]
};
//# sourceMappingURL=data:application/json;base64,