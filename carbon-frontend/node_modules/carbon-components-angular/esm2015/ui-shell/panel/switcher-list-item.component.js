/**
 *
 * carbon-angular v0.0.0 | switcher-list-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, Optional, HostBinding } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 * Represents an item in a switcher list.
 */
export class SwitcherListItem {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Enables the "active" state for an item. Commonly used to indicate the current page or selection.
         */
        this.active = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this.itemClass = true;
        this.itemRole = "listitem";
        this._href = "javascript:void(0)";
        this._target = "";
    }
    /**
     * Optional link for the underlying anchor.
     */
    set href(value) {
        this._href = value;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    /**
     * Optional target for the underlying anchor.
     */
    set target(value) {
        this._target = value;
    }
    get target() {
        return this._target;
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
SwitcherListItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-switcher-list-item",
                template: `
		<a
			class="bx--switcher__item-link"
			[ngClass]="{
				'bx--switcher__item-link--selected': active
			}"
			[href]="href"
			[target]="target"
			(click)="navigate($event)">
			<ng-content></ng-content>
		</a>
	`
            }] }
];
/** @nocollapse */
SwitcherListItem.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
SwitcherListItem.propDecorators = {
    active: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    href: [{ type: Input }],
    navigation: [{ type: Output }],
    target: [{ type: Input }],
    itemClass: [{ type: HostBinding, args: ["class.bx--switcher__item",] }],
    itemRole: [{ type: HostBinding, args: ["attr.role",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoZXItbGlzdC1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJwYW5lbC9zd2l0Y2hlci1saXN0LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osUUFBUSxFQUNSLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFXLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDOztHQUVHO0FBZ0JILE1BQU0sT0FBTyxnQkFBZ0I7SUFvRDVCLFlBQXNCLFlBQTBCLEVBQXdCLE1BQWM7UUFBaEUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBd0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQW5EdEY7O1dBRUc7UUFDTSxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBcUJ4Qjs7V0FFRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQWlCbkIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUVoQyxhQUFRLEdBQUcsVUFBVSxDQUFDO1FBRXRDLFVBQUssR0FBRyxvQkFBb0IsQ0FBQztRQUM3QixZQUFPLEdBQUcsRUFBRSxDQUFDO0lBRW1FLENBQUM7SUFsQzNGOztPQUVHO0lBQ0gsSUFBYSxJQUFJLENBQUMsS0FBYTtRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBT0QsSUFBSSxJQUFJO1FBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFhLE1BQU0sQ0FBQyxLQUFhO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckIsQ0FBQztJQVdELFFBQVEsQ0FBQyxLQUFLO1FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDOUIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO0lBQ0YsQ0FBQzs7O1lBM0VELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0VBV1Q7YUFDRDs7OztZQXBCUSxZQUFZO1lBQ1osTUFBTSx1QkF3RXFDLFFBQVE7OztxQkFoRDFELEtBQUs7b0JBTUwsS0FBSzswQkFNTCxLQUFLO21CQUtMLEtBQUs7eUJBT0wsTUFBTTtxQkFTTixLQUFLO3dCQVFMLFdBQVcsU0FBQywwQkFBMEI7dUJBRXRDLFdBQVcsU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdE9wdGlvbmFsLFxuXHRIb3N0QmluZGluZ1xufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlVXJsIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGl0ZW0gaW4gYSBzd2l0Y2hlciBsaXN0LlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXN3aXRjaGVyLWxpc3QtaXRlbVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxhXG5cdFx0XHRjbGFzcz1cImJ4LS1zd2l0Y2hlcl9faXRlbS1saW5rXCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2J4LS1zd2l0Y2hlcl9faXRlbS1saW5rLS1zZWxlY3RlZCc6IGFjdGl2ZVxuXHRcdFx0fVwiXG5cdFx0XHRbaHJlZl09XCJocmVmXCJcblx0XHRcdFt0YXJnZXRdPVwidGFyZ2V0XCJcblx0XHRcdChjbGljayk9XCJuYXZpZ2F0ZSgkZXZlbnQpXCI+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9hPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFN3aXRjaGVyTGlzdEl0ZW0ge1xuXHQvKipcblx0ICogRW5hYmxlcyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSBmb3IgYW4gaXRlbS4gQ29tbW9ubHkgdXNlZCB0byBpbmRpY2F0ZSB0aGUgY3VycmVudCBwYWdlIG9yIHNlbGVjdGlvbi5cblx0ICovXG5cdEBJbnB1dCgpIGFjdGl2ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBBcnJheSBvZiBjb21tYW5kcyB0byBzZW5kIHRvIHRoZSByb3V0ZXIgd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICogU2VlOiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXIjbmF2aWdhdGVcblx0ICovXG5cdEBJbnB1dCgpIHJvdXRlOiBhbnlbXTtcblxuXHQvKipcblx0ICogUm91dGVyIG9wdGlvbnMuIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgcm91dGVgXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZUV4dHJhczogYW55O1xuXG5cdC8qKlxuXHQgKiBPcHRpb25hbCBsaW5rIGZvciB0aGUgdW5kZXJseWluZyBhbmNob3IuXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgaHJlZih2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5faHJlZiA9IHZhbHVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVtaXRzIHRoZSBuYXZpZ2F0aW9uIHN0YXR1cyBwcm9taXNlIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqL1xuXHRAT3V0cHV0KCkgbmF2aWdhdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8UHJvbWlzZTxib29sZWFuPj4oKTtcblxuXHRnZXQgaHJlZigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFVybCh0aGlzLl9ocmVmKSBhcyBzdHJpbmc7XG5cdH1cblxuXHQvKipcblx0ICogT3B0aW9uYWwgdGFyZ2V0IGZvciB0aGUgdW5kZXJseWluZyBhbmNob3IuXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgdGFyZ2V0KHZhbHVlOiBzdHJpbmcpIHtcblx0XHR0aGlzLl90YXJnZXQgPSB2YWx1ZTtcblx0fVxuXG5cdGdldCB0YXJnZXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldDtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zd2l0Y2hlcl9faXRlbVwiKSBpdGVtQ2xhc3MgPSB0cnVlO1xuXG5cdEBIb3N0QmluZGluZyhcImF0dHIucm9sZVwiKSBpdGVtUm9sZSA9IFwibGlzdGl0ZW1cIjtcblxuXHRwcm90ZWN0ZWQgX2hyZWYgPSBcImphdmFzY3JpcHQ6dm9pZCgwKVwiO1xuXHRwcm90ZWN0ZWQgX3RhcmdldCA9IFwiXCI7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIpIHsgfVxuXG5cdG5hdmlnYXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucm91dGVyICYmIHRoaXMucm91dGUpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXMgPSB0aGlzLnJvdXRlci5uYXZpZ2F0ZSh0aGlzLnJvdXRlLCB0aGlzLnJvdXRlRXh0cmFzKTtcblx0XHRcdHRoaXMubmF2aWdhdGlvbi5lbWl0KHN0YXR1cyk7XG5cdFx0fVxuXHR9XG59XG4iXX0=