/**
 *
 * carbon-angular v0.0.0 | sidenav-menu.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ContentChildren, Input, QueryList } from "@angular/core";
import { SideNavItem } from "./sidenav-item.component";
import { Subscription } from "rxjs";
/**
 * `SideNavMenu` provides a method to group `SideNavItem`s under a common heading.
 */
export class SideNavMenu {
    constructor() {
        /**
         * Controls the visibility of the child `SideNavItem`s
         */
        this.expanded = false;
        /**
         * Controls the active status indicator on the menu if there is an active
         * child sidenav item.
         */
        this.hasActiveChild = false;
        this.activeItemsSubscription = new Subscription();
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.sidenavItems.forEach(item => {
                item.isSubMenu = true;
                this.findActiveChildren();
                const activeItemSubscription = item.selected.subscribe(() => {
                    this.findActiveChildren();
                });
                this.activeItemsSubscription.add(activeItemSubscription);
            });
            this.sidenavItems.changes.subscribe(() => {
                this.sidenavItems.forEach(item => {
                    item.isSubMenu = true;
                    this.findActiveChildren();
                    const activeItemSubscription = item.selected.subscribe(() => {
                        this.findActiveChildren();
                    });
                    this.activeItemsSubscription.add(activeItemSubscription);
                });
            });
        });
    }
    ngOnDestroy() {
        this.activeItemsSubscription.unsubscribe();
    }
    toggle() {
        this.expanded = !this.expanded;
    }
    findActiveChildren() {
        if (this.sidenavItems.some(item => item.active)) {
            this.hasActiveChild = true;
        }
        else {
            this.hasActiveChild = false;
        }
    }
}
SideNavMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-sidenav-menu",
                template: `
		<li
			class="bx--side-nav__item bx--side-nav__item--icon"
			[ngClass]="{ 'bx--side-nav__item--active': hasActiveChild }">
			<button
				(click)="toggle()"
				class="bx--side-nav__submenu"
				aria-haspopup="true"
				[attr.aria-expanded]="expanded"
				type="button">
				<div class="bx--side-nav__icon">
					<ng-content select="[icon]"></ng-content>
				</div>
				<span class="bx--side-nav__submenu-title">{{title}}</span>
				<div class="bx--side-nav__icon bx--side-nav__icon--small bx--side-nav__submenu-chevron">
					<svg
						focusable="false"
						preserveAspectRatio="xMidYMid meet"
						style="will-change: transform;"
						xmlns="http://www.w3.org/2000/svg"
						width="20"
						height="20"
						viewBox="0 0 32 32"
						aria-hidden="true">
						<path d="M16 22L6 12l1.4-1.4 8.6 8.6 8.6-8.6L26 12z"></path>
					</svg>
				</div>
			</button>
			<ul class="bx--side-nav__menu" role="menu">
				<ng-content></ng-content>
				<ng-container *ngFor="let menuItem of menuItems">
					<ibm-sidenav-item
						[href]="menuItem.href"
						[route]="menuItem.route"
						[routeExtras]="menuItem.routeExtras"
						[isSubMenu]="true">
						{{ menuItem.content }}
					</ibm-sidenav-item>
				</ng-container>
			</ul>
		</li>
	`
            }] }
];
SideNavMenu.propDecorators = {
    title: [{ type: Input }],
    expanded: [{ type: Input }],
    hasActiveChild: [{ type: Input }],
    menuItems: [{ type: Input }],
    sidenavItems: [{ type: ContentChildren, args: [SideNavItem,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1tZW51LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJzaWRlbmF2L3NpZGVuYXYtbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVOLFNBQVMsRUFDVCxlQUFlLEVBQ2YsS0FBSyxFQUNMLFNBQVMsRUFFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUlwQzs7R0FFRztBQThDSCxNQUFNLE9BQU8sV0FBVztJQTdDeEI7UUFrREM7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOzs7V0FHRztRQUNNLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBTXRCLDRCQUF1QixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUF5Q3hELENBQUM7SUF2Q0Esa0JBQWtCO1FBQ2pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUMxQixNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtvQkFDM0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7Z0JBQzNCLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUMxRCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztvQkFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7b0JBQzFCLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO3dCQUMzRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztvQkFDM0IsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2dCQUMxRCxDQUFDLENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsTUFBTTtRQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFFUyxrQkFBa0I7UUFDM0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNoRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUMzQjthQUFNO1lBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDRixDQUFDOzs7WUF4R0QsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF5Q1Q7YUFDRDs7O29CQUtDLEtBQUs7dUJBSUwsS0FBSzs2QkFLTCxLQUFLO3dCQUVMLEtBQUs7MkJBRUwsZUFBZSxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRBZnRlckNvbnRlbnRJbml0LFxuXHRDb21wb25lbnQsXG5cdENvbnRlbnRDaGlsZHJlbixcblx0SW5wdXQsXG5cdFF1ZXJ5TGlzdCxcblx0T25EZXN0cm95XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTaWRlTmF2SXRlbSB9IGZyb20gXCIuL3NpZGVuYXYtaXRlbS5jb21wb25lbnRcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBTaWRlTmF2SXRlbUludGVyZmFjZSB9IGZyb20gXCIuL3NpZGVuYXYtaXRlbS5pbnRlcmZhY2VcIjtcblxuXG4vKipcbiAqIGBTaWRlTmF2TWVudWAgcHJvdmlkZXMgYSBtZXRob2QgdG8gZ3JvdXAgYFNpZGVOYXZJdGVtYHMgdW5kZXIgYSBjb21tb24gaGVhZGluZy5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1zaWRlbmF2LW1lbnVcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bGlcblx0XHRcdGNsYXNzPVwiYngtLXNpZGUtbmF2X19pdGVtIGJ4LS1zaWRlLW5hdl9faXRlbS0taWNvblwiXG5cdFx0XHRbbmdDbGFzc109XCJ7ICdieC0tc2lkZS1uYXZfX2l0ZW0tLWFjdGl2ZSc6IGhhc0FjdGl2ZUNoaWxkIH1cIj5cblx0XHRcdDxidXR0b25cblx0XHRcdFx0KGNsaWNrKT1cInRvZ2dsZSgpXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tc2lkZS1uYXZfX3N1Ym1lbnVcIlxuXHRcdFx0XHRhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXG5cdFx0XHRcdFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiZXhwYW5kZWRcIlxuXHRcdFx0XHR0eXBlPVwiYnV0dG9uXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJieC0tc2lkZS1uYXZfX2ljb25cIj5cblx0XHRcdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJbaWNvbl1cIj48L25nLWNvbnRlbnQ+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1zaWRlLW5hdl9fc3VibWVudS10aXRsZVwiPnt7dGl0bGV9fTwvc3Bhbj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImJ4LS1zaWRlLW5hdl9faWNvbiBieC0tc2lkZS1uYXZfX2ljb24tLXNtYWxsIGJ4LS1zaWRlLW5hdl9fc3VibWVudS1jaGV2cm9uXCI+XG5cdFx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdFx0Zm9jdXNhYmxlPVwiZmFsc2VcIlxuXHRcdFx0XHRcdFx0cHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIlxuXHRcdFx0XHRcdFx0c3R5bGU9XCJ3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1wiXG5cdFx0XHRcdFx0XHR4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcblx0XHRcdFx0XHRcdHdpZHRoPVwiMjBcIlxuXHRcdFx0XHRcdFx0aGVpZ2h0PVwiMjBcIlxuXHRcdFx0XHRcdFx0dmlld0JveD1cIjAgMCAzMiAzMlwiXG5cdFx0XHRcdFx0XHRhcmlhLWhpZGRlbj1cInRydWVcIj5cblx0XHRcdFx0XHRcdDxwYXRoIGQ9XCJNMTYgMjJMNiAxMmwxLjQtMS40IDguNiA4LjYgOC42LTguNkwyNiAxMnpcIj48L3BhdGg+XG5cdFx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8dWwgY2xhc3M9XCJieC0tc2lkZS1uYXZfX21lbnVcIiByb2xlPVwibWVudVwiPlxuXHRcdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHRcdDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG1lbnVJdGVtIG9mIG1lbnVJdGVtc1wiPlxuXHRcdFx0XHRcdDxpYm0tc2lkZW5hdi1pdGVtXG5cdFx0XHRcdFx0XHRbaHJlZl09XCJtZW51SXRlbS5ocmVmXCJcblx0XHRcdFx0XHRcdFtyb3V0ZV09XCJtZW51SXRlbS5yb3V0ZVwiXG5cdFx0XHRcdFx0XHRbcm91dGVFeHRyYXNdPVwibWVudUl0ZW0ucm91dGVFeHRyYXNcIlxuXHRcdFx0XHRcdFx0W2lzU3ViTWVudV09XCJ0cnVlXCI+XG5cdFx0XHRcdFx0XHR7eyBtZW51SXRlbS5jb250ZW50IH19XG5cdFx0XHRcdFx0PC9pYm0tc2lkZW5hdi1pdGVtPlxuXHRcdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdDwvdWw+XG5cdFx0PC9saT5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBTaWRlTmF2TWVudSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cdC8qKlxuXHQgKiBIZWFkaW5nIGZvciB0aGUgZ29ydXBcblx0ICovXG5cdEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBDb250cm9scyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY2hpbGQgYFNpZGVOYXZJdGVtYHNcblx0ICovXG5cdEBJbnB1dCgpIGV4cGFuZGVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBDb250cm9scyB0aGUgYWN0aXZlIHN0YXR1cyBpbmRpY2F0b3Igb24gdGhlIG1lbnUgaWYgdGhlcmUgaXMgYW4gYWN0aXZlXG5cdCAqIGNoaWxkIHNpZGVuYXYgaXRlbS5cblx0ICovXG5cdEBJbnB1dCgpIGhhc0FjdGl2ZUNoaWxkID0gZmFsc2U7XG5cblx0QElucHV0KCkgbWVudUl0ZW1zOiBTaWRlTmF2SXRlbUludGVyZmFjZVtdO1xuXG5cdEBDb250ZW50Q2hpbGRyZW4oU2lkZU5hdkl0ZW0pIHNpZGVuYXZJdGVtczogUXVlcnlMaXN0PFNpZGVOYXZJdGVtPjtcblxuXHRwcm90ZWN0ZWQgYWN0aXZlSXRlbXNTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCkge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5zaWRlbmF2SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdFx0aXRlbS5pc1N1Yk1lbnUgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmZpbmRBY3RpdmVDaGlsZHJlbigpO1xuXHRcdFx0XHRjb25zdCBhY3RpdmVJdGVtU3Vic2NyaXB0aW9uID0gaXRlbS5zZWxlY3RlZC5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZmluZEFjdGl2ZUNoaWxkcmVuKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0aGlzLmFjdGl2ZUl0ZW1zU3Vic2NyaXB0aW9uLmFkZChhY3RpdmVJdGVtU3Vic2NyaXB0aW9uKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnNpZGVuYXZJdGVtcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2lkZW5hdkl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRcdFx0aXRlbS5pc1N1Yk1lbnUgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZmluZEFjdGl2ZUNoaWxkcmVuKCk7XG5cdFx0XHRcdFx0Y29uc3QgYWN0aXZlSXRlbVN1YnNjcmlwdGlvbiA9IGl0ZW0uc2VsZWN0ZWQuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuZmluZEFjdGl2ZUNoaWxkcmVuKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5hY3RpdmVJdGVtc1N1YnNjcmlwdGlvbi5hZGQoYWN0aXZlSXRlbVN1YnNjcmlwdGlvbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpIHtcblx0XHR0aGlzLmFjdGl2ZUl0ZW1zU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdH1cblxuXHR0b2dnbGUoKSB7XG5cdFx0dGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuXHR9XG5cblx0cHJvdGVjdGVkIGZpbmRBY3RpdmVDaGlsZHJlbigpIHtcblx0XHRpZiAodGhpcy5zaWRlbmF2SXRlbXMuc29tZShpdGVtID0+IGl0ZW0uYWN0aXZlKSkge1xuXHRcdFx0dGhpcy5oYXNBY3RpdmVDaGlsZCA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuaGFzQWN0aXZlQ2hpbGQgPSBmYWxzZTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==