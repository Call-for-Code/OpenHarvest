/**
 *
 * carbon-angular v0.0.0 | sidenav-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 * `SideNavItem` can either be a child of `SideNav` or `SideNavMenu`
 */
export class SideNavItem {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Toggles the active (current page) state for the link.
         */
        this.active = false;
        this.isSubMenu = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        /**
         * Emits when `active` input is changed. This is mainly used to indicate to any parent menu items that a
         * child sidenav item is active or not active.
         */
        this.selected = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    /**
     * Link for the item. NOTE: *do not* pass unsafe or untrusted values, this has the potential to open you up to XSS attacks
     */
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    ngOnChanges(changes) {
        if (changes.active) {
            this.selected.emit(this.active);
        }
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
SideNavItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-sidenav-item",
                template: `
		<li [ngClass]="{
			'bx--side-nav__item': !isSubMenu,
			'bx--side-nav__menu-item': isSubMenu
		}"
		[attr.role]="(isSubMenu ? 'listitem' : null)">
			<a
				class="bx--side-nav__link"
				[href]="href"
				[attr.role]="(isSubMenu ? 'menuitem' : null)"
				[attr.aria-current]="(active ? 'page' : null)"
				[title]="title"
				(click)="navigate($event)">
				<div *ngIf="!isSubMenu" class="bx--side-nav__icon">
					<ng-content select="svg, [icon]"></ng-content>
				</div>
				<span class="bx--side-nav__link-text">
					<ng-content></ng-content>
				</span>
			</a>
		</li>
	`
            }] }
];
/** @nocollapse */
SideNavItem.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
SideNavItem.propDecorators = {
    href: [{ type: Input }],
    active: [{ type: Input }],
    route: [{ type: Input }],
    isSubMenu: [{ type: Input }],
    routeExtras: [{ type: Input }],
    title: [{ type: Input }],
    navigation: [{ type: Output }],
    selected: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJzaWRlbmF2L3NpZGVuYXYtaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsUUFBUSxFQUNSLE1BQU0sRUFDTixZQUFZLEVBRVosTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6Qzs7R0FFRztBQTBCSCxNQUFNLE9BQU8sV0FBVztJQXFEdkIsWUFBc0IsWUFBMEIsRUFBd0IsTUFBYztRQUFoRSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUF3QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBckN0Rjs7V0FFRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFRZixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBYTNCOztXQUVHO1FBQ08sZUFBVSxHQUFHLElBQUksWUFBWSxFQUFvQixDQUFDO1FBRTVEOzs7V0FHRztRQUNPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRXZDLFVBQUssR0FBRyxvQkFBb0IsQ0FBQztJQUVrRCxDQUFDO0lBcEQxRjs7T0FFRztJQUNILElBQWEsSUFBSSxDQUFDLENBQVM7UUFDMUIsNkRBQTZEO1FBQzdELElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNwQixPQUFPO1NBQ1A7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQztJQUN2RSxDQUFDO0lBeUNELFdBQVcsQ0FBQyxPQUFPO1FBQ2xCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEM7SUFDRixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQUs7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM5QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0I7SUFDRixDQUFDOzs7WUE1RkQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBcUJUO2FBQ0Q7Ozs7WUE5QlEsWUFBWTtZQUNaLE1BQU0sdUJBbUZxQyxRQUFROzs7bUJBakQxRCxLQUFLO3FCQWVMLEtBQUs7b0JBTUwsS0FBSzt3QkFFTCxLQUFLOzBCQU1MLEtBQUs7b0JBS0wsS0FBSzt5QkFLTCxNQUFNO3VCQU1OLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPcHRpb25hbCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdE9uQ2hhbmdlc1xufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcblxuLyoqXG4gKiBgU2lkZU5hdkl0ZW1gIGNhbiBlaXRoZXIgYmUgYSBjaGlsZCBvZiBgU2lkZU5hdmAgb3IgYFNpZGVOYXZNZW51YFxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXNpZGVuYXYtaXRlbVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxsaSBbbmdDbGFzc109XCJ7XG5cdFx0XHQnYngtLXNpZGUtbmF2X19pdGVtJzogIWlzU3ViTWVudSxcblx0XHRcdCdieC0tc2lkZS1uYXZfX21lbnUtaXRlbSc6IGlzU3ViTWVudVxuXHRcdH1cIlxuXHRcdFthdHRyLnJvbGVdPVwiKGlzU3ViTWVudSA/ICdsaXN0aXRlbScgOiBudWxsKVwiPlxuXHRcdFx0PGFcblx0XHRcdFx0Y2xhc3M9XCJieC0tc2lkZS1uYXZfX2xpbmtcIlxuXHRcdFx0XHRbaHJlZl09XCJocmVmXCJcblx0XHRcdFx0W2F0dHIucm9sZV09XCIoaXNTdWJNZW51ID8gJ21lbnVpdGVtJyA6IG51bGwpXCJcblx0XHRcdFx0W2F0dHIuYXJpYS1jdXJyZW50XT1cIihhY3RpdmUgPyAncGFnZScgOiBudWxsKVwiXG5cdFx0XHRcdFt0aXRsZV09XCJ0aXRsZVwiXG5cdFx0XHRcdChjbGljayk9XCJuYXZpZ2F0ZSgkZXZlbnQpXCI+XG5cdFx0XHRcdDxkaXYgKm5nSWY9XCIhaXNTdWJNZW51XCIgY2xhc3M9XCJieC0tc2lkZS1uYXZfX2ljb25cIj5cblx0XHRcdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJzdmcsIFtpY29uXVwiPjwvbmctY29udGVudD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLXNpZGUtbmF2X19saW5rLXRleHRcIj5cblx0XHRcdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHRcdDwvc3Bhbj5cblx0XHRcdDwvYT5cblx0XHQ8L2xpPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFNpZGVOYXZJdGVtIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblx0LyoqXG5cdCAqIExpbmsgZm9yIHRoZSBpdGVtLiBOT1RFOiAqZG8gbm90KiBwYXNzIHVuc2FmZSBvciB1bnRydXN0ZWQgdmFsdWVzLCB0aGlzIGhhcyB0aGUgcG90ZW50aWFsIHRvIG9wZW4geW91IHVwIHRvIFhTUyBhdHRhY2tzXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgaHJlZih2OiBzdHJpbmcpIHtcblx0XHQvLyBOZWVkZWQgd2hlbiBjb21wb25lbnQgaXMgY3JlYXRlZCBkeW5hbWljYWxseSB3aXRoIGEgbW9kZWwuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9ocmVmID0gdjtcblx0fVxuXG5cdGdldCBocmVmKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKHRoaXMuX2hyZWYpIGFzIHN0cmluZztcblx0fVxuXG5cdC8qKlxuXHQgKiBUb2dnbGVzIHRoZSBhY3RpdmUgKGN1cnJlbnQgcGFnZSkgc3RhdGUgZm9yIHRoZSBsaW5rLlxuXHQgKi9cblx0QElucHV0KCkgYWN0aXZlID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEFycmF5IG9mIGNvbW1hbmRzIHRvIHNlbmQgdG8gdGhlIHJvdXRlciB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGU6IGFueVtdO1xuXG5cdEBJbnB1dCgpIGlzU3ViTWVudSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBSb3V0ZXIgb3B0aW9ucy4gVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGByb3V0ZWBcblx0ICogU2VlOiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXIjbmF2aWdhdGVcblx0ICovXG5cdEBJbnB1dCgpIHJvdXRlRXh0cmFzOiBhbnk7XG5cblx0LyoqXG5cdCAqIFRpdGxlIGF0dHJpYnV0ZSBvZiB0aGUgYW5jaG9yIGVsZW1lbnQuXG5cdCAqL1xuXHRASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgbmF2aWdhdGlvbiBzdGF0dXMgcHJvbWlzZSB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKi9cblx0QE91dHB1dCgpIG5hdmlnYXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyPFByb21pc2U8Ym9vbGVhbj4+KCk7XG5cblx0LyoqXG5cdCAqIEVtaXRzIHdoZW4gYGFjdGl2ZWAgaW5wdXQgaXMgY2hhbmdlZC4gVGhpcyBpcyBtYWlubHkgdXNlZCB0byBpbmRpY2F0ZSB0byBhbnkgcGFyZW50IG1lbnUgaXRlbXMgdGhhdCBhXG5cdCAqIGNoaWxkIHNpZGVuYXYgaXRlbSBpcyBhY3RpdmUgb3Igbm90IGFjdGl2ZS5cblx0ICovXG5cdEBPdXRwdXQoKSBzZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuXHRwcm90ZWN0ZWQgX2hyZWYgPSBcImphdmFzY3JpcHQ6dm9pZCgwKVwiO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgQE9wdGlvbmFsKCkgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyKSB7fVxuXG5cdG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcblx0XHRpZiAoY2hhbmdlcy5hY3RpdmUpIHtcblx0XHRcdHRoaXMuc2VsZWN0ZWQuZW1pdCh0aGlzLmFjdGl2ZSk7XG5cdFx0fVxuXHR9XG5cblx0bmF2aWdhdGUoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5yb3V0ZXIgJiYgdGhpcy5yb3V0ZSkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGNvbnN0IHN0YXR1cyA9IHRoaXMucm91dGVyLm5hdmlnYXRlKHRoaXMucm91dGUsIHRoaXMucm91dGVFeHRyYXMpO1xuXHRcdFx0dGhpcy5uYXZpZ2F0aW9uLmVtaXQoc3RhdHVzKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==