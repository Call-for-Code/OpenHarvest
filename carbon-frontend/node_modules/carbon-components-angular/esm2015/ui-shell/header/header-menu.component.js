/**
 *
 * carbon-angular v0.0.0 | header-menu.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostListener, ElementRef, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
/**
 * Dropdown menu container for navigation items.
 */
export class HeaderMenu {
    constructor(domSanitizer, elementRef) {
        this.domSanitizer = domSanitizer;
        this.elementRef = elementRef;
        this.trigger = "click";
        this.expanded = false;
        this._href = "javascript:void(0)";
    }
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    onClick() {
        if (this.trigger === "click") {
            this.expanded = !this.expanded;
        }
    }
    onMouseOver() {
        if (this.trigger === "mouseover") {
            this.expanded = true;
        }
    }
    onMouseOut() {
        if (this.trigger === "mouseover") {
            this.expanded = false;
        }
    }
    onFocusOut(event) {
        if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {
            this.expanded = false;
        }
    }
}
HeaderMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-menu",
                template: `
		<li
			class="bx--header__submenu"
			style="height: 100%">
			<a
				class="bx--header__menu-item bx--header__menu-title"
				[href]="href"
				role="menuitem"
				tabindex="0"
				aria-haspopup="true"
				[attr.aria-expanded]="expanded">
				{{title}}
				<ng-template *ngIf="icon; else defaultIcon" [ngTemplateOutlet]="icon"></ng-template>
				<ng-template #defaultIcon>
					<svg class="bx--header__menu-arrow" width="12" height="7" aria-hidden="true">
						<path d="M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z" />
					</svg>
				</ng-template>
			</a>
			<ul class="bx--header__menu" role="menu" [attr.aria-label]="title">
				<ng-content></ng-content>
				<ng-container *ngFor="let headerItem of headerItems">
					<ibm-header-item
						[href]="headerItem.href"
						[route]="headerItem.route"
						[routeExtras]="headerItem.routeExtras">
						{{ headerItem.content }}
					</ibm-header-item>
				</ng-container>
			</ul>
		</li>
	`
            }] }
];
/** @nocollapse */
HeaderMenu.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef }
];
HeaderMenu.propDecorators = {
    title: [{ type: Input }],
    href: [{ type: Input }],
    trigger: [{ type: Input }],
    headerItems: [{ type: Input }],
    icon: [{ type: Input }],
    onClick: [{ type: HostListener, args: ["click",] }],
    onMouseOver: [{ type: HostListener, args: ["mouseover",] }],
    onMouseOut: [{ type: HostListener, args: ["mouseout",] }],
    onFocusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91aS1zaGVsbC8iLCJzb3VyY2VzIjpbImhlYWRlci9oZWFkZXItbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3pEOztHQUVHO0FBb0NILE1BQU0sT0FBTyxVQUFVO0lBNkJ0QixZQUFzQixZQUEwQixFQUFZLFVBQXNCO1FBQTVELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVksZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWhCekUsWUFBTyxHQUEwQixPQUFPLENBQUM7UUFZM0MsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVkLFVBQUssR0FBRyxvQkFBb0IsQ0FBQztJQUUrQyxDQUFDO0lBM0J2RixJQUFhLElBQUksQ0FBQyxDQUFTO1FBQzFCLDZEQUE2RDtRQUM3RCxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDcEIsT0FBTztTQUNQO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNQLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFXLENBQUM7SUFDdkUsQ0FBQztJQW9CRCxPQUFPO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtZQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFHRCxXQUFXO1FBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNGLENBQUM7SUFHRCxVQUFVO1FBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNGLENBQUM7SUFHRCxVQUFVLENBQUMsS0FBSztRQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ2pFLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO0lBQ0YsQ0FBQzs7O1lBNUZELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUErQlQ7YUFDRDs7OztZQXhDUSxZQUFZO1lBSHBCLFVBQVU7OztvQkE2Q1QsS0FBSzttQkFDTCxLQUFLO3NCQVdMLEtBQUs7MEJBS0wsS0FBSzttQkFLTCxLQUFLO3NCQVFMLFlBQVksU0FBQyxPQUFPOzBCQU9wQixZQUFZLFNBQUMsV0FBVzt5QkFPeEIsWUFBWSxTQUFDLFVBQVU7eUJBT3ZCLFlBQVksU0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRIb3N0TGlzdGVuZXIsXG5cdEVsZW1lbnRSZWYsXG5cdFRlbXBsYXRlUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgSGVhZGVySXRlbUludGVyZmFjZSB9IGZyb20gXCIuL2hlYWRlci1uYXZpZ2F0aW9uLWl0ZW1zLmludGVyZmFjZVwiO1xuXG4vKipcbiAqIERyb3Bkb3duIG1lbnUgY29udGFpbmVyIGZvciBuYXZpZ2F0aW9uIGl0ZW1zLlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWhlYWRlci1tZW51XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGxpXG5cdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX3N1Ym1lbnVcIlxuXHRcdFx0c3R5bGU9XCJoZWlnaHQ6IDEwMCVcIj5cblx0XHRcdDxhXG5cdFx0XHRcdGNsYXNzPVwiYngtLWhlYWRlcl9fbWVudS1pdGVtIGJ4LS1oZWFkZXJfX21lbnUtdGl0bGVcIlxuXHRcdFx0XHRbaHJlZl09XCJocmVmXCJcblx0XHRcdFx0cm9sZT1cIm1lbnVpdGVtXCJcblx0XHRcdFx0dGFiaW5kZXg9XCIwXCJcblx0XHRcdFx0YXJpYS1oYXNwb3B1cD1cInRydWVcIlxuXHRcdFx0XHRbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImV4cGFuZGVkXCI+XG5cdFx0XHRcdHt7dGl0bGV9fVxuXHRcdFx0XHQ8bmctdGVtcGxhdGUgKm5nSWY9XCJpY29uOyBlbHNlIGRlZmF1bHRJY29uXCIgW25nVGVtcGxhdGVPdXRsZXRdPVwiaWNvblwiPjwvbmctdGVtcGxhdGU+XG5cdFx0XHRcdDxuZy10ZW1wbGF0ZSAjZGVmYXVsdEljb24+XG5cdFx0XHRcdFx0PHN2ZyBjbGFzcz1cImJ4LS1oZWFkZXJfX21lbnUtYXJyb3dcIiB3aWR0aD1cIjEyXCIgaGVpZ2h0PVwiN1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdFx0PHBhdGggZD1cIk02LjAwMiA1LjU1TDExLjI3IDBsLjcyNi42ODVMNi4wMDMgNyAwIC42ODUuNzI2IDB6XCIgLz5cblx0XHRcdFx0XHQ8L3N2Zz5cblx0XHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHRcdDwvYT5cblx0XHRcdDx1bCBjbGFzcz1cImJ4LS1oZWFkZXJfX21lbnVcIiByb2xlPVwibWVudVwiIFthdHRyLmFyaWEtbGFiZWxdPVwidGl0bGVcIj5cblx0XHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBoZWFkZXJJdGVtIG9mIGhlYWRlckl0ZW1zXCI+XG5cdFx0XHRcdFx0PGlibS1oZWFkZXItaXRlbVxuXHRcdFx0XHRcdFx0W2hyZWZdPVwiaGVhZGVySXRlbS5ocmVmXCJcblx0XHRcdFx0XHRcdFtyb3V0ZV09XCJoZWFkZXJJdGVtLnJvdXRlXCJcblx0XHRcdFx0XHRcdFtyb3V0ZUV4dHJhc109XCJoZWFkZXJJdGVtLnJvdXRlRXh0cmFzXCI+XG5cdFx0XHRcdFx0XHR7eyBoZWFkZXJJdGVtLmNvbnRlbnQgfX1cblx0XHRcdFx0XHQ8L2libS1oZWFkZXItaXRlbT5cblx0XHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8L3VsPlxuXHRcdDwvbGk+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgSGVhZGVyTWVudSB7XG5cdEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cdEBJbnB1dCgpIHNldCBocmVmKHY6IHN0cmluZykge1xuXHRcdC8vIE5lZWRlZCB3aGVuIGNvbXBvbmVudCBpcyBjcmVhdGVkIGR5bmFtaWNhbGx5IHdpdGggYSBtb2RlbC5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX2hyZWYgPSB2O1xuXHR9XG5cblx0Z2V0IGhyZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodGhpcy5faHJlZikgYXMgc3RyaW5nO1xuXHR9XG5cdEBJbnB1dCgpIHRyaWdnZXI6IFwiY2xpY2tcIiB8IFwibW91c2VvdmVyXCIgPSBcImNsaWNrXCI7XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gY3JlYXRlIGhlYWRlciBpdGVtcyB0aHJvdWdoIGEgbW9kZWwuXG5cdCAqL1xuXHRASW5wdXQoKSBoZWFkZXJJdGVtczogSGVhZGVySXRlbUludGVyZmFjZVtdO1xuXG5cdC8qKlxuXHQgKiBPcHRpb25hbCBpY29uXG5cdCAqL1xuXHRASW5wdXQoKSBpY29uOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdHB1YmxpYyBleHBhbmRlZCA9IGZhbHNlO1xuXG5cdHByb3RlY3RlZCBfaHJlZiA9IFwiamF2YXNjcmlwdDp2b2lkKDApXCI7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cblx0QEhvc3RMaXN0ZW5lcihcImNsaWNrXCIpXG5cdG9uQ2xpY2soKSB7XG5cdFx0aWYgKHRoaXMudHJpZ2dlciA9PT0gXCJjbGlja1wiKSB7XG5cdFx0XHR0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcIm1vdXNlb3ZlclwiKVxuXHRvbk1vdXNlT3ZlcigpIHtcblx0XHRpZiAodGhpcy50cmlnZ2VyID09PSBcIm1vdXNlb3ZlclwiKSB7XG5cdFx0XHR0aGlzLmV4cGFuZGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwibW91c2VvdXRcIilcblx0b25Nb3VzZU91dCgpIHtcblx0XHRpZiAodGhpcy50cmlnZ2VyID09PSBcIm1vdXNlb3ZlclwiKSB7XG5cdFx0XHR0aGlzLmV4cGFuZGVkID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIFtcIiRldmVudFwiXSlcblx0b25Gb2N1c091dChldmVudCkge1xuXHRcdGlmICghdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpIHtcblx0XHRcdHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==