/**
 *
 * carbon-angular v0.0.0 | header.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
import { I18n } from "carbon-components-angular/i18n";
/**
 * A fixed header and navigation.
 * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
 * and global actions (generally in the form of `Panel`s).
 *
 * [See demo](../../?path=/story/ui-shell--header)
 *
 * <example-url>../../iframe.html?id=ui-shell--header</example-url>
 */
export class Header {
    constructor(i18n, domSanitizer, router) {
        this.i18n = i18n;
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Top level branding. Defaults to "IBM"
         */
        this.brand = "IBM";
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    /**
     * Optional link for the header
     */
    set href(v) {
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
Header.decorators = [
    { type: Component, args: [{
                selector: "ibm-header",
                template: `
		<header
			class="bx--header"
			[attr.aria-label]="brand + ' ' + name">
			<a
				*ngIf="skipTo"
				class="bx--skip-to-content"
				[href]="skipTo"
				tabindex="0">
				{{ i18n.get("UI_SHELL.SKIP_TO") | async }}
			</a>
			<ng-content select="ibm-hamburger"></ng-content>
			<ng-template
				*ngIf="isTemplate(brand)"
				[ngTemplateOutlet]="brand">
			</ng-template>
			<ng-container *ngIf="!isTemplate(brand)" [ngSwitch]="useRouter">
				<a
					*ngSwitchCase="false"
					class="bx--header__name"
					[href]="href"
					(click)="navigate($event)">
					<span class="bx--header__name--prefix">{{brand}}&nbsp;</span>
					{{name}}
				</a>
				<a
					*ngSwitchCase="true"
					class="bx--header__name"
					[routerLink]="route">
					<span class="bx--header__name--prefix">{{brand}}&nbsp;</span>
					{{name}}
				</a>
			</ng-container>
			<ng-content></ng-content>
		</header>
	`
            }] }
];
/** @nocollapse */
Header.ctorParameters = () => [
    { type: I18n },
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
Header.propDecorators = {
    skipTo: [{ type: Input }],
    name: [{ type: Input }],
    brand: [{ type: Input }],
    href: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    useRouter: [{ type: Input }],
    navigation: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJoZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEQ7Ozs7Ozs7O0dBUUc7QUF3Q0gsTUFBTSxPQUFPLE1BQU07SUFnRGxCLFlBQ1EsSUFBVSxFQUNQLFlBQTBCLEVBQ2QsTUFBYztRQUY3QixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1AsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBMUNyQzs7V0FFRztRQUNNLFVBQUssR0FBOEIsS0FBSyxDQUFDO1FBd0JsRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFM0I7O1dBRUc7UUFDTyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFFbEQsVUFBSyxHQUFHLG9CQUFvQixDQUFDO0lBS0UsQ0FBQztJQXRDMUM7O09BRUc7SUFDSCxJQUFhLElBQUksQ0FBQyxDQUFTO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDUCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBVyxDQUFDO0lBQ3ZFLENBQUM7SUErQk0sVUFBVSxDQUFDLEtBQUs7UUFDdEIsT0FBTyxLQUFLLFlBQVksV0FBVyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBSztRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzlCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjtJQUNGLENBQUM7OztZQXRHRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFtQ1Q7YUFDRDs7OztZQWpEUSxJQUFJO1lBRkosWUFBWTtZQUNaLE1BQU0sdUJBc0daLFFBQVE7OztxQkEvQ1QsS0FBSzttQkFJTCxLQUFLO29CQUlMLEtBQUs7bUJBSUwsS0FBSztvQkFZTCxLQUFLOzBCQU1MLEtBQUs7d0JBS0wsS0FBSzt5QkFLTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3B0aW9uYWwsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyLFxuXHRUZW1wbGF0ZVJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5cbi8qKlxuICogQSBmaXhlZCBoZWFkZXIgYW5kIG5hdmlnYXRpb24uXG4gKiBIZWFkZXIgbWF5IGNvbnRhaW4gYSBIYW1idXJnZXIgbWVudSB0byB0b2dnbGUgdGhlIHNpZGUgbmF2aWdhdGlvbiwgbmF2aWdhdGlvbiBhY3Rpb25zLFxuICogYW5kIGdsb2JhbCBhY3Rpb25zIChnZW5lcmFsbHkgaW4gdGhlIGZvcm0gb2YgYFBhbmVsYHMpLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L3VpLXNoZWxsLS1oZWFkZXIpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPXVpLXNoZWxsLS1oZWFkZXI8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWhlYWRlclwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxoZWFkZXJcblx0XHRcdGNsYXNzPVwiYngtLWhlYWRlclwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImJyYW5kICsgJyAnICsgbmFtZVwiPlxuXHRcdFx0PGFcblx0XHRcdFx0Km5nSWY9XCJza2lwVG9cIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1za2lwLXRvLWNvbnRlbnRcIlxuXHRcdFx0XHRbaHJlZl09XCJza2lwVG9cIlxuXHRcdFx0XHR0YWJpbmRleD1cIjBcIj5cblx0XHRcdFx0e3sgaTE4bi5nZXQoXCJVSV9TSEVMTC5TS0lQX1RPXCIpIHwgYXN5bmMgfX1cblx0XHRcdDwvYT5cblx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cImlibS1oYW1idXJnZXJcIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0Km5nSWY9XCJpc1RlbXBsYXRlKGJyYW5kKVwiXG5cdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0XT1cImJyYW5kXCI+XG5cdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc1RlbXBsYXRlKGJyYW5kKVwiIFtuZ1N3aXRjaF09XCJ1c2VSb3V0ZXJcIj5cblx0XHRcdFx0PGFcblx0XHRcdFx0XHQqbmdTd2l0Y2hDYXNlPVwiZmFsc2VcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYngtLWhlYWRlcl9fbmFtZVwiXG5cdFx0XHRcdFx0W2hyZWZdPVwiaHJlZlwiXG5cdFx0XHRcdFx0KGNsaWNrKT1cIm5hdmlnYXRlKCRldmVudClcIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWUtLXByZWZpeFwiPnt7YnJhbmR9fSZuYnNwOzwvc3Bhbj5cblx0XHRcdFx0XHR7e25hbWV9fVxuXHRcdFx0XHQ8L2E+XG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0Km5nU3dpdGNoQ2FzZT1cInRydWVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYngtLWhlYWRlcl9fbmFtZVwiXG5cdFx0XHRcdFx0W3JvdXRlckxpbmtdPVwicm91dGVcIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWUtLXByZWZpeFwiPnt7YnJhbmR9fSZuYnNwOzwvc3Bhbj5cblx0XHRcdFx0XHR7e25hbWV9fVxuXHRcdFx0XHQ8L2E+XG5cdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L2hlYWRlcj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBIZWFkZXIge1xuXHQvKipcblx0ICogSUQgaW4gdGhlIG1haW4gYm9keSBjb250ZW50IHRvIGp1bXAgdG8uIFVzZWQgYnkga2V5Ym9hcmQgYW5kIHNjcmVlbiByZWFkZXIgdXNlcnMgdG8gc2tpcCB0aGUgaGVhZGVyIGNvbnRlbnQuXG5cdCAqL1xuXHRASW5wdXQoKSBza2lwVG86IHN0cmluZztcblx0LyoqXG5cdCAqIExhYmVsIHRoYXQgc2hvd3MgdG8gdGhlIHJpZ2h0IG9mIHRoZSBgYnJhbmRgIHRleHQuIEdlbmVyYWxseSBhIHByb2R1Y3QgbmFtZS5cblx0ICovXG5cdEBJbnB1dCgpIG5hbWU6IHN0cmluZztcblx0LyoqXG5cdCAqIFRvcCBsZXZlbCBicmFuZGluZy4gRGVmYXVsdHMgdG8gXCJJQk1cIlxuXHQgKi9cblx0QElucHV0KCkgYnJhbmQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSBcIklCTVwiO1xuXHQvKipcblx0ICogT3B0aW9uYWwgbGluayBmb3IgdGhlIGhlYWRlclxuXHQgKi9cblx0QElucHV0KCkgc2V0IGhyZWYodjogc3RyaW5nKSB7XG5cdFx0dGhpcy5faHJlZiA9IHY7XG5cdH1cblxuXHRnZXQgaHJlZigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFVybCh0aGlzLl9ocmVmKSBhcyBzdHJpbmc7XG5cdH1cblxuXHQvKipcblx0ICogQXJyYXkgb2YgY29tbWFuZHMgdG8gc2VuZCB0byB0aGUgcm91dGVyIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZTogYW55W107XG5cblx0LyoqXG5cdCAqIFJvdXRlciBvcHRpb25zLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHJvdXRlYFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGVFeHRyYXM6IGFueTtcblxuXHQvKipcblx0ICogVXNlIHRoZSByb3V0ZXJMaW5rIGF0dHJpYnV0ZSBvbiA8YT4gdGFnIGZvciBuYXZpZ2F0aW9uIGluc3RlYWQgb2YgdXNpbmcgZXZlbnQgaGFuZGxlcnNcblx0ICovXG5cdEBJbnB1dCgpIHVzZVJvdXRlciA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgbmF2aWdhdGlvbiBzdGF0dXMgcHJvbWlzZSB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKi9cblx0QE91dHB1dCgpIG5hdmlnYXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyPFByb21pc2U8Ym9vbGVhbj4+KCk7XG5cblx0cHJvdGVjdGVkIF9ocmVmID0gXCJqYXZhc2NyaXB0OnZvaWQoMClcIjtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgaTE4bjogSTE4bixcblx0XHRwcm90ZWN0ZWQgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXG5cdFx0QE9wdGlvbmFsKCkgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyKSB7IH1cblxuXHRwdWJsaWMgaXNUZW1wbGF0ZSh2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xuXHR9XG5cblx0bmF2aWdhdGUoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5yb3V0ZXIgJiYgdGhpcy5yb3V0ZSkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGNvbnN0IHN0YXR1cyA9IHRoaXMucm91dGVyLm5hdmlnYXRlKHRoaXMucm91dGUsIHRoaXMucm91dGVFeHRyYXMpO1xuXHRcdFx0dGhpcy5uYXZpZ2F0aW9uLmVtaXQoc3RhdHVzKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==