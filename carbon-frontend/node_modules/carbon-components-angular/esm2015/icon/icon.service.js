/**
 *
 * carbon-angular v0.0.0 | icon.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
import { toString } from "@carbon/icon-helpers";
/**
 * Abstract class that represent a cache of icons.
 *
 * The actual caching mechanism will be implementation specific,
 * but it's likely a good idea to key by the icons name and/or size.
 * Icon name and size will always be strings, and they will be the two consistent
 * identifiers of an icon. For the purposes of storage additonal descriptor properties may
 * be used, but the name and size are the only ones guarenteed to be passed for lookup purposes.
 */
export class IconCache {
}
/**
 * Custom error for when a name can't be found
 */
export class IconNameNotFoundError extends Error {
    constructor(name) {
        super(`Icon ${name} not found`);
    }
}
/**
 * Custom error for when a specific size can't be found
 */
export class IconSizeNotFoundError extends Error {
    constructor(size, name) {
        super("Size ${size} for ${name} not found");
    }
}
/**
 * Concrete implementation of `IconCache` as a simple in memory cache
 */
export class IconMemoryCache extends IconCache {
    constructor() {
        super(...arguments);
        this.iconMap = new Map();
    }
    get(name, size) {
        if (!this.iconMap.has(name)) {
            throw new IconNameNotFoundError(name);
        }
        const sizeMap = this.iconMap.get(name);
        if (!sizeMap.has(size)) {
            throw new IconSizeNotFoundError(size, name);
        }
        return sizeMap.get(size);
    }
    set(name, size, descriptor) {
        if (!this.iconMap.has(name)) {
            this.iconMap.set(name, new Map());
        }
        const sizeMap = this.iconMap.get(name);
        sizeMap.set(size, descriptor);
    }
}
/**
 * The icon service is a singleton service responsible for registering and retriving icons from `@carbon/icons`.
 *
 * It's important to register icons before use. It's reccommended to register your icons early, likely in your app.component.
 *
 * To allow for improved tree shaking _do not_ import all the icons from `@carbon/icons` and register them.
 * Instead register only the icons in use by your application. If your application makes use of lazy loaded
 * modules you may also lazy load the icons used in that module by registering them early on in that module.
 *
 * `ngOnInit` should be sufficiantly early to register icons.
 *
 * Example:
 * ```
 * import { Accessibility16 } from "@carbon/icons";
 *
 * // ...
 *
 * class MyComponent implements OnInit {
 * 	constructor(protected iconService: IconService) {}
 *
 * 	// ...
 *
 * 	ngOnInit() {
 * 		this.iconService.register(Accessibility16);
 * 	}
 *
 * 	// ...
 * }
 * ```
 *
 * If needed it is possible to register an icon under a different name, via `registerAs`.
 */
export class IconService {
    constructor() {
        this.iconCache = new IconMemoryCache();
    }
    /**
     * Registers an array of icons based on the metadata provided by `@carbon/cions`
     */
    registerAll(descriptors) {
        descriptors.forEach(icon => this.register(icon));
    }
    /**
     * Registers an icon based on the metadata provided by `@carbon/icons`
     */
    register(descriptor) {
        const { name } = descriptor;
        this.registerAs(name, descriptor);
    }
    /**
     * Registers an icon based on a uniqe name and metadata provided by `@carbon/icons`
     */
    registerAs(name, descriptor) {
        const { size } = descriptor;
        this.iconCache.set(name, size.toString(), descriptor);
    }
    /**
     * Gets an icon, converts it to a string, and caches the result
     */
    get(name, size) {
        try {
            const icon = this.iconCache.get(name, size.toString());
            if (!icon.svg) {
                icon.svg = toString(icon);
            }
            return icon;
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * Configure various service settings (caching strategy ...)
     */
    configure(options) {
        this.iconCache = options.cache;
    }
}
IconService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,