/**
 *
 * carbon-angular v0.0.0 | icon.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, ElementRef, Input } from "@angular/core";
import { IconService } from "./icon.service";
import { getAttributes } from "@carbon/icon-helpers";
/**
 * A directive for applying styling to an input element.
 *
 * Example:
 *
 * ```html
 * <input ibmText/>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
 */
export class IconDirective {
    constructor(elementRef, iconService) {
        this.elementRef = elementRef;
        this.iconService = iconService;
        this.ibmIcon = "";
        this.size = "16";
        this.title = "";
        this.ariaLabel = "";
        this.ariaLabelledBy = "";
        this.ariaHidden = "";
        this.isFocusable = false;
    }
    ngAfterViewInit() {
        const root = this.elementRef.nativeElement;
        let icon;
        try {
            icon = this.iconService.get(this.ibmIcon, this.size.toString());
        }
        catch (error) {
            console.warn(error);
            // bail out
            return;
        }
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = root.tagName.toUpperCase() !== "SVG" ? svgElement : svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            root.appendChild(root.ownerDocument.importNode(node, true));
            // type the node because the angular compiler freaks out if it
            // ends up thinking it's a `Node` instead of a `ChildNode`
            node = node.nextSibling;
        }
        const svg = root.tagName.toUpperCase() !== "SVG" ? svgElement : root;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const attributes = getAttributes({
            width: icon.attrs.height,
            height: icon.attrs.height,
            viewBox: icon.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledBy,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes["title"]) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            IconDirective.titleIdCounter++;
            title.setAttribute("id", `${icon.name}-title-${IconDirective.titleIdCounter}`);
            // title must be first for screen readers
            svg.insertBefore(title, svg.firstElementChild);
            svg.setAttribute("aria-labelledby", `${icon.name}-title-${IconDirective.titleIdCounter}`);
        }
    }
}
IconDirective.titleIdCounter = 0;
IconDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmIcon]"
            },] }
];
/** @nocollapse */
IconDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: IconService }
];
IconDirective.propDecorators = {
    ibmIcon: [{ type: Input }],
    size: [{ type: Input }],
    title: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    ariaLabelledBy: [{ type: Input }],
    ariaHidden: [{ type: Input }],
    isFocusable: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,