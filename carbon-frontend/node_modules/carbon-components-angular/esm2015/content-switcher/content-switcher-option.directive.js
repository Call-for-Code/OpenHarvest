/**
 *
 * carbon-angular v0.0.0 | content-switcher-option.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input, HostListener, Output, EventEmitter } from "@angular/core";
export class ContentSwitcherOption {
    constructor() {
        /**
         * Internal name for the option.
         * Should be something that identifies the option to the application.
         * Accessible from the `ContentSwitcher` `selected` emitter
         */
        this.name = "option";
        /**
         * Emits when the option is selected.
         */
        this.selected = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.switcherClass = "bx--content-switcher-btn";
        this.selectedClass = false;
        this.role = "tab";
        this.ariaSelected = false;
        this.tabindex = "-1";
        this._active = false;
    }
    /**
     * Used to activate the option. Only one option may be `active` at a time
     */
    set active(value) {
        this._active = value;
        this.selectedClass = value;
        this.ariaSelected = value;
        this.tabindex = value ? "0" : "-1";
    }
    get active() {
        return this._active;
    }
    hostClick(event) {
        this.onClick.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    }
    doFocus(event) {
        this.onFocus.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    }
}
ContentSwitcherOption.decorators = [
    { type: Directive, args: [{
                selector: "[ibmContentOption]"
            },] }
];
ContentSwitcherOption.propDecorators = {
    active: [{ type: Input }],
    name: [{ type: Input }],
    selected: [{ type: Output }],
    onClick: [{ type: Output }],
    onFocus: [{ type: Output }],
    switcherClass: [{ type: HostBinding, args: ["class",] }],
    selectedClass: [{ type: HostBinding, args: ["class.bx--content-switcher--selected",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    ariaSelected: [{ type: HostBinding, args: ["attr.aria-selected",] }],
    tabindex: [{ type: HostBinding, args: ["attr.tabIndex",] }],
    hostClick: [{ type: HostListener, args: ["click", ["$event"],] }],
    doFocus: [{ type: HostListener, args: ["focus", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jb250ZW50LXN3aXRjaGVyLyIsInNvdXJjZXMiOlsiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLGVBQWUsQ0FBQztBQUt2QixNQUFNLE9BQU8scUJBQXFCO0lBSGxDO1FBa0JDOzs7O1dBSUc7UUFDTSxTQUFJLEdBQUcsUUFBUSxDQUFDO1FBRXpCOztXQUVHO1FBQ08sYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFdkMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFekMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFN0Isa0JBQWEsR0FBRywwQkFBMEIsQ0FBQztRQUNaLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2pELFNBQUksR0FBRyxLQUFLLENBQUM7UUFDSixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXBDLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFtQjNCLENBQUM7SUF2REE7O09BRUc7SUFDSCxJQUFhLE1BQU0sQ0FBRSxLQUFjO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JCLENBQUM7SUEyQkQsU0FBUyxDQUFDLEtBQWlCO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLDREQUE0RDtRQUM1RCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUdELE9BQU8sQ0FBQyxLQUFpQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6Qiw0REFBNEQ7UUFDNUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7OztZQTFERCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG9CQUFvQjthQUM5Qjs7O3FCQUtDLEtBQUs7bUJBZ0JMLEtBQUs7dUJBS0wsTUFBTTtzQkFFTixNQUFNO3NCQUVOLE1BQU07NEJBRU4sV0FBVyxTQUFDLE9BQU87NEJBQ25CLFdBQVcsU0FBQyxzQ0FBc0M7bUJBQ2xELFdBQVcsU0FBQyxXQUFXOzJCQUN2QixXQUFXLFNBQUMsb0JBQW9CO3VCQUNoQyxXQUFXLFNBQUMsZUFBZTt3QkFJM0IsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztzQkFTaEMsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERpcmVjdGl2ZSxcblx0SG9zdEJpbmRpbmcsXG5cdElucHV0LFxuXHRIb3N0TGlzdGVuZXIsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtQ29udGVudE9wdGlvbl1cIlxufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50U3dpdGNoZXJPcHRpb24ge1xuXHQvKipcblx0ICogVXNlZCB0byBhY3RpdmF0ZSB0aGUgb3B0aW9uLiBPbmx5IG9uZSBvcHRpb24gbWF5IGJlIGBhY3RpdmVgIGF0IGEgdGltZVxuXHQgKi9cblx0QElucHV0KCkgc2V0IGFjdGl2ZSAodmFsdWU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9hY3RpdmUgPSB2YWx1ZTtcblx0XHR0aGlzLnNlbGVjdGVkQ2xhc3MgPSB2YWx1ZTtcblx0XHR0aGlzLmFyaWFTZWxlY3RlZCA9IHZhbHVlO1xuXHRcdHRoaXMudGFiaW5kZXggPSB2YWx1ZSA/IFwiMFwiIDogXCItMVwiO1xuXHR9XG5cblx0Z2V0IGFjdGl2ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fYWN0aXZlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEludGVybmFsIG5hbWUgZm9yIHRoZSBvcHRpb24uXG5cdCAqIFNob3VsZCBiZSBzb21ldGhpbmcgdGhhdCBpZGVudGlmaWVzIHRoZSBvcHRpb24gdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKiBBY2Nlc3NpYmxlIGZyb20gdGhlIGBDb250ZW50U3dpdGNoZXJgIGBzZWxlY3RlZGAgZW1pdHRlclxuXHQgKi9cblx0QElucHV0KCkgbmFtZSA9IFwib3B0aW9uXCI7XG5cblx0LyoqXG5cdCAqIEVtaXRzIHdoZW4gdGhlIG9wdGlvbiBpcyBzZWxlY3RlZC5cblx0ICovXG5cdEBPdXRwdXQoKSBzZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuXHRAT3V0cHV0KCkgb25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcblxuXHRAT3V0cHV0KCkgb25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9jdXNFdmVudD4oKTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzc1wiKSBzd2l0Y2hlckNsYXNzID0gXCJieC0tY29udGVudC1zd2l0Y2hlci1idG5cIjtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWNvbnRlbnQtc3dpdGNoZXItLXNlbGVjdGVkXCIpIHNlbGVjdGVkQ2xhc3MgPSBmYWxzZTtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5yb2xlXCIpIHJvbGUgPSBcInRhYlwiO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmFyaWEtc2VsZWN0ZWRcIikgYXJpYVNlbGVjdGVkID0gZmFsc2U7XG5cdEBIb3N0QmluZGluZyhcImF0dHIudGFiSW5kZXhcIikgdGFiaW5kZXggPSBcIi0xXCI7XG5cblx0cHJvdGVjdGVkIF9hY3RpdmUgPSBmYWxzZTtcblxuXHRASG9zdExpc3RlbmVyKFwiY2xpY2tcIiwgW1wiJGV2ZW50XCJdKVxuXHRob3N0Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcblx0XHR0aGlzLm9uQ2xpY2suZW1pdChldmVudCk7XG5cdFx0Ly8gc2tpcCBzZXR0aW5nIGFuZCBlbWl0dGluZyBpZiB0aGUgb3B0aW9uIGlzIGFscmVhZHkgYWN0aXZlXG5cdFx0aWYgKHRoaXMuYWN0aXZlKSB7IHJldHVybjsgfVxuXHRcdHRoaXMuYWN0aXZlID0gdHJ1ZTtcblx0XHR0aGlzLnNlbGVjdGVkLmVtaXQodHJ1ZSk7XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwiZm9jdXNcIiwgW1wiJGV2ZW50XCJdKVxuXHRkb0ZvY3VzKGV2ZW50OiBGb2N1c0V2ZW50KSB7XG5cdFx0dGhpcy5vbkZvY3VzLmVtaXQoZXZlbnQpO1xuXHRcdC8vIHNraXAgc2V0dGluZyBhbmQgZW1pdHRpbmcgaWYgdGhlIG9wdGlvbiBpcyBhbHJlYWR5IGFjdGl2ZVxuXHRcdGlmICh0aGlzLmFjdGl2ZSkgeyByZXR1cm47IH1cblx0XHR0aGlzLmFjdGl2ZSA9IHRydWU7XG5cdFx0dGhpcy5zZWxlY3RlZC5lbWl0KHRydWUpO1xuXHR9XG59XG4iXX0=