/**
 *
 * carbon-angular v0.0.0 | overlay.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Output, EventEmitter, ViewChild, ElementRef, Input } from "@angular/core";
/**
 * Component for the overlay object that acts as a backdrop to the `Modal` component.
 *
 * The main purpose for this component is to be able to handle click events that fall outside
 * the bounds of the `Modal` component.
 */
export class Overlay {
    constructor() {
        /**
         * Classification of the modal.
         */
        this.theme = "default";
        this.open = false;
        /**
         * To emit the event where the user selects the overlay behind the `Modal`.
         */
        this.overlaySelect = new EventEmitter();
    }
    /**
     * Handles the user clicking on the `Overlay` which resides outside the `Modal` object.
     */
    overlayClick(event) {
        if (event.target !== this.overlay.nativeElement) {
            return;
        }
        event.stopPropagation();
        this.overlaySelect.emit(event);
    }
}
Overlay.decorators = [
    { type: Component, args: [{
                selector: "ibm-overlay",
                template: `
		<section
			class="bx--modal bx--modal-tall"
			[ngClass]="{
				'bx--modal--danger': theme === 'danger',
				'is-visible': open
			}"
			(click)="overlayClick($event)"
			#overlay>
			<ng-content></ng-content>
		</section>
	`
            }] }
];
Overlay.propDecorators = {
    theme: [{ type: Input }],
    open: [{ type: Input }],
    overlaySelect: [{ type: Output }],
    overlay: [{ type: ViewChild, args: ["overlay", { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL21vZGFsLyIsInNvdXJjZXMiOlsib3ZlcmxheS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04sWUFBWSxFQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBR3ZCOzs7OztHQUtHO0FBZ0JILE1BQU0sT0FBTyxPQUFPO0lBZnBCO1FBZ0JDOztXQUVHO1FBQ00sVUFBSyxHQUF5QixTQUFTLENBQUM7UUFDeEMsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUN0Qjs7V0FFRztRQUNPLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQWdCOUMsQ0FBQztJQVRBOztPQUVHO0lBQ0gsWUFBWSxDQUFDLEtBQUs7UUFDakIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzVELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUF0Q0QsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0VBV1Q7YUFDRDs7O29CQUtDLEtBQUs7bUJBQ0wsS0FBSzs0QkFJTCxNQUFNO3NCQUtOLFNBQVMsU0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0Vmlld0NoaWxkLFxuXHRFbGVtZW50UmVmLFxuXHRJbnB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5cbi8qKlxuICogQ29tcG9uZW50IGZvciB0aGUgb3ZlcmxheSBvYmplY3QgdGhhdCBhY3RzIGFzIGEgYmFja2Ryb3AgdG8gdGhlIGBNb2RhbGAgY29tcG9uZW50LlxuICpcbiAqIFRoZSBtYWluIHB1cnBvc2UgZm9yIHRoaXMgY29tcG9uZW50IGlzIHRvIGJlIGFibGUgdG8gaGFuZGxlIGNsaWNrIGV2ZW50cyB0aGF0IGZhbGwgb3V0c2lkZVxuICogdGhlIGJvdW5kcyBvZiB0aGUgYE1vZGFsYCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tb3ZlcmxheVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxzZWN0aW9uXG5cdFx0XHRjbGFzcz1cImJ4LS1tb2RhbCBieC0tbW9kYWwtdGFsbFwiXG5cdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdCdieC0tbW9kYWwtLWRhbmdlcic6IHRoZW1lID09PSAnZGFuZ2VyJyxcblx0XHRcdFx0J2lzLXZpc2libGUnOiBvcGVuXG5cdFx0XHR9XCJcblx0XHRcdChjbGljayk9XCJvdmVybGF5Q2xpY2soJGV2ZW50KVwiXG5cdFx0XHQjb3ZlcmxheT5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L3NlY3Rpb24+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmxheSB7XG5cdC8qKlxuXHQgKiBDbGFzc2lmaWNhdGlvbiBvZiB0aGUgbW9kYWwuXG5cdCAqL1xuXHRASW5wdXQoKSB0aGVtZTogXCJkZWZhdWx0XCIgfCBcImRhbmdlclwiID0gXCJkZWZhdWx0XCI7XG5cdEBJbnB1dCgpIG9wZW4gPSBmYWxzZTtcblx0LyoqXG5cdCAqIFRvIGVtaXQgdGhlIGV2ZW50IHdoZXJlIHRoZSB1c2VyIHNlbGVjdHMgdGhlIG92ZXJsYXkgYmVoaW5kIHRoZSBgTW9kYWxgLlxuXHQgKi9cblx0QE91dHB1dCgpIG92ZXJsYXlTZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cdC8qKlxuXHQgKiBNYWludGFpbnMgYSByZWZlcmVuY2UgdG8gdGhlIHZpZXcgRE9NIGVsZW1lbnQgb2YgdGhlIGBPdmVybGF5YC5cblx0ICovXG5cdC8vIEB0cy1pZ25vcmVcblx0QFZpZXdDaGlsZChcIm92ZXJsYXlcIiwgeyBzdGF0aWM6IHRydWUgfSkgb3ZlcmxheTogRWxlbWVudFJlZjtcblxuXHQvKipcblx0ICogSGFuZGxlcyB0aGUgdXNlciBjbGlja2luZyBvbiB0aGUgYE92ZXJsYXlgIHdoaWNoIHJlc2lkZXMgb3V0c2lkZSB0aGUgYE1vZGFsYCBvYmplY3QuXG5cdCAqL1xuXHRvdmVybGF5Q2xpY2soZXZlbnQpIHtcblx0XHRpZiAoZXZlbnQudGFyZ2V0ICE9PSB0aGlzLm92ZXJsYXkubmF0aXZlRWxlbWVudCkgeyByZXR1cm47IH1cblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR0aGlzLm92ZXJsYXlTZWxlY3QuZW1pdChldmVudCk7XG5cdH1cblxufVxuIl19