/**
 *
 * carbon-angular v0.0.0 | inline-loading.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding } from "@angular/core";
export var InlineLoadingState;
(function (InlineLoadingState) {
    /** It hides the whole component. */
    InlineLoadingState["Hidden"] = "hidden";
    /** It shows the `loadingText` but no loading animation. */
    InlineLoadingState["Inactive"] = "inactive";
    /** It shows the `loadingText` with loading animation. */
    InlineLoadingState["Active"] = "active";
    /** It shows the `successText` with a success state. */
    InlineLoadingState["Finished"] = "finished";
    /** It shows the `errorText` with an error state. */
    InlineLoadingState["Error"] = "error";
})(InlineLoadingState || (InlineLoadingState = {}));
/**
 * [See demo](../../?path=/story/inline-loading--basic)
 *
 * <example-url>../../iframe.html?id=inline-loading--basic</example-url>
 */
export class InlineLoading {
    constructor() {
        this.InlineLoadingState = InlineLoadingState;
        /**
         * Specify the text description for the loading state.
         */
        this.state = InlineLoadingState.Active;
        /**
         * Provide a delay for the `setTimeout` for success.
         */
        this.successDelay = 1500;
        /**
         * Emits event after the success state is active
         */
        this.onSuccess = new EventEmitter();
        this.loadingClass = true;
    }
    /**
     * set to `false` to stop the loading animation
     */
    get isActive() {
        return this.state === InlineLoadingState.Active;
    }
    set isActive(active) {
        this.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;
    }
    /**
     * Returns value `true` if the component is in the success state.
     */
    get success() {
        return this.state === InlineLoadingState.Finished;
    }
    /**
     * Set the component's state to match the parameter and emits onSuccess if it exits.
     */
    set success(success) {
        this.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;
        if (this.state === InlineLoadingState.Finished) {
            setTimeout(() => {
                this.onSuccess.emit();
            }, this.successDelay);
        }
    }
}
InlineLoading.decorators = [
    { type: Component, args: [{
                selector: "ibm-inline-loading",
                template: `
		<div *ngIf="state !== InlineLoadingState.Hidden"
			class="bx--inline-loading__animation">
			<div
				*ngIf="state === InlineLoadingState.Inactive || state === InlineLoadingState.Active"
				class="bx--loading bx--loading--small"
				[ngClass]="{
					'bx--loading--stop': state === InlineLoadingState.Inactive
				}">
				<svg class="bx--loading__svg" viewBox="-75 -75 150 150">
					<circle class="bx--loading__background" cx="0" cy="0" r="30" />
					<circle class="bx--loading__stroke" cx="0" cy="0" r="30" />
				</svg>
			</div>
			<svg
				*ngIf="state === InlineLoadingState.Finished"
				ibmIcon="checkmark--filled"
				size="16"
				class="bx--inline-loading__checkmark-container">
			</svg>
			<svg
				*ngIf="state === InlineLoadingState.Error"
				ibmIcon="error--filled"
				size="16"
				class="bx--inline-loading--error">
			</svg>
		</div>
		<p
			*ngIf="state === InlineLoadingState.Inactive || state === InlineLoadingState.Active"
			class="bx--inline-loading__text">{{loadingText}}</p>
		<p *ngIf="state === InlineLoadingState.Finished" class="bx--inline-loading__text">{{successText}}</p>
		<p *ngIf="state === InlineLoadingState.Error" class="bx--inline-loading__text">{{errorText}}</p>
	`
            }] }
];
InlineLoading.propDecorators = {
    state: [{ type: Input }],
    loadingText: [{ type: Input }],
    successText: [{ type: Input }],
    successDelay: [{ type: Input }],
    errorText: [{ type: Input }],
    isActive: [{ type: Input }],
    success: [{ type: Input }],
    onSuccess: [{ type: Output }],
    loadingClass: [{ type: HostBinding, args: ["class.bx--inline-loading",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLWxvYWRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pbmxpbmUtbG9hZGluZy8iLCJzb3VyY2VzIjpbImlubGluZS1sb2FkaW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixNQUFNLENBQU4sSUFBWSxrQkFXWDtBQVhELFdBQVksa0JBQWtCO0lBQzdCLG9DQUFvQztJQUNwQyx1Q0FBaUIsQ0FBQTtJQUNqQiwyREFBMkQ7SUFDM0QsMkNBQXFCLENBQUE7SUFDckIseURBQXlEO0lBQ3pELHVDQUFpQixDQUFBO0lBQ2pCLHVEQUF1RDtJQUN2RCwyQ0FBcUIsQ0FBQTtJQUNyQixvREFBb0Q7SUFDcEQscUNBQWUsQ0FBQTtBQUNoQixDQUFDLEVBWFcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQVc3QjtBQUVEOzs7O0dBSUc7QUFxQ0gsTUFBTSxPQUFPLGFBQWE7SUFwQzFCO1FBcUNDLHVCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBRXhDOztXQUVHO1FBQ00sVUFBSyxHQUFnQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7UUFTeEU7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLElBQUksQ0FBQztRQWlDN0I7O1dBRUc7UUFDTyxjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFbkIsaUJBQVksR0FBRyxJQUFJLENBQUM7SUFDOUQsQ0FBQztJQWxDQTs7T0FFRztJQUNILElBQWEsUUFBUTtRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssa0JBQWtCLENBQUMsTUFBTSxDQUFDO0lBQ2pELENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxNQUFlO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztJQUMvRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFhLE9BQU87UUFDbkIsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztJQUNuRCxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLE9BQU8sQ0FBQyxPQUFnQjtRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7UUFDOUUsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLGtCQUFrQixDQUFDLFFBQVEsRUFBRTtZQUMvQyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdkIsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0QjtJQUNGLENBQUM7OztZQXJGRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQWdDVDthQUNEOzs7b0JBT0MsS0FBSzswQkFJTCxLQUFLOzBCQUlMLEtBQUs7MkJBSUwsS0FBSzt3QkFJTCxLQUFLO3VCQUlMLEtBQUs7c0JBVUwsS0FBSzt3QkFrQkwsTUFBTTsyQkFFTixXQUFXLFNBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmV4cG9ydCBlbnVtIElubGluZUxvYWRpbmdTdGF0ZSB7XG5cdC8qKiBJdCBoaWRlcyB0aGUgd2hvbGUgY29tcG9uZW50LiAqL1xuXHRIaWRkZW4gPSBcImhpZGRlblwiLFxuXHQvKiogSXQgc2hvd3MgdGhlIGBsb2FkaW5nVGV4dGAgYnV0IG5vIGxvYWRpbmcgYW5pbWF0aW9uLiAqL1xuXHRJbmFjdGl2ZSA9IFwiaW5hY3RpdmVcIixcblx0LyoqIEl0IHNob3dzIHRoZSBgbG9hZGluZ1RleHRgIHdpdGggbG9hZGluZyBhbmltYXRpb24uICovXG5cdEFjdGl2ZSA9IFwiYWN0aXZlXCIsXG5cdC8qKiBJdCBzaG93cyB0aGUgYHN1Y2Nlc3NUZXh0YCB3aXRoIGEgc3VjY2VzcyBzdGF0ZS4gKi9cblx0RmluaXNoZWQgPSBcImZpbmlzaGVkXCIsXG5cdC8qKiBJdCBzaG93cyB0aGUgYGVycm9yVGV4dGAgd2l0aCBhbiBlcnJvciBzdGF0ZS4gKi9cblx0RXJyb3IgPSBcImVycm9yXCJcbn1cblxuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9pbmxpbmUtbG9hZGluZy0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWlubGluZS1sb2FkaW5nLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0taW5saW5lLWxvYWRpbmdcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8ZGl2ICpuZ0lmPVwic3RhdGUgIT09IElubGluZUxvYWRpbmdTdGF0ZS5IaWRkZW5cIlxuXHRcdFx0Y2xhc3M9XCJieC0taW5saW5lLWxvYWRpbmdfX2FuaW1hdGlvblwiPlxuXHRcdFx0PGRpdlxuXHRcdFx0XHQqbmdJZj1cInN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuSW5hY3RpdmUgfHwgc3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5BY3RpdmVcIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1sb2FkaW5nIGJ4LS1sb2FkaW5nLS1zbWFsbFwiXG5cdFx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0XHQnYngtLWxvYWRpbmctLXN0b3AnOiBzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkluYWN0aXZlXG5cdFx0XHRcdH1cIj5cblx0XHRcdFx0PHN2ZyBjbGFzcz1cImJ4LS1sb2FkaW5nX19zdmdcIiB2aWV3Qm94PVwiLTc1IC03NSAxNTAgMTUwXCI+XG5cdFx0XHRcdFx0PGNpcmNsZSBjbGFzcz1cImJ4LS1sb2FkaW5nX19iYWNrZ3JvdW5kXCIgY3g9XCIwXCIgY3k9XCIwXCIgcj1cIjMwXCIgLz5cblx0XHRcdFx0XHQ8Y2lyY2xlIGNsYXNzPVwiYngtLWxvYWRpbmdfX3N0cm9rZVwiIGN4PVwiMFwiIGN5PVwiMFwiIHI9XCIzMFwiIC8+XG5cdFx0XHRcdDwvc3ZnPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8c3ZnXG5cdFx0XHRcdCpuZ0lmPVwic3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5GaW5pc2hlZFwiXG5cdFx0XHRcdGlibUljb249XCJjaGVja21hcmstLWZpbGxlZFwiXG5cdFx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHRcdGNsYXNzPVwiYngtLWlubGluZS1sb2FkaW5nX19jaGVja21hcmstY29udGFpbmVyXCI+XG5cdFx0XHQ8L3N2Zz5cblx0XHRcdDxzdmdcblx0XHRcdFx0Km5nSWY9XCJzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkVycm9yXCJcblx0XHRcdFx0aWJtSWNvbj1cImVycm9yLS1maWxsZWRcIlxuXHRcdFx0XHRzaXplPVwiMTZcIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1pbmxpbmUtbG9hZGluZy0tZXJyb3JcIj5cblx0XHRcdDwvc3ZnPlxuXHRcdDwvZGl2PlxuXHRcdDxwXG5cdFx0XHQqbmdJZj1cInN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuSW5hY3RpdmUgfHwgc3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5BY3RpdmVcIlxuXHRcdFx0Y2xhc3M9XCJieC0taW5saW5lLWxvYWRpbmdfX3RleHRcIj57e2xvYWRpbmdUZXh0fX08L3A+XG5cdFx0PHAgKm5nSWY9XCJzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkZpbmlzaGVkXCIgY2xhc3M9XCJieC0taW5saW5lLWxvYWRpbmdfX3RleHRcIj57e3N1Y2Nlc3NUZXh0fX08L3A+XG5cdFx0PHAgKm5nSWY9XCJzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkVycm9yXCIgY2xhc3M9XCJieC0taW5saW5lLWxvYWRpbmdfX3RleHRcIj57e2Vycm9yVGV4dH19PC9wPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIElubGluZUxvYWRpbmcge1xuXHRJbmxpbmVMb2FkaW5nU3RhdGUgPSBJbmxpbmVMb2FkaW5nU3RhdGU7XG5cblx0LyoqXG5cdCAqIFNwZWNpZnkgdGhlIHRleHQgZGVzY3JpcHRpb24gZm9yIHRoZSBsb2FkaW5nIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgc3RhdGU6IElubGluZUxvYWRpbmdTdGF0ZSB8IHN0cmluZyA9IElubGluZUxvYWRpbmdTdGF0ZS5BY3RpdmU7XG5cdC8qKlxuXHQgKiBTcGVjaWZ5IHRoZSB0ZXh0IGRlc2NyaXB0aW9uIGZvciB0aGUgbG9hZGluZyBzdGF0ZS5cblx0ICovXG5cdEBJbnB1dCgpIGxvYWRpbmdUZXh0OiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBTcGVjaWZ5IHRoZSB0ZXh0IGRlc2NyaXB0aW9uIGZvciB0aGUgc3VjY2VzcyBzdGF0ZS5cblx0ICovXG5cdEBJbnB1dCgpIHN1Y2Nlc3NUZXh0OiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBQcm92aWRlIGEgZGVsYXkgZm9yIHRoZSBgc2V0VGltZW91dGAgZm9yIHN1Y2Nlc3MuXG5cdCAqL1xuXHRASW5wdXQoKSBzdWNjZXNzRGVsYXkgPSAxNTAwO1xuXHQvKipcblx0ICogU3BlY2lmeSB0aGUgdGV4dCBkZXNjcmlwdGlvbiBmb3IgdGhlIGVycm9yIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgZXJyb3JUZXh0OiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBzZXQgdG8gYGZhbHNlYCB0byBzdG9wIHRoZSBsb2FkaW5nIGFuaW1hdGlvblxuXHQgKi9cblx0QElucHV0KCkgZ2V0IGlzQWN0aXZlKCkge1xuXHRcdHJldHVybiB0aGlzLnN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuQWN0aXZlO1xuXHR9XG5cdHNldCBpc0FjdGl2ZShhY3RpdmU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLnN0YXRlID0gYWN0aXZlID8gSW5saW5lTG9hZGluZ1N0YXRlLkFjdGl2ZSA6IElubGluZUxvYWRpbmdTdGF0ZS5JbmFjdGl2ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHZhbHVlIGB0cnVlYCBpZiB0aGUgY29tcG9uZW50IGlzIGluIHRoZSBzdWNjZXNzIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgZ2V0IHN1Y2Nlc3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5GaW5pc2hlZDtcblx0fVxuXHQvKipcblx0ICogU2V0IHRoZSBjb21wb25lbnQncyBzdGF0ZSB0byBtYXRjaCB0aGUgcGFyYW1ldGVyIGFuZCBlbWl0cyBvblN1Y2Nlc3MgaWYgaXQgZXhpdHMuXG5cdCAqL1xuXHRzZXQgc3VjY2VzcyhzdWNjZXNzOiBib29sZWFuKSB7XG5cdFx0dGhpcy5zdGF0ZSA9IHN1Y2Nlc3MgPyBJbmxpbmVMb2FkaW5nU3RhdGUuRmluaXNoZWQgOiBJbmxpbmVMb2FkaW5nU3RhdGUuRXJyb3I7XG5cdFx0aWYgKHRoaXMuc3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5GaW5pc2hlZCkge1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMub25TdWNjZXNzLmVtaXQoKTtcblx0XHRcdH0sIHRoaXMuc3VjY2Vzc0RlbGF5KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRW1pdHMgZXZlbnQgYWZ0ZXIgdGhlIHN1Y2Nlc3Mgc3RhdGUgaXMgYWN0aXZlXG5cdCAqL1xuXHRAT3V0cHV0KCkgb25TdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0taW5saW5lLWxvYWRpbmdcIikgbG9hZGluZ0NsYXNzID0gdHJ1ZTtcbn1cbiJdfQ==