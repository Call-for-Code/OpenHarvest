/**
 *
 * carbon-angular v0.0.0 | placeholder.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ViewContainerRef, ViewChild, Input } from "@angular/core";
import { PlaceholderService } from "./placeholder.service";
/**
 * Using a modal, dialog (Tooltip, OverflowMenu), or any other component that draws out of the normal page flow
 * in your application *requires* this component (`ibm-placeholder`).
 * It would generally be placed near the end of your root app component template
 * (app.component.ts or app.component.html) as:
 *
 * ```
 * <ibm-placeholder></ibm-placeholder>
 * ```
 */
export class Placeholder {
    /**
     * Creates an instance of `Placeholder`.
     */
    constructor(placeholderService) {
        this.placeholderService = placeholderService;
    }
    /**
     * Registers the components view with `PlaceholderService`
     */
    ngOnInit() {
        // TODO use `id` to register with the placeholderService
        this.placeholderService.registerViewContainerRef(this.viewContainerRef);
    }
}
Placeholder.decorators = [
    { type: Component, args: [{
                selector: "ibm-placeholder",
                template: `<div #placeholder></div>`
            }] }
];
/** @nocollapse */
Placeholder.ctorParameters = () => [
    { type: PlaceholderService }
];
Placeholder.propDecorators = {
    id: [{ type: Input }],
    viewContainerRef: [{ type: ViewChild, args: ["placeholder", { read: ViewContainerRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9wbGFjZWhvbGRlci8iLCJzb3VyY2VzIjpbInBsYWNlaG9sZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUVULGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTNEOzs7Ozs7Ozs7R0FTRztBQUtILE1BQU0sT0FBTyxXQUFXO0lBUXZCOztPQUVHO0lBQ0gsWUFBbUIsa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBSSxDQUFDO0lBRTlEOztPQUVHO0lBQ0gsUUFBUTtRQUNQLHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsa0JBQWtCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDekUsQ0FBQzs7O1lBdkJELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUUsMEJBQTBCO2FBQ3BDOzs7O1lBZlEsa0JBQWtCOzs7aUJBaUJ6QixLQUFLOytCQUtMLFNBQVMsU0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0T25Jbml0LFxuXHRWaWV3Q29udGFpbmVyUmVmLFxuXHRWaWV3Q2hpbGQsXG5cdElucHV0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBQbGFjZWhvbGRlclNlcnZpY2UgfSBmcm9tIFwiLi9wbGFjZWhvbGRlci5zZXJ2aWNlXCI7XG5cbi8qKlxuICogVXNpbmcgYSBtb2RhbCwgZGlhbG9nIChUb29sdGlwLCBPdmVyZmxvd01lbnUpLCBvciBhbnkgb3RoZXIgY29tcG9uZW50IHRoYXQgZHJhd3Mgb3V0IG9mIHRoZSBub3JtYWwgcGFnZSBmbG93XG4gKiBpbiB5b3VyIGFwcGxpY2F0aW9uICpyZXF1aXJlcyogdGhpcyBjb21wb25lbnQgKGBpYm0tcGxhY2Vob2xkZXJgKS5cbiAqIEl0IHdvdWxkIGdlbmVyYWxseSBiZSBwbGFjZWQgbmVhciB0aGUgZW5kIG9mIHlvdXIgcm9vdCBhcHAgY29tcG9uZW50IHRlbXBsYXRlXG4gKiAoYXBwLmNvbXBvbmVudC50cyBvciBhcHAuY29tcG9uZW50Lmh0bWwpIGFzOlxuICpcbiAqIGBgYFxuICogPGlibS1wbGFjZWhvbGRlcj48L2libS1wbGFjZWhvbGRlcj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXBsYWNlaG9sZGVyXCIsXG5cdHRlbXBsYXRlOiBgPGRpdiAjcGxhY2Vob2xkZXI+PC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBQbGFjZWhvbGRlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdEBJbnB1dCgpIGlkOiBhbnk7XG5cdC8qKlxuXHQgKiBNYWludGFpbnMgYSByZWZlcmVuY2UgdG8gdGhlIHZpZXcgRE9NIGVsZW1lbnQgb2YgdGhlIGBQbGFjZWhvbGRlcmAuXG5cdCAqL1xuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJwbGFjZWhvbGRlclwiLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYsIHN0YXRpYzogdHJ1ZSB9KSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBQbGFjZWhvbGRlcmAuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwdWJsaWMgcGxhY2Vob2xkZXJTZXJ2aWNlOiBQbGFjZWhvbGRlclNlcnZpY2UpIHsgfVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgdGhlIGNvbXBvbmVudHMgdmlldyB3aXRoIGBQbGFjZWhvbGRlclNlcnZpY2VgXG5cdCAqL1xuXHRuZ09uSW5pdCgpIHtcblx0XHQvLyBUT0RPIHVzZSBgaWRgIHRvIHJlZ2lzdGVyIHdpdGggdGhlIHBsYWNlaG9sZGVyU2VydmljZVxuXHRcdHRoaXMucGxhY2Vob2xkZXJTZXJ2aWNlLnJlZ2lzdGVyVmlld0NvbnRhaW5lclJlZih0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuXHR9XG59XG4iXX0=