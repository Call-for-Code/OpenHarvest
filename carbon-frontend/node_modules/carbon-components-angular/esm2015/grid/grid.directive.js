/**
 *
 * carbon-angular v0.0.0 | grid.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input } from "@angular/core";
/**
 * [See demo](../../?path=/story/grid--basic)
 *
 * <example-url>../../iframe.html?id=grid--basic</example-url>
 */
export class GridDirective {
    constructor() {
        this.baseClass = true;
        this.condensed = false;
    }
}
GridDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmGrid]"
            },] }
];
GridDirective.propDecorators = {
    baseClass: [{ type: HostBinding, args: ["class.bx--grid",] }],
    condensed: [{ type: HostBinding, args: ["class.bx--grid--condensed",] }, { type: Input }]
};
export class RowDirective {
    constructor() {
        this.gutter = true;
        this.leftGutter = true;
        this.rightGutter = true;
        this.baseClass = true;
        this.condensed = false;
    }
    get showGutter() {
        return !this.gutter;
    }
    get showLeftGutter() {
        return !this.leftGutter;
    }
    get showRightGutter() {
        return !this.rightGutter;
    }
}
RowDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmRow]"
            },] }
];
RowDirective.propDecorators = {
    gutter: [{ type: Input }],
    leftGutter: [{ type: Input }],
    rightGutter: [{ type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--row",] }],
    condensed: [{ type: HostBinding, args: ["class.bx--row--condensed",] }, { type: Input }],
    showGutter: [{ type: HostBinding, args: ["class.bx--no-gutter",] }],
    showLeftGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--left",] }],
    showRightGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--right",] }]
};
export class ColumnDirective {
    constructor() {
        this.class = "";
        this.columnNumbers = {};
        this.offsets = {};
        this._columnClasses = [];
    }
    get columnClasses() {
        return this._columnClasses.join(" ");
    }
    set(classes) {
        this._columnClasses = classes.split(" ");
    }
    ngOnInit() {
        try {
            const columnKeys = Object.keys(this.columnNumbers);
            if (columnKeys.length <= 0) {
                this._columnClasses.push("bx--col");
            }
            columnKeys.forEach(key => {
                if (this.columnNumbers[key] === "nobreak") {
                    this._columnClasses.push(`bx--col-${key}`);
                }
                else {
                    this._columnClasses.push(`bx--col-${key}-${this.columnNumbers[key]}`);
                }
            });
            Object.keys(this.offsets).forEach(key => {
                this._columnClasses.push(`bx--offset-${key}-${this.offsets[key]}`);
            });
        }
        catch (err) {
            console.error(`Malformed \`offsets\` or \`columnNumbers\`: ${err}`);
        }
        if (this.class) {
            this._columnClasses.push(this.class);
        }
    }
}
ColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmCol]"
            },] }
];
ColumnDirective.propDecorators = {
    class: [{ type: Input }],
    columnNumbers: [{ type: Input }],
    offsets: [{ type: Input }],
    columnClasses: [{ type: HostBinding, args: ["class",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2dyaWQvIiwic291cmNlcyI6WyJncmlkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFdEU7Ozs7R0FJRztBQUlILE1BQU0sT0FBTyxhQUFhO0lBSDFCO1FBSWdDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDRyxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3RFLENBQUM7OztZQU5BLFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsV0FBVzthQUNyQjs7O3dCQUVDLFdBQVcsU0FBQyxnQkFBZ0I7d0JBQzVCLFdBQVcsU0FBQywyQkFBMkIsY0FBRyxLQUFLOztBQU1qRCxNQUFNLE9BQU8sWUFBWTtJQUh6QjtRQUlVLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBRUUsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNHLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFVckUsQ0FBQztJQVRBLElBQXdDLFVBQVU7UUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNELElBQThDLGNBQWM7UUFDM0QsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUNELElBQStDLGVBQWU7UUFDN0QsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7O1lBbEJELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsVUFBVTthQUNwQjs7O3FCQUVDLEtBQUs7eUJBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUVMLFdBQVcsU0FBQyxlQUFlO3dCQUMzQixXQUFXLFNBQUMsMEJBQTBCLGNBQUcsS0FBSzt5QkFDOUMsV0FBVyxTQUFDLHFCQUFxQjs2QkFHakMsV0FBVyxTQUFDLDJCQUEyQjs4QkFHdkMsV0FBVyxTQUFDLDRCQUE0Qjs7QUFRMUMsTUFBTSxPQUFPLGVBQWU7SUFINUI7UUFJVSxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRVgsa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFFbkIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUVaLG1CQUFjLEdBQWEsRUFBRSxDQUFDO0lBcUN6QyxDQUFDO0lBbkNBLElBQ0ksYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZTtRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFFBQVE7UUFDUCxJQUFJO1lBQ0gsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDbkQsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDcEM7WUFFRCxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUMxQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUM7aUJBQzNDO3FCQUFNO29CQUNOLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0RTtZQUNGLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxDQUFDLENBQUMsQ0FBQztTQUNIO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLCtDQUErQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO0lBQ0YsQ0FBQzs7O1lBOUNELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsVUFBVTthQUNwQjs7O29CQUVDLEtBQUs7NEJBRUwsS0FBSztzQkFFTCxLQUFLOzRCQUlMLFdBQVcsU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbi8qKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvZ3JpZC0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWdyaWQtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1HcmlkXVwiXG59KVxuZXhwb3J0IGNsYXNzIEdyaWREaXJlY3RpdmUge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tZ3JpZFwiKSBiYXNlQ2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tZ3JpZC0tY29uZGVuc2VkXCIpIEBJbnB1dCgpIGNvbmRlbnNlZCA9IGZhbHNlO1xufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6IFwiW2libVJvd11cIlxufSlcbmV4cG9ydCBjbGFzcyBSb3dEaXJlY3RpdmUge1xuXHRASW5wdXQoKSBndXR0ZXIgPSB0cnVlO1xuXHRASW5wdXQoKSBsZWZ0R3V0dGVyID0gdHJ1ZTtcblx0QElucHV0KCkgcmlnaHRHdXR0ZXIgPSB0cnVlO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1yb3dcIikgYmFzZUNsYXNzID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXJvdy0tY29uZGVuc2VkXCIpIEBJbnB1dCgpIGNvbmRlbnNlZCA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tbm8tZ3V0dGVyXCIpIGdldCBzaG93R3V0dGVyKCkge1xuXHRcdHJldHVybiAhdGhpcy5ndXR0ZXI7XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLW5vLWd1dHRlci0tbGVmdFwiKSBnZXQgc2hvd0xlZnRHdXR0ZXIoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmxlZnRHdXR0ZXI7XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLW5vLWd1dHRlci0tcmlnaHRcIikgZ2V0IHNob3dSaWdodEd1dHRlcigpIHtcblx0XHRyZXR1cm4gIXRoaXMucmlnaHRHdXR0ZXI7XG5cdH1cbn1cblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1Db2xdXCJcbn0pXG5leHBvcnQgY2xhc3MgQ29sdW1uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblx0QElucHV0KCkgY2xhc3MgPSBcIlwiO1xuXG5cdEBJbnB1dCgpIGNvbHVtbk51bWJlcnMgPSB7fTtcblxuXHRASW5wdXQoKSBvZmZzZXRzID0ge307XG5cblx0cHJvdGVjdGVkIF9jb2x1bW5DbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzXCIpXG5cdGdldCBjb2x1bW5DbGFzc2VzKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbkNsYXNzZXMuam9pbihcIiBcIik7XG5cdH1cblxuXHRzZXQoY2xhc3Nlczogc3RyaW5nKSB7XG5cdFx0dGhpcy5fY29sdW1uQ2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoXCIgXCIpO1xuXHR9XG5cblx0bmdPbkluaXQoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGNvbHVtbktleXMgPSBPYmplY3Qua2V5cyh0aGlzLmNvbHVtbk51bWJlcnMpO1xuXHRcdFx0aWYgKGNvbHVtbktleXMubGVuZ3RoIDw9IDApIHtcblx0XHRcdFx0dGhpcy5fY29sdW1uQ2xhc3Nlcy5wdXNoKFwiYngtLWNvbFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Y29sdW1uS2V5cy5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmNvbHVtbk51bWJlcnNba2V5XSA9PT0gXCJub2JyZWFrXCIpIHtcblx0XHRcdFx0XHR0aGlzLl9jb2x1bW5DbGFzc2VzLnB1c2goYGJ4LS1jb2wtJHtrZXl9YCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fY29sdW1uQ2xhc3Nlcy5wdXNoKGBieC0tY29sLSR7a2V5fS0ke3RoaXMuY29sdW1uTnVtYmVyc1trZXldfWApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0T2JqZWN0LmtleXModGhpcy5vZmZzZXRzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRcdHRoaXMuX2NvbHVtbkNsYXNzZXMucHVzaChgYngtLW9mZnNldC0ke2tleX0tJHt0aGlzLm9mZnNldHNba2V5XX1gKTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgTWFsZm9ybWVkIFxcYG9mZnNldHNcXGAgb3IgXFxgY29sdW1uTnVtYmVyc1xcYDogJHtlcnJ9YCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY2xhc3MpIHtcblx0XHRcdHRoaXMuX2NvbHVtbkNsYXNzZXMucHVzaCh0aGlzLmNsYXNzKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==