/**
 *
 * carbon-angular v0.0.0 | table-item.class.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


export class TableItem {
    /**
     * Creates an instance of TableItem.
     */
    constructor(rawData) {
        /**
         * The number of rows to span
         */
        this.rowSpan = 1;
        /**
         * The number of columns to span
         */
        this.colSpan = 1;
        // defaults so we dont leave things empty
        const defaults = {
            data: ""
        };
        // fill our object with provided props, and fallback to defaults
        const data = Object.assign({}, defaults, rawData);
        for (const property of Object.getOwnPropertyNames(data)) {
            if (data.hasOwnProperty(property)) {
                this[property] = data[property];
            }
        }
    }
    get title() {
        if (this._title) {
            return this._title;
        }
        if (!this.data) {
            return "";
        }
        if (typeof this.data === "string") {
            return this.data;
        }
        if (this.data.toString &&
            this.data.constructor !== ({}).constructor) {
            return this.data.toString();
        }
        // data canâ€™t be reasonably converted to an end user readable string
        return "";
    }
    set title(title) {
        this._title = title;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaXRlbS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS1pdGVtLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sT0FBTyxTQUFTO0lBc0lyQjs7T0FFRztJQUNILFlBQVksT0FBYTtRQTNDekI7O1dBRUc7UUFDSCxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRVo7O1dBRUc7UUFDSCxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBb0NYLHlDQUF5QztRQUN6QyxNQUFNLFFBQVEsR0FBRztZQUNoQixJQUFJLEVBQUUsRUFBRTtTQUNSLENBQUM7UUFDRixnRUFBZ0U7UUFDaEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELEtBQUssTUFBTSxRQUFRLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNoQztTQUNEO0lBQ0YsQ0FBQztJQTdDRCxJQUFJLEtBQUs7UUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZixPQUFPLEVBQUUsQ0FBQztTQUNWO1FBRUQsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUNqQjtRQUVELElBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUN6QztZQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM1QjtRQUVELG9FQUFvRTtRQUNwRSxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFLO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztDQW9CRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdFRlbXBsYXRlUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmV4cG9ydCBjbGFzcyBUYWJsZUl0ZW0ge1xuXHQvKipcblx0ICogRGF0YSBmb3IgdGhlIHRhYmxlIGl0ZW0uXG5cdCAqL1xuXHRkYXRhOiBhbnk7XG5cblx0LyoqXG5cdCAqIERhdGEgZm9yIHRoZSBleHBhbmRlZCBwYXJ0IG9mIHRoZSByb3cuXG5cdCAqXG5cdCAqIFlvdSBvbmx5IG5lZWQgdG8gc2V0IGl0IGZvciB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgcm93LlxuXHQgKlxuXHQgKiBTZWUgYGV4cGFuZEFzVGFibGVgIGRvY3VtZW50YXRpb24gaWYgeW91IG5lZWQgdG8gdGhlIHRhYmxlIHRvIGV4cGFuZCB0byBhZGRpdGlvbmFsXG5cdCAqIHRhYmxlIHJvd3MuXG5cdCAqL1xuXHRleHBhbmRlZERhdGE6IGFueTtcblxuXHQvKipcblx0ICogVXNlZCB0byBkaXNwbGF5IGRhdGEgaW4gYSBkZXNpcmVkIHdheS5cblx0ICpcblx0ICogSWYgbm90IHByb3ZpZGVkLCBkaXNwbGF5cyBkYXRhIGFzIGEgc2ltcGxlIHN0cmluZy5cblx0ICpcblx0ICogVXNhZ2U6XG5cdCAqXG5cdCAqIEluIGEgY29tcG9uZW50IHdoZXJlIHlvdSdyZSB1c2luZyB0aGUgdGFibGUgY3JlYXRlIGEgdGVtcGxhdGUgbGlrZTpcblx0ICpcblx0ICogYGBgaHRtbFxuXHQgKiA8bmctdGVtcGxhdGUgI2N1c3RvbUl0ZW1UZW1wbGF0ZSBsZXQtZGF0YT1cImRhdGFcIj5cblx0ICogXHQ8aT48YSBbcm91dGVyTGlua109XCJkYXRhLmxpbmtcIj57e2RhdGEubmFtZX19PC9hPjwvaT5cblx0ICogPC9uZy10ZW1wbGF0ZT5cblx0ICogYGBgXG5cdCAqIHdoZXJlIHdlIGFzc3VtZSB5b3VyIGRhdGEgY29udGFpbnMgYGxpbmtgIGFuZCBgbmFtZWAuIGBsZXQtZGF0YT1cImRhdGFcImAgaXNcblx0ICogbmVjZXNzYXJ5IGZvciB5b3UgdG8gYmUgYWJsZSB0byBhY2Nlc3MgaXRlbSdzIGRhdGEgaW4gdGhlIHRlbXBsYXRlLlxuXHQgKlxuXHQgKiBDcmVhdGUgYFZpZXdDaGlsZGAgcHJvcGVydHkgd2l0aDpcblx0ICpcblx0ICogYGBgdHlwZXNjcmlwdFxuXHQgKiAoYXQpVmlld0NoaWxkKFwiY3VzdG9tSXRlbVRlbXBsYXRlXCIpXG5cdCAqIHByb3RlY3RlZCBjdXN0b21JdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cdCAqIGBgYFxuXHQgKlxuXHQgKiBTZXQgdGhlIHRlbXBsYXRlIHRvIHRoZSB0YWJsZSBpdGVtLCBmb3IgZXhhbXBsZTpcblx0ICpcblx0ICogYGBgdHlwZXNjcmlwdFxuXHQgKiB0aGlzLm1vZGVsLmRhdGEgPSBbXG5cdCAqIFx0W25ldyBUYWJsZUl0ZW0oe2RhdGE6IHtuYW1lOiBcIkN1c3RvbSBpdGVtXCIsIGxpbms6IFwiL3RhYmxlXCJ9LCB0ZW1wbGF0ZTogdGhpcy5jdXN0b21JdGVtVGVtcGxhdGV9KV1cblx0ICogXTtcblx0ICogYGBgXG5cdCAqL1xuXHR0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuXHQvKipcblx0ICogVGVtcGxhdGUgZm9yIHJlbmRlcmluZyBgZXhwYW5kZWREYXRhYFxuXHQgKlxuXHQgKiBZb3Ugb25seSBuZWVkIHRvIHNldCBpdCBmb3IgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIHJvdy5cblx0ICpcblx0ICovXG5cdGV4cGFuZGVkVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cblx0LyoqXG5cdCAqIFNldHRpbmcgdGhpcyB0byBgdHJ1ZWAgbWFrZXMgdGFibGUgaW50ZXJwcmV0IGBleHBhbmRlZERhdGFgIGFzIGFkZGl0aW9uYWwgcm93cyB0byBpbnNlcnQgaW4gcGxhY2Vcblx0ICogZm9yIGV4cGFuZGVkIGRhdGEuIGBleHBhbmRlZFRlbXBsYXRlYCBpcyB0aGVuIGlnbm9yZWQuXG5cdCAqXG5cdCAqIFlvdSBjYW4gYXBwbHkgdGhlIHRlbXBsYXRlIGZvciBpbmRpdmlkdWFsIGNlbGxzIGFzIHVzdWFsLlxuXHQgKlxuXHQgKiBFeGFtcGxlIG1vZGVsIGRhdGE6XG5cdCAqXG5cdCAqIGBgYHR5cGVzY3JpcHRcblx0ICogdGhpcy5tb2RlbC5kYXRhID0gW1xuXHQgKiBcdFtuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJOYW1lIDRcIiB9KSwgbmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwidHdlclwiIH0pXSwgLy8gcmVndWxhciByb3dcblx0ICogXHRbXG5cdCAqIFx0XHRuZXcgVGFibGVJdGVtKHtcblx0ICogXHRcdFx0ZGF0YTogXCJOYW1lIDMuMVwiLFxuXHQgKiBcdFx0XHQvLyBgZXhwYW5kZWREYXRhYCBtaW1pY3MgdGhlIGZvcm1hdCBvZiB0aGUgcmVzdCBvZiB0aGUgdGFibGVcblx0ICogXHRcdFx0ZXhwYW5kZWREYXRhOiBbXG5cdCAqIFx0XHRcdFx0W1xuXHQgKiBcdFx0XHRcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwiTW9yZSBuYW1lc1wiLCBleHBhbmRlZERhdGE6IFwiTm8gdGVtcGxhdGVcIiB9KSxcblx0ICogXHRcdFx0XHRcdG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiB7IG5hbWU6IFwiTW9yZXlcIiwgbGluazogXCIjXCIgfSwgdGVtcGxhdGU6IHRoaXMuY3VzdG9tVGFibGVJdGVtVGVtcGxhdGUgfSlcblx0ICogXHRcdFx0XHRdLFxuXHQgKiBcdFx0XHRcdFtcblx0ICogXHRcdFx0XHRcdG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcIkNvcmUgbmFtZXNcIiwgZXhwYW5kZWREYXRhOiBcIk5vIHRlbXBsYXRlXCIgfSksXG5cdCAqIFx0XHRcdFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogeyBuYW1lOiBcIkNvcmV5XCIsIGxpbms6IFwiI1wiIH0sIHRlbXBsYXRlOiB0aGlzLmN1c3RvbVRhYmxlSXRlbVRlbXBsYXRlIH0pXG5cdCAqIFx0XHRcdFx0XVxuXHQgKiBcdFx0XHRdLFxuXHQgKiBcdFx0XHQvLyBgZXhwYW5kQXNUYWJsZWAgdGVsbHMgdGhlIHRhYmxlIHRvIGludGVycHJldCBgZXhwYW5kZWREYXRhYCBhcyB0YWJsZSBkYXRhXG5cdCAqIFx0XHRcdGV4cGFuZEFzVGFibGU6IHRydWVcblx0ICogXHRcdH0pLFxuXHQgKiBcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwic3dlclwiIH0pXG5cdCAqIFx0XSxcblx0ICogXHRbbmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwiTmFtZSA3XCIgfSksIG5ldyBUYWJsZUl0ZW0oe2RhdGE6IFwidHdlclwifSldIC8vIHJlZ3VsYXIgcm93XG5cdCAqIF07XG5cdCAqIGBgYFxuXHQgKi9cblx0ZXhwYW5kQXNUYWJsZTogZmFsc2U7XG5cblx0LyoqXG5cdCAqIFRoZSBudW1iZXIgb2Ygcm93cyB0byBzcGFuXG5cdCAqL1xuXHRyb3dTcGFuID0gMTtcblxuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIHNwYW5cblx0ICovXG5cdGNvbFNwYW4gPSAxO1xuXG5cdGdldCB0aXRsZSgpIHtcblx0XHRpZiAodGhpcy5fdGl0bGUpIHtcblx0XHRcdHJldHVybiB0aGlzLl90aXRsZTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuZGF0YSkge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiB0aGlzLmRhdGEgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdHJldHVybiB0aGlzLmRhdGE7XG5cdFx0fVxuXG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5kYXRhLnRvU3RyaW5nICYmXG5cdFx0XHR0aGlzLmRhdGEuY29uc3RydWN0b3IgIT09ICh7fSkuY29uc3RydWN0b3Jcblx0XHQpIHtcblx0XHRcdHJldHVybiB0aGlzLmRhdGEudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHQvLyBkYXRhIGNhbuKAmXQgYmUgcmVhc29uYWJseSBjb252ZXJ0ZWQgdG8gYW4gZW5kIHVzZXIgcmVhZGFibGUgc3RyaW5nXG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHRzZXQgdGl0bGUodGl0bGUpIHtcblx0XHR0aGlzLl90aXRsZSA9IHRpdGxlO1xuXHR9XG5cblx0cHJpdmF0ZSBfdGl0bGU6IHN0cmluZztcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBUYWJsZUl0ZW0uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyYXdEYXRhPzogYW55KSB7XG5cdFx0Ly8gZGVmYXVsdHMgc28gd2UgZG9udCBsZWF2ZSB0aGluZ3MgZW1wdHlcblx0XHRjb25zdCBkZWZhdWx0cyA9IHtcblx0XHRcdGRhdGE6IFwiXCJcblx0XHR9O1xuXHRcdC8vIGZpbGwgb3VyIG9iamVjdCB3aXRoIHByb3ZpZGVkIHByb3BzLCBhbmQgZmFsbGJhY2sgdG8gZGVmYXVsdHNcblx0XHRjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIHJhd0RhdGEpO1xuXHRcdGZvciAoY29uc3QgcHJvcGVydHkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YSkpIHtcblx0XHRcdGlmIChkYXRhLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuXHRcdFx0XHR0aGlzW3Byb3BlcnR5XSA9IGRhdGFbcHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl19