/**
 *
 * carbon-angular v0.0.0 | table-expand-button.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
export class TableExpandButton {
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * Set to true to indicate the row has expanded
         */
        this.expanded = false;
        /**
         * Set to true to indicate the row can be expanded.
         * Defaults to false to allow for correct column alignment
         */
        this.expandable = false;
        this.skeleton = false;
        this.expandClass = true;
        this.expandRow = new EventEmitter();
        this._ariaLabel = this.i18n.getOverridable("TABLE.EXPAND_BUTTON");
    }
    set ariaLabel(value) {
        this._ariaLabel.override(value);
    }
    get ariaLabel() {
        return this._ariaLabel.value;
    }
    get previousValue() {
        return this.expanded ? "collapsed" : null;
    }
    getAriaLabel() {
        return this._ariaLabel.subject;
    }
}
TableExpandButton.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: "[ibmTableExpandButton]",
                template: `
		<button
			*ngIf="expandable"
			class="bx--table-expand__button"
			[attr.aria-label]="getAriaLabel() | async"
			(click)="expandRow.emit()">
			<svg ibmIcon="chevron--right" size="16" class="bx--table-expand__svg"></svg>
		</button>
	`
            }] }
];
/** @nocollapse */
TableExpandButton.ctorParameters = () => [
    { type: I18n }
];
TableExpandButton.propDecorators = {
    expanded: [{ type: Input }],
    expandable: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    skeleton: [{ type: Input }],
    expandClass: [{ type: HostBinding, args: ["class.bx--table-expand",] }],
    previousValue: [{ type: HostBinding, args: ["attr.data-previous-value",] }],
    expandRow: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZXhwYW5kLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3RhYmxlLyIsInNvdXJjZXMiOlsiY2VsbC90YWJsZS1leHBhbmQtYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsSUFBSSxFQUFlLE1BQU0sZ0NBQWdDLENBQUM7QUFnQm5FLE1BQU0sT0FBTyxpQkFBaUI7SUFnQzdCLFlBQXNCLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO1FBL0JoQzs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7OztXQUdHO1FBQ00sZUFBVSxHQUFHLEtBQUssQ0FBQztRQVduQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWEsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFNaEQsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFckMsZUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFbkMsQ0FBQztJQXJCckMsSUFDSSxTQUFTLENBQUMsS0FBa0M7UUFDL0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksU0FBUztRQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQU1ELElBQTZDLGFBQWE7UUFDekQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMzQyxDQUFDO0lBUUQsWUFBWTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQzs7O1lBakRELFNBQVMsU0FBQztnQkFDViwrQ0FBK0M7Z0JBQy9DLFFBQVEsRUFBRSx3QkFBd0I7Z0JBQ2xDLFFBQVEsRUFBRTs7Ozs7Ozs7RUFRVDthQUNEOzs7O1lBZlEsSUFBSTs7O3VCQW9CWCxLQUFLO3lCQUtMLEtBQUs7d0JBRUwsS0FBSzt1QkFTTCxLQUFLOzBCQUVMLFdBQVcsU0FBQyx3QkFBd0I7NEJBRXBDLFdBQVcsU0FBQywwQkFBMEI7d0JBSXRDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEkxOG4sIE92ZXJyaWRhYmxlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5cbkBDb21wb25lbnQoe1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxuXHRzZWxlY3RvcjogXCJbaWJtVGFibGVFeHBhbmRCdXR0b25dXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGJ1dHRvblxuXHRcdFx0Km5nSWY9XCJleHBhbmRhYmxlXCJcblx0XHRcdGNsYXNzPVwiYngtLXRhYmxlLWV4cGFuZF9fYnV0dG9uXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiZ2V0QXJpYUxhYmVsKCkgfCBhc3luY1wiXG5cdFx0XHQoY2xpY2spPVwiZXhwYW5kUm93LmVtaXQoKVwiPlxuXHRcdFx0PHN2ZyBpYm1JY29uPVwiY2hldnJvbi0tcmlnaHRcIiBzaXplPVwiMTZcIiBjbGFzcz1cImJ4LS10YWJsZS1leHBhbmRfX3N2Z1wiPjwvc3ZnPlxuXHRcdDwvYnV0dG9uPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRhYmxlRXhwYW5kQnV0dG9uIHtcblx0LyoqXG5cdCAqIFNldCB0byB0cnVlIHRvIGluZGljYXRlIHRoZSByb3cgaGFzIGV4cGFuZGVkXG5cdCAqL1xuXHRASW5wdXQoKSBleHBhbmRlZCA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvIHRydWUgdG8gaW5kaWNhdGUgdGhlIHJvdyBjYW4gYmUgZXhwYW5kZWQuXG5cdCAqIERlZmF1bHRzIHRvIGZhbHNlIHRvIGFsbG93IGZvciBjb3JyZWN0IGNvbHVtbiBhbGlnbm1lbnRcblx0ICovXG5cdEBJbnB1dCgpIGV4cGFuZGFibGUgPSBmYWxzZTtcblxuXHRASW5wdXQoKVxuXHRzZXQgYXJpYUxhYmVsKHZhbHVlOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4pIHtcblx0XHR0aGlzLl9hcmlhTGFiZWwub3ZlcnJpZGUodmFsdWUpO1xuXHR9XG5cblx0Z2V0IGFyaWFMYWJlbCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fYXJpYUxhYmVsLnZhbHVlO1xuXHR9XG5cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdGFibGUtZXhwYW5kXCIpIGV4cGFuZENsYXNzID0gdHJ1ZTtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmRhdGEtcHJldmlvdXMtdmFsdWVcIikgZ2V0IHByZXZpb3VzVmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXhwYW5kZWQgPyBcImNvbGxhcHNlZFwiIDogbnVsbDtcblx0fVxuXG5cdEBPdXRwdXQoKSBleHBhbmRSb3cgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0cHJvdGVjdGVkIF9hcmlhTGFiZWwgPSB0aGlzLmkxOG4uZ2V0T3ZlcnJpZGFibGUoXCJUQUJMRS5FWFBBTkRfQlVUVE9OXCIpO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpMThuOiBJMThuKSB7IH1cblxuXHRnZXRBcmlhTGFiZWwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gdGhpcy5fYXJpYUxhYmVsLnN1YmplY3Q7XG5cdH1cbn1cbiJdfQ==