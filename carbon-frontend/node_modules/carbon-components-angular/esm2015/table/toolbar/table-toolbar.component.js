/**
 *
 * carbon-angular v0.0.0 | table-toolbar.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { TableModel } from "../table-model.class";
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
/**
 * The table toolbar is reserved for global table actions such as table settings, complex filter, export, or editing table data.
 *
 * ## Basic usage
 *
 * ```html
 * <ibm-table-toolbar [model]="model">
 *		<ibm-table-toolbar-actions>
 *			<button ibmButton="primary">
 *				Delete
 *				<svg ibmIcon="delete" size="16" class="bx--btn__icon"></svg>
 *			</button>
 *			<button ibmButton="primary">
 *				Save
 *				<svg ibmIcon="save" size="16" class="bx--btn__icon"></svg>
 *			</button>
 *			<button ibmButton="primary">
 *				Download
 *				<svg ibmIcon="download" size="16" class="bx--btn__icon"></svg>
 *			</button>
 *		</ibm-table-toolbar-actions>
 *			<ibm-table-toolbar-content>
 *			<ibm-table-toolbar-search [expandable]="true"></ibm-table-toolbar-search>
 *			<button ibmButton="toolbar-action">
 *				<svg ibmIcon="settings" size="16" class="bx--toolbar-action__icon"></ibm-icon-settings>
 *			</button>
 *			<button ibmButton="primary" size="sm">
 *				Primary Button
 *				<svg ibmIcon="add" size="20" class="bx--btn__icon"></svg>
 *			</button>
 *		</ibm-table-toolbar-content>
 *	</ibm-table-toolbar>
 * ```
 *
 */
export class TableToolbar {
    constructor(i18n) {
        this.i18n = i18n;
        this.size = "md";
        this.cancel = new EventEmitter();
        this.actionBarLabel = this.i18n.getOverridable("TABLE_TOOLBAR.ACTION_BAR");
        this._cancelText = this.i18n.getOverridable("TABLE_TOOLBAR.CANCEL");
        this._batchTextLegacy = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT");
        this._batchTextSingle = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT_SINGLE");
        this._batchTextMultiple = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT_MULTIPLE");
    }
    set batchText(value) {
        if (typeof value === "object") {
            this._batchTextSingle.override(value.SINGLE);
            this._batchTextMultiple.override(value.MULTIPLE);
        }
        else {
            // For compatibility with old code
            this._batchTextLegacy.override(value);
        }
    }
    set ariaLabel(value) {
        this.actionBarLabel.override(value.ACTION_BAR);
    }
    set cancelText(value) {
        this._cancelText.override(value.CANCEL);
    }
    get cancelText() {
        return { CANCEL: this._cancelText.value };
    }
    get count() {
        return this.model.totalDataLength > 0 ? this.model.rowsSelected.reduce((previous, current) => previous + (current ? 1 : 0), 0) : 0;
    }
    get selected() {
        return this.model.totalDataLength > 0 ? this.model.rowsSelected.some(item => item) : false;
    }
    onCancel() {
        this.model.selectAll(false);
        this.cancel.emit();
    }
}
TableToolbar.decorators = [
    { type: Component, args: [{
                selector: "ibm-table-toolbar",
                template: `
	<section
		class="bx--table-toolbar"
		[ngClass]="{'bx--table-toolbar--small' : size === 'sm'}">
		<div
			*ngIf="model"
			class="bx--batch-actions"
			[ngClass]="{
				'bx--batch-actions--active': selected
			}"
			[attr.aria-label]="actionBarLabel.subject | async">
			<div class="bx--action-list">
				<ng-content select="ibm-table-toolbar-actions"></ng-content>
				<button
					ibmButton="primary"
					class="bx--batch-summary__cancel"
					[tabindex]="selected ? 0 : -1"
					(click)="onCancel()">
					{{_cancelText.subject | async}}
				</button>
			</div>
			<div class="bx--batch-summary">
				<p class="bx--batch-summary__para" *ngIf="count as n">
					<ng-container *ngIf="_batchTextLegacy.subject | async as legacyText; else batchTextBlock">
						<span>{{n}}</span> {{legacyText}}
					</ng-container>
					<ng-template #batchTextBlock>
						<span *ngIf="n === 1">{{_batchTextSingle.subject | async}}</span>
						<span *ngIf="n !== 1">{{_batchTextMultiple.subject | i18nReplace: {count: n} | async}}</span>
					</ng-template>
				</p>
			</div>
		</div>
		<ng-content></ng-content>
	</section>
	`
            }] }
];
/** @nocollapse */
TableToolbar.ctorParameters = () => [
    { type: I18n }
];
TableToolbar.propDecorators = {
    model: [{ type: Input }],
    batchText: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    cancelText: [{ type: Input }],
    size: [{ type: Input }],
    cancel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,