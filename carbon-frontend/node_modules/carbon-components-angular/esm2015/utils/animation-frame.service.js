/**
 *
 * carbon-angular v0.0.0 | animation-frame.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable, NgZone } from "@angular/core";
import { Subject, from } from "rxjs";
export class AnimationFrameServiceSingleton {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.frameSource = new Subject();
        this.tick = this.frameSource.asObservable();
        this.ngZone.runOutsideAngular(() => {
            this.animationFrameId = requestAnimationFrame(this.doTick.bind(this));
        });
    }
    ngOnDestroy() {
        cancelAnimationFrame(this.animationFrameId);
    }
    doTick(frame) {
        this.frameSource.next(frame);
        this.ngZone.runOutsideAngular(() => {
            requestAnimationFrame(this.doTick.bind(this));
        });
    }
}
AnimationFrameServiceSingleton.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationFrameServiceSingleton.ctorParameters = () => [
    { type: NgZone }
];
export class AnimationFrameService {
    constructor(singleton) {
        this.singleton = singleton;
        this.tick = from(this.singleton.tick);
    }
}
AnimationFrameService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationFrameService.ctorParameters = () => [
    { type: AnimationFrameServiceSingleton }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWZyYW1lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzLyIsInNvdXJjZXMiOlsiYW5pbWF0aW9uLWZyYW1lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFVBQVUsRUFFVixNQUFNLEVBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFjLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHakQsTUFBTSxPQUFPLDhCQUE4QjtJQU8xQyxZQUFzQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUoxQixnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7UUFLN0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVixvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRVMsTUFBTSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDbEMscUJBQXFCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7OztZQXhCRCxVQUFVOzs7O1lBSlYsTUFBTTs7QUFnQ1AsTUFBTSxPQUFPLHFCQUFxQjtJQUdqQyxZQUFzQixTQUF5QztRQUF6QyxjQUFTLEdBQVQsU0FBUyxDQUFnQztRQUM5RCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7OztZQU5ELFVBQVU7Ozs7WUFJdUIsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0SW5qZWN0YWJsZSxcblx0T25EZXN0cm95LFxuXHROZ1pvbmVcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIGZyb20gfSBmcm9tIFwicnhqc1wiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uRnJhbWVTZXJ2aWNlU2luZ2xldG9uIGltcGxlbWVudHMgT25EZXN0cm95IHtcblx0cHVibGljIHRpY2s6IE9ic2VydmFibGU8bnVtYmVyPjtcblxuXHRwcm90ZWN0ZWQgZnJhbWVTb3VyY2UgPSBuZXcgU3ViamVjdDxudW1iZXI+KCk7XG5cblx0cHJvdGVjdGVkIGFuaW1hdGlvbkZyYW1lSWQ6IG51bWJlcjtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmUpIHtcblx0XHR0aGlzLnRpY2sgPSB0aGlzLmZyYW1lU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXHRcdHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMuYW5pbWF0aW9uRnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmRvVGljay5iaW5kKHRoaXMpKTtcblx0XHR9KTtcblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWVJZCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZG9UaWNrKGZyYW1lOiBudW1iZXIpIHtcblx0XHR0aGlzLmZyYW1lU291cmNlLm5leHQoZnJhbWUpO1xuXHRcdHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmRvVGljay5iaW5kKHRoaXMpKTtcblx0XHR9KTtcblx0fVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uRnJhbWVTZXJ2aWNlIHtcblx0cHVibGljIHRpY2s6IE9ic2VydmFibGU8bnVtYmVyPjtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2luZ2xldG9uOiBBbmltYXRpb25GcmFtZVNlcnZpY2VTaW5nbGV0b24pIHtcblx0XHR0aGlzLnRpY2sgPSBmcm9tKHRoaXMuc2luZ2xldG9uLnRpY2spO1xuXHR9XG59XG4iXX0=