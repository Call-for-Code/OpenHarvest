/**
 *
 * carbon-angular v0.0.0 | document.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
import { Observable, Subscription } from "rxjs";
import { getEventObservable } from "./event-observable";
export class DocumentService {
    constructor() {
        this.globalEvents = new Map();
        this.documentRef = document;
        this.subscriptions = new Subscription();
    }
    handleEvent(eventType, callback) {
        if (!this.globalEvents.has(eventType)) {
            if (this.documentRef) {
                this.globalEvents.set(eventType, getEventObservable(this.documentRef, eventType));
            }
            else {
                this.globalEvents.set(eventType, new Observable());
            }
        }
        const observable = this.globalEvents.get(eventType);
        this.subscriptions.add(observable.subscribe(callback));
    }
    handleClick(callback) {
        this.handleEvent("click", callback);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        this.globalEvents = null;
    }
}
DocumentService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHMvIiwic291cmNlcyI6WyJkb2N1bWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHeEQsTUFBTSxPQUFPLGVBQWU7SUFENUI7UUFFVyxpQkFBWSxHQUFHLElBQUksR0FBRyxFQUE2QixDQUFDO1FBRXBELGdCQUFXLEdBQUcsUUFBUSxDQUFDO1FBRXZCLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQXNCOUMsQ0FBQztJQXBCQSxXQUFXLENBQUMsU0FBaUIsRUFBRSxRQUFzQjtRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQzthQUN6RjtpQkFBTTtnQkFDTixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDO2FBQ25EO1NBQ0Q7UUFDRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFzQjtRQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQzs7O1lBM0JELFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRFdmVudE9ic2VydmFibGUgfSBmcm9tIFwiLi9ldmVudC1vYnNlcnZhYmxlXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEb2N1bWVudFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXHRwcm90ZWN0ZWQgZ2xvYmFsRXZlbnRzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8RXZlbnQ+PigpO1xuXG5cdHByb3RlY3RlZCBkb2N1bWVudFJlZiA9IGRvY3VtZW50O1xuXG5cdHByb3RlY3RlZCBzdWJzY3JpcHRpb25zID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG5cdGhhbmRsZUV2ZW50KGV2ZW50VHlwZTogc3RyaW5nLCBjYWxsYmFjazogRXZlbnRIYW5kbGVyKSB7XG5cdFx0aWYgKCF0aGlzLmdsb2JhbEV2ZW50cy5oYXMoZXZlbnRUeXBlKSkge1xuXHRcdFx0aWYgKHRoaXMuZG9jdW1lbnRSZWYpIHtcblx0XHRcdFx0dGhpcy5nbG9iYWxFdmVudHMuc2V0KGV2ZW50VHlwZSwgZ2V0RXZlbnRPYnNlcnZhYmxlKHRoaXMuZG9jdW1lbnRSZWYgYXMgYW55LCBldmVudFR5cGUpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZ2xvYmFsRXZlbnRzLnNldChldmVudFR5cGUsIG5ldyBPYnNlcnZhYmxlKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBvYnNlcnZhYmxlID0gdGhpcy5nbG9iYWxFdmVudHMuZ2V0KGV2ZW50VHlwZSk7XG5cdFx0dGhpcy5zdWJzY3JpcHRpb25zLmFkZChvYnNlcnZhYmxlLnN1YnNjcmliZShjYWxsYmFjaykpO1xuXHR9XG5cblx0aGFuZGxlQ2xpY2soY2FsbGJhY2s6IEV2ZW50SGFuZGxlcikge1xuXHRcdHRoaXMuaGFuZGxlRXZlbnQoXCJjbGlja1wiLCBjYWxsYmFjayk7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpIHtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbnMudW5zdWJzY3JpYmUoKTtcblx0XHR0aGlzLmdsb2JhbEV2ZW50cyA9IG51bGw7XG5cdH1cbn1cbiJdfQ==