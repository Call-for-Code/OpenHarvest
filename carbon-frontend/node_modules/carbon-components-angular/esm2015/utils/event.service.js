/**
 *
 * carbon-angular v0.0.0 | event.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
import { Subscription } from "rxjs";
import { DocumentService } from "./document.service";
import { getEventObservable } from "./event-observable";
export class EventService {
    constructor(documentService) {
        this.documentService = documentService;
        this.subscriptions = new Subscription();
        this.targets = new WeakMap();
    }
    on(targetElement, eventType, callback) {
        if (!this.targets.has(targetElement)) {
            this.targets.set(targetElement, new Map());
        }
        const eventMap = this.targets.get(targetElement);
        if (!eventMap.has(eventType)) {
            eventMap.set(eventType, getEventObservable(targetElement, eventType));
        }
        const subscription = eventMap.get(eventType).subscribe(callback);
        this.subscriptions.add(subscription);
    }
    onDocument(eventType, callback) {
        this.documentService.handleEvent(eventType, callback);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
EventService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventService.ctorParameters = () => [
    { type: DocumentService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHMvIiwic291cmNlcyI6WyJldmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHeEQsTUFBTSxPQUFPLFlBQVk7SUFLeEIsWUFBc0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBSjVDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVuQyxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQW9FLENBQUM7SUFFM0MsQ0FBQztJQUUxRCxFQUFFLENBQUMsYUFBb0MsRUFBRSxTQUFpQixFQUFFLFFBQXNCO1FBQ2pGLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDN0IsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDdEU7UUFFRCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsVUFBVSxDQUFDLFNBQWlCLEVBQUUsUUFBc0I7UUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7WUE3QkQsVUFBVTs7OztZQUpGLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IERvY3VtZW50U2VydmljZSB9IGZyb20gXCIuL2RvY3VtZW50LnNlcnZpY2VcIjtcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRFdmVudE9ic2VydmFibGUgfSBmcm9tIFwiLi9ldmVudC1vYnNlcnZhYmxlXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFdmVudFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXHRwcm90ZWN0ZWQgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuXHRwcm90ZWN0ZWQgdGFyZ2V0cyA9IG5ldyBXZWFrTWFwPEhUTUxFbGVtZW50IHwgRWxlbWVudCB8IERvY3VtZW50LCBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPEV2ZW50Pj4+KCk7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGRvY3VtZW50U2VydmljZTogRG9jdW1lbnRTZXJ2aWNlKSB7fVxuXG5cdG9uKHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgRWxlbWVudCwgZXZlbnRUeXBlOiBzdHJpbmcsIGNhbGxiYWNrOiBFdmVudEhhbmRsZXIpIHtcblx0XHRpZiAoIXRoaXMudGFyZ2V0cy5oYXModGFyZ2V0RWxlbWVudCkpIHtcblx0XHRcdHRoaXMudGFyZ2V0cy5zZXQodGFyZ2V0RWxlbWVudCwgbmV3IE1hcCgpKTtcblx0XHR9XG5cblx0XHRjb25zdCBldmVudE1hcCA9IHRoaXMudGFyZ2V0cy5nZXQodGFyZ2V0RWxlbWVudCk7XG5cblx0XHRpZiAoIWV2ZW50TWFwLmhhcyhldmVudFR5cGUpKSB7XG5cdFx0XHRldmVudE1hcC5zZXQoZXZlbnRUeXBlLCBnZXRFdmVudE9ic2VydmFibGUodGFyZ2V0RWxlbWVudCwgZXZlbnRUeXBlKSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gZXZlbnRNYXAuZ2V0KGV2ZW50VHlwZSkuc3Vic2NyaWJlKGNhbGxiYWNrKTtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKHN1YnNjcmlwdGlvbik7XG5cdH1cblxuXHRvbkRvY3VtZW50KGV2ZW50VHlwZTogc3RyaW5nLCBjYWxsYmFjazogRXZlbnRIYW5kbGVyKSB7XG5cdFx0dGhpcy5kb2N1bWVudFNlcnZpY2UuaGFuZGxlRXZlbnQoZXZlbnRUeXBlLCBjYWxsYmFjayk7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpIHtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbnMudW5zdWJzY3JpYmUoKTtcblx0fVxufVxuIl19