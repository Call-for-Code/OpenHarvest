/**
 *
 * carbon-angular v0.0.0 | list-row.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, ContentChildren, QueryList, Input, HostListener, ViewChild, ElementRef, EventEmitter, Output } from "@angular/core";
import { ListColumn } from "./list-column.component";
/**
 * `ListRow` provides a container for the `ListColumn`s that make up the body of a structured list.
 *
 * Example:
 * ```html
 * 	<ibm-list-row>
 *		<ibm-list-column>Row 1</ibm-list-column>
 *		<ibm-list-column nowrap="true">Row One</ibm-list-column>
 *		<ibm-list-column>
 *			Lorem ipsum dolor sit amet,
 *			consectetur adipiscing elit. Nunc dui magna,
 *			finibus id tortor sed, aliquet bibendum augue.
 *			Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *			Pellentesque vulputate nisl a porttitor interdum.
 *		</ibm-list-column>
 *	</ibm-list-row>
 * ```
 */
export class ListRow {
    constructor() {
        this.selected = false;
        /**
         * Internal event used to notify the containing `StructuredList` of changes.
         */
        this.change = new EventEmitter();
        /**
         * Set by the containing `StructuredList`. Enables or disables row level selection features.
         */
        this.selection = false;
        /**
         * Set by the containing `StructuredList`. When `selection = true`, used for the `name` property on the radio input.
         */
        this.name = "list";
        this.wrapper = true;
        this.tabindex = this.selection ? "0" : null;
    }
    ngAfterContentInit() {
        this.columns.forEach(column => {
            column.isBodyColumn = true;
            column.isHeaderColumn = false;
        });
    }
    onclick() {
        if (this.selection) {
            this.input.nativeElement.click();
        }
    }
    onChange(event) {
        this.change.emit(event);
    }
}
ListRow.decorators = [
    { type: Component, args: [{
                selector: "ibm-list-row",
                template: `
		<ng-content></ng-content>
		<ng-container *ngIf="selection">
			<input
				#input
				tabindex="-1"
				class="bx--structured-list-input"
				type="radio"
				[value]="value"
				[name]="name"
				[title]="label"
				(change)="onChange($event)"
				[checked]="selected"/>
			<div class="bx--structured-list-td">
				<svg ibmIcon="checkmark--filled" size="16" class="bx--structured-list-svg"></svg>
			</div>
		</ng-container>
	`
            }] }
];
ListRow.propDecorators = {
    selected: [{ type: Input }, { type: HostBinding, args: ["class.bx--structured-list-row--selected",] }],
    label: [{ type: Input }, { type: HostBinding, args: ["attr.aria-label",] }],
    value: [{ type: Input }],
    change: [{ type: Output }],
    wrapper: [{ type: HostBinding, args: ["class.bx--structured-list-row",] }],
    tabindex: [{ type: HostBinding, args: ["attr.tabindex",] }],
    columns: [{ type: ContentChildren, args: [ListColumn,] }],
    input: [{ type: ViewChild, args: ["input", { static: false },] }],
    onclick: [{ type: HostListener, args: ["click",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1yb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9zdHJ1Y3R1cmVkLWxpc3QvIiwic291cmNlcyI6WyJsaXN0LXJvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxXQUFXLEVBQ1gsZUFBZSxFQUNmLFNBQVMsRUFFVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFckQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBc0JILE1BQU0sT0FBTyxPQUFPO0lBckJwQjtRQXNCa0UsYUFBUSxHQUFHLEtBQUssQ0FBQztRQVNsRjs7V0FFRztRQUNPLFdBQU0sR0FBd0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzRDs7V0FFRztRQUNILGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEI7O1dBRUc7UUFDSCxTQUFJLEdBQUcsTUFBTSxDQUFDO1FBRWdDLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDL0IsYUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBd0J0RSxDQUFDO0lBakJBLGtCQUFrQjtRQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM3QixNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUMzQixNQUFNLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFHRCxPQUFPO1FBQ04sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2pDO0lBQ0YsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFLO1FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQzs7O1lBckVELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7OztFQWlCVDthQUNEOzs7dUJBRUMsS0FBSyxZQUFJLFdBQVcsU0FBQyx5Q0FBeUM7b0JBSTlELEtBQUssWUFBSSxXQUFXLFNBQUMsaUJBQWlCO29CQUl0QyxLQUFLO3FCQUlMLE1BQU07c0JBV04sV0FBVyxTQUFDLCtCQUErQjt1QkFDM0MsV0FBVyxTQUFDLGVBQWU7c0JBRTNCLGVBQWUsU0FBQyxVQUFVO29CQUcxQixTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtzQkFTcEMsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdEhvc3RCaW5kaW5nLFxuXHRDb250ZW50Q2hpbGRyZW4sXG5cdFF1ZXJ5TGlzdCxcblx0QWZ0ZXJDb250ZW50SW5pdCxcblx0SW5wdXQsXG5cdEhvc3RMaXN0ZW5lcixcblx0Vmlld0NoaWxkLFxuXHRFbGVtZW50UmVmLFxuXHRFdmVudEVtaXR0ZXIsXG5cdE91dHB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTGlzdENvbHVtbiB9IGZyb20gXCIuL2xpc3QtY29sdW1uLmNvbXBvbmVudFwiO1xuXG4vKipcbiAqIGBMaXN0Um93YCBwcm92aWRlcyBhIGNvbnRhaW5lciBmb3IgdGhlIGBMaXN0Q29sdW1uYHMgdGhhdCBtYWtlIHVwIHRoZSBib2R5IG9mIGEgc3RydWN0dXJlZCBsaXN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiBcdDxpYm0tbGlzdC1yb3c+XG4gKlx0XHQ8aWJtLWxpc3QtY29sdW1uPlJvdyAxPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHQ8aWJtLWxpc3QtY29sdW1uIG5vd3JhcD1cInRydWVcIj5Sb3cgT25lPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHQ8aWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHRMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCxcbiAqXHRcdFx0Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBOdW5jIGR1aSBtYWduYSxcbiAqXHRcdFx0ZmluaWJ1cyBpZCB0b3J0b3Igc2VkLCBhbGlxdWV0IGJpYmVuZHVtIGF1Z3VlLlxuICpcdFx0XHRBZW5lYW4gcG9zdWVyZSBzZW0gdmVsIGV1aXNtb2QgZGlnbmlzc2ltLiBOdWxsYSB1dCBjdXJzdXMgZG9sb3IuXG4gKlx0XHRcdFBlbGxlbnRlc3F1ZSB2dWxwdXRhdGUgbmlzbCBhIHBvcnR0aXRvciBpbnRlcmR1bS5cbiAqXHRcdDwvaWJtLWxpc3QtY29sdW1uPlxuICpcdDwvaWJtLWxpc3Qtcm93PlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tbGlzdC1yb3dcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cInNlbGVjdGlvblwiPlxuXHRcdFx0PGlucHV0XG5cdFx0XHRcdCNpbnB1dFxuXHRcdFx0XHR0YWJpbmRleD1cIi0xXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tc3RydWN0dXJlZC1saXN0LWlucHV0XCJcblx0XHRcdFx0dHlwZT1cInJhZGlvXCJcblx0XHRcdFx0W3ZhbHVlXT1cInZhbHVlXCJcblx0XHRcdFx0W25hbWVdPVwibmFtZVwiXG5cdFx0XHRcdFt0aXRsZV09XCJsYWJlbFwiXG5cdFx0XHRcdChjaGFuZ2UpPVwib25DaGFuZ2UoJGV2ZW50KVwiXG5cdFx0XHRcdFtjaGVja2VkXT1cInNlbGVjdGVkXCIvPlxuXHRcdFx0PGRpdiBjbGFzcz1cImJ4LS1zdHJ1Y3R1cmVkLWxpc3QtdGRcIj5cblx0XHRcdFx0PHN2ZyBpYm1JY29uPVwiY2hlY2ttYXJrLS1maWxsZWRcIiBzaXplPVwiMTZcIiBjbGFzcz1cImJ4LS1zdHJ1Y3R1cmVkLWxpc3Qtc3ZnXCI+PC9zdmc+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L25nLWNvbnRhaW5lcj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0Um93IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cdEBJbnB1dCgpIEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zdHJ1Y3R1cmVkLWxpc3Qtcm93LS1zZWxlY3RlZFwiKSBzZWxlY3RlZCA9IGZhbHNlO1xuXHQvKipcblx0ICogQXBwbGllcyBhbiBhY2Nlc3NpYmxlIGxhYmVsIHRvIHRoZSByb3cuIERlZmF1bHRzIHRvIG5vIGxhYmVsLlxuXHQgKi9cblx0QElucHV0KCkgQEhvc3RCaW5kaW5nKFwiYXR0ci5hcmlhLWxhYmVsXCIpIGxhYmVsO1xuXHQvKipcblx0ICogVGhlIHZhbHVlIGZvciB0aGUgcm93LiBSZXR1cm5lZCB2aWEgYG5nTW9kZWxgIG9yIGBzZWxlY3RlZGAgZXZlbnQgb24gdGhlIGNvbnRhaW5pbmcgYFN0cnVjdHVyZWRMaXN0YC5cblx0ICovXG5cdEBJbnB1dCgpIHZhbHVlO1xuXHQvKipcblx0ICogSW50ZXJuYWwgZXZlbnQgdXNlZCB0byBub3RpZnkgdGhlIGNvbnRhaW5pbmcgYFN0cnVjdHVyZWRMaXN0YCBvZiBjaGFuZ2VzLlxuXHQgKi9cblx0QE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHQvKipcblx0ICogU2V0IGJ5IHRoZSBjb250YWluaW5nIGBTdHJ1Y3R1cmVkTGlzdGAuIEVuYWJsZXMgb3IgZGlzYWJsZXMgcm93IGxldmVsIHNlbGVjdGlvbiBmZWF0dXJlcy5cblx0ICovXG5cdHNlbGVjdGlvbiA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IGJ5IHRoZSBjb250YWluaW5nIGBTdHJ1Y3R1cmVkTGlzdGAuIFdoZW4gYHNlbGVjdGlvbiA9IHRydWVgLCB1c2VkIGZvciB0aGUgYG5hbWVgIHByb3BlcnR5IG9uIHRoZSByYWRpbyBpbnB1dC5cblx0ICovXG5cdG5hbWUgPSBcImxpc3RcIjtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tc3RydWN0dXJlZC1saXN0LXJvd1wiKSB3cmFwcGVyID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci50YWJpbmRleFwiKSB0YWJpbmRleCA9IHRoaXMuc2VsZWN0aW9uID8gXCIwXCIgOiBudWxsO1xuXG5cdEBDb250ZW50Q2hpbGRyZW4oTGlzdENvbHVtbikgY29sdW1uczogUXVlcnlMaXN0PExpc3RDb2x1bW4+O1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0QFZpZXdDaGlsZChcImlucHV0XCIsIHsgc3RhdGljOiBmYWxzZSB9KSBpbnB1dDogRWxlbWVudFJlZjtcblxuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcblx0XHRcdGNvbHVtbi5pc0JvZHlDb2x1bW4gPSB0cnVlO1xuXHRcdFx0Y29sdW1uLmlzSGVhZGVyQ29sdW1uID0gZmFsc2U7XG5cdFx0fSk7XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwiY2xpY2tcIilcblx0b25jbGljaygpIHtcblx0XHRpZiAodGhpcy5zZWxlY3Rpb24pIHtcblx0XHRcdHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5jbGljaygpO1xuXHRcdH1cblx0fVxuXG5cdG9uQ2hhbmdlKGV2ZW50KSB7XG5cdFx0dGhpcy5jaGFuZ2UuZW1pdChldmVudCk7XG5cdH1cbn1cbiJdfQ==