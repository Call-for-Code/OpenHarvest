/**
 *
 * carbon-angular v0.0.0 | list-column.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input } from "@angular/core";
/**
 * `ListColumn` represents a single column in a `StructuredList`.
 *
 * `ListColumn`s can be used in a `ListHeader` to specify the column headers, or in `ListRow`s to specify the column data.
 *
 * Example:
 * ```html
 * <ibm-list-column nowrap="true">Column 1</ibm-list-column>
 * ```
 */
export class ListColumn {
    constructor() {
        this.skeleton = false;
        this.isHeaderColumn = true;
        this.isBodyColumn = true;
        /**
         * Applies `white-space: nowrap` to the content of this `ListColumn`
         */
        this.nowrap = false;
    }
}
ListColumn.decorators = [
    { type: Component, args: [{
                selector: "ibm-list-column",
                template: `
		<span *ngIf="skeleton"></span>
		<ng-content></ng-content>
	`
            }] }
];
ListColumn.propDecorators = {
    skeleton: [{ type: Input }],
    isHeaderColumn: [{ type: HostBinding, args: ["class.bx--structured-list-th",] }],
    isBodyColumn: [{ type: HostBinding, args: ["class.bx--structured-list-td",] }],
    nowrap: [{ type: HostBinding, args: ["class.bx--structured-list-content--nowrap",] }, { type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9zdHJ1Y3R1cmVkLWxpc3QvIiwic291cmNlcyI6WyJsaXN0LWNvbHVtbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlEOzs7Ozs7Ozs7R0FTRztBQVFILE1BQU0sT0FBTyxVQUFVO0lBUHZCO1FBUVUsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVtQixtQkFBYyxHQUFHLElBQUksQ0FBQztRQUN0QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNqRTs7V0FFRztRQUNnRSxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ25GLENBQUM7OztZQWhCQSxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsUUFBUSxFQUFFOzs7RUFHVDthQUNEOzs7dUJBRUMsS0FBSzs2QkFFTCxXQUFXLFNBQUMsOEJBQThCOzJCQUMxQyxXQUFXLFNBQUMsOEJBQThCO3FCQUkxQyxXQUFXLFNBQUMsMkNBQTJDLGNBQUcsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuLyoqXG4gKiBgTGlzdENvbHVtbmAgcmVwcmVzZW50cyBhIHNpbmdsZSBjb2x1bW4gaW4gYSBgU3RydWN0dXJlZExpc3RgLlxuICpcbiAqIGBMaXN0Q29sdW1uYHMgY2FuIGJlIHVzZWQgaW4gYSBgTGlzdEhlYWRlcmAgdG8gc3BlY2lmeSB0aGUgY29sdW1uIGhlYWRlcnMsIG9yIGluIGBMaXN0Um93YHMgdG8gc3BlY2lmeSB0aGUgY29sdW1uIGRhdGEuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxpYm0tbGlzdC1jb2x1bW4gbm93cmFwPVwidHJ1ZVwiPkNvbHVtbiAxPC9pYm0tbGlzdC1jb2x1bW4+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1saXN0LWNvbHVtblwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxzcGFuICpuZ0lmPVwic2tlbGV0b25cIj48L3NwYW4+XG5cdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIExpc3RDb2x1bW4ge1xuXHRASW5wdXQoKSBza2VsZXRvbiA9IGZhbHNlO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zdHJ1Y3R1cmVkLWxpc3QtdGhcIikgaXNIZWFkZXJDb2x1bW4gPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tc3RydWN0dXJlZC1saXN0LXRkXCIpIGlzQm9keUNvbHVtbiA9IHRydWU7XG5cdC8qKlxuXHQgKiBBcHBsaWVzIGB3aGl0ZS1zcGFjZTogbm93cmFwYCB0byB0aGUgY29udGVudCBvZiB0aGlzIGBMaXN0Q29sdW1uYFxuXHQgKi9cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXN0cnVjdHVyZWQtbGlzdC1jb250ZW50LS1ub3dyYXBcIikgQElucHV0KCkgbm93cmFwID0gZmFsc2U7XG59XG4iXX0=