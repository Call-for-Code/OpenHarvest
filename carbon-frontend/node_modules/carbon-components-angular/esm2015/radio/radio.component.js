/**
 *
 * carbon-angular v0.0.0 | radio.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, EventEmitter } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { RadioChange } from "./radio-change.class";
/**
 * class: Radio (extends Checkbox)
 *
 * selector: `n-radio`
 *
 * source: `src/forms/radio.component.ts`
 *
 * ```html
 * <ibm-radio [(ngModel)]="radioState">Radio</ibm-radio>
 * ```
 *
 * Also see: [`RadioGroup`](#ibm-radio-group)
 */
export class Radio {
    constructor() {
        this.checked = false;
        this.name = "";
        this.disabled = false;
        this.labelPlacement = "right";
        /**
         * Used to set the `aria-label` attribute on the input label.
         */
        this.ariaLabel = "";
        /**
         * Sets the HTML required attribute
         */
        this.required = false;
        /**
         * The value of the `Radio`.
         */
        this.value = "";
        /**
         * Set to `true` for a loading table.
         */
        this.skeleton = false;
        /**
         * The id for the `Radio`.
         */
        this.id = `radio-${Radio.radioCount++}`;
        /**
         * emits when the state of the radio changes
         */
        this.change = new EventEmitter();
        this.hostClass = true;
        this._labelledby = "";
        /**
         * Handler provided by the `RadioGroup` to bubble events up
         */
        this.radioChangeHandler = (event) => { };
    }
    set ariaLabelledby(value) {
        this._labelledby = value;
    }
    get ariaLabelledby() {
        if (this._labelledby) {
            return this._labelledby;
        }
        return `label-${this.id}`;
    }
    get labelLeft() {
        return this.labelPlacement === "left";
    }
    /**
     * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.
     * Emits the changes of both the `RadioGroup` and `Radio`.
     */
    onChange(event) {
        event.stopPropagation();
    }
    onClick(event) {
        this.checked = event.target.checked;
        const radioEvent = new RadioChange(this, this.value);
        this.change.emit(radioEvent);
        this.radioChangeHandler(radioEvent);
    }
    /**
     * Method called by `RadioGroup` with a callback function to bubble `RadioChange` events
     * @param fn callback that expects a `RadioChange` as an argument
     */
    registerRadioChangeHandler(fn) {
        this.radioChangeHandler = fn;
    }
}
/**
 * Used to dynamically create unique ids for the `Radio`.
 */
Radio.radioCount = 0;
Radio.decorators = [
    { type: Component, args: [{
                selector: "ibm-radio",
                template: `
		<input
			*ngIf="!skeleton"
			class="bx--radio-button"
			type="radio"
			[checked]="checked"
			[disabled]="disabled"
			[name]="name"
			[id]="id"
			[required]="required"
			[value]="value"
			[attr.aria-labelledby]="ariaLabelledby"
			(change)="onChange($event)"
			(click)="onClick($event)">
		<div *ngIf="skeleton" class="bx--radio-button bx--skeleton"></div>
		<label
			class="bx--radio-button__label"
			[attr.aria-label]="ariaLabel"
			[ngClass]="{
				'bx--skeleton': skeleton
			}"
			[for]="id"
			id="label-{{id}}">
			<span class="bx--radio-button__appearance"></span>
			<ng-content></ng-content>
		</label>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Radio,
                        multi: true
                    }
                ]
            }] }
];
Radio.propDecorators = {
    checked: [{ type: Input }],
    name: [{ type: Input }],
    disabled: [{ type: Input }],
    labelPlacement: [{ type: Input }],
    ariaLabelledby: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    skeleton: [{ type: Input }],
    id: [{ type: Input }],
    change: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ["class.bx--radio-button-wrapper",] }],
    labelLeft: [{ type: HostBinding, args: ["class.bx--radio-button-wrapper--label-left",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9yYWRpby8iLCJzb3VyY2VzIjpbInJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQ7Ozs7Ozs7Ozs7OztHQVlHO0FBc0NILE1BQU0sT0FBTyxLQUFLO0lBckNsQjtRQTJDVSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFFVixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLG1CQUFjLEdBQXNCLE9BQU8sQ0FBQztRQWFyRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFFeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ00sVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNwQjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxPQUFFLEdBQUcsU0FBUyxLQUFLLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztRQUM1Qzs7V0FFRztRQUNPLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBZSxDQUFDO1FBRUosY0FBUyxHQUFHLElBQUksQ0FBQztRQU10RCxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUUzQjs7V0FFRztRQUNILHVCQUFrQixHQUFHLENBQUMsS0FBa0IsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFDO0lBd0JqRCxDQUFDO0lBeEVBLElBQWEsY0FBYyxDQUFDLEtBQWE7UUFDeEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksY0FBYztRQUNqQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBOEJELElBQStELFNBQVM7UUFDdkUsT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0lBU0Q7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLEtBQVk7UUFDcEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBWTtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFJLEtBQUssQ0FBQyxNQUEyQixDQUFDLE9BQU8sQ0FBQztRQUMxRCxNQUFNLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMEJBQTBCLENBQUMsRUFBZ0M7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDOztBQXBGRDs7R0FFRztBQUNJLGdCQUFVLEdBQUcsQ0FBQyxDQUFDOztZQXpDdEIsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMEJUO2dCQUNELFNBQVMsRUFBRTtvQkFDVjt3QkFDQyxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsS0FBSzt3QkFDbEIsS0FBSyxFQUFFLElBQUk7cUJBQ1g7aUJBQ0Q7YUFDRDs7O3NCQU9DLEtBQUs7bUJBRUwsS0FBSzt1QkFFTCxLQUFLOzZCQUVMLEtBQUs7NkJBRUwsS0FBSzt3QkFjTCxLQUFLO3VCQUtMLEtBQUs7b0JBSUwsS0FBSzt1QkFJTCxLQUFLO2lCQUlMLEtBQUs7cUJBSUwsTUFBTTt3QkFFTixXQUFXLFNBQUMsZ0NBQWdDO3dCQUU1QyxXQUFXLFNBQUMsNENBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0SG9zdEJpbmRpbmcsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgUmFkaW9DaGFuZ2UgfSBmcm9tIFwiLi9yYWRpby1jaGFuZ2UuY2xhc3NcIjtcblxuLyoqXG4gKiBjbGFzczogUmFkaW8gKGV4dGVuZHMgQ2hlY2tib3gpXG4gKlxuICogc2VsZWN0b3I6IGBuLXJhZGlvYFxuICpcbiAqIHNvdXJjZTogYHNyYy9mb3Jtcy9yYWRpby5jb21wb25lbnQudHNgXG4gKlxuICogYGBgaHRtbFxuICogPGlibS1yYWRpbyBbKG5nTW9kZWwpXT1cInJhZGlvU3RhdGVcIj5SYWRpbzwvaWJtLXJhZGlvPlxuICogYGBgXG4gKlxuICogQWxzbyBzZWU6IFtgUmFkaW9Hcm91cGBdKCNpYm0tcmFkaW8tZ3JvdXApXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tcmFkaW9cIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8aW5wdXRcblx0XHRcdCpuZ0lmPVwiIXNrZWxldG9uXCJcblx0XHRcdGNsYXNzPVwiYngtLXJhZGlvLWJ1dHRvblwiXG5cdFx0XHR0eXBlPVwicmFkaW9cIlxuXHRcdFx0W2NoZWNrZWRdPVwiY2hlY2tlZFwiXG5cdFx0XHRbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuXHRcdFx0W25hbWVdPVwibmFtZVwiXG5cdFx0XHRbaWRdPVwiaWRcIlxuXHRcdFx0W3JlcXVpcmVkXT1cInJlcXVpcmVkXCJcblx0XHRcdFt2YWx1ZV09XCJ2YWx1ZVwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuXHRcdFx0KGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCJcblx0XHRcdChjbGljayk9XCJvbkNsaWNrKCRldmVudClcIj5cblx0XHQ8ZGl2ICpuZ0lmPVwic2tlbGV0b25cIiBjbGFzcz1cImJ4LS1yYWRpby1idXR0b24gYngtLXNrZWxldG9uXCI+PC9kaXY+XG5cdFx0PGxhYmVsXG5cdFx0XHRjbGFzcz1cImJ4LS1yYWRpby1idXR0b25fX2xhYmVsXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2J4LS1za2VsZXRvbic6IHNrZWxldG9uXG5cdFx0XHR9XCJcblx0XHRcdFtmb3JdPVwiaWRcIlxuXHRcdFx0aWQ9XCJsYWJlbC17e2lkfX1cIj5cblx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLXJhZGlvLWJ1dHRvbl9fYXBwZWFyYW5jZVwiPjwvc3Bhbj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L2xhYmVsPlxuXHRgLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcblx0XHRcdHVzZUV4aXN0aW5nOiBSYWRpbyxcblx0XHRcdG11bHRpOiB0cnVlXG5cdFx0fVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIFJhZGlvIHtcblx0LyoqXG5cdCAqIFVzZWQgdG8gZHluYW1pY2FsbHkgY3JlYXRlIHVuaXF1ZSBpZHMgZm9yIHRoZSBgUmFkaW9gLlxuXHQgKi9cblx0c3RhdGljIHJhZGlvQ291bnQgPSAwO1xuXG5cdEBJbnB1dCgpIGNoZWNrZWQgPSBmYWxzZTtcblxuXHRASW5wdXQoKSBuYW1lID0gXCJcIjtcblxuXHRASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIGxhYmVsUGxhY2VtZW50OiBcInJpZ2h0XCIgfCBcImxlZnRcIiA9ICBcInJpZ2h0XCI7XG5cblx0QElucHV0KCkgc2V0IGFyaWFMYWJlbGxlZGJ5KHZhbHVlOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9sYWJlbGxlZGJ5ID0gdmFsdWU7XG5cdH1cblxuXHRnZXQgYXJpYUxhYmVsbGVkYnkoKSB7XG5cdFx0aWYgKHRoaXMuX2xhYmVsbGVkYnkpIHtcblx0XHRcdHJldHVybiB0aGlzLl9sYWJlbGxlZGJ5O1xuXHRcdH1cblx0XHRyZXR1cm4gYGxhYmVsLSR7dGhpcy5pZH1gO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gc2V0IHRoZSBgYXJpYS1sYWJlbGAgYXR0cmlidXRlIG9uIHRoZSBpbnB1dCBsYWJlbC5cblx0ICovXG5cdEBJbnB1dCgpIGFyaWFMYWJlbCA9IFwiXCI7XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIEhUTUwgcmVxdWlyZWQgYXR0cmlidXRlXG5cdCAqL1xuXHRASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuXHQvKipcblx0ICogVGhlIHZhbHVlIG9mIHRoZSBgUmFkaW9gLlxuXHQgKi9cblx0QElucHV0KCkgdmFsdWUgPSBcIlwiO1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCBmb3IgYSBsb2FkaW5nIHRhYmxlLlxuXHQgKi9cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblx0LyoqXG5cdCAqIFRoZSBpZCBmb3IgdGhlIGBSYWRpb2AuXG5cdCAqL1xuXHRASW5wdXQoKSBpZCA9IGByYWRpby0ke1JhZGlvLnJhZGlvQ291bnQrK31gO1xuXHQvKipcblx0ICogZW1pdHMgd2hlbiB0aGUgc3RhdGUgb2YgdGhlIHJhZGlvIGNoYW5nZXNcblx0ICovXG5cdEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFJhZGlvQ2hhbmdlPigpO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1yYWRpby1idXR0b24td3JhcHBlclwiKSBob3N0Q2xhc3MgPSB0cnVlO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1yYWRpby1idXR0b24td3JhcHBlci0tbGFiZWwtbGVmdFwiKSBnZXQgbGFiZWxMZWZ0KCkge1xuXHRcdHJldHVybiB0aGlzLmxhYmVsUGxhY2VtZW50ID09PSBcImxlZnRcIjtcblx0fVxuXG5cdHByb3RlY3RlZCBfbGFiZWxsZWRieSA9IFwiXCI7XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgcHJvdmlkZWQgYnkgdGhlIGBSYWRpb0dyb3VwYCB0byBidWJibGUgZXZlbnRzIHVwXG5cdCAqL1xuXHRyYWRpb0NoYW5nZUhhbmRsZXIgPSAoZXZlbnQ6IFJhZGlvQ2hhbmdlKSA9PiB7fTtcblxuXHQvKipcblx0ICogU3luY2hyb25pemVzIHdpdGggdGhlIGBSYWRpb0dyb3VwYCBpbiB0aGUgZXZlbnQgb2YgYSBjaGFuZ2VkIGBSYWRpb2AuXG5cdCAqIEVtaXRzIHRoZSBjaGFuZ2VzIG9mIGJvdGggdGhlIGBSYWRpb0dyb3VwYCBhbmQgYFJhZGlvYC5cblx0ICovXG5cdG9uQ2hhbmdlKGV2ZW50OiBFdmVudCkge1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG5cblx0b25DbGljayhldmVudDogRXZlbnQpIHtcblx0XHR0aGlzLmNoZWNrZWQgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQ7XG5cdFx0Y29uc3QgcmFkaW9FdmVudCA9IG5ldyBSYWRpb0NoYW5nZSh0aGlzLCB0aGlzLnZhbHVlKTtcblx0XHR0aGlzLmNoYW5nZS5lbWl0KHJhZGlvRXZlbnQpO1xuXHRcdHRoaXMucmFkaW9DaGFuZ2VIYW5kbGVyKHJhZGlvRXZlbnQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ldGhvZCBjYWxsZWQgYnkgYFJhZGlvR3JvdXBgIHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbiB0byBidWJibGUgYFJhZGlvQ2hhbmdlYCBldmVudHNcblx0ICogQHBhcmFtIGZuIGNhbGxiYWNrIHRoYXQgZXhwZWN0cyBhIGBSYWRpb0NoYW5nZWAgYXMgYW4gYXJndW1lbnRcblx0ICovXG5cdHJlZ2lzdGVyUmFkaW9DaGFuZ2VIYW5kbGVyKGZuOiAoZXZlbnQ6IFJhZGlvQ2hhbmdlKSA9PiB2b2lkKSB7XG5cdFx0dGhpcy5yYWRpb0NoYW5nZUhhbmRsZXIgPSBmbjtcblx0fVxufVxuIl19