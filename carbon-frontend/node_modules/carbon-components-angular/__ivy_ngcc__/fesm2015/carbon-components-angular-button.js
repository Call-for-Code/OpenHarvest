/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-button.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * A convenience directive for applying styling to a button.
 *
 * [See demo](../../?path=/story/button--basic)
 *
 * Example:
 *
 * ```html
 * <button ibmButton>A button</button>
 * <button ibmButton="secondary">A secondary button</button>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.
 *
 * <example-url>../../iframe.html?id=button--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
class Button {
    constructor() {
        /**
         * sets the button type
         */
        this.ibmButton = "primary";
        /**
         * If assistive text is used, this specifies the placement.
         * Possible placements are `top`, `bottom`, `left`, `right`.
         * If assistive text is not used, this can be left undefined.
         */
        this.assistiveTextPlacement = "top";
        /**
         * If assistive text is used, this specifies the alignment.
         * Possible alignments are `center`, `start`, `end`.
         * If assistive text is not used, this can be left undefined.
         */
        this.assistiveTextAlignment = "center";
        this.skeleton = false;
        this.toolbarAction = false;
        this.overflowMenu = false;
        this.iconOnly = false;
        /**
         * `hasAssistiveText` input specifies whether the button contains assistive text or not.
         * Assistive text can be utilized as follows:
         * ```typescript
         *	<button
         *		ibmButton="tertiary"
         *		[iconOnly]="true"
         *		[hasAssistiveText]="true"
         *		assistiveTextPlacement="top"
         *		assistiveTextAlignment="center">
         *		<svg class="bx--btn__icon" ibmIconCopy size="20"></svg>
         *		<span class="bx--assistive-text">Icon description</span>
         *	</button>
         * ```
         */
        this.hasAssistiveText = false;
    }
    // a whole lot of HostBindings ... this way we don't have to touch the elementRef directly
    get baseClass() {
        return !this.toolbarAction;
    }
    get primaryButton() {
        return this.ibmButton === "primary";
    }
    get secondaryButton() {
        return this.ibmButton === "secondary";
    }
    get tertiaryButton() {
        return this.ibmButton === "tertiary";
    }
    get ghostButton() {
        return this.ibmButton === "ghost";
    }
    get dangerButton() {
        return this.ibmButton === "danger" || this.ibmButton === "danger--primary";
    }
    get smallSize() {
        return this.size === "sm";
    }
    get fieldSize() {
        return this.size === "field";
    }
    get isAssistiveTextCenterAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "center";
    }
    get isAssistiveTextStartAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "start";
    }
    get isAssistiveTextEndAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "end";
    }
    get isAssistiveTextTopPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "top";
    }
    get isAssistiveTextBottomPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "bottom";
    }
    get isAssistiveTextLeftPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "left";
    }
    get isAssistiveTextRightPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "right";
    }
    ngOnInit() {
        if (!this.ibmButton) {
            this.ibmButton = "primary";
        }
    }
}
Button.ɵfac = function Button_Factory(t) { return new (t || Button)(); };
Button.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Button, selectors: [["", "ibmButton", ""]], hostVars: 42, hostBindings: function Button_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--skeleton", ctx.skeleton)("bx--toolbar-action", ctx.toolbarAction)("bx--overflow-menu", ctx.overflowMenu)("bx--btn--icon-only", ctx.iconOnly)("bx--tooltip__trigger", ctx.hasAssistiveText)("bx--tooltip--a11y", ctx.hasAssistiveText)("bx--btn", ctx.baseClass)("bx--btn--primary", ctx.primaryButton)("bx--btn--secondary", ctx.secondaryButton)("bx--btn--tertiary", ctx.tertiaryButton)("bx--btn--ghost", ctx.ghostButton)("bx--btn--danger", ctx.dangerButton)("bx--btn--sm", ctx.smallSize)("bx--btn--field", ctx.fieldSize)("bx--tooltip--align-center", ctx.isAssistiveTextCenterAligned)("bx--tooltip--align-start", ctx.isAssistiveTextStartAligned)("bx--tooltip--align-end", ctx.isAssistiveTextEndAligned)("bx--tooltip--top", ctx.isAssistiveTextTopPositioned)("bx--tooltip--bottom", ctx.isAssistiveTextBottomPositioned)("bx--tooltip--left", ctx.isAssistiveTextLeftPositioned)("bx--tooltip--right", ctx.isAssistiveTextRightPositioned);
    } }, inputs: { ibmButton: "ibmButton", assistiveTextPlacement: "assistiveTextPlacement", assistiveTextAlignment: "assistiveTextAlignment", skeleton: "skeleton", iconOnly: "iconOnly", hasAssistiveText: "hasAssistiveText", size: "size" } });
Button.propDecorators = {
    ibmButton: [{ type: Input }],
    size: [{ type: Input }],
    assistiveTextPlacement: [{ type: Input }],
    assistiveTextAlignment: [{ type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--btn",] }],
    primaryButton: [{ type: HostBinding, args: ["class.bx--btn--primary",] }],
    secondaryButton: [{ type: HostBinding, args: ["class.bx--btn--secondary",] }],
    tertiaryButton: [{ type: HostBinding, args: ["class.bx--btn--tertiary",] }],
    ghostButton: [{ type: HostBinding, args: ["class.bx--btn--ghost",] }],
    dangerButton: [{ type: HostBinding, args: ["class.bx--btn--danger",] }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    smallSize: [{ type: HostBinding, args: ["class.bx--btn--sm",] }],
    fieldSize: [{ type: HostBinding, args: ["class.bx--btn--field",] }],
    toolbarAction: [{ type: HostBinding, args: ["class.bx--toolbar-action",] }],
    overflowMenu: [{ type: HostBinding, args: ["class.bx--overflow-menu",] }],
    iconOnly: [{ type: HostBinding, args: ["class.bx--btn--icon-only",] }, { type: Input }],
    hasAssistiveText: [{ type: HostBinding, args: ["class.bx--tooltip__trigger",] }, { type: HostBinding, args: ["class.bx--tooltip--a11y",] }, { type: Input }],
    isAssistiveTextCenterAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-center",] }],
    isAssistiveTextStartAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-start",] }],
    isAssistiveTextEndAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-end",] }],
    isAssistiveTextTopPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--top",] }],
    isAssistiveTextBottomPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--bottom",] }],
    isAssistiveTextLeftPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--left",] }],
    isAssistiveTextRightPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--right",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Button, [{
        type: Directive,
        args: [{
                selector: "[ibmButton]"
            }]
    }], function () { return []; }, { ibmButton: [{
            type: Input
        }], assistiveTextPlacement: [{
            type: Input
        }], assistiveTextAlignment: [{
            type: Input
        }], skeleton: [{
            type: HostBinding,
            args: ["class.bx--skeleton"]
        }, {
            type: Input
        }], toolbarAction: [{
            type: HostBinding,
            args: ["class.bx--toolbar-action"]
        }], overflowMenu: [{
            type: HostBinding,
            args: ["class.bx--overflow-menu"]
        }], iconOnly: [{
            type: HostBinding,
            args: ["class.bx--btn--icon-only"]
        }, {
            type: Input
        }], hasAssistiveText: [{
            type: HostBinding,
            args: ["class.bx--tooltip__trigger"]
        }, {
            type: HostBinding,
            args: ["class.bx--tooltip--a11y"]
        }, {
            type: Input
        }], baseClass: [{
            type: HostBinding,
            args: ["class.bx--btn"]
        }], primaryButton: [{
            type: HostBinding,
            args: ["class.bx--btn--primary"]
        }], secondaryButton: [{
            type: HostBinding,
            args: ["class.bx--btn--secondary"]
        }], tertiaryButton: [{
            type: HostBinding,
            args: ["class.bx--btn--tertiary"]
        }], ghostButton: [{
            type: HostBinding,
            args: ["class.bx--btn--ghost"]
        }], dangerButton: [{
            type: HostBinding,
            args: ["class.bx--btn--danger"]
        }], smallSize: [{
            type: HostBinding,
            args: ["class.bx--btn--sm"]
        }], fieldSize: [{
            type: HostBinding,
            args: ["class.bx--btn--field"]
        }], isAssistiveTextCenterAligned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--align-center"]
        }], isAssistiveTextStartAligned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--align-start"]
        }], isAssistiveTextEndAligned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--align-end"]
        }], isAssistiveTextTopPositioned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--top"]
        }], isAssistiveTextBottomPositioned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--bottom"]
        }], isAssistiveTextLeftPositioned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--left"]
        }], isAssistiveTextRightPositioned: [{
            type: HostBinding,
            args: ["class.bx--tooltip--right"]
        }], size: [{
            type: Input
        }] }); })();

class ButtonModule {
}
ButtonModule.ɵfac = function ButtonModule_Factory(t) { return new (t || ButtonModule)(); };
ButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ButtonModule });
ButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonModule, { declarations: function () { return [Button]; }, imports: function () { return [CommonModule]; }, exports: function () { return [Button]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [Button],
                exports: [Button],
                imports: [CommonModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { Button, ButtonModule };

//# sourceMappingURL=carbon-components-angular-button.js.map