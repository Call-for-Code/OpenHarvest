{"version":3,"file":"carbon-components-angular-skeleton.js","sources":["carbon-components-angular/skeleton/skeleton-placeholder.component.ts","carbon-components-angular/skeleton/skeleton-text.component.ts","carbon-components-angular/skeleton/skeleton.module.ts","carbon-components-angular/skeleton/carbon-components-angular-skeleton.ts"],"names":[],"mappings":";;;;GAOa,mBAAmB;AAC/B;AAAG,YANH,SAAS,SAAC;AACwB,gBAAlC,QAAQ,EAAE,0BAA0B;AAEpC,gBADA,QAAQ,EAAE;AACI;AAAG,6CAA8B,hCAC/C;AACgC;AAAC;AACkC,MCIvD,YAAY;AAGpB,IAbL;AAIS,QAOC,UAAK,GAAG,CAAC,CAAC;AAIL,QAFL,iBAAY,GAAG,GAAG,CAAC;AAE7B;AAAI;AAAC;AAAC,EAAI,iBAAY,GAAG,GAAG,CAAC,vBAkB5B;AACuD;AAAgD;;;;;;;;;;AAAC,GAZxG,YAAY,CAAC,GAAG,EAAE,GAAG,hBACpB,OAAO,GAAG,IAAI,CAAC;AAAK,CAAC;GAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,5CACrE,CAED,WAAW;gBAGV,IAAI,CAAC,UAAU,iBACd,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,kBAClC;;;;;;;;;;0BAAE;AAAC;AAAC,GAAG,IAAI,IAAI,CAAC;AAAS,GAAG,CAAC,IAAI,CAAC,TAGtB,YAlChB;CA+BkD,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,vBA/BhE,CAAC,SAAC,MACV;AAAQ,EAAE,mBAAmB,LAC7B,QAAQ,EAAE;AAEX;AAAiC;AAC9B;AAAQ;AAKW;AAAQ,EAF5B;AAEqB,aADtB;AAEa;AAAM;AAEF,oBAFhB,KAAK;AAIC,2BAFN,KAAK;AAES;AAEL,CAFT,KAAK;AAEY;AAGoD;ACJ1D;YAAc,4BAb1B,QAAQ,SAAC,mBACT,YAAY,EAAE;mCACb,mBAAmB,SACnB,YAAY,VACZ,mCACD,OAAO,EAAE,yBACR,mBAAmB,OACnB,YAAY,RACZ,EACD;;;;2DAAG;AAAC,GAAG,EAAE,YACR,YAAY,ZACZ;AAES,aADV;AACc;AACK;ACnBpB;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AACH,GACG;AAEe;;;;;;;;;;;;;;;;;;;;;;0BAC6X;AAAC;AAAC;AAAI;AAAwC;AAAI;AAAC;;AHEA,AAAA,AALA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AACA,ACMA,AAAA,AAVA,AAWA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAkBA,AAXA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAGA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAhCA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAMA,AACA,AAEA,AAAA,AAEA,AAAA,AAEA,AAAA,ACCA,AAAA,AAbA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AACA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AACA,AAAA,AAAA,AACA,AAAA,AACA,AACA,ACjBA,AAEA","sourcesContent":["import { Component } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-skeleton-placeholder\",\n\ttemplate: `\n\t\t<div class=\"bx--skeleton__placeholder\"></div>`\n})\nexport class SkeletonPlaceholder { }\n","import { Component, Input, OnChanges } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-skeleton-text\",\n\ttemplate: `\n\t\t<p\n\t\t\t*ngFor=\"let width of lineWidths\"\n\t\t\tclass=\"bx--skeleton__text\"\n\t\t\t[style.width]=\"width\">\n\t\t</p>\n\t`\n})\nexport class SkeletonText implements OnChanges {\n\t@Input() lines = 5;\n\n\t@Input() minLineWidth = 100;\n\n\t@Input() maxLineWidth = 300;\n\n\tlineWidths: Array<string>;\n\n\t/**\n\t * Returns a random width in pixels based off a min width, and a max width.\n\t */\n\tgetRandomInt(min, max) {\n\t\treturn `${Math.floor(Math.random() * (max - min + 1) + min) + \"px\"}`;\n\t}\n\n\tngOnChanges() {\n\t\t// Creates an array of length defined by input lines with content from\n\t\t// 0 to lines - 1, maps each value to a random width in pixels.\n\t\tthis.lineWidths =\n\t\t\tArray.from(Array(this.lines).keys())\n\t\t\t\t.map(num => this.getRandomInt(this.minLineWidth, this.maxLineWidth));\n\t}\n}\n","import { SkeletonPlaceholder } from \"./skeleton-placeholder.component\";\nimport { SkeletonText } from \"./skeleton-text.component\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n\tdeclarations: [\n\t\tSkeletonPlaceholder,\n\t\tSkeletonText\n\t],\n\texports: [\n\t\tSkeletonPlaceholder,\n\t\tSkeletonText\n\t],\n\timports: [\n\t\tCommonModule\n\t]\n})\nexport class SkeletonModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}