/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-accordion.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, TemplateRef, EventEmitter, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/icon';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0) { return { "bx--skeleton__text": a0 }; };
function AccordionItem_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "p", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.skeleton));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", !ctx_r0.skeleton ? ctx_r0.title : null, " ");
} }
function AccordionItem_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
} }
function AccordionItem_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵtemplate(0, AccordionItem_3_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.title)("ngTemplateOutletContext", ctx_r1.context);
} }
function AccordionItem_ng_content_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!skeleton; else skeletonTemplate"]);
} }
function AccordionItem_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p", 9);
    ɵngcc0.ɵɵelement(1, "p", 10);
    ɵngcc0.ɵɵelement(2, "p", 11);
} }
const _c1 = ["*"];
class AccordionItem {
    constructor() {
        this.context = null;
        this.id = `accordion-item-${AccordionItem.accordionItemCount}`;
        this.skeleton = false;
        this.selected = new EventEmitter();
        this.itemClass = true;
        this.expanded = false;
        this.itemType = "list-item";
        this.role = "heading";
        this.ariaLevel = 3;
        AccordionItem.accordionItemCount++;
    }
    toggleExpanded() {
        if (!this.skeleton) {
            this.expanded = !this.expanded;
            this.selected.emit({ id: this.id, expanded: this.expanded });
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
AccordionItem.ɵfac = function AccordionItem_Factory(t) { return new (t || AccordionItem)(); };
AccordionItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AccordionItem, selectors: [["ibm-accordion-item"]], hostVars: 8, hostBindings: function AccordionItem_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-level", ctx.ariaLevel);
        ɵngcc0.ɵɵstyleProp("display", ctx.itemType);
        ɵngcc0.ɵɵclassProp("bx--accordion__item", ctx.itemClass)("bx--accordion__item--active", ctx.expanded);
    } }, inputs: { context: "context", id: "id", skeleton: "skeleton", expanded: "expanded", ariaLevel: "ariaLevel", title: "title" }, outputs: { selected: "selected" }, ngContentSelectors: _c1, decls: 8, vars: 7, consts: [["type", "button", 1, "bx--accordion__heading", 3, "click"], ["ibmIcon", "chevron--right", "size", "16", 1, "bx--accordion__arrow"], ["class", "bx--accordion__title", 3, "ngClass", 4, "ngIf"], [4, "ngIf"], [1, "bx--accordion__content", 3, "id"], [4, "ngIf", "ngIfElse"], ["skeletonTemplate", ""], [1, "bx--accordion__title", 3, "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "bx--skeleton__text", 2, "width", "90%"], [1, "bx--skeleton__text", 2, "width", "80%"], [1, "bx--skeleton__text", 2, "width", "95%"]], template: function AccordionItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function AccordionItem_Template_button_click_0_listener() { return ctx.toggleExpanded(); });
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(1, "svg", 1);
        ɵngcc0.ɵɵtemplate(2, AccordionItem_p_2_Template, 2, 4, "p", 2);
        ɵngcc0.ɵɵtemplate(3, AccordionItem_3_Template, 1, 2, undefined, 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, AccordionItem_ng_content_5_Template, 1, 0, "ng-content", 5);
        ɵngcc0.ɵɵtemplate(6, AccordionItem_ng_template_6_Template, 3, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(7);
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.expanded)("aria-controls", ctx.id);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isTemplate(ctx.title));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTemplate(ctx.title));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton)("ngIfElse", _r3);
    } }, directives: [ɵngcc1.IconDirective, ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc2.NgTemplateOutlet], encapsulation: 2 });
AccordionItem.accordionItemCount = 0;
/** @nocollapse */
AccordionItem.ctorParameters = () => [];
AccordionItem.propDecorators = {
    title: [{ type: Input }],
    context: [{ type: Input }],
    id: [{ type: Input }],
    skeleton: [{ type: Input }],
    selected: [{ type: Output }],
    itemClass: [{ type: HostBinding, args: ["class.bx--accordion__item",] }],
    expanded: [{ type: HostBinding, args: ["class.bx--accordion__item--active",] }, { type: Input }],
    itemType: [{ type: HostBinding, args: ["style.display",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    ariaLevel: [{ type: HostBinding, args: ["attr.aria-level",] }, { type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AccordionItem, [{
        type: Component,
        args: [{
                selector: "ibm-accordion-item",
                template: `
		<button
			type="button"
			[attr.aria-expanded]="expanded"
			[attr.aria-controls]="id"
			(click)="toggleExpanded()"
			class="bx--accordion__heading">
			<svg ibmIcon="chevron--right" size="16" class="bx--accordion__arrow"></svg>
			<p *ngIf="!isTemplate(title)"
				class="bx--accordion__title"
				[ngClass]="{
					'bx--skeleton__text': skeleton
				}">
				{{!skeleton ? title : null}}
			</p>
			<ng-template
				*ngIf="isTemplate(title)"
				[ngTemplateOutlet]="title"
				[ngTemplateOutletContext]="context">
			</ng-template>
		</button>
		<div [id]="id" class="bx--accordion__content">
			<ng-content *ngIf="!skeleton; else skeletonTemplate"></ng-content>
			<ng-template #skeletonTemplate>
				<p class="bx--skeleton__text" style="width: 90%"></p>
				<p class="bx--skeleton__text" style="width: 80%"></p>
				<p class="bx--skeleton__text" style="width: 95%"></p>
			</ng-template>
		</div>
	`
            }]
    }], function () { return []; }, { context: [{
            type: Input
        }], id: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], selected: [{
            type: Output
        }], itemClass: [{
            type: HostBinding,
            args: ["class.bx--accordion__item"]
        }], expanded: [{
            type: HostBinding,
            args: ["class.bx--accordion__item--active"]
        }, {
            type: Input
        }], itemType: [{
            type: HostBinding,
            args: ["style.display"]
        }], role: [{
            type: HostBinding,
            args: ["attr.role"]
        }], ariaLevel: [{
            type: HostBinding,
            args: ["attr.aria-level"]
        }, {
            type: Input
        }], title: [{
            type: Input
        }] }); })();

/**
 * [See demo](../../?path=/story/accordion--basic)
 *
 * <example-url>../../iframe.html?id=accordion--basic</example-url>
 */
class Accordion {
    constructor() {
        this.align = "end";
        this._skeleton = false;
    }
    set skeleton(value) {
        this._skeleton = value;
        this.updateChildren();
    }
    get skeleton() {
        return this._skeleton;
    }
    ngAfterContentInit() {
        this.updateChildren();
    }
    updateChildren() {
        if (this.children) {
            this.children.toArray().forEach(child => child.skeleton = this.skeleton);
        }
    }
}
Accordion.ɵfac = function Accordion_Factory(t) { return new (t || Accordion)(); };
Accordion.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Accordion, selectors: [["ibm-accordion"]], contentQueries: function Accordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, AccordionItem, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, inputs: { align: "align", skeleton: "skeleton" }, ngContentSelectors: _c1, decls: 2, vars: 4, consts: [[1, "bx--accordion"]], template: function Accordion_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--accordion--end", ctx.align == "end")("bx--accordion--start", ctx.align == "start");
    } }, encapsulation: 2 });
Accordion.propDecorators = {
    align: [{ type: Input }],
    children: [{ type: ContentChildren, args: [AccordionItem,] }],
    skeleton: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Accordion, [{
        type: Component,
        args: [{
                selector: "ibm-accordion",
                template: `
		<ul class="bx--accordion"
			[class.bx--accordion--end]="align == 'end'"
			[class.bx--accordion--start]="align == 'start'">
			<ng-content></ng-content>
		</ul>
	`
            }]
    }], function () { return []; }, { align: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], children: [{
            type: ContentChildren,
            args: [AccordionItem]
        }] }); })();

class AccordionModule {
}
AccordionModule.ɵfac = function AccordionModule_Factory(t) { return new (t || AccordionModule)(); };
AccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AccordionModule });
AccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AccordionModule, { declarations: function () { return [Accordion, AccordionItem]; }, imports: function () { return [CommonModule,
        IconModule]; }, exports: function () { return [Accordion, AccordionItem]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AccordionModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    Accordion,
                    AccordionItem
                ],
                exports: [
                    Accordion,
                    AccordionItem
                ],
                imports: [
                    CommonModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionItem, Accordion, AccordionModule };

//# sourceMappingURL=carbon-components-angular-accordion.js.map