/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-grid.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { Directive, HostBinding, Input, NgModule } from '@angular/core';

/**
 * [See demo](../../?path=/story/grid--basic)
 *
 * <example-url>../../iframe.html?id=grid--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
class GridDirective {
    constructor() {
        this.baseClass = true;
        this.condensed = false;
    }
}
GridDirective.ɵfac = function GridDirective_Factory(t) { return new (t || GridDirective)(); };
GridDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GridDirective, selectors: [["", "ibmGrid", ""]], hostVars: 4, hostBindings: function GridDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--grid", ctx.baseClass)("bx--grid--condensed", ctx.condensed);
    } }, inputs: { condensed: "condensed" } });
GridDirective.propDecorators = {
    baseClass: [{ type: HostBinding, args: ["class.bx--grid",] }],
    condensed: [{ type: HostBinding, args: ["class.bx--grid--condensed",] }, { type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmGrid]"
            }]
    }], function () { return []; }, { baseClass: [{
            type: HostBinding,
            args: ["class.bx--grid"]
        }], condensed: [{
            type: HostBinding,
            args: ["class.bx--grid--condensed"]
        }, {
            type: Input
        }] }); })();
class RowDirective {
    constructor() {
        this.gutter = true;
        this.leftGutter = true;
        this.rightGutter = true;
        this.baseClass = true;
        this.condensed = false;
    }
    get showGutter() {
        return !this.gutter;
    }
    get showLeftGutter() {
        return !this.leftGutter;
    }
    get showRightGutter() {
        return !this.rightGutter;
    }
}
RowDirective.ɵfac = function RowDirective_Factory(t) { return new (t || RowDirective)(); };
RowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RowDirective, selectors: [["", "ibmRow", ""]], hostVars: 10, hostBindings: function RowDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--row", ctx.baseClass)("bx--row--condensed", ctx.condensed)("bx--no-gutter", ctx.showGutter)("bx--no-gutter--left", ctx.showLeftGutter)("bx--no-gutter--right", ctx.showRightGutter);
    } }, inputs: { gutter: "gutter", leftGutter: "leftGutter", rightGutter: "rightGutter", condensed: "condensed" } });
RowDirective.propDecorators = {
    gutter: [{ type: Input }],
    leftGutter: [{ type: Input }],
    rightGutter: [{ type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--row",] }],
    condensed: [{ type: HostBinding, args: ["class.bx--row--condensed",] }, { type: Input }],
    showGutter: [{ type: HostBinding, args: ["class.bx--no-gutter",] }],
    showLeftGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--left",] }],
    showRightGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--right",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RowDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmRow]"
            }]
    }], function () { return []; }, { gutter: [{
            type: Input
        }], leftGutter: [{
            type: Input
        }], rightGutter: [{
            type: Input
        }], baseClass: [{
            type: HostBinding,
            args: ["class.bx--row"]
        }], condensed: [{
            type: HostBinding,
            args: ["class.bx--row--condensed"]
        }, {
            type: Input
        }], showGutter: [{
            type: HostBinding,
            args: ["class.bx--no-gutter"]
        }], showLeftGutter: [{
            type: HostBinding,
            args: ["class.bx--no-gutter--left"]
        }], showRightGutter: [{
            type: HostBinding,
            args: ["class.bx--no-gutter--right"]
        }] }); })();
class ColumnDirective {
    constructor() {
        this.class = "";
        this.columnNumbers = {};
        this.offsets = {};
        this._columnClasses = [];
    }
    get columnClasses() {
        return this._columnClasses.join(" ");
    }
    set(classes) {
        this._columnClasses = classes.split(" ");
    }
    ngOnInit() {
        try {
            const columnKeys = Object.keys(this.columnNumbers);
            if (columnKeys.length <= 0) {
                this._columnClasses.push("bx--col");
            }
            columnKeys.forEach(key => {
                if (this.columnNumbers[key] === "nobreak") {
                    this._columnClasses.push(`bx--col-${key}`);
                }
                else {
                    this._columnClasses.push(`bx--col-${key}-${this.columnNumbers[key]}`);
                }
            });
            Object.keys(this.offsets).forEach(key => {
                this._columnClasses.push(`bx--offset-${key}-${this.offsets[key]}`);
            });
        }
        catch (err) {
            console.error(`Malformed \`offsets\` or \`columnNumbers\`: ${err}`);
        }
        if (this.class) {
            this._columnClasses.push(this.class);
        }
    }
}
ColumnDirective.ɵfac = function ColumnDirective_Factory(t) { return new (t || ColumnDirective)(); };
ColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ColumnDirective, selectors: [["", "ibmCol", ""]], hostVars: 2, hostBindings: function ColumnDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.columnClasses);
    } }, inputs: { class: "class", columnNumbers: "columnNumbers", offsets: "offsets" } });
ColumnDirective.propDecorators = {
    class: [{ type: Input }],
    columnNumbers: [{ type: Input }],
    offsets: [{ type: Input }],
    columnClasses: [{ type: HostBinding, args: ["class",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColumnDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmCol]"
            }]
    }], function () { return []; }, { class: [{
            type: Input
        }], columnNumbers: [{
            type: Input
        }], offsets: [{
            type: Input
        }], columnClasses: [{
            type: HostBinding,
            args: ["class"]
        }] }); })();

class GridModule {
}
GridModule.ɵfac = function GridModule_Factory(t) { return new (t || GridModule)(); };
GridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GridModule });
GridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridModule, { declarations: function () { return [ColumnDirective, GridDirective, RowDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ColumnDirective, GridDirective, RowDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ColumnDirective,
                    GridDirective,
                    RowDirective
                ],
                exports: [
                    ColumnDirective,
                    GridDirective,
                    RowDirective
                ],
                imports: [CommonModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { GridModule, GridDirective, RowDirective, ColumnDirective };

//# sourceMappingURL=carbon-components-angular-grid.js.map