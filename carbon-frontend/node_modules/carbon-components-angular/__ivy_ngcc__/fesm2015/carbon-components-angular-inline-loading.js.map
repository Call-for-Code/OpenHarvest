{"version":3,"file":"carbon-components-angular-inline-loading.js","sources":["carbon-components-angular/inline-loading/inline-loading.component.ts","carbon-components-angular/inline-loading/inline-loading.module.ts","carbon-components-angular/inline-loading/carbon-components-angular-inline-loading.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding\n} from \"@angular/core\";\n\nexport enum InlineLoadingState {\n\t/** It hides the whole component. */\n\tHidden = \"hidden\",\n\t/** It shows the `loadingText` but no loading animation. */\n\tInactive = \"inactive\",\n\t/** It shows the `loadingText` with loading animation. */\n\tActive = \"active\",\n\t/** It shows the `successText` with a success state. */\n\tFinished = \"finished\",\n\t/** It shows the `errorText` with an error state. */\n\tError = \"error\"\n}\n\n/**\n * [See demo](../../?path=/story/inline-loading--basic)\n *\n * <example-url>../../iframe.html?id=inline-loading--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-inline-loading\",\n\ttemplate: `\n\t\t<div *ngIf=\"state !== InlineLoadingState.Hidden\"\n\t\t\tclass=\"bx--inline-loading__animation\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\t\tclass=\"bx--loading bx--loading--small\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--loading--stop': state === InlineLoadingState.Inactive\n\t\t\t\t}\">\n\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n\t\t\t\t\t<circle class=\"bx--loading__background\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t\t<circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Finished\"\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading__checkmark-container\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Error\"\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading--error\">\n\t\t\t</svg>\n\t\t</div>\n\t\t<p\n\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\tclass=\"bx--inline-loading__text\">{{loadingText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Finished\" class=\"bx--inline-loading__text\">{{successText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Error\" class=\"bx--inline-loading__text\">{{errorText}}</p>\n\t`\n})\nexport class InlineLoading {\n\tInlineLoadingState = InlineLoadingState;\n\n\t/**\n\t * Specify the text description for the loading state.\n\t */\n\t@Input() state: InlineLoadingState | string = InlineLoadingState.Active;\n\t/**\n\t * Specify the text description for the loading state.\n\t */\n\t@Input() loadingText: string;\n\t/**\n\t * Specify the text description for the success state.\n\t */\n\t@Input() successText: string;\n\t/**\n\t * Provide a delay for the `setTimeout` for success.\n\t */\n\t@Input() successDelay = 1500;\n\t/**\n\t * Specify the text description for the error state.\n\t */\n\t@Input() errorText: string;\n\t/**\n\t * set to `false` to stop the loading animation\n\t */\n\t@Input() get isActive() {\n\t\treturn this.state === InlineLoadingState.Active;\n\t}\n\tset isActive(active: boolean) {\n\t\tthis.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;\n\t}\n\n\t/**\n\t * Returns value `true` if the component is in the success state.\n\t */\n\t@Input() get success() {\n\t\treturn this.state === InlineLoadingState.Finished;\n\t}\n\t/**\n\t * Set the component's state to match the parameter and emits onSuccess if it exits.\n\t */\n\tset success(success: boolean) {\n\t\tthis.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;\n\t\tif (this.state === InlineLoadingState.Finished) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.onSuccess.emit();\n\t\t\t}, this.successDelay);\n\t\t}\n\t}\n\n\t/**\n\t * Emits event after the success state is active\n\t */\n\t@Output() onSuccess: EventEmitter<any> = new EventEmitter();\n\n\t@HostBinding(\"class.bx--inline-loading\") loadingClass = true;\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { InlineLoading } from \"./inline-loading.component\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n\n@NgModule({\n\tdeclarations: [InlineLoading],\n\texports: [InlineLoading],\n\timports: [CommonModule, IconModule]\n})\nexport class InlineLoadingModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}