/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-content-switcher.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { isFocusInLastItem, isFocusInFirstItem } from 'carbon-components-angular/common';
import { Directive, HostBinding, Input, HostListener, Output, EventEmitter, Component, ContentChildren, ElementRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
class ContentSwitcherOption {
    constructor() {
        /**
         * Internal name for the option.
         * Should be something that identifies the option to the application.
         * Accessible from the `ContentSwitcher` `selected` emitter
         */
        this.name = "option";
        /**
         * Emits when the option is selected.
         */
        this.selected = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.switcherClass = "bx--content-switcher-btn";
        this.selectedClass = false;
        this.role = "tab";
        this.ariaSelected = false;
        this.tabindex = "-1";
        this._active = false;
    }
    /**
     * Used to activate the option. Only one option may be `active` at a time
     */
    set active(value) {
        this._active = value;
        this.selectedClass = value;
        this.ariaSelected = value;
        this.tabindex = value ? "0" : "-1";
    }
    get active() {
        return this._active;
    }
    hostClick(event) {
        this.onClick.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    }
    doFocus(event) {
        this.onFocus.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    }
}
ContentSwitcherOption.ɵfac = function ContentSwitcherOption_Factory(t) { return new (t || ContentSwitcherOption)(); };
ContentSwitcherOption.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ContentSwitcherOption, selectors: [["", "ibmContentOption", ""]], hostVars: 7, hostBindings: function ContentSwitcherOption_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ContentSwitcherOption_click_HostBindingHandler($event) { return ctx.hostClick($event); })("focus", function ContentSwitcherOption_focus_HostBindingHandler($event) { return ctx.doFocus($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-selected", ctx.ariaSelected)("tabIndex", ctx.tabindex);
        ɵngcc0.ɵɵclassMap(ctx.switcherClass);
        ɵngcc0.ɵɵclassProp("bx--content-switcher--selected", ctx.selectedClass);
    } }, inputs: { name: "name", active: "active" }, outputs: { selected: "selected", onClick: "onClick", onFocus: "onFocus" } });
ContentSwitcherOption.propDecorators = {
    active: [{ type: Input }],
    name: [{ type: Input }],
    selected: [{ type: Output }],
    onClick: [{ type: Output }],
    onFocus: [{ type: Output }],
    switcherClass: [{ type: HostBinding, args: ["class",] }],
    selectedClass: [{ type: HostBinding, args: ["class.bx--content-switcher--selected",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    ariaSelected: [{ type: HostBinding, args: ["attr.aria-selected",] }],
    tabindex: [{ type: HostBinding, args: ["attr.tabIndex",] }],
    hostClick: [{ type: HostListener, args: ["click", ["$event"],] }],
    doFocus: [{ type: HostListener, args: ["focus", ["$event"],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentSwitcherOption, [{
        type: Directive,
        args: [{
                selector: "[ibmContentOption]"
            }]
    }], function () { return []; }, { name: [{
            type: Input
        }], selected: [{
            type: Output
        }], onClick: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], switcherClass: [{
            type: HostBinding,
            args: ["class"]
        }], selectedClass: [{
            type: HostBinding,
            args: ["class.bx--content-switcher--selected"]
        }], role: [{
            type: HostBinding,
            args: ["attr.role"]
        }], ariaSelected: [{
            type: HostBinding,
            args: ["attr.aria-selected"]
        }], tabindex: [{
            type: HostBinding,
            args: ["attr.tabIndex"]
        }], active: [{
            type: Input
        }], hostClick: [{
            type: HostListener,
            args: ["click", ["$event"]]
        }], doFocus: [{
            type: HostListener,
            args: ["focus", ["$event"]]
        }] }); })();

/**
 * The content switcher can be used for toggling between distinct options.
 * Similar to tabs, but without an associated content panel
 *
 * [See demo](../../?path=/story/content-switcher--basic)
 *
 * ```html
 * <ibm-content-switcher (selected)="selected($event)">
 *		<button ibmContentOption>First section</button>
 *		<button ibmContentOption>Second section</button>
 *		<button ibmContentOption>Third section</button>
 *	</ibm-content-switcher>
 *	```
 *
 * <example-url>../../iframe.html?id=content-switcher--basic</example-url>
 */
class ContentSwitcher {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.ariaLabel = "content switcher";
        /**
         * `light` or `dark` content switcher theme
         */
        this.theme = "dark";
        /**
         * Emits the activated `ContentSwitcherOption`
         */
        this.selected = new EventEmitter();
    }
    ngAfterViewInit() {
        const firstActive = this.options.find(option => option.active);
        // delay setting active until the DOM has settled
        if (!firstActive) {
            setTimeout(() => this.options.first.active = true);
        }
        // subscribe to each item, emit when one is selected, and reset the active states
        this.options.forEach(option => {
            option.selected.subscribe((_) => {
                const active = option;
                this.options.forEach(option => {
                    if (option !== active) {
                        option.active = false;
                    }
                });
                this.selected.emit(active);
            });
        });
    }
    hostkeys(event) {
        const buttonList = Array.from(this.elementRef.nativeElement.querySelectorAll("[ibmContentOption]"));
        switch (event.key) {
            case "Right": // IE specific value
            case "ArrowRight":
                event.preventDefault();
                if (!isFocusInLastItem(event, buttonList)) {
                    const index = buttonList.findIndex(item => item === event.target);
                    buttonList[index + 1].focus();
                }
                else {
                    buttonList[0].focus();
                }
                break;
            case "Left": // IE specific value
            case "ArrowLeft":
                event.preventDefault();
                if (!isFocusInFirstItem(event, buttonList)) {
                    const index = buttonList.findIndex(item => item === event.target);
                    buttonList[index - 1].focus();
                }
                else {
                    buttonList[buttonList.length - 1].focus();
                }
                break;
            case "Home":
                event.preventDefault();
                buttonList[0].focus();
                break;
            case "End":
                event.preventDefault();
                buttonList[buttonList.length - 1].focus();
                break;
        }
    }
}
ContentSwitcher.ɵfac = function ContentSwitcher_Factory(t) { return new (t || ContentSwitcher)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ContentSwitcher.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentSwitcher, selectors: [["ibm-content-switcher"]], contentQueries: function ContentSwitcher_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ContentSwitcherOption, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);
    } }, hostBindings: function ContentSwitcher_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function ContentSwitcher_keydown_HostBindingHandler($event) { return ctx.hostkeys($event); });
    } }, inputs: { ariaLabel: "ariaLabel", theme: "theme" }, outputs: { selected: "selected" }, ngContentSelectors: _c0, decls: 2, vars: 3, consts: [["role", "tablist", 1, "bx--content-switcher"]], template: function ContentSwitcher_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--content-switcher--light", ctx.theme === "light");
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel);
    } }, encapsulation: 2 });
/** @nocollapse */
ContentSwitcher.ctorParameters = () => [
    { type: ElementRef }
];
ContentSwitcher.propDecorators = {
    ariaLabel: [{ type: Input }],
    theme: [{ type: Input }],
    selected: [{ type: Output }],
    options: [{ type: ContentChildren, args: [ContentSwitcherOption,] }],
    hostkeys: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentSwitcher, [{
        type: Component,
        args: [{
                selector: "ibm-content-switcher",
                template: `
		<div
			[attr.aria-label]="ariaLabel"
			class="bx--content-switcher"
			[class.bx--content-switcher--light]="theme === 'light'"
			role="tablist">
			<ng-content></ng-content>
		</div>
	`
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { ariaLabel: [{
            type: Input
        }], theme: [{
            type: Input
        }], selected: [{
            type: Output
        }], hostkeys: [{
            type: HostListener,
            args: ["keydown", ["$event"]]
        }], options: [{
            type: ContentChildren,
            args: [ContentSwitcherOption]
        }] }); })();

class ContentSwitcherModule {
}
ContentSwitcherModule.ɵfac = function ContentSwitcherModule_Factory(t) { return new (t || ContentSwitcherModule)(); };
ContentSwitcherModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentSwitcherModule });
ContentSwitcherModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentSwitcherModule, { declarations: function () { return [ContentSwitcher, ContentSwitcherOption]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ContentSwitcher, ContentSwitcherOption]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentSwitcherModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ContentSwitcher,
                    ContentSwitcherOption
                ],
                exports: [
                    ContentSwitcher,
                    ContentSwitcherOption
                ],
                imports: [CommonModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ContentSwitcher, ContentSwitcherOption, ContentSwitcherModule };

//# sourceMappingURL=carbon-components-angular-content-switcher.js.map