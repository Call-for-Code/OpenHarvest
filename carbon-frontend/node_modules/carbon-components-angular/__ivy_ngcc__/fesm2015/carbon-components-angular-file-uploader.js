/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-file-uploader.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18n } from 'carbon-components-angular/i18n';
import { Component, Input, Output, ViewChild, EventEmitter, TemplateRef, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ButtonModule } from 'carbon-components-angular/button';
import { LoadingModule } from 'carbon-components-angular/loading';
import { IconModule } from 'carbon-components-angular/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/i18n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'carbon-components-angular/button';
import * as ɵngcc4 from 'carbon-components-angular/icon';
import * as ɵngcc5 from 'carbon-components-angular/loading';

const _c0 = ["fileInput"];
function FileUploader_ng_container_0_label_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.dropText);
} }
function FileUploader_ng_container_0_label_6_3_ng_template_0_Template(rf, ctx) { }
function FileUploader_ng_container_0_label_6_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FileUploader_ng_container_0_label_6_3_ng_template_0_Template, 0, 0, "ng-template", 14);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r8.dropText);
} }
const _c1 = function (a0) { return { "bx--file-browse-btn--disabled": a0 }; };
const _c2 = function (a0) { return { "bx--file__drop-container--drag-over": a0 }; };
function FileUploader_ng_container_0_label_6_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 11);
    ɵngcc0.ɵɵlistener("keyup.enter", function FileUploader_ng_container_0_label_6_Template_label_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); ɵngcc0.ɵɵnextContext(); const _r5 = ɵngcc0.ɵɵreference(9); return _r5.click(); })("keyup.space", function FileUploader_ng_container_0_label_6_Template_label_keyup_space_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); ɵngcc0.ɵɵnextContext(); const _r5 = ɵngcc0.ɵɵreference(9); return _r5.click(); });
    ɵngcc0.ɵɵelementStart(1, "div", 12);
    ɵngcc0.ɵɵlistener("click", function FileUploader_ng_container_0_label_6_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); ɵngcc0.ɵɵnextContext(); const _r5 = ɵngcc0.ɵɵreference(9); return _r5.click(); })("dragover", function FileUploader_ng_container_0_label_6_Template_div_dragover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onDragOver($event); })("dragleave", function FileUploader_ng_container_0_label_6_Template_div_dragleave_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onDragLeave($event); })("drop", function FileUploader_ng_container_0_label_6_Template_div_drop_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onDrop($event); });
    ɵngcc0.ɵɵtemplate(2, FileUploader_ng_container_0_label_6_ng_container_2_Template, 2, 1, "ng-container", 13);
    ɵngcc0.ɵɵtemplate(3, FileUploader_ng_container_0_label_6_3_Template, 1, 1, undefined, 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r3.disabled));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c2, ctx_r3.dragOver));
    ɵngcc0.ɵɵattribute("for", ctx_r3.fileUploaderId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.isTemplate(ctx_r3.dropText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isTemplate(ctx_r3.dropText));
} }
function FileUploader_ng_container_0_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function FileUploader_ng_container_0_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); ɵngcc0.ɵɵnextContext(); const _r5 = ɵngcc0.ɵɵreference(9); return _r5.click(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ibmButton", ctx_r4.buttonType)("size", ctx_r4.size)("disabled", ctx_r4.disabled);
    ɵngcc0.ɵɵattribute("for", ctx_r4.fileUploaderId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.buttonText, " ");
} }
function FileUploader_ng_container_0_ng_container_11_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const fileItem_r19 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", fileItem_r19.invalidText, " ");
} }
function FileUploader_ng_container_0_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "ibm-file", 16);
    ɵngcc0.ɵɵlistener("remove", function FileUploader_ng_container_0_ng_container_11_Template_ibm_file_remove_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const fileItem_r19 = ctx.$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.removeFile(fileItem_r19); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(2, FileUploader_ng_container_0_ng_container_11_div_2_Template, 2, 1, "div", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const fileItem_r19 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("fileItem", fileItem_r19);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", fileItem_r19.invalid);
} }
function FileUploader_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "label", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 3);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 4);
    ɵngcc0.ɵɵtemplate(6, FileUploader_ng_container_0_label_6_Template, 4, 9, "label", 5);
    ɵngcc0.ɵɵtemplate(7, FileUploader_ng_container_0_button_7_Template, 2, 5, "button", 6);
    ɵngcc0.ɵɵelementStart(8, "input", 7, 8);
    ɵngcc0.ɵɵlistener("change", function FileUploader_ng_container_0_Template_input_change_8_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onFilesAdded(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 9);
    ɵngcc0.ɵɵtemplate(11, FileUploader_ng_container_0_ng_container_11_Template, 3, 2, "ng-container", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", ctx_r0.fileUploaderId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.description);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.drop);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.drop);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("accept", ctx_r0.accept)("id", ctx_r0.fileUploaderId)("multiple", ctx_r0.multiple)("disabled", ctx_r0.disabled);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.files);
} }
function FileUploader_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 19);
    ɵngcc0.ɵɵelement(1, "div", 20);
    ɵngcc0.ɵɵelement(2, "button", 21);
} }
function FileComponent_span_2__svg_svg_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 7);
} }
function FileComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵlistener("click", function FileComponent_span_2_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.remove.emit(); })("keyup.enter", function FileComponent_span_2_Template_span_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.remove.emit(); })("keyup.space", function FileComponent_span_2_Template_span_keyup_space_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.remove.emit(); });
    ɵngcc0.ɵɵtemplate(1, FileComponent_span_2__svg_svg_1_Template, 1, 0, "svg", 5);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(2, "svg", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isInvalidText);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ariaLabel", ctx_r0.translations.REMOVE_BUTTON);
} }
function FileComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵelement(2, "ibm-loading", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FileComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(1, "svg", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ariaLabel", ctx_r2.translations.CHECKMARK);
} }
const noop = () => { };
/**
 * [See demo](../../?path=/story/file-uploader--basic)
 *
 * <example-url>../../iframe.html?id=file-uploader--basic</example-url>
 */
class FileUploader {
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * Accessible text for the button that opens the upload window.
         *
         * Defaults to the `FILE_UPLOADER.OPEN` value from the i18n service
         */
        this.buttonText = this.i18n.get().FILE_UPLOADER.OPEN;
        /**
         * Type set for button
         */
        this.buttonType = "primary";
        /**
         * Specify the types of files that the input should be able to receive
         */
        this.accept = [];
        /**
         * Set to `false` to tell the component to only accept a single file on upload.
         *
         * Defaults to `true`. Accepts multiple files.
         */
        this.multiple = true;
        /**
         * Set to `true` for a loading file uploader.
         */
        this.skeleton = false;
        /**
         * Set to `true` to enable drag and drop.
         */
        this.drop = false;
        /**
         * Provides a unique id for the underlying <input> node
         */
        this.fileUploaderId = `file-uploader-${FileUploader.fileUploaderCount}`;
        /**
         * The list of files that have been submitted to be uploaded
         */
        this.files = new Set();
        /**
         * Set to `true` to disable upload button
         */
        this.disabled = false;
        this.filesChange = new EventEmitter();
        /**
         * Controls the state of the drag and drop file container
         */
        this.dragOver = false;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        FileUploader.fileUploaderCount++;
    }
    /**
     * Specifies the property to be used as the return value to `ngModel`
     */
    get value() {
        return this.files;
    }
    set value(v) {
        if (v !== this.files) {
            this.files = v;
            this.onChangeCallback(v);
        }
    }
    onBlur() {
        this.onTouchedCallback();
    }
    get fileList() {
        return Array.from(this.fileInput.nativeElement.files);
    }
    /**
     * Propagates the injected `value`.
     */
    writeValue(value) {
        if (value !== this.value) {
            this.files = value;
        }
    }
    createFileItem(file) {
        return {
            uploaded: false,
            state: "edit",
            invalid: false,
            invalidText: "",
            file: file
        };
    }
    onFilesAdded() {
        if (!this.multiple) {
            this.files.clear();
        }
        for (let file of this.fileList) {
            const fileItem = this.createFileItem(file);
            this.files.add(fileItem);
        }
        this.filesChange.emit(this.files);
        this.value = this.files;
    }
    onDragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        this.dragOver = true;
    }
    onDragLeave(event) {
        event.stopPropagation();
        event.preventDefault();
        this.dragOver = false;
    }
    onDrop(event) {
        event.stopPropagation();
        event.preventDefault();
        const transferredFiles = Array.from(event.dataTransfer.files);
        transferredFiles.filter(({ name, type }) => {
            // Get the file extension and add a "." to the beginning.
            const fileExtension = name.split(".").pop().replace(/^/, ".");
            // Check if the accept array contains the mime type or extension of the file.
            return this.accept.includes(type) || this.accept.includes(fileExtension) || !this.accept.length;
        }).forEach(file => {
            if (!this.files.size || this.multiple) {
                const fileItem = this.createFileItem(file);
                this.files.add(fileItem);
            }
        });
        this.filesChange.emit(this.files);
        this.value = this.files;
        this.dragOver = false;
    }
    removeFile(fileItem) {
        if (this.files) {
            this.files.delete(fileItem);
        }
        this.fileInput.nativeElement.value = "";
        this.filesChange.emit(this.files);
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    /**
     * Registers the injected function to control the touch use of the `FileUploader`.
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
}
FileUploader.ɵfac = function FileUploader_Factory(t) { return new (t || FileUploader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n)); };
FileUploader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploader, selectors: [["ibm-file-uploader"]], viewQuery: function FileUploader_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, inputs: { buttonText: "buttonText", buttonType: "buttonType", accept: "accept", multiple: "multiple", skeleton: "skeleton", drop: "drop", fileUploaderId: "fileUploaderId", files: "files", disabled: "disabled", title: "title", description: "description", size: "size", dropText: "dropText" }, outputs: { filesChange: "filesChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: FileUploader,
                multi: true
            }
        ])], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["skeletonTemplate", ""], [1, "bx--file--label", 3, "for"], [1, "bx--label-description"], [1, "bx--file"], ["class", "bx--file-browse-btn", "tabindex", "0", 3, "ngClass", "keyup.enter", "keyup.space", 4, "ngIf"], ["type", "button", 3, "ibmButton", "size", "disabled", "click", 4, "ngIf"], ["type", "file", "tabindex", "-1", 1, "bx--file-input", 3, "accept", "id", "multiple", "disabled", "change"], ["fileInput", ""], [1, "bx--file-container"], [4, "ngFor", "ngForOf"], ["tabindex", "0", 1, "bx--file-browse-btn", 3, "ngClass", "keyup.enter", "keyup.space"], ["role", "button", 1, "bx--file__drop-container", 3, "ngClass", "click", "dragover", "dragleave", "drop"], [4, "ngIf"], [3, "ngTemplateOutlet"], ["type", "button", 3, "ibmButton", "size", "disabled", "click"], [3, "fileItem", "remove"], ["class", "bx--form-requirement", 4, "ngIf"], [1, "bx--form-requirement"], [1, "bx--skeleton__text", 2, "width", "100px"], [1, "bx--skeleton__text", 2, "width", "225px"], ["ibmButton", "", "skeleton", "true"]], template: function FileUploader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FileUploader_ng_container_0_Template, 12, 10, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, FileUploader_ng_template_1_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton)("ngIfElse", _r1);
    } }, directives: function () { return [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc2.NgClass, ɵngcc2.NgTemplateOutlet, ɵngcc3.Button, FileComponent]; }, encapsulation: 2 });
/**
 * Counter used to create unique ids for file-uploader components
 */
FileUploader.fileUploaderCount = 0;
/** @nocollapse */
FileUploader.ctorParameters = () => [
    { type: I18n }
];
FileUploader.propDecorators = {
    buttonText: [{ type: Input }],
    buttonType: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    accept: [{ type: Input }],
    multiple: [{ type: Input }],
    skeleton: [{ type: Input }],
    size: [{ type: Input }],
    drop: [{ type: Input }],
    dropText: [{ type: Input }],
    fileUploaderId: [{ type: Input }],
    fileInput: [{ type: ViewChild, args: ["fileInput", { static: false },] }],
    files: [{ type: Input }],
    disabled: [{ type: Input }],
    filesChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileUploader, [{
        type: Component,
        args: [{
                selector: "ibm-file-uploader",
                template: `
		<ng-container *ngIf="!skeleton; else skeletonTemplate">
			<label [for]="fileUploaderId" class="bx--file--label">{{title}}</label>
			<p class="bx--label-description">{{description}}</p>
			<div class="bx--file">
				<label
					*ngIf="drop"
					class="bx--file-browse-btn"
					(keyup.enter)="fileInput.click()"
					(keyup.space)="fileInput.click()"
					[ngClass]="{'bx--file-browse-btn--disabled': disabled}"
					tabindex="0">
					<div
						class="bx--file__drop-container"
						[ngClass]="{'bx--file__drop-container--drag-over': dragOver}"
						role="button"
						(click)="fileInput.click()"
						[attr.for]="fileUploaderId"
						(dragover)="onDragOver($event)"
						(dragleave)="onDragLeave($event)"
						(drop)="onDrop($event)">
						<ng-container *ngIf="!isTemplate(dropText)">{{dropText}}</ng-container>
						<ng-template *ngIf="isTemplate(dropText)" [ngTemplateOutlet]="dropText"></ng-template>
					</div>
				</label>
				<button
					*ngIf="!drop"
					type="button"
					[ibmButton]="buttonType"
					(click)="fileInput.click()"
					[attr.for]="fileUploaderId"
					[size]="size"
					[disabled]="disabled">
					{{buttonText}}
				</button>
				<input
					#fileInput
					type="file"
					class="bx--file-input"
					[accept]="accept"
					[id]="fileUploaderId"
					[multiple]="multiple"
					tabindex="-1"
					(change)="onFilesAdded()"
					[disabled]="disabled"/>
				<div class="bx--file-container">
					<ng-container *ngFor="let fileItem of files">
						<ibm-file [fileItem]="fileItem" (remove)="removeFile(fileItem)"></ibm-file>
						<div *ngIf="fileItem.invalid" class="bx--form-requirement">
							{{fileItem.invalidText}}
						</div>
					</ng-container>
				</div>
			</div>
		</ng-container>

		<ng-template #skeletonTemplate>
			<div class="bx--skeleton__text" style="width: 100px"></div>
			<div class="bx--skeleton__text" style="width: 225px"></div>
			<button ibmButton skeleton="true"></button>
		</ng-template>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: FileUploader,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.I18n }]; }, { buttonText: [{
            type: Input
        }], buttonType: [{
            type: Input
        }], accept: [{
            type: Input
        }], multiple: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], drop: [{
            type: Input
        }], fileUploaderId: [{
            type: Input
        }], files: [{
            type: Input
        }], disabled: [{
            type: Input
        }], filesChange: [{
            type: Output
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }], size: [{
            type: Input
        }], dropText: [{
            type: Input
        }], fileInput: [{
            type: ViewChild,
            args: ["fileInput", { static: false }]
        }] }); })();

class FileComponent {
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * Accessible translations for the close and complete icons
         */
        this.translations = this.i18n.get().FILE_UPLOADER;
        this.remove = new EventEmitter();
        this.selectedFile = true;
    }
    get isInvalidText() {
        return this.fileItem.invalidText;
    }
    ngOnDestroy() {
        this.remove.emit();
    }
}
FileComponent.ɵfac = function FileComponent_Factory(t) { return new (t || FileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n)); };
FileComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileComponent, selectors: [["ibm-file"]], hostVars: 4, hostBindings: function FileComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--file__selected-file", ctx.selectedFile)("bx--file__selected-file--invalid", ctx.isInvalidText);
    } }, inputs: { translations: "translations", fileItem: "fileItem" }, outputs: { remove: "remove" }, decls: 5, vars: 4, consts: [[1, "bx--file-filename"], ["class", "bx--file__state-container", "tabindex", "0", 3, "click", "keyup.enter", "keyup.space", 4, "ngIf"], [4, "ngIf"], ["class", "bx--file__state-container", "tabindex", "0", 4, "ngIf"], ["tabindex", "0", 1, "bx--file__state-container", 3, "click", "keyup.enter", "keyup.space"], ["ibmIcon", "warning--filled", "class", "bx--file--invalid", "size", "16", 4, "ngIf"], ["ibmIcon", "close", "size", "16", 1, "bx--file-close", 3, "ariaLabel"], ["ibmIcon", "warning--filled", "size", "16", 1, "bx--file--invalid"], [1, "bx--inline-loading__animation"], ["size", "sm"], ["tabindex", "0", 1, "bx--file__state-container"], ["ibmIcon", "checkmark--filled", "size", "16", 1, "bx--file-complete", 3, "ariaLabel"]], template: function FileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, FileComponent_span_2_Template, 3, 2, "span", 1);
        ɵngcc0.ɵɵtemplate(3, FileComponent_span_3_Template, 3, 0, "span", 2);
        ɵngcc0.ɵɵtemplate(4, FileComponent_span_4_Template, 2, 1, "span", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.fileItem.file.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileItem.state === "edit");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileItem.state === "upload");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileItem.state === "complete");
    } }, directives: [ɵngcc2.NgIf, ɵngcc4.IconDirective, ɵngcc5.Loading], encapsulation: 2 });
/** @nocollapse */
FileComponent.ctorParameters = () => [
    { type: I18n }
];
FileComponent.propDecorators = {
    translations: [{ type: Input }],
    fileItem: [{ type: Input }],
    remove: [{ type: Output }],
    selectedFile: [{ type: HostBinding, args: ["class.bx--file__selected-file",] }],
    isInvalidText: [{ type: HostBinding, args: ["class.bx--file__selected-file--invalid",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileComponent, [{
        type: Component,
        args: [{
                selector: "ibm-file",
                template: `
		<p class="bx--file-filename">{{fileItem.file.name}}</p>
		<span
			*ngIf="fileItem.state === 'edit'"
			class="bx--file__state-container"
			(click)="remove.emit()"
			(keyup.enter)="remove.emit()"
			(keyup.space)="remove.emit()"
			tabindex="0">
			<svg
				*ngIf="isInvalidText"
				ibmIcon="warning--filled"
				class="bx--file--invalid"
				size="16">
			</svg>
			<svg
				ibmIcon="close"
				size="16"
				class="bx--file-close"
				[ariaLabel]="translations.REMOVE_BUTTON">
			</svg>
		</span>
		<span *ngIf="fileItem.state === 'upload'">
			<div class="bx--inline-loading__animation">
				<ibm-loading size="sm"></ibm-loading>
			</div>
		</span>
		<span
			*ngIf="fileItem.state === 'complete'"
			class="bx--file__state-container"
			tabindex="0">

			<svg
				ibmIcon="checkmark--filled"
				size="16"
				class="bx--file-complete"
				[ariaLabel]="translations.CHECKMARK">
			</svg>
		</span>
	`
            }]
    }], function () { return [{ type: ɵngcc1.I18n }]; }, { translations: [{
            type: Input
        }], remove: [{
            type: Output
        }], selectedFile: [{
            type: HostBinding,
            args: ["class.bx--file__selected-file"]
        }], isInvalidText: [{
            type: HostBinding,
            args: ["class.bx--file__selected-file--invalid"]
        }], fileItem: [{
            type: Input
        }] }); })();

class FileUploaderModule {
}
FileUploaderModule.ɵfac = function FileUploaderModule_Factory(t) { return new (t || FileUploaderModule)(); };
FileUploaderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FileUploaderModule });
FileUploaderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            ButtonModule,
            LoadingModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FileUploaderModule, { declarations: function () { return [FileUploader, FileComponent]; }, imports: function () { return [CommonModule,
        ButtonModule,
        LoadingModule,
        IconModule]; }, exports: function () { return [FileUploader, FileComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileUploaderModule, [{
        type: NgModule,
        args: [{
                declarations: [FileUploader, FileComponent],
                exports: [FileUploader, FileComponent],
                imports: [
                    CommonModule,
                    ButtonModule,
                    LoadingModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { FileUploader, FileComponent, FileUploaderModule };

//# sourceMappingURL=carbon-components-angular-file-uploader.js.map