/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-checkbox.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild, HostBinding, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * Defines the set of states for a checkbox component.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["inputCheckbox"];
const _c1 = function (a0) { return { "bx--skeleton": a0 }; };
const _c2 = function (a0) { return { "bx--visually-hidden": a0 }; };
const _c3 = ["*"];
var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["Init"] = 0] = "Init";
    CheckboxState[CheckboxState["Indeterminate"] = 1] = "Indeterminate";
    CheckboxState[CheckboxState["Checked"] = 2] = "Checked";
    CheckboxState[CheckboxState["Unchecked"] = 3] = "Unchecked";
})(CheckboxState || (CheckboxState = {}));
/**
 * Used to emit changes performed on checkbox components.
 *
 * @deprecated since v4
 */
class CheckboxChange {
}
/**
 * [See demo](../../?path=/story/checkbox--basic)
 *
 * <example-url>../../iframe.html?id=checkbox--basic</example-url>
 */
class Checkbox {
    /**
     * Creates an instance of `Checkbox`.
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Size of the checkbox.
         *
         * @deprecated since v4
         */
        this.size = "md";
        /**
         * Set to `true` for checkbox to be rendered without any classes on the host element.
         */
        this.inline = false;
        /**
         * Set to `true` for a disabled checkbox.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading checkbox.
         */
        this.skeleton = false;
        /**
         * Set to `true` to hide the checkbox labels.
         */
        this.hideLabel = false;
        /**
         * The unique id for the checkbox component.
         */
        this.id = `checkbox-${Checkbox.checkboxCount}`;
        // TODO: drop the `_`
        // tslint:disable-next-line:no-input-rename
        this._ariaLabel = "";
        /**
         * Emits click event.
         */
        this.click = new EventEmitter();
        /**
         * Emits event notifying other classes when a change in state occurs on a checkbox after a
         * click.
         *
         * @deprecated since v4 use `checked` and `checkedChange` instead
         */
        this.change = new EventEmitter();
        /**
         * Emits an event when the value of the checkbox changes.
         *
         * Allows double biding with the `checked` Input.
         */
        this.checkedChange = new EventEmitter();
        /**
         * Emits event notifying other classes when a change in state occurs specifically
         * on an indeterminate checkbox.
         */
        this.indeterminateChange = new EventEmitter();
        /**
         * Set to `true` if the input checkbox is selected (or checked).
         */
        this._checked = false;
        /**
         * Set to `true` if the input checkbox is in state indeterminate.
         */
        this._indeterminate = false;
        /**
         * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.
         */
        this.currentCheckboxState = CheckboxState.Init;
        /**
         * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = () => { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = (_) => { };
        Checkbox.checkboxCount++;
    }
    /**
     * Used to set the `aria-label` attribute on the input element.
     *
     * @deprecated since v4 use the `ariaLabel` input instead
     */
    // tslint:disable-next-line:no-input-rename
    set ariaLabel(value) {
        this._ariaLabel = value;
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * Used to set the `aria-labelledby` attribute on the input element.
     *
     * @deprecated since v4 use the `ariaLabelledby` input instead
     */
    // tslint:disable-next-line:no-input-rename
    set ariaLabelledby(value) {
        this._ariaLabelledby = value;
    }
    get ariaLabelledby() {
        return this._ariaLabelledby;
    }
    /**
     * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.
     *
     * Allows double binding with the `indeterminateChange` Output.
     */
    set indeterminate(indeterminate) {
        if (indeterminate === this._indeterminate) {
            return;
        }
        this._indeterminate = indeterminate;
        if (this._indeterminate) {
            this.transitionCheckboxState(CheckboxState.Indeterminate);
        }
        else {
            this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);
        }
        this.inputCheckbox.nativeElement.indeterminate = indeterminate;
        this.changeDetectorRef.markForCheck();
        this.indeterminateChange.emit(this._indeterminate);
    }
    /**
     * Reflects whether the checkbox state is indeterminate.
     */
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * Sets the `checked` state. `true` for checked, `false` for unchecked
     *
     * Allows double binding with the `checkedChange` Output.
     */
    set checked(checked) {
        this.setChecked(checked, false);
    }
    /**
     * Returns value `true` if state is selected for the checkbox.
     */
    get checked() {
        return this._checked;
    }
    get checkboxWrapperClass() {
        return !this.inline;
    }
    get formItemClass() {
        return !this.inline;
    }
    /**
     * Toggle the selected state of the checkbox.
     */
    toggle() {
        // Flip checked and reset indeterminate
        this.setChecked(!this.checked, true);
    }
    /**
     * Writes a value from `ngModel` to the component.
     *
     * In this case the value is the `checked` property.
     *
     * @param value boolean, corresponds to the `checked` property.
     */
    writeValue(value) {
        // Set checked and reset indeterminate
        this.setChecked(!!value, true);
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the checkbox is touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    focusOut() {
        this.onTouched();
    }
    /**
     * Executes on the event of a change within `Checkbox` to block propagation.
     */
    onChange(event) {
        event.stopPropagation();
    }
    /**
     * Handles click events on the `Checkbox` and emits changes to other classes.
     */
    onClick(event) {
        if (this.click.observers.length) {
            // Disable default checkbox activation behavior which flips checked and resets indeterminate.
            // This allows the parent component to control the checked/indeterminate properties.
            event.preventDefault();
            this.click.emit();
            return;
        }
        if (!this.disabled) {
            this.toggle();
            this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);
            this.emitChangeEvent();
        }
    }
    /**
     * Handles changes between checkbox states.
     */
    transitionCheckboxState(newState) {
        this.currentCheckboxState = newState;
    }
    /**
     * Creates instance of `CheckboxChange` used to propagate the change event.
     */
    emitChangeEvent() {
        /* begin deprecation */
        let event = new CheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this.change.emit(event);
        /* end deprecation */
        this.checkedChange.emit(this.checked);
        this.propagateChange(this.checked);
    }
    /**
     * Updates the checkbox if it is in the indeterminate state.
     */
    ngAfterViewInit() {
        if (this.indeterminate) {
            this.inputCheckbox.nativeElement.indeterminate = true;
        }
    }
    /**
     * Sets checked state and optionally resets indeterminate state.
     */
    setChecked(checked, resetIndeterminate) {
        if (checked === this._checked) {
            return;
        }
        this._checked = checked;
        // Reset indeterminate if requested
        if (resetIndeterminate && this._indeterminate) {
            this._indeterminate = false;
            Promise.resolve().then(() => {
                this.indeterminateChange.emit(this._indeterminate);
            });
        }
        this.changeDetectorRef.markForCheck();
    }
}
Checkbox.ɵfac = function Checkbox_Factory(t) { return new (t || Checkbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
Checkbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Checkbox, selectors: [["ibm-checkbox"]], viewQuery: function Checkbox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputCheckbox = _t.first);
    } }, hostVars: 4, hostBindings: function Checkbox_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function Checkbox_focusout_HostBindingHandler() { return ctx.focusOut(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--checkbox-wrapper", ctx.checkboxWrapperClass)("bx--form-item", ctx.formItemClass);
    } }, inputs: { size: "size", inline: "inline", disabled: "disabled", skeleton: "skeleton", hideLabel: "hideLabel", id: "id", _ariaLabel: ["ariaLabel", "_ariaLabel"], ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], _ariaLabelledby: ["ariaLabelledby", "_ariaLabelledby"], indeterminate: "indeterminate", checked: "checked", nested: "nested", name: "name", required: "required", value: "value" }, outputs: { click: "click", change: "change", checkedChange: "checkedChange", indeterminateChange: "indeterminateChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Checkbox,
                multi: true
            }
        ])], ngContentSelectors: _c3, decls: 6, vars: 16, consts: [[1, "bx--form-item", "bx--checkbox-wrapper"], ["type", "checkbox", 1, "bx--checkbox", 3, "id", "value", "name", "required", "checked", "disabled", "change", "click"], ["inputCheckbox", ""], [1, "bx--checkbox-label", 3, "for", "ngClass"], [1, "bx--checkbox-label-text", 3, "ngClass"]], template: function Checkbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("change", function Checkbox_Template_input_change_1_listener($event) { return ctx.onChange($event); })("click", function Checkbox_Template_input_click_1_listener($event) { return ctx.onClick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "label", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.id + "_input")("value", ctx.value)("name", ctx.name)("required", ctx.required)("checked", ctx.checked)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.ariaLabelledby)("aria-checked", ctx.indeterminate ? "mixed" : ctx.checked);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.id + "_input")("ngClass", ɵngcc0.ɵɵpureFunction1(12, _c1, ctx.skeleton));
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c2, ctx.hideLabel));
    } }, directives: [ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });
/**
 * Variable used for creating unique ids for checkbox components.
 */
Checkbox.checkboxCount = 0;
/** @nocollapse */
Checkbox.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
Checkbox.propDecorators = {
    size: [{ type: Input }],
    nested: [{ type: Input }],
    inline: [{ type: Input }],
    disabled: [{ type: Input }],
    skeleton: [{ type: Input }],
    hideLabel: [{ type: Input }],
    name: [{ type: Input }],
    id: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    ariaLabel: [{ type: Input, args: ["aria-label",] }],
    _ariaLabel: [{ type: Input, args: ["ariaLabel",] }],
    ariaLabelledby: [{ type: Input, args: ["aria-labelledby",] }],
    _ariaLabelledby: [{ type: Input, args: ["ariaLabelledby",] }],
    indeterminate: [{ type: Input }],
    checked: [{ type: Input }],
    checkboxWrapperClass: [{ type: HostBinding, args: ["class.bx--checkbox-wrapper",] }],
    formItemClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    click: [{ type: Output }],
    change: [{ type: Output }],
    checkedChange: [{ type: Output }],
    indeterminateChange: [{ type: Output }],
    inputCheckbox: [{ type: ViewChild, args: ["inputCheckbox", { static: false },] }],
    focusOut: [{ type: HostListener, args: ["focusout",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Checkbox, [{
        type: Component,
        args: [{
                selector: "ibm-checkbox",
                template: `
		<div class="bx--form-item bx--checkbox-wrapper">
			<input
				#inputCheckbox
				class="bx--checkbox"
				type="checkbox"
				[id]="id + '_input'"
				[value]="value"
				[name]="name"
				[required]="required"
				[checked]="checked"
				[disabled]="disabled"
				[attr.aria-labelledby]="ariaLabelledby"
				[attr.aria-checked]="(indeterminate ? 'mixed' : checked)"
				(change)="onChange($event)"
				(click)="onClick($event)">
			<label
				[for]="id + '_input'"
				[attr.aria-label]="ariaLabel"
				class="bx--checkbox-label"
				[ngClass]="{
					'bx--skeleton' : skeleton
				}">
				<span [ngClass]="{'bx--visually-hidden' : hideLabel}" class="bx--checkbox-label-text">
					<ng-content></ng-content>
				</span>
			</label>
		</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Checkbox,
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { size: [{
            type: Input
        }], inline: [{
            type: Input
        }], disabled: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], hideLabel: [{
            type: Input
        }], id: [{
            type: Input
        }], _ariaLabel: [{
            type: Input,
            args: ["ariaLabel"]
        }], click: [{
            type: Output
        }], change: [{
            type: Output
        }], checkedChange: [{
            type: Output
        }], indeterminateChange: [{
            type: Output
        }], ariaLabel: [{
            type: Input,
            args: ["aria-label"]
        }], ariaLabelledby: [{
            type: Input,
            args: ["aria-labelledby"]
        }], _ariaLabelledby: [{
            type: Input,
            args: ["ariaLabelledby"]
        }], indeterminate: [{
            type: Input
        }], checked: [{
            type: Input
        }], checkboxWrapperClass: [{
            type: HostBinding,
            args: ["class.bx--checkbox-wrapper"]
        }], formItemClass: [{
            type: HostBinding,
            args: ["class.bx--form-item"]
        }], focusOut: [{
            type: HostListener,
            args: ["focusout"]
        }], nested: [{
            type: Input
        }], name: [{
            type: Input
        }], required: [{
            type: Input
        }], value: [{
            type: Input
        }], inputCheckbox: [{
            type: ViewChild,
            args: ["inputCheckbox", { static: false }]
        }] }); })();

// modules
class CheckboxModule {
}
CheckboxModule.ɵfac = function CheckboxModule_Factory(t) { return new (t || CheckboxModule)(); };
CheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CheckboxModule });
CheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckboxModule, { declarations: function () { return [Checkbox]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [Checkbox]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    Checkbox
                ],
                exports: [
                    Checkbox
                ],
                imports: [
                    CommonModule,
                    FormsModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { Checkbox, CheckboxState, CheckboxChange, CheckboxModule };

//# sourceMappingURL=carbon-components-angular-checkbox.js.map