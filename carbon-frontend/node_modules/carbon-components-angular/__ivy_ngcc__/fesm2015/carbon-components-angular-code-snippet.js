/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-code-snippet.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, ViewChild, HostListener, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/i18n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'carbon-components-angular/icon';

const _c0 = ["code"];
function CodeSnippet_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function CodeSnippet_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function CodeSnippet_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_container_0_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_container_0_ng_container_2_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(4);
    const _r5 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function CodeSnippet_ng_template_1_ng_container_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} }
function CodeSnippet_ng_template_1_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelement(2, "span");
} }
function CodeSnippet_ng_template_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_ng_container_1_span_1_Template, 1, 0, "span", 0);
    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_template_1_ng_container_1_ng_template_2_Template, 3, 0, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r14 = ɵngcc0.ɵɵreference(3);
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.display === "single")("ngIfElse", _r14);
} }
function CodeSnippet_ng_template_1_pre_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function CodeSnippet_ng_template_1_pre_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "pre");
    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_pre_2_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function CodeSnippet_ng_template_1_button_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementContainer(0);
} }
function CodeSnippet_ng_template_1_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function CodeSnippet_ng_template_1_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.onCopyButtonClicked(); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(1, "svg", 11);
    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_template_1_button_3_ng_container_2_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    const _r5 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r11.translations.COPY_CODE);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function CodeSnippet_ng_template_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function CodeSnippet_ng_template_1_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.toggleSnippetExpansion(); });
    ɵngcc0.ɵɵelementStart(1, "span", 13);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(3, "svg", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.expanded ? ctx_r12.translations.SHOW_LESS : ctx_r12.translations.SHOW_MORE);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ariaLabel", ctx_r12.translations.SHOW_MORE_ICON);
} }
function CodeSnippet_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_ng_container_1_Template, 4, 2, "ng-container", 6);
    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_template_1_pre_2_Template, 2, 1, "pre", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, CodeSnippet_ng_template_1_button_3_Template, 3, 2, "button", 7);
    ɵngcc0.ɵɵtemplate(4, CodeSnippet_ng_template_1_button_4_Template, 4, 2, "button", 8);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ctx_r2.translations.CODE_SNIPPET_TEXT);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.skeleton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.skeleton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.skeleton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.shouldShowExpandButton);
} }
function CodeSnippet_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "code", null, 15);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} }
const _c1 = function (a0) { return { "bx--btn--copy__feedback--displayed": a0 }; };
function CodeSnippet_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 16);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r6.showFeedback));
    ɵngcc0.ɵɵattribute("data-feedback", ctx_r6.feedbackText);
} }
const _c2 = ["*"];
var SnippetType;
(function (SnippetType) {
    SnippetType["single"] = "single";
    SnippetType["multi"] = "multi";
    SnippetType["inline"] = "inline";
})(SnippetType || (SnippetType = {}));
/**
 * [See demo](../../?path=/story/code-snippet--basic)
 *
 * ```html
 * <ibm-code-snippet>Code</ibm-code-snippet>
 * ```
 *
 * <example-url>../../iframe.html?id=code-snippet--basic</example-url>
 */
class CodeSnippet {
    /**
     * Creates an instance of CodeSnippet.
     */
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * It can be `"single"`, `"multi"` or `"inline"`
         *
         */
        this.display = SnippetType.single;
        this.translations = this.i18n.get().CODE_SNIPPET;
        /**
         * Set to `"light"` to apply the light style on the code snippet.
         */
        this.theme = "dark";
        /**
         * Text displayed in the tooltip when user clicks button to copy code.
         *
         */
        this.feedbackText = this.translations.COPIED;
        /**
         * Time in miliseconds to keep the feedback tooltip displayed.
         *
         */
        this.feedbackTimeout = 2000;
        this.expanded = false;
        this.skeleton = false;
        this.snippetClass = true;
        this.showFeedback = false;
        this.hasExpandButton = null;
        CodeSnippet.codeSnippetCount++;
    }
    get snippetSingleClass() {
        return this.display === SnippetType.single;
    }
    get snippetMultiClass() {
        return this.display === SnippetType.multi;
    }
    get snippetInlineClass() {
        return this.display === SnippetType.inline;
    }
    get snippetInlineLightClass() {
        return this.display === SnippetType.inline && this.theme === "light";
    }
    get btnCopyClass() {
        return this.display === SnippetType.inline;
    }
    get displayStyle() {
        return this.display !== SnippetType.inline ? "block" : null;
    }
    get attrType() {
        return this.display === SnippetType.inline ? "button" : null;
    }
    get shouldShowExpandButton() {
        // Checks if `hasExpand` button has been initialized in `AfterViewInit` before detecting whether or not to
        // show the expand button when the code displayed in the component changes during the life of the component.
        // This is to avoid the `ExpressionChangedAfterItHasBeenCheckedError`.
        if (this.hasExpandButton === null) {
            return this.hasExpandButton;
        }
        return this.canExpand();
    }
    toggleSnippetExpansion() {
        this.expanded = !this.expanded;
    }
    /**
     * Copies the code from the `<code>` block to clipboard.
     *
     */
    copyCode() {
        // create invisible, uneditable textarea with our code in it
        const textarea = document.createElement("textarea");
        textarea.value = this.code.nativeElement.innerText || this.code.nativeElement.textContent;
        textarea.setAttribute("readonly", "");
        textarea.style.position = "absolute";
        textarea.style.right = "-99999px";
        document.body.appendChild(textarea);
        // save user selection
        const selected = document.getSelection().rangeCount ? document.getSelection().getRangeAt(0) : null;
        // copy to clipboard
        textarea.select();
        document.execCommand("copy");
        // remove textarea
        document.body.removeChild(textarea);
        // restore user selection
        if (selected) {
            document.getSelection().removeAllRanges();
            document.getSelection().addRange(selected);
        }
    }
    onCopyButtonClicked() {
        this.copyCode();
        this.showFeedback = true;
        setTimeout(() => {
            this.showFeedback = false;
        }, this.feedbackTimeout);
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.canExpand()) {
                this.hasExpandButton = true;
            }
            else {
                this.hasExpandButton = false;
            }
        });
    }
    /**
     * Inline code snippet acts as button and makes the whole component clickable.
     *
     * This handles clicks in that case.
     */
    hostClick() {
        if (this.display !== SnippetType.inline) {
            return;
        }
        this.onCopyButtonClicked();
    }
    canExpand() {
        return (this.code && this.code.nativeElement.getBoundingClientRect().height > 255) && this.display === "multi";
    }
}
CodeSnippet.ɵfac = function CodeSnippet_Factory(t) { return new (t || CodeSnippet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n)); };
CodeSnippet.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CodeSnippet, selectors: [["ibm-code-snippet"]], viewQuery: function CodeSnippet_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.code = _t.first);
    } }, hostVars: 19, hostBindings: function CodeSnippet_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CodeSnippet_click_HostBindingHandler() { return ctx.hostClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("type", ctx.attrType);
        ɵngcc0.ɵɵstyleProp("display", ctx.displayStyle);
        ɵngcc0.ɵɵclassProp("bx--snippet--expand", ctx.expanded)("bx--skeleton", ctx.skeleton)("bx--snippet", ctx.snippetClass)("bx--snippet--single", ctx.snippetSingleClass)("bx--snippet--multi", ctx.snippetMultiClass)("bx--snippet--inline", ctx.snippetInlineClass)("bx--snippet--light", ctx.snippetInlineLightClass)("bx--btn--copy", ctx.btnCopyClass);
    } }, inputs: { display: "display", translations: "translations", theme: "theme", feedbackText: "feedbackText", feedbackTimeout: "feedbackTimeout", expanded: "expanded", skeleton: "skeleton" }, ngContentSelectors: _c2, decls: 7, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["notInline", ""], ["codeTemplate", ""], ["feedbackTemplate", ""], [4, "ngTemplateOutlet"], [1, "bx--snippet-container"], [4, "ngIf"], ["class", "bx--snippet-button", "tabindex", "0", 3, "click", 4, "ngIf"], ["class", "bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand", "type", "button", 3, "click", 4, "ngIf"], ["multiSkeleton", ""], ["tabindex", "0", 1, "bx--snippet-button", 3, "click"], ["ibmIcon", "copy", "size", "16", 1, "bx--snippet__icon"], ["type", "button", 1, "bx--btn", "bx--btn--ghost", "bx--btn--sm", "bx--snippet-btn--expand", 3, "click"], [1, "bx--snippet-btn--text"], ["ibmIcon", "chevron--down", "size", "16", 1, "bx--icon-chevron--down", 3, "ariaLabel"], ["code", ""], [1, "bx--btn--copy__feedback", 3, "ngClass"]], template: function CodeSnippet_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, CodeSnippet_ng_container_0_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_Template, 5, 5, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, CodeSnippet_ng_template_3_Template, 3, 0, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, CodeSnippet_ng_template_5_Template, 1, 4, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.display === "inline")("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc3.IconDirective, ɵngcc2.NgClass], encapsulation: 2 });
/**
 * Variable used for creating unique ids for code-snippet components.
 */
CodeSnippet.codeSnippetCount = 0;
/** @nocollapse */
CodeSnippet.ctorParameters = () => [
    { type: I18n }
];
CodeSnippet.propDecorators = {
    display: [{ type: Input }],
    translations: [{ type: Input }],
    theme: [{ type: Input }],
    feedbackText: [{ type: Input }],
    feedbackTimeout: [{ type: Input }],
    expanded: [{ type: HostBinding, args: ["class.bx--snippet--expand",] }, { type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    snippetClass: [{ type: HostBinding, args: ["class.bx--snippet",] }],
    snippetSingleClass: [{ type: HostBinding, args: ["class.bx--snippet--single",] }],
    snippetMultiClass: [{ type: HostBinding, args: ["class.bx--snippet--multi",] }],
    snippetInlineClass: [{ type: HostBinding, args: ["class.bx--snippet--inline",] }],
    snippetInlineLightClass: [{ type: HostBinding, args: ["class.bx--snippet--light",] }],
    btnCopyClass: [{ type: HostBinding, args: ["class.bx--btn--copy",] }],
    displayStyle: [{ type: HostBinding, args: ["style.display",] }],
    attrType: [{ type: HostBinding, args: ["attr.type",] }],
    code: [{ type: ViewChild, args: ["code", { static: false },] }],
    hostClick: [{ type: HostListener, args: ["click",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeSnippet, [{
        type: Component,
        args: [{
                selector: "ibm-code-snippet",
                template: `
		<ng-container *ngIf="display === 'inline'; else notInline">
			<ng-container *ngTemplateOutlet="codeTemplate"></ng-container>
			<ng-container *ngTemplateOutlet="feedbackTemplate"></ng-container>
		</ng-container>

		<ng-template #notInline>
			<div class="bx--snippet-container" [attr.aria-label]="translations.CODE_SNIPPET_TEXT">
				<ng-container *ngIf="skeleton">
					<span *ngIf="display === 'single'; else multiSkeleton"></span>
					<ng-template #multiSkeleton>
						<span></span>
						<span></span>
						<span></span>
					</ng-template>
				</ng-container>
				<pre *ngIf="!skeleton"><ng-container *ngTemplateOutlet="codeTemplate"></ng-container></pre>
			</div>
			<button
				*ngIf="!skeleton"
				class="bx--snippet-button"
				[attr.aria-label]="translations.COPY_CODE"
				(click)="onCopyButtonClicked()"
				tabindex="0">
				<svg ibmIcon="copy" size="16" class="bx--snippet__icon"></svg>
				<ng-container *ngTemplateOutlet="feedbackTemplate"></ng-container>
			</button>
			<button
				*ngIf="shouldShowExpandButton"
				class="bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand"
				(click)="toggleSnippetExpansion()"
				type="button">
				<span class="bx--snippet-btn--text">{{expanded ? translations.SHOW_LESS : translations.SHOW_MORE}}</span>
				<svg ibmIcon="chevron--down" size="16" class="bx--icon-chevron--down" [ariaLabel]="translations.SHOW_MORE_ICON"></svg>
			</button>
		</ng-template>

		<ng-template #codeTemplate>
			<code #code><ng-content></ng-content></code>
		</ng-template>

		<ng-template #feedbackTemplate>
			<div
			class="bx--btn--copy__feedback"
			[ngClass]="{
				'bx--btn--copy__feedback--displayed': showFeedback
			}"
			[attr.data-feedback]="feedbackText">
			</div>
		</ng-template>
	`
            }]
    }], function () { return [{ type: ɵngcc1.I18n }]; }, { display: [{
            type: Input
        }], translations: [{
            type: Input
        }], theme: [{
            type: Input
        }], feedbackText: [{
            type: Input
        }], feedbackTimeout: [{
            type: Input
        }], expanded: [{
            type: HostBinding,
            args: ["class.bx--snippet--expand"]
        }, {
            type: Input
        }], skeleton: [{
            type: HostBinding,
            args: ["class.bx--skeleton"]
        }, {
            type: Input
        }], snippetClass: [{
            type: HostBinding,
            args: ["class.bx--snippet"]
        }], snippetSingleClass: [{
            type: HostBinding,
            args: ["class.bx--snippet--single"]
        }], snippetMultiClass: [{
            type: HostBinding,
            args: ["class.bx--snippet--multi"]
        }], snippetInlineClass: [{
            type: HostBinding,
            args: ["class.bx--snippet--inline"]
        }], snippetInlineLightClass: [{
            type: HostBinding,
            args: ["class.bx--snippet--light"]
        }], btnCopyClass: [{
            type: HostBinding,
            args: ["class.bx--btn--copy"]
        }], displayStyle: [{
            type: HostBinding,
            args: ["style.display"]
        }], attrType: [{
            type: HostBinding,
            args: ["attr.type"]
        }], 
    /**
     * Inline code snippet acts as button and makes the whole component clickable.
     *
     * This handles clicks in that case.
     */
    hostClick: [{
            type: HostListener,
            args: ["click"]
        }], code: [{
            type: ViewChild,
            args: ["code", { static: false }]
        }] }); })();

// modules
class CodeSnippetModule {
}
CodeSnippetModule.ɵfac = function CodeSnippetModule_Factory(t) { return new (t || CodeSnippetModule)(); };
CodeSnippetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CodeSnippetModule });
CodeSnippetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            I18nModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodeSnippetModule, { declarations: function () { return [CodeSnippet]; }, imports: function () { return [CommonModule,
        FormsModule,
        I18nModule,
        IconModule]; }, exports: function () { return [CodeSnippet]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeSnippetModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CodeSnippet
                ],
                exports: [
                    CodeSnippet
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    I18nModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { CodeSnippet, CodeSnippetModule };

//# sourceMappingURL=carbon-components-angular-code-snippet.js.map