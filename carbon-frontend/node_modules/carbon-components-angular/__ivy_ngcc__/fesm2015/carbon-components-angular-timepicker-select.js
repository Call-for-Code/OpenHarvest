/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-timepicker-select.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, Input, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Select, SelectModule } from 'carbon-components-angular/select';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * [See demo](../../?path=/story/time-picker-select--simple)
 *
 * <example-url>../../iframe.html?id=time-picker-select--simple</example-url>
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'carbon-components-angular/icon';

function TimePickerSelect_label_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("for", ctx_r0.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);
} }
function TimePickerSelect__svg_svg_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 6);
} }
const _c0 = ["*"];
class TimePickerSelect extends Select {
    constructor() {
        super(...arguments);
        this.timeSelect = true;
        this.timePickerSelect = true;
        this.id = `timepicker-select-${TimePickerSelect.selectCount++}`;
        /**
         * Set to true for a loading select.
         */
        this.skeleton = false;
        /**
         * `light` or `dark` select theme
         */
        this.theme = "dark";
        this.timePickerSelectSkeleton = this.skeleton;
    }
    get timePickerSelectLight() {
        return this.theme === "light";
    }
}
TimePickerSelect.ɵfac = function TimePickerSelect_Factory(t) { return ɵTimePickerSelect_BaseFactory(t || TimePickerSelect); };
TimePickerSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TimePickerSelect, selectors: [["ibm-timepicker-select"]], hostVars: 8, hostBindings: function TimePickerSelect_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--select", ctx.timeSelect)("bx--time-picker__select", ctx.timePickerSelect)("bx--skeleton", ctx.timePickerSelectSkeleton)("bx--select--light", ctx.timePickerSelectLight);
    } }, inputs: { id: "id", skeleton: "skeleton", theme: "theme", label: "label" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: TimePickerSelect,
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 6, vars: 4, consts: [["class", "bx--label bx--visually-hidden", 4, "ngIf"], [1, "bx--select-input__wrapper"], [1, "bx--select-input", 3, "disabled", "change"], ["select", ""], ["ibmIcon", "chevron--down", "size", "16", "class", "bx--select__arrow", 4, "ngIf"], [1, "bx--label", "bx--visually-hidden"], ["ibmIcon", "chevron--down", "size", "16", 1, "bx--select__arrow"]], template: function TimePickerSelect_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, TimePickerSelect_label_0_Template, 2, 2, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "select", 2, 3);
        ɵngcc0.ɵɵlistener("change", function TimePickerSelect_Template_select_change_2_listener($event) { return ctx.onChange($event); });
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, TimePickerSelect__svg_svg_5_Template, 1, 0, "svg", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton && ctx.label);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.IconDirective], encapsulation: 2 });
TimePickerSelect.propDecorators = {
    timeSelect: [{ type: HostBinding, args: ["class.bx--select",] }],
    timePickerSelect: [{ type: HostBinding, args: ["class.bx--time-picker__select",] }],
    id: [{ type: Input }],
    skeleton: [{ type: Input }],
    theme: [{ type: Input }],
    label: [{ type: Input }],
    timePickerSelectSkeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }],
    timePickerSelectLight: [{ type: HostBinding, args: ["class.bx--select--light",] }]
};
const ɵTimePickerSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TimePickerSelect);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerSelect, [{
        type: Component,
        args: [{
                selector: "ibm-timepicker-select",
                template: `
		<label *ngIf="!skeleton && label" [attr.for]="id" class="bx--label bx--visually-hidden">{{label}}</label>
		<div class="bx--select-input__wrapper">
			<select
				#select
				[attr.id]="id"
				[disabled]="disabled"
				(change)="onChange($event)"
				class="bx--select-input">
				<ng-content></ng-content>
			</select>
			<svg ibmIcon="chevron--down" size="16" *ngIf="!skeleton" class="bx--select__arrow"></svg>
		</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimePickerSelect,
                        multi: true
                    }
                ]
            }]
    }], null, { timeSelect: [{
            type: HostBinding,
            args: ["class.bx--select"]
        }], timePickerSelect: [{
            type: HostBinding,
            args: ["class.bx--time-picker__select"]
        }], id: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], theme: [{
            type: Input
        }], timePickerSelectSkeleton: [{
            type: HostBinding,
            args: ["class.bx--skeleton"]
        }], timePickerSelectLight: [{
            type: HostBinding,
            args: ["class.bx--select--light"]
        }], label: [{
            type: Input
        }] }); })();

class TimePickerSelectModule {
}
TimePickerSelectModule.ɵfac = function TimePickerSelectModule_Factory(t) { return new (t || TimePickerSelectModule)(); };
TimePickerSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TimePickerSelectModule });
TimePickerSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            SelectModule,
            CommonModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TimePickerSelectModule, { declarations: function () { return [TimePickerSelect]; }, imports: function () { return [SelectModule,
        CommonModule,
        IconModule]; }, exports: function () { return [TimePickerSelect]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimePickerSelectModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TimePickerSelect
                ],
                exports: [
                    TimePickerSelect
                ],
                imports: [
                    SelectModule,
                    CommonModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TimePickerSelect, TimePickerSelectModule };

//# sourceMappingURL=carbon-components-angular-timepicker-select.js.map