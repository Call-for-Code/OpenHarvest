/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-search.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, EventEmitter, Output, HostBinding, ElementRef, HostListener, ViewChild, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * [See demo](../../?path=/story/search--basic)
 *
 * <example-url>../../iframe.html?id=search--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/i18n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'carbon-components-angular/icon';

const _c0 = ["input"];
function Search_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5);
} }
function Search_ng_template_4_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function Search_ng_template_4_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.openSearch(); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(1, "svg", 11);
    ɵngcc0.ɵɵelementEnd();
} }
function Search_ng_template_4__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 11);
} }
function Search_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 6, 7);
    ɵngcc0.ɵɵlistener("input", function Search_ng_template_4_Template_input_input_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onSearch($event.target.value); })("keyup.enter", function Search_ng_template_4_Template_input_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onEnter(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(2, Search_ng_template_4_button_2_Template, 2, 0, "button", 8);
    ɵngcc0.ɵɵtemplate(3, Search_ng_template_4__svg_svg_3_Template, 1, 0, "svg", 9);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("type", ctx_r2.tableSearch || !ctx_r2.toolbar ? "text" : "search")("id", ctx_r2.id)("value", ctx_r2.value)("autocomplete", ctx_r2.autocomplete)("placeholder", ctx_r2.placeholder)("disabled", ctx_r2.disabled)("required", ctx_r2.required);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.tableSearch && ctx_r2.toolbar);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.tableSearch || !ctx_r2.toolbar);
} }
const _c1 = function (a0) { return { "bx--search-close--hidden": a0 }; };
function Search_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function Search_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.clearSearch(); });
    ɵngcc0.ɵɵelementStart(1, "span", 13);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(3, "svg", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, !ctx_r3.value || ctx_r3.value.length === 0))("title", ctx_r3.clearButtonTitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.clearButtonTitle);
} }
const _c2 = function (a0, a1, a2, a3, a4, a5, a6) { return { "bx--search--sm": a0, "bx--search--lg": a1, "bx--search--xl": a2, "bx--search--light": a3, "bx--skeleton": a4, "bx--toolbar-search": a5, "bx--toolbar-search--active": a6 }; };
class Search {
    /**
     * Creates an instance of `Search`.
     * @param i18n The i18n translations.
     */
    constructor(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        /**
         * `light` or `dark` search theme.
         */
        this.theme = "dark";
        /**
         * Set to `true` for a disabled search input.
         */
        this.disabled = false;
        /**
         * Set to `true` for a toolbar search component.
         */
        this.toolbar = false;
        /**
         * Set to `true` for a loading search component.
         */
        this.skeleton = false;
        /**
         * Set to `true` to expand the toolbar search component.
         */
        this.active = false;
        /**
         * Specifies whether the search component is used in the table toolbar.
         */
        this.tableSearch = false;
        /**
         * The unique id for the search component.
         */
        this.id = `search-${Search.searchCount}`;
        /**
         * Sets the value attribute on the `input` element.
         */
        this.value = "";
        /**
         * Sets the autocomplete attribute on the `input` element.
         * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values
         */
        this.autocomplete = "on";
        /**
         * Sets the text inside the `label` tag.
         */
        this.label = this.i18n.get().SEARCH.LABEL;
        /**
         * Sets the placeholder attribute on the `input` element.
         */
        this.placeholder = this.i18n.get().SEARCH.PLACEHOLDER;
        /**
         * Used to set the `title` attribute of the clear button.
         */
        this.clearButtonTitle = this.i18n.get().SEARCH.CLEAR_BUTTON;
        /**
         * Title for the search trigger
         */
        this.searchTitle = "";
        /**
         * Emits an event when value is changed.
         */
        this.valueChange = new EventEmitter();
        this.open = new EventEmitter();
        /**
         * Emits an event when the clear button is clicked.
         */
        this.clear = new EventEmitter();
        /**
         * Emits an event on enter.
         */
        this.search = new EventEmitter();
        this._size = "md";
        /**
         * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = () => { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = (_) => { };
        Search.searchCount++;
    }
    get containerClass() { return !this.toolbar; }
    /**
     * Size of the search field.
     */
    set size(value) {
        this._size = value;
    }
    get size() {
        return this._size;
    }
    /**
     * This is the initial value set to the component
     * @param value The input value.
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the search input is touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Called when text is written in the input.
     * @param search The input text.
     */
    onSearch(search) {
        this.value = search;
        this.doValueChange();
    }
    /**
     * Called on enter.
     */
    onEnter() {
        this.search.emit(this.value);
    }
    /**
     * Called when clear button is clicked.
     */
    clearSearch() {
        this.value = "";
        this.clear.emit();
        this.propagateChange(this.value);
    }
    doValueChange() {
        this.valueChange.emit(this.value);
        this.propagateChange(this.value);
    }
    openSearch() {
        this.active = true;
        this.open.emit(this.active);
        setTimeout(() => this.inputRef.nativeElement.focus());
    }
    keyDown(event) {
        if (this.toolbar) {
            if (event.key === "Escape") {
                this.active = false;
            }
            else if (event.key === "Enter") {
                this.openSearch();
            }
        }
    }
    focusOut(event) {
        this.onTouched();
        if (this.toolbar &&
            this.inputRef &&
            this.inputRef.nativeElement.value === "" &&
            event.relatedTarget === null) {
            this.active = false;
            this.open.emit(this.active);
        }
    }
}
Search.ɵfac = function Search_Factory(t) { return new (t || Search)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n)); };
Search.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Search, selectors: [["ibm-search"]], viewQuery: function Search_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);
    } }, hostVars: 2, hostBindings: function Search_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function Search_keydown_HostBindingHandler($event) { return ctx.keyDown($event); })("focusout", function Search_focusout_HostBindingHandler($event) { return ctx.focusOut($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--form-item", ctx.containerClass);
    } }, inputs: { theme: "theme", disabled: "disabled", toolbar: "toolbar", skeleton: "skeleton", active: "active", tableSearch: "tableSearch", id: "id", value: "value", autocomplete: "autocomplete", label: "label", placeholder: "placeholder", clearButtonTitle: "clearButtonTitle", searchTitle: "searchTitle", size: "size", name: "name", required: "required", ariaLabel: "ariaLabel" }, outputs: { valueChange: "valueChange", open: "open", clear: "clear", search: "search" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Search,
                multi: true
            }
        ])], decls: 7, vars: 15, consts: [["role", "search", "tabindex", "0", 1, "bx--search", 3, "ngClass", "click"], [1, "bx--label", 3, "for"], ["class", "bx--search-input", 4, "ngIf", "ngIfElse"], ["enableInput", ""], ["class", "bx--search-close", 3, "ngClass", "title", "click", 4, "ngIf"], [1, "bx--search-input"], [1, "bx--search-input", 3, "type", "id", "value", "autocomplete", "placeholder", "disabled", "required", "input", "keyup.enter"], ["input", ""], ["class", "bx--toolbar-search__btn", "aria-label", "Open search", 3, "click", 4, "ngIf"], ["ibmIcon", "search", "class", "bx--search-magnifier", "size", "16", 4, "ngIf"], ["aria-label", "Open search", 1, "bx--toolbar-search__btn", 3, "click"], ["ibmIcon", "search", "size", "16", 1, "bx--search-magnifier"], [1, "bx--search-close", 3, "ngClass", "title", "click"], [1, "bx--visually-hidden"], ["ibmIcon", "close", "size", "16"]], template: function Search_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function Search_Template_div_click_0_listener() { return ctx.openSearch(); });
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, Search_div_3_Template, 1, 0, "div", 2);
        ɵngcc0.ɵɵtemplate(4, Search_ng_template_4_Template, 4, 9, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, Search_button_6_Template, 4, 5, "button", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction7(7, _c2, ctx.size === "sm", ctx.size === "md", ctx.size === "xl", ctx.theme === "light", ctx.skeleton, ctx.toolbar, ctx.toolbar && ctx.active));
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("for", ctx.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.skeleton)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tableSearch || !ctx.toolbar);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.IconDirective], encapsulation: 2 });
/**
 * Variable used for creating unique ids for search components.
 */
Search.searchCount = 0;
/** @nocollapse */
Search.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n }
];
Search.propDecorators = {
    containerClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    theme: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    toolbar: [{ type: Input }],
    skeleton: [{ type: Input }],
    active: [{ type: Input }],
    tableSearch: [{ type: Input }],
    name: [{ type: Input }],
    id: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    autocomplete: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    clearButtonTitle: [{ type: Input }],
    searchTitle: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    valueChange: [{ type: Output }],
    open: [{ type: Output }],
    clear: [{ type: Output }],
    search: [{ type: Output }],
    inputRef: [{ type: ViewChild, args: ["input", { static: false },] }],
    keyDown: [{ type: HostListener, args: ["keydown", ["$event"],] }],
    focusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Search, [{
        type: Component,
        args: [{
                selector: "ibm-search",
                template: "<div\n\tclass=\"bx--search\"\n\t[ngClass]=\"{\n\t\t'bx--search--sm': size === 'sm',\n\t\t'bx--search--lg': size === 'md',\n\t\t'bx--search--xl': size === 'xl',\n\t\t'bx--search--light': theme === 'light',\n\t\t'bx--skeleton': skeleton,\n\t\t'bx--toolbar-search': toolbar,\n\t\t'bx--toolbar-search--active': toolbar && active\n\t}\"\n\trole=\"search\"\n\t[attr.aria-label]=\"ariaLabel\"\n\ttabindex=\"0\"\n\t(click)=\"openSearch()\">\n\t<label class=\"bx--label\" [for]=\"id\">{{label}}</label>\n\n\t<div *ngIf=\"skeleton; else enableInput\" class=\"bx--search-input\"></div>\n\t<ng-template #enableInput>\n\t\t<input\n\t\t\t#input\n\t\t\tclass=\"bx--search-input\"\n\t\t\t[type]=\"tableSearch || !toolbar ? 'text' : 'search'\"\n\t\t\t[id]=\"id\"\n\t\t\t[value]=\"value\"\n\t\t\t[autocomplete]=\"autocomplete\"\n\t\t\t[placeholder]=\"placeholder\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[required]=\"required\"\n\t\t\t(input)=\"onSearch($event.target.value)\"\n\t\t\t(keyup.enter)=\"onEnter()\"/>\n\t\t<button\n\t\t\t*ngIf=\"!tableSearch && toolbar\"\n\t\t\tclass=\"bx--toolbar-search__btn\"\n\t\t\t(click)=\"openSearch()\"\n\t\t\taria-label=\"Open search\">\n\t\t\t<svg ibmIcon=\"search\" size=\"16\" class=\"bx--search-magnifier\"></svg>\n\t\t</button>\n\t\t<svg\n\t\t\tibmIcon=\"search\"\n\t\t\t*ngIf=\"tableSearch || !toolbar\"\n\t\t\tclass=\"bx--search-magnifier\"\n\t\t\tsize=\"16\">\n\t\t</svg>\n\t</ng-template>\n\n\t<button\n\t\t*ngIf=\"tableSearch || !toolbar\"\n\t\tclass=\"bx--search-close\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--search-close--hidden': !value || value.length === 0\n\t\t}\"\n\t\t[title]=\"clearButtonTitle\"\n\t\t(click)=\"clearSearch()\">\n\t\t<span class=\"bx--visually-hidden\">{{ clearButtonTitle }}</span>\n\t\t<svg ibmIcon=\"close\" size=\"16\"></svg>\n\t</button>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Search,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.I18n }]; }, { theme: [{
            type: Input
        }], disabled: [{
            type: Input
        }], toolbar: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], active: [{
            type: Input
        }], tableSearch: [{
            type: Input
        }], id: [{
            type: Input
        }], value: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], label: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], clearButtonTitle: [{
            type: Input
        }], searchTitle: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], open: [{
            type: Output
        }], clear: [{
            type: Output
        }], search: [{
            type: Output
        }], containerClass: [{
            type: HostBinding,
            args: ["class.bx--form-item"]
        }], size: [{
            type: Input
        }], keyDown: [{
            type: HostListener,
            args: ["keydown", ["$event"]]
        }], focusOut: [{
            type: HostListener,
            args: ["focusout", ["$event"]]
        }], name: [{
            type: Input
        }], required: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], inputRef: [{
            type: ViewChild,
            args: ["input", { static: false }]
        }] }); })();

// modules
class SearchModule {
}
SearchModule.ɵfac = function SearchModule_Factory(t) { return new (t || SearchModule)(); };
SearchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SearchModule });
SearchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule,
            I18nModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SearchModule, { declarations: function () { return [Search]; }, imports: function () { return [FormsModule,
        CommonModule,
        I18nModule,
        IconModule]; }, exports: function () { return [Search]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    Search
                ],
                exports: [
                    Search
                ],
                imports: [
                    FormsModule,
                    CommonModule,
                    I18nModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { Search, SearchModule };

//# sourceMappingURL=carbon-components-angular-search.js.map