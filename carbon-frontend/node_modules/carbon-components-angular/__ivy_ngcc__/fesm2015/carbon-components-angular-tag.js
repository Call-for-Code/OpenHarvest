/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-tag.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * Component that represents a tag for labelling/categorizing using keywords
 *
 * [See demo](../../?path=/story/tag--basic)
 *
 * <example-url>../../iframe.html?id=tag--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/icon';

const _c0 = ["*"];
class Tag {
    constructor() {
        /**
         * type of the tag determines the styling
         *
         * Reference `TagType` for v9 applications, and `TagTypeExperimental` for v10/v9 experimental mode applications
         */
        this.type = "gray";
        this.class = "";
    }
    get attrClass() {
        return `bx--tag bx--tag--${this.type} ${this.class}`;
    }
}
Tag.ɵfac = function Tag_Factory(t) { return new (t || Tag)(); };
Tag.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Tag, selectors: [["ibm-tag"]], hostVars: 1, hostBindings: function Tag_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("class", ctx.attrClass);
    } }, inputs: { type: "type", class: "class" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function Tag_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
Tag.propDecorators = {
    type: [{ type: Input }],
    class: [{ type: Input }],
    attrClass: [{ type: HostBinding, args: ["attr.class",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Tag, [{
        type: Component,
        args: [{
                selector: "ibm-tag",
                template: `<ng-content></ng-content>`
            }]
    }], function () { return []; }, { type: [{
            type: Input
        }], class: [{
            type: Input
        }], attrClass: [{
            type: HostBinding,
            args: ["attr.class"]
        }] }); })();

class TagFilter extends Tag {
    constructor() {
        super(...arguments);
        this.closeButtonLabel = "Clear Filter";
        /**
         * Function for close/delete the tag
         */
        this.close = new EventEmitter();
        /**
         * We need to stop the immedate propagation of click on the close button
         * to prevent undesired effects when used within dialogs.
         *
         * We need to emit a click event on close to allow for clicks to be listened
         * to on the immediate close button element. `action` distinguishes between clicks on
         * the tag vs. clicks on the close button.
         */
        this.click = new EventEmitter();
    }
    onClick(event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "click" });
    }
    onClose(event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "close" });
        this.close.emit();
    }
    get attrClass() {
        return `bx--tag bx--tag--filter bx--tag--${this.type} ${this.class}`;
    }
    get attrAriaLabel() {
        return `${this.title || ""} ${this.closeButtonLabel}`.trim();
    }
}
TagFilter.ɵfac = function TagFilter_Factory(t) { return ɵTagFilter_BaseFactory(t || TagFilter); };
TagFilter.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagFilter, selectors: [["ibm-tag-filter"]], hostVars: 2, hostBindings: function TagFilter_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("class", ctx.attrClass)("aria-label", ctx.attrAriaLabel);
    } }, inputs: { closeButtonLabel: "closeButtonLabel", disabled: "disabled", title: "title" }, outputs: { close: "close", click: "click" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 6, vars: 4, consts: [[1, "bx--tag__label", 3, "click"], [1, "bx--tag__close-icon", 3, "disabled", "title", "click"], [1, "bx--visually-hidden"], ["ibmIcon", "close", "size", "16"]], template: function TagFilter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function TagFilter_Template_span_click_0_listener($event) { return ctx.onClick($event); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "button", 1);
        ɵngcc0.ɵɵlistener("click", function TagFilter_Template_button_click_2_listener($event) { return ctx.onClose($event); });
        ɵngcc0.ɵɵelementStart(3, "span", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(5, "svg", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("title", ctx.title ? ctx.title : null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("title", ctx.closeButtonLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.closeButtonLabel);
    } }, directives: [ɵngcc1.IconDirective], encapsulation: 2 });
TagFilter.propDecorators = {
    closeButtonLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    title: [{ type: Input }],
    close: [{ type: Output }],
    click: [{ type: Output }],
    attrClass: [{ type: HostBinding, args: ["attr.class",] }],
    attrAriaLabel: [{ type: HostBinding, args: ["attr.aria-label",] }]
};
const ɵTagFilter_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TagFilter);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TagFilter, [{
        type: Component,
        args: [{
                selector: "ibm-tag-filter",
                template: `
		<span
			class="bx--tag__label"
			[attr.title]="title ? title : null"
			(click)="onClick($event)">
			<ng-content></ng-content>
		</span>
		<button
			class="bx--tag__close-icon"
			(click)="onClose($event)"
			[disabled]="disabled"
			[title]="closeButtonLabel">
			<span class="bx--visually-hidden">{{closeButtonLabel}}</span>
			<svg ibmIcon="close" size="16"></svg>
		</button>
	`
            }]
    }], null, { closeButtonLabel: [{
            type: Input
        }], close: [{
            type: Output
        }], click: [{
            type: Output
        }], attrClass: [{
            type: HostBinding,
            args: ["attr.class"]
        }], attrAriaLabel: [{
            type: HostBinding,
            args: ["attr.aria-label"]
        }], disabled: [{
            type: Input
        }], title: [{
            type: Input
        }] }); })();

class TagModule {
}
TagModule.ɵfac = function TagModule_Factory(t) { return new (t || TagModule)(); };
TagModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TagModule });
TagModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, IconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TagModule, { declarations: function () { return [Tag, TagFilter]; }, imports: function () { return [CommonModule, IconModule]; }, exports: function () { return [Tag, TagFilter]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TagModule, [{
        type: NgModule,
        args: [{
                declarations: [Tag, TagFilter],
                exports: [Tag, TagFilter],
                imports: [CommonModule, IconModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TagFilter, Tag, TagModule };

//# sourceMappingURL=carbon-components-angular-tag.js.map