/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-input.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Directive, HostBinding, Input, Component, TemplateRef, ViewChild, ContentChild, NgModule } from '@angular/core';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * A directive for applying styling to an input element.
 *
 * Example:
 *
 * ```html
 * <input ibmText/>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'carbon-components-angular/icon';

const _c0 = ["wrapper"];
function Label__svg_svg_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 5);
} }
function Label_div_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.helperText);
} }
function Label_div_6_2_ng_template_0_Template(rf, ctx) { }
function Label_div_6_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Label_div_6_2_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.helperText);
} }
function Label_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtemplate(1, Label_div_6_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, Label_div_6_2_Template, 1, 1, undefined, 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.isTemplate(ctx_r2.helperText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.isTemplate(ctx_r2.helperText));
} }
function Label_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.invalidText);
} }
function Label_div_7_2_ng_template_0_Template(rf, ctx) { }
function Label_div_7_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Label_div_7_2_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r8.invalidText);
} }
function Label_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtemplate(1, Label_div_7_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, Label_div_7_2_Template, 1, 1, undefined, 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.isTemplate(ctx_r3.invalidText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isTemplate(ctx_r3.invalidText));
} }
const _c1 = ["*", [["input"], ["textarea"], ["div"]]];
const _c2 = function (a0) { return { "bx--skeleton": a0 }; };
const _c3 = ["*", "input,textarea,div"];
class TextInput {
    constructor() {
        /**
         * `light` or `dark` input theme
         */
        this.theme = "dark";
        /**
         * Input field render size
         */
        this.size = "md";
        this.inputClass = true;
        this.invalid = false;
        this.skeleton = false;
    }
    get isSizeXl() {
        return this.size === "xl";
    }
    get isSizeSm() {
        return this.size === "sm";
    }
    get isLightTheme() {
        return this.theme === "light";
    }
}
TextInput.ɵfac = function TextInput_Factory(t) { return new (t || TextInput)(); };
TextInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TextInput, selectors: [["", "ibmText", ""]], hostVars: 12, hostBindings: function TextInput_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--text-input", ctx.inputClass)("bx--text-input--invalid", ctx.invalid)("bx--skeleton", ctx.skeleton)("bx--text-input--xl", ctx.isSizeXl)("bx--text-input--sm", ctx.isSizeSm)("bx--text-input--light", ctx.isLightTheme);
    } }, inputs: { theme: "theme", size: "size", invalid: "invalid", skeleton: "skeleton" } });
TextInput.propDecorators = {
    theme: [{ type: Input }],
    size: [{ type: Input }],
    inputClass: [{ type: HostBinding, args: ["class.bx--text-input",] }],
    isSizeXl: [{ type: HostBinding, args: ["class.bx--text-input--xl",] }],
    isSizeSm: [{ type: HostBinding, args: ["class.bx--text-input--sm",] }],
    invalid: [{ type: HostBinding, args: ["class.bx--text-input--invalid",] }, { type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    isLightTheme: [{ type: HostBinding, args: ["class.bx--text-input--light",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextInput, [{
        type: Directive,
        args: [{
                selector: "[ibmText]"
            }]
    }], function () { return []; }, { theme: [{
            type: Input
        }], size: [{
            type: Input
        }], inputClass: [{
            type: HostBinding,
            args: ["class.bx--text-input"]
        }], invalid: [{
            type: HostBinding,
            args: ["class.bx--text-input--invalid"]
        }, {
            type: Input
        }], skeleton: [{
            type: HostBinding,
            args: ["class.bx--skeleton"]
        }, {
            type: Input
        }], isSizeXl: [{
            type: HostBinding,
            args: ["class.bx--text-input--xl"]
        }], isSizeSm: [{
            type: HostBinding,
            args: ["class.bx--text-input--sm"]
        }], isLightTheme: [{
            type: HostBinding,
            args: ["class.bx--text-input--light"]
        }] }); })();

/**
 * A directive for applying styling to a textarea element.
 *
 * Example:
 *
 * ```html
 * <textarea ibmTextArea></textarea>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
 */
class TextArea {
    constructor() {
        /**
         * `light` or `dark` input theme
         */
        this.theme = "dark";
        this.baseClass = true;
        this.invalid = false;
        this.skeleton = false;
    }
    get isLightTheme() {
        return this.theme === "light";
    }
}
TextArea.ɵfac = function TextArea_Factory(t) { return new (t || TextArea)(); };
TextArea.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TextArea, selectors: [["", "ibmTextArea", ""]], hostVars: 8, hostBindings: function TextArea_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--text-area", ctx.baseClass)("bx--text-area--invalid", ctx.invalid)("bx--skeleton", ctx.skeleton)("bx--text-area--light", ctx.isLightTheme);
    } }, inputs: { theme: "theme", invalid: "invalid", skeleton: "skeleton" } });
TextArea.propDecorators = {
    theme: [{ type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--text-area",] }],
    invalid: [{ type: HostBinding, args: ["class.bx--text-area--invalid",] }, { type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    isLightTheme: [{ type: HostBinding, args: ["class.bx--text-area--light",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextArea, [{
        type: Directive,
        args: [{
                selector: "[ibmTextArea]"
            }]
    }], function () { return []; }, { theme: [{
            type: Input
        }], baseClass: [{
            type: HostBinding,
            args: ["class.bx--text-area"]
        }], invalid: [{
            type: HostBinding,
            args: ["class.bx--text-area--invalid"]
        }, {
            type: Input
        }], skeleton: [{
            type: HostBinding,
            args: ["class.bx--skeleton"]
        }, {
            type: Input
        }], isLightTheme: [{
            type: HostBinding,
            args: ["class.bx--text-area--light"]
        }] }); })();

/**
 * [See demo](../../?path=/story/input--label)
 *
 * ```html
 * <ibm-label labelState="success">
 * 	<label label>Field with success</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="warning">
 * 	<label label>Field with warning</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="error">
 * 	<label label>Field with error</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 * ```
 *
 * <example-url>../../iframe.html?id=input--label</example-url>
 */
class Label {
    /**
     * Creates an instance of Label.
     */
    constructor() {
        /**
         * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with
         * its input counterpart through the 'for' attribute.
         */
        this.labelInputID = "ibm-label-" + Label.labelCounter;
        /**
         * The class of the wrapper
         */
        this.wrapperClass = "bx--text-input__field-wrapper";
        /**
         * State of the `Label` will determine the styles applied.
         */
        this.labelState = "";
        /**
         * Set to `true` for a loading label.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid label component.
         */
        this.invalid = false;
        this.labelClass = true;
        Label.labelCounter++;
    }
    /**
     * Update wrapper class if a textarea is hosted.
     */
    ngAfterContentInit() {
        if (this.textArea) {
            this.wrapperClass = "bx--text-area__wrapper";
        }
    }
    /**
     * Sets the id on the input item associated with the `Label`.
     */
    ngAfterViewInit() {
        if (this.wrapper) {
            const inputElement = this.wrapper.nativeElement.querySelector("input,textarea,div");
            if (inputElement) {
                inputElement.setAttribute("id", this.labelInputID);
            }
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
Label.ɵfac = function Label_Factory(t) { return new (t || Label)(); };
Label.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Label, selectors: [["ibm-label"]], contentQueries: function Label_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TextArea, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textArea = _t.first);
    } }, viewQuery: function Label_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);
    } }, hostVars: 2, hostBindings: function Label_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--form-item", ctx.labelClass);
    } }, inputs: { labelState: "labelState", skeleton: "skeleton", invalid: "invalid", helperText: "helperText", invalidText: "invalidText", ariaLabel: "ariaLabel" }, ngContentSelectors: _c3, decls: 8, vars: 11, consts: [[1, "bx--label", 3, "for", "ngClass"], ["wrapper", ""], ["ibmIcon", "warning--filled", "size", "16", "class", "bx--text-input__invalid-icon bx--text-area__invalid-icon", 4, "ngIf"], ["class", "bx--form__helper-text", 4, "ngIf"], ["class", "bx--form-requirement", 4, "ngIf"], ["ibmIcon", "warning--filled", "size", "16", 1, "bx--text-input__invalid-icon", "bx--text-area__invalid-icon"], [1, "bx--form__helper-text"], [4, "ngIf"], [3, "ngTemplateOutlet"], [1, "bx--form-requirement"]], template: function Label_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", null, 1);
        ɵngcc0.ɵɵtemplate(4, Label__svg_svg_4_Template, 1, 0, "svg", 2);
        ɵngcc0.ɵɵprojection(5, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, Label_div_6_Template, 3, 2, "div", 3);
        ɵngcc0.ɵɵtemplate(7, Label_div_7_Template, 3, 2, "div", 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("for", ctx.labelInputID)("ngClass", ɵngcc0.ɵɵpureFunction1(9, _c2, ctx.skeleton));
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMap(ctx.wrapperClass);
        ɵngcc0.ɵɵattribute("data-invalid", ctx.invalid ? true : null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton && ctx.helperText && !ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc2.IconDirective, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
/**
 * Used to build the id of the input item associated with the `Label`.
 */
Label.labelCounter = 0;
/** @nocollapse */
Label.ctorParameters = () => [];
Label.propDecorators = {
    labelState: [{ type: Input }],
    skeleton: [{ type: Input }],
    helperText: [{ type: Input }],
    invalidText: [{ type: Input }],
    invalid: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    wrapper: [{ type: ViewChild, args: ["wrapper", { static: false },] }],
    textArea: [{ type: ContentChild, args: [TextArea, { static: false },] }],
    labelClass: [{ type: HostBinding, args: ["class.bx--form-item",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Label, [{
        type: Component,
        args: [{
                selector: "ibm-label",
                template: `
		<label
			[for]="labelInputID"
			[attr.aria-label]="ariaLabel"
			class="bx--label"
			[ngClass]="{
				'bx--skeleton': skeleton
			}">
			<ng-content></ng-content>
		</label>
		<div [class]="wrapperClass" [attr.data-invalid]="(invalid ? true : null)" #wrapper>
			<svg
				*ngIf="invalid"
				ibmIcon="warning--filled"
				size="16"
				class="bx--text-input__invalid-icon bx--text-area__invalid-icon">
			</svg>
			<ng-content select="input,textarea,div"></ng-content>
		</div>
		<div *ngIf="!skeleton && helperText && !invalid" class="bx--form__helper-text">
			<ng-container *ngIf="!isTemplate(helperText)">{{helperText}}</ng-container>
			<ng-template *ngIf="isTemplate(helperText)" [ngTemplateOutlet]="helperText"></ng-template>
		</div>
		<div *ngIf="invalid" class="bx--form-requirement">
			<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
			<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
		</div>
	`
            }]
    }], function () { return []; }, { labelState: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], invalid: [{
            type: Input
        }], labelClass: [{
            type: HostBinding,
            args: ["class.bx--form-item"]
        }], helperText: [{
            type: Input
        }], invalidText: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], wrapper: [{
            type: ViewChild,
            args: ["wrapper", { static: false }]
        }], textArea: [{
            type: ContentChild,
            args: [TextArea, { static: false }]
        }] }); })();

// modules
class InputModule {
}
InputModule.ɵfac = function InputModule_Factory(t) { return new (t || InputModule)(); };
InputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: InputModule });
InputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InputModule, { declarations: function () { return [Label, TextInput, TextArea]; }, imports: function () { return [CommonModule,
        FormsModule,
        IconModule]; }, exports: function () { return [Label, TextInput, TextArea]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    Label,
                    TextInput,
                    TextArea
                ],
                exports: [
                    Label,
                    TextInput,
                    TextArea
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TextInput, InputModule, Label, TextArea };

//# sourceMappingURL=carbon-components-angular-input.js.map