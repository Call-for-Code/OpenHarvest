{"version":3,"file":"carbon-components-angular-experimental.js","sources":["carbon-components-angular/experimental/experimental.service.ts","carbon-components-angular/experimental/experimental.module.ts","carbon-components-angular/experimental/carbon-components-angular-experimental.ts"],"names":[],"mappings":";;MAWa,mBAAmB;AAGhC;AAAG,CAJH;AACa;AAAG;AAId,QAAO,gBAAW,GAAG,IAAI,GAAG,EAAsB,CAAC;AAG7B,KA6CvB;AACoC;AAAG;AAAgD;AAAC,IA5CxF,aAAa,CAAC,IAAY,EAAE,UAAsB,EAAC,OAAO,EAAE,KAAK,EAAC;AACpD,QAAb,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACT,YAAvB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAKzB,SAJX;AAKe,KAJhB;AAGoB;AAAI;AAAC;AAAC;AAGd;;AAAC,GAAd,gBAAgB,CAAC,IAAY,hBAC5B,MAAM,UAAU,GAAG;AAAC,GAAG,CAAC,aAAa,CAAC,VACtC,UAAU,CAAC;EAD+B,CAAC,CAAC,JAAJ,EAAE,CAAC,CAAC,JAChC,AAAA,AAAA,MAAM,GAAG;AAAG,CAAC,CAAC,FAI5B;AACQ;AAAY;AAEjB;AAAM,IAAR;AAAI,aAAa,CAAC,IAAY,VAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC;AAAC,GAAG,CAAC,CAAC;AAC5C,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC,tBAC3B;AAG0C;AACH;AAGzC;AAAU;AAAM,IADf;AAAI,SAAS,CAAC,IAAY,NACzB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;AAAG,CAAC,CAAC,EAAE,QAChC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACd;AAAQ,IAAnB,OAAO,IAAI,CAAC;AAAa,CAAC,IAAI,CAAC,CAAC,PAGjB,QAAhB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAInC,KAHC;AAGqB;AAAM;AAAQ;AACjC,IACH,cAAc;AACd;AAAC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,hBAG1B;AAAqD;AAAoC;AAAM,MAtDpH;AAAE,QAAQ;ACPX;AACA;AAAQ,CAAQ,GACf,OAAO,aAAa;YADgC,CAAC,aAAkC,1BACjE,EAAE,IAAI,mBAAmB,EAAE,CAAC,3BAClD;AAED,MAAa,6BAA6B;AAAG,IAC5C,OAAO,EAAE,mBAAmB;AAClB,IAAV,IAAI;AAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE;AACD;AASxC,MAAa;AAAE,gBAAgB;AACsB;AAAQ,YAP5D,QAAQ;AACT,MADU,UACT,SAAS,EAAE;AAET;AAAM;YADP,mBAAmB,bACnB,6BAA6B,9BAC7B,+BACD;;;;gDACW;AAAC;ACpBb;AAKM;AAAgE,GAHnE;AAGsB;AAAE;AAAwC;AAAkC;AAAmE;AAAsD;AAAG;AAA2B;;;;;;;;;;;;;;;0BAAiO;AAAC;AAAC;AAAI;AAAwC;AAAI;AAAC;;AFMA,AAAA,AADA,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAgpDA,AAAA,ACPA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAQA,AAAA,AAAA,AANA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AACA,ACnBA,AAEA","sourcesContent":["import { Injectable } from \"@angular/core\";\n\n/**\n * Represents options for an experiment. The only required property is `enabled`, however other options may be supplied.\n */\nexport interface Experiment {\n\tenabled: boolean;\n\t[key: string]: any;\n}\n\n@Injectable()\nexport class ExperimentalService {\n\t/**\n\t * Map to hold all our experiments\n\t */\n\tprivate experiments = new Map<string, Experiment>();\n\n\t/**\n\t * Adds an experiment if it doesn't exist.\n\t */\n\taddExperiment(name: string, options: Experiment = {enabled: false}) {\n\t\tif (!this.experiments.has(name)) {\n\t\t\tthis.experiments.set(name, options);\n\t\t}\n\t}\n\n\t/**\n\t * Enables an experiment by name\n\t * @param name name of the experiment to enable\n\t */\n\tenableExperiment(name: string) {\n\t\tconst experiment = this.getExperiment(name);\n\t\texperiment.enabled = true;\n\t}\n\n\t/**\n\t * Disables an experiment by name\n\t * @param name name of the experiment to disable\n\t */\n\tdisableExperiment(name: string) {\n\t\tconst experiment = this.getExperiment(name);\n\t\texperiment.enabled = false;\n\t}\n\n\t/**\n\t * Get the options for an experiment by name\n\t * @param name name of experiment to get\n\t */\n\tgetExperiment(name: string): Experiment {\n\t\tif (!this.experiments.has(name)) {\n\t\t\tthis.addExperiment(name);\n\t\t\treturn this.getExperiment(name);\n\t\t}\n\n\t\treturn this.experiments.get(name);\n\t}\n\n\t/**\n\t * Get an array of tuples representing an experiment and it's options\n\t */\n\tgetExperiments(): Array<[string, Experiment]> {\n\t\treturn Array.from(this.experiments.entries());\n\t}\n}\n","import { NgModule, SkipSelf, Optional } from \"@angular/core\";\nimport { ExperimentalService } from \"./experimental.service\";\n\n// either provides a new instance of ExperimentalService, or returns the parent\nexport function EXPERIMENTAL_SERVICE_PROVIDER_FACTORY(parentService: ExperimentalService) {\n\treturn parentService || new ExperimentalService();\n}\n\nexport const EXPERIMENTAL_SERVICE_PROVIDER = {\n\tprovide: ExperimentalService,\n\tdeps: [[new Optional(), new SkipSelf(), ExperimentalService]],\n\tuseFactory: EXPERIMENTAL_SERVICE_PROVIDER_FACTORY\n};\n\n@NgModule({\n\tproviders: [\n\t\tExperimentalService,\n\t\tEXPERIMENTAL_SERVICE_PROVIDER\n\t]\n})\nexport class ExperimentalModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}