/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-list.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, ElementRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * Applies list styling to the item it is used on. Best used with `li`s.
 */
import * as ɵngcc0 from '@angular/core';
class ListItemDirective {
    constructor() {
        this.wrapper = true;
    }
}
ListItemDirective.ɵfac = function ListItemDirective_Factory(t) { return new (t || ListItemDirective)(); };
ListItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ListItemDirective, selectors: [["", "ibmListItem", ""]], hostVars: 2, hostBindings: function ListItemDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--list__item", ctx.wrapper);
    } } });
ListItemDirective.propDecorators = {
    wrapper: [{ type: HostBinding, args: ["class.bx--list__item",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmListItem]"
            }]
    }], function () { return []; }, { wrapper: [{
            type: HostBinding,
            args: ["class.bx--list__item"]
        }] }); })();

/**
 * Applies either ordered or unordered styling to the list container it is applied to.
 *
 * [See demo](../../?path=/story/list--basic)
 *
 * For `ul`s it will apply unordered list styles, and for `ol`s it will apply ordered list styles.
 *
 * If a `ul` or `ol` is nested within a `li` the directive will apply nested list styling.
 *
 * <example-url>../../iframe.html?id=list--basic</example-url>
 */
class List {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    get ordered() {
        if (this.nested) {
            return false;
        }
        return this.elementRef.nativeElement.tagName === "OL";
    }
    get unordered() {
        if (this.nested) {
            return false;
        }
        return this.elementRef.nativeElement.tagName === "UL";
    }
    get nested() {
        return !!(this.elementRef.nativeElement.parentElement && this.elementRef.nativeElement.parentElement.tagName === "LI");
    }
}
List.ɵfac = function List_Factory(t) { return new (t || List)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
List.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: List, selectors: [["", "ibmList", ""]], hostVars: 6, hostBindings: function List_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--list--ordered", ctx.ordered)("bx--list--unordered", ctx.unordered)("bx--list--nested", ctx.nested);
    } } });
/** @nocollapse */
List.ctorParameters = () => [
    { type: ElementRef }
];
List.propDecorators = {
    ordered: [{ type: HostBinding, args: ["class.bx--list--ordered",] }],
    unordered: [{ type: HostBinding, args: ["class.bx--list--unordered",] }],
    nested: [{ type: HostBinding, args: ["class.bx--list--nested",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(List, [{
        type: Directive,
        args: [{
                selector: "[ibmList]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { ordered: [{
            type: HostBinding,
            args: ["class.bx--list--ordered"]
        }], unordered: [{
            type: HostBinding,
            args: ["class.bx--list--unordered"]
        }], nested: [{
            type: HostBinding,
            args: ["class.bx--list--nested"]
        }] }); })();

class ListModule {
}
ListModule.ɵfac = function ListModule_Factory(t) { return new (t || ListModule)(); };
ListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ListModule });
ListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListModule, { declarations: function () { return [ListItemDirective, List]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ListItemDirective, List]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ListItemDirective,
                    List
                ],
                exports: [
                    ListItemDirective,
                    List
                ],
                imports: [CommonModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ListItemDirective, List, ListModule };

//# sourceMappingURL=carbon-components-angular-list.js.map