/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-pagination.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';
import { ExperimentalService, ExperimentalModule } from 'carbon-components-angular/experimental';
import { merge } from 'carbon-components-angular/utils';
import { range } from 'carbon-components-angular/common';
import { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { IconModule } from 'carbon-components-angular/icon';
import { ButtonModule } from 'carbon-components-angular/forms';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/i18n';
import * as ɵngcc2 from 'carbon-components-angular/experimental';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from 'carbon-components-angular/icon';
import * as ɵngcc6 from 'carbon-components-angular/forms';

function Pagination_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "p", 4);
    ɵngcc0.ɵɵelement(2, "p", 5);
    ɵngcc0.ɵɵelement(3, "p", 6);
    ɵngcc0.ɵɵelementEnd();
} }
function Pagination_div_2_ng_container_1_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r9 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", option_r9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r9, " ");
} }
function Pagination_div_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "label", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 10);
    ɵngcc0.ɵɵelementStart(5, "select", 11);
    ɵngcc0.ɵɵlistener("ngModelChange", function Pagination_div_2_ng_container_1_Template_select_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.itemsPerPage = $event; });
    ɵngcc0.ɵɵtemplate(6, Pagination_div_2_ng_container_1_option_6_Template, 2, 2, "option", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(7, "svg", 13);
    ɵngcc0.ɵɵpipe(8, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", ctx_r4.itemsPerPageSelectId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 9, ctx_r4.itemsPerPageText.subject), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("bx--select--disabled", ctx_r4.pageInputDisabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r4.itemsPerPageSelectId)("ngModel", ctx_r4.itemsPerPage)("disabled", ctx_r4.pageInputDisabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.itemsPerPageOptions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("ariaLabel", ɵngcc0.ɵɵpipeBind1(8, 11, ctx_r4.optionsListText.subject));
} }
const _c0 = function (a0) { return { "margin-left": a0 }; };
const _c1 = function (a0, a1, a2) { return { start: a0, end: a1, total: a2 }; };
function Pagination_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "i18nReplace");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx_r5.showPageInput ? null : 0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ɵngcc0.ɵɵpipeBind2(3, 4, ctx_r5.totalItemText.subject, ɵngcc0.ɵɵpureFunction3(9, _c1, ctx_r5.startItemIndex, ctx_r5.endItemIndex, ctx_r5.totalDataLength))), " ");
} }
function Pagination_div_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "i18nReplace");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx_r6.showPageInput ? null : 0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ɵngcc0.ɵɵpipeBind2(3, 4, ctx_r6.totalItemsText.subject, ɵngcc0.ɵɵpureFunction3(9, _c1, ctx_r6.startItemIndex, ctx_r6.endItemIndex, ctx_r6.totalDataLength))), " ");
} }
const _c2 = function (a0, a1) { return { start: a0, end: a1 }; };
function Pagination_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "i18nReplace");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx_r7.showPageInput ? null : 0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ɵngcc0.ɵɵpipeBind2(3, 4, ctx_r7.totalItemsUnknownText.subject, ɵngcc0.ɵɵpureFunction2(9, _c2, ctx_r7.startItemIndex, ctx_r7.endItemIndex))), " ");
} }
function Pagination_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, Pagination_div_2_ng_container_1_Template, 9, 13, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, Pagination_div_2_span_2_Template, 4, 13, "span", 8);
    ɵngcc0.ɵɵtemplate(3, Pagination_div_2_span_3_Template, 4, 13, "span", 8);
    ɵngcc0.ɵɵtemplate(4, Pagination_div_2_span_4_Template, 4, 12, "span", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showPageInput);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.pagesUnknown && ctx_r1.totalDataLength <= 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.pagesUnknown && ctx_r1.totalDataLength > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.pagesUnknown);
} }
function Pagination_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelement(1, "p", 4);
    ɵngcc0.ɵɵelementEnd();
} }
function Pagination_div_4_ng_container_1_input_5_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function Pagination_div_4_ng_container_1_input_5_Template_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(3); return ctx_r19.currentPage = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("id", ctx_r16.currentPageSelectId)("max", ctx_r16.pageOptions.length)("ngModel", ctx_r16.currentPage);
} }
function Pagination_div_4_ng_container_1_select_6_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r23 = ctx.index;
    ɵngcc0.ɵɵproperty("value", i_r23 + 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(i_r23 + 1);
} }
function Pagination_div_4_ng_container_1_select_6_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "select", 29);
    ɵngcc0.ɵɵlistener("ngModelChange", function Pagination_div_4_ng_container_1_select_6_Template_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(3); return ctx_r24.currentPage = $event; });
    ɵngcc0.ɵɵtemplate(1, Pagination_div_4_ng_container_1_select_6_option_1_Template, 2, 2, "option", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("id", ctx_r17.currentPageSelectId)("disabled", ctx_r17.pageInputDisabled)("ngModel", ctx_r17.currentPage);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r17.pageOptions);
} }
function Pagination_div_4_ng_container_1__svg_svg_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 30);
    ɵngcc0.ɵɵpipe(1, "async");
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵattribute("ariaLabel", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r18.optionsListText.subject));
} }
function Pagination_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵelementStart(2, "label", 24);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, Pagination_div_4_ng_container_1_input_5_Template, 1, 3, "input", 25);
    ɵngcc0.ɵɵtemplate(6, Pagination_div_4_ng_container_1_select_6_Template, 2, 4, "select", 26);
    ɵngcc0.ɵɵtemplate(7, Pagination_div_4_ng_container_1__svg_svg_7_Template, 2, 3, "svg", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("bx--select--disabled", ctx_r12.pageInputDisabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", ctx_r12.currentPageSelectId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 7, ctx_r12.itemsPerPageText.subject));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.pageOptions.length > ctx_r12.pageSelectThreshold);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.pageOptions.length <= ctx_r12.pageSelectThreshold);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.pageOptions.length <= 1000);
} }
function Pagination_div_4_span_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r26 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r26.currentPage);
} }
const _c3 = function (a0) { return { last: a0 }; };
function Pagination_div_4_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 31);
    ɵngcc0.ɵɵtemplate(1, Pagination_div_4_span_2_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵpipe(4, "i18nReplace");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r13.showPageInput);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, ɵngcc0.ɵɵpipeBind2(4, 4, ctx_r13.ofLastPageText.subject, ɵngcc0.ɵɵpureFunction1(7, _c3, ctx_r13.lastPage))), " ");
} }
function Pagination_div_4_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r27.currentPage);
} }
function Pagination_div_4_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 31);
    ɵngcc0.ɵɵtemplate(1, Pagination_div_4_span_3_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵpipe(4, "i18nReplace");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r14.showPageInput);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, ɵngcc0.ɵɵpipeBind2(4, 4, ctx_r14.ofLastPagesText.subject, ɵngcc0.ɵɵpureFunction1(7, _c3, ctx_r14.lastPage))), " ");
} }
function Pagination_div_4_span_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r28 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r28.currentPage);
} }
function Pagination_div_4_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 31);
    ɵngcc0.ɵɵtemplate(1, Pagination_div_4_span_4_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r15.showPageInput);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 3, ctx_r15.pageText.subject), " ", ctx_r15.currentPage, " ");
} }
const _c4 = function (a0) { return { "bx--pagination__button--no-index": a0 }; };
function Pagination_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtemplate(1, Pagination_div_4_ng_container_1_Template, 8, 9, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, Pagination_div_4_span_2_Template, 5, 9, "span", 17);
    ɵngcc0.ɵɵtemplate(3, Pagination_div_4_span_3_Template, 5, 9, "span", 17);
    ɵngcc0.ɵɵtemplate(4, Pagination_div_4_span_4_Template, 4, 5, "span", 17);
    ɵngcc0.ɵɵelementStart(5, "div", 18);
    ɵngcc0.ɵɵelementStart(6, "button", 19);
    ɵngcc0.ɵɵlistener("click", function Pagination_div_4_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.selectPage.emit(ctx_r29.previousPage); });
    ɵngcc0.ɵɵpipe(7, "async");
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(8, "svg", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(9, "button", 21);
    ɵngcc0.ɵɵlistener("click", function Pagination_div_4_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.selectPage.emit(ctx_r31.nextPage); });
    ɵngcc0.ɵɵpipe(10, "async");
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(11, "svg", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showPageInput);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.pagesUnknown && ctx_r3.lastPage <= 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.pagesUnknown && ctx_r3.lastPage > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.pagesUnknown);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c4, ctx_r3.currentPage <= 1 || ctx_r3.disabled))("disabled", ctx_r3.currentPage <= 1 || ctx_r3.disabled ? true : null);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(7, 10, ctx_r3.backwardText.subject));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(16, _c4, ctx_r3.currentPage >= ctx_r3.lastPage || ctx_r3.disabled))("disabled", ctx_r3.currentPage >= ctx_r3.lastPage || ctx_r3.disabled ? true : null);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(10, 12, ctx_r3.forwardText.subject));
} }
const _c5 = function (a0) { return { "bx--skeleton": a0 }; };
function PaginationNav_ibm_pagination_nav_item_9_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "ibm-pagination-nav-item", 12);
    ɵngcc0.ɵɵlistener("click", function PaginationNav_ibm_pagination_nav_item_9_Template_ibm_pagination_nav_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.currentPage = 1; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("isActive", ctx_r0.currentPage == 1);
} }
function PaginationNav_ibm_pagination_overflow_10_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "ibm-pagination-overflow", 13);
    ɵngcc0.ɵɵlistener("change", function PaginationNav_ibm_pagination_overflow_10_Template_ibm_pagination_overflow_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.handleOverflowSelection($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("count", ctx_r1.frontCuts)("fromIndex", ctx_r1.startOffset);
} }
function PaginationNav_ibm_pagination_nav_item_11_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "ibm-pagination-nav-item", 14);
    ɵngcc0.ɵɵlistener("click", function PaginationNav_ibm_pagination_nav_item_11_Template_ibm_pagination_nav_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const page_r9 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.currentPage = page_r9; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const page_r9 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("page", page_r9)("isActive", ctx_r2.currentPage == page_r9);
} }
function PaginationNav_ibm_pagination_overflow_12_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "ibm-pagination-overflow", 13);
    ɵngcc0.ɵɵlistener("change", function PaginationNav_ibm_pagination_overflow_12_Template_ibm_pagination_overflow_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.handleOverflowSelection($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("count", ctx_r3.backCuts)("fromIndex", ctx_r3.totalNumbersArray.length - ctx_r3.backCuts - 1);
} }
function PaginationNav_ibm_pagination_nav_item_13_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "ibm-pagination-nav-item", 14);
    ɵngcc0.ɵɵlistener("click", function PaginationNav_ibm_pagination_nav_item_13_Template_ibm_pagination_nav_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.currentPage = ctx_r14.totalNumbersArray.length; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("page", ctx_r4.totalNumbersArray.length)("isActive", ctx_r4.currentPage == ctx_r4.totalNumbersArray.length);
} }
const _c6 = function (a0) { return { "bx--pagination-nav__page--active": a0 }; };
function PaginationOverflow_li_0_option_4_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "option", 9);
    ɵngcc0.ɵɵlistener("click", function PaginationOverflow_li_0_option_4_Template_option_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const i_r4 = ctx.index; const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.change.emit(ctx_r5.fromIndex + i_r4 + 1); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r4 = ctx.index;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.fromIndex + i_r4 + 1, " ");
} }
function PaginationOverflow_li_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "select", 4);
    ɵngcc0.ɵɵlistener("change", function PaginationOverflow_li_0_Template_select_change_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.handleChange($event); });
    ɵngcc0.ɵɵelement(3, "option", 5);
    ɵngcc0.ɵɵtemplate(4, PaginationOverflow_li_0_option_4_Template, 2, 1, "option", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(6, "svg", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.countAsArray);
} }
function PaginationOverflow_ibm_pagination_nav_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ibm-pagination-nav-item", 10);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("page", ctx_r1.fromIndex + 1);
} }
class PaginationModel {
    constructor() {
        /**
         * Tracks the current page.
         */
        this.currentPage = 1;
        /**
         * Length of page.
         */
        /* tslint:disable-next-line*/
        this.pageLength = 10;
        /**
         * Absolute total number of items needed to paginate.
         */
        this.totalDataLength = 0;
    }
}

/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/pagination--basic)
 *
 * ```html
 * <ibm-pagination [model]="model" (selectPage)="selectPage($event)"></ibm-pagination>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=pagination--basic</example-url>
 */
class Pagination {
    constructor(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` for a loading pagination component.
         */
        this.skeleton = false;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Set to `true` to disable the select box that changes the page.
         */
        this.pageInputDisabled = false;
        /**
         * Controls wether or not to show the page selects
         */
        this.showPageInput = true;
        /**
         * Set to `true` if the total number of items is unknown.
         */
        this.pagesUnknown = false;
        this.pageSelectThreshold = 1000;
        /**
         * Options for items per page select
         *
         * A default array of options will be defined: [10, 20, 30, 40, 50]
         */
        this.itemsPerPageOptions = [10, 20, 30, 40, 50];
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.itemsPerPageSelectId = `pagination-select-items-per-page-${Pagination.paginationCounter}`;
        this.currentPageSelectId = `pagination-select-current-page-${Pagination.paginationCounter}`;
        this.itemsPerPageText = this.i18n.getOverridable("PAGINATION.ITEMS_PER_PAGE");
        this.optionsListText = this.i18n.getOverridable("PAGINATION.OPEN_LIST_OF_OPTIONS");
        this.backwardText = this.i18n.getOverridable("PAGINATION.BACKWARD");
        this.forwardText = this.i18n.getOverridable("PAGINATION.FORWARD");
        this.totalItemsText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEMS");
        this.totalItemText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEM");
        this.totalItemsUnknownText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEMS_UNKNOWN");
        this.pageText = this.i18n.getOverridable("PAGINATION.PAGE");
        this.ofLastPagesText = this.i18n.getOverridable("PAGINATION.OF_LAST_PAGES");
        this.ofLastPageText = this.i18n.getOverridable("PAGINATION.OF_LAST_PAGE");
        this._pageOptions = [];
        Pagination.paginationCounter++;
    }
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"ITEMS_PER_PAGE": "Items per page:",
     *		"OPEN_LIST_OF_OPTIONS": "Open list of options",
     *		"BACKWARD": "Backward",
     *		"FORWARD": "Forward",
     *		"TOTAL_ITEMS_UNKNOWN": "{{start}}-{{end}} items",
     *		"TOTAL_ITEMS": "{{start}}-{{end}} of {{total}} items",
     *		"TOTAL_ITEM": "{{start}}-{{end}} of {{total}} item",
     *		"OF_LAST_PAGES": "of {{last}} pages",
     *		"OF_LAST_PAGE": "of {{last}} page"
     * }
     * ```
     */
    set translations(value) {
        const valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
        this.itemsPerPageText.override(valueWithDefaults.ITEMS_PER_PAGE);
        this.optionsListText.override(valueWithDefaults.OPEN_LIST_OF_OPTIONS);
        this.backwardText.override(valueWithDefaults.BACKWARD);
        this.forwardText.override(valueWithDefaults.FORWARD);
        this.totalItemsText.override(valueWithDefaults.TOTAL_ITEMS);
        this.totalItemText.override(valueWithDefaults.TOTAL_ITEM);
        this.totalItemsUnknownText.override(valueWithDefaults.TOTAL_ITEMS_UNKNOWN);
        this.pageText.override(valueWithDefaults.PAGE);
        this.ofLastPagesText.override(valueWithDefaults.OF_LAST_PAGES);
        this.ofLastPageText.override(valueWithDefaults.OF_LAST_PAGE);
    }
    get itemsPerPage() {
        return this.model.pageLength;
    }
    set itemsPerPage(value) {
        this.model.pageLength = Number(value);
        this.currentPage = 1; // reset page
    }
    get currentPage() {
        return this.model.currentPage;
    }
    set currentPage(value) {
        value = Number(value);
        // emits the value to allow the user to update current page
        // in the model once the page is loaded
        this.selectPage.emit(value);
    }
    get totalDataLength() {
        return this.model.totalDataLength;
    }
    /**
     * The last page number to display in the pagination view.
     */
    get lastPage() {
        const last = Math.ceil(this.totalDataLength / this.itemsPerPage);
        return last > 0 ? last : 1;
    }
    get startItemIndex() {
        return this.endItemIndex > 0 ? (this.currentPage - 1) * this.itemsPerPage + 1 : 0;
    }
    get endItemIndex() {
        const projectedEndItemIndex = this.currentPage * this.itemsPerPage;
        return projectedEndItemIndex < this.totalDataLength ? projectedEndItemIndex : this.totalDataLength;
    }
    /**
     * The previous page number to navigate to, from the current page.
     */
    get previousPage() {
        return this.currentPage <= 1 ? 1 : this.currentPage - 1;
    }
    /**
     * The next page number to navigate to, from the current page.
     */
    get nextPage() {
        const lastPage = this.lastPage;
        return this.currentPage >= lastPage ? lastPage : this.currentPage + 1;
    }
    get pageOptions() {
        if (this.totalDataLength && this._pageOptions.length !== this.totalDataLength) {
            this._pageOptions = Array(Math.ceil(this.totalDataLength / this.itemsPerPage));
        }
        return this._pageOptions;
    }
}
Pagination.ɵfac = function Pagination_Factory(t) { return new (t || Pagination)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ExperimentalService)); };
Pagination.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Pagination, selectors: [["ibm-pagination"]], inputs: { skeleton: "skeleton", disabled: "disabled", pageInputDisabled: "pageInputDisabled", showPageInput: "showPageInput", pagesUnknown: "pagesUnknown", pageSelectThreshold: "pageSelectThreshold", itemsPerPageOptions: "itemsPerPageOptions", translations: "translations", model: "model" }, outputs: { selectPage: "selectPage" }, decls: 5, vars: 7, consts: [[1, "bx--pagination", 3, "ngClass"], ["class", "bx--pagination__left", 4, "ngIf"], ["class", "bx--pagination__right", 4, "ngIf"], [1, "bx--pagination__left"], [1, "bx--skeleton__text", 2, "width", "70px"], [1, "bx--skeleton__text", 2, "width", "35px"], [1, "bx--skeleton__text", 2, "width", "105px"], [4, "ngIf"], ["class", "bx--pagination__text", 3, "ngStyle", 4, "ngIf"], [1, "bx--pagination__text", 3, "for"], [1, "bx--select", "bx--select--inline", "bx--select__item-count"], [1, "bx--select-input", 3, "id", "ngModel", "disabled", "ngModelChange"], ["class", "bx--select-option", 3, "value", 4, "ngFor", "ngForOf"], ["ibmIcon", "chevron--down", "size", "16", "aria-hidden", "true", 1, "bx--select__arrow", 2, "display", "inherit"], [1, "bx--select-option", 3, "value"], [1, "bx--pagination__text", 3, "ngStyle"], [1, "bx--pagination__right"], ["class", "bx--pagination__text", 4, "ngIf"], [1, "bx--pagination__control-buttons"], ["ibmButton", "ghost", "iconOnly", "true", "tabindex", "0", 1, "bx--pagination__button", "bx--pagination__button--backward", 3, "ngClass", "disabled", "click"], ["ibmIcon", "caret--left", "size", "16"], ["ibmButton", "ghost", "iconOnly", "true", "tabindex", "0", 1, "bx--pagination__button", "bx--pagination__button--forward", 3, "ngClass", "disabled", "click"], ["ibmIcon", "caret--right", "size", "16"], [1, "bx--select", "bx--select--inline", "bx--select__page-number"], [1, "bx--label", "bx--visually-hidden", 3, "for"], ["style", "padding-right: 1rem; margin-right: 1rem;", "type", "number", "min", "1", "class", "bx--select-input", 3, "id", "max", "ngModel", "ngModelChange", 4, "ngIf"], ["class", "bx--select-input", 3, "id", "disabled", "ngModel", "ngModelChange", 4, "ngIf"], ["ibmIcon", "chevron--down", "size", "16", "style", "display: inherit;", "class", "bx--select__arrow", 4, "ngIf"], ["type", "number", "min", "1", 1, "bx--select-input", 2, "padding-right", "1rem", "margin-right", "1rem", 3, "id", "max", "ngModel", "ngModelChange"], [1, "bx--select-input", 3, "id", "disabled", "ngModel", "ngModelChange"], ["ibmIcon", "chevron--down", "size", "16", 1, "bx--select__arrow", 2, "display", "inherit"], [1, "bx--pagination__text"]], template: function Pagination_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, Pagination_div_1_Template, 4, 0, "div", 1);
        ɵngcc0.ɵɵtemplate(2, Pagination_div_2_Template, 5, 4, "div", 1);
        ɵngcc0.ɵɵtemplate(3, Pagination_div_3_Template, 2, 0, "div", 2);
        ɵngcc0.ɵɵtemplate(4, Pagination_div_4_Template, 12, 18, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c5, ctx.skeleton));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.skeleton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.skeleton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton);
    } }, directives: [ɵngcc3.NgClass, ɵngcc3.NgIf, ɵngcc4.SelectControlValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc3.NgForOf, ɵngcc5.IconDirective, ɵngcc4.NgSelectOption, ɵngcc4.ɵangular_packages_forms_forms_x, ɵngcc3.NgStyle, ɵngcc6.Button, ɵngcc4.NumberValueAccessor, ɵngcc4.DefaultValueAccessor], pipes: [ɵngcc3.AsyncPipe, ɵngcc1.ReplacePipe], encapsulation: 2 });
Pagination.paginationCounter = 0;
/** @nocollapse */
Pagination.ctorParameters = () => [
    { type: I18n },
    { type: ExperimentalService }
];
Pagination.propDecorators = {
    skeleton: [{ type: Input }],
    model: [{ type: Input }],
    disabled: [{ type: Input }],
    pageInputDisabled: [{ type: Input }],
    showPageInput: [{ type: Input }],
    pagesUnknown: [{ type: Input }],
    pageSelectThreshold: [{ type: Input }],
    translations: [{ type: Input }],
    itemsPerPageOptions: [{ type: Input }],
    selectPage: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Pagination, [{
        type: Component,
        args: [{
                selector: "ibm-pagination",
                template: `
	<div
		class="bx--pagination"
		[ngClass]="{
			'bx--skeleton': skeleton
		}">
		<!-- left skeleton div -->
		<div *ngIf="skeleton" class="bx--pagination__left">
			<p class="bx--skeleton__text" style="width: 70px"></p>
			<p class="bx--skeleton__text" style="width: 35px"></p>
			<p class="bx--skeleton__text" style="width: 105px"></p>
		</div>

		<div *ngIf="!skeleton" class="bx--pagination__left">
			<ng-container *ngIf="showPageInput">
				<label class="bx--pagination__text" [for]="itemsPerPageSelectId">
					{{itemsPerPageText.subject | async}}
				</label>
				<div
					class="bx--select bx--select--inline bx--select__item-count"
					[class.bx--select--disabled]="pageInputDisabled">
					<select
						[id]="itemsPerPageSelectId"
						[(ngModel)]="itemsPerPage"
						[disabled]="pageInputDisabled"
						class="bx--select-input">
						<option
							class="bx--select-option"
							*ngFor="let option of itemsPerPageOptions"
							[value]="option">
								{{ option }}
						</option>
					</select>
					<svg
						ibmIcon="chevron--down"
						size="16"
						style="display: inherit"
						class="bx--select__arrow"
						aria-hidden="true"
						[attr.ariaLabel]="optionsListText.subject | async">
					</svg>
				</div>
			</ng-container>
			<span *ngIf="!pagesUnknown && totalDataLength <= 1" class="bx--pagination__text" [ngStyle]="{'margin-left': showPageInput ? null : 0}">
				{{totalItemText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex, total: totalDataLength } | async}}
			</span>
			<span *ngIf="!pagesUnknown && totalDataLength > 1" class="bx--pagination__text" [ngStyle]="{'margin-left': showPageInput ? null : 0}">
				{{totalItemsText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex, total: totalDataLength } | async}}
			</span>
			<span *ngIf="pagesUnknown" class="bx--pagination__text" [ngStyle]="{'margin-left': showPageInput ? null : 0}">
				{{totalItemsUnknownText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex } | async}}
			</span>
		</div>

		<!-- right skeleton div -->
		<div *ngIf="skeleton" class="bx--pagination__right">
			<p class="bx--skeleton__text" style="width: 70px"></p>
		</div>

		<div *ngIf="!skeleton" class="bx--pagination__right">
			<ng-container *ngIf="showPageInput">
				<div
					class="bx--select bx--select--inline bx--select__page-number"
					[class.bx--select--disabled]="pageInputDisabled">
					<label [for]="currentPageSelectId" class="bx--label bx--visually-hidden">{{itemsPerPageText.subject | async}}</label>
					<input
						*ngIf="pageOptions.length > pageSelectThreshold"
						style="padding-right: 1rem; margin-right: 1rem;"
						[id]="currentPageSelectId"
						type="number"
						min="1"
						[max]="pageOptions.length"
						class="bx--select-input"
						[(ngModel)]="currentPage">
					<select
						*ngIf="pageOptions.length <= pageSelectThreshold"
						[id]="currentPageSelectId"
						class="bx--select-input"
						[disabled]="pageInputDisabled"
						[(ngModel)]="currentPage">
						<option *ngFor="let page of pageOptions; let i = index;" class="bx--select-option" [value]="i + 1">{{i + 1}}</option>
					</select>
					<svg
						*ngIf="pageOptions.length <= 1000"
						ibmIcon="chevron--down"
						size="16"
						style="display: inherit;"
						class="bx--select__arrow"
						[attr.ariaLabel]="optionsListText.subject | async">
					</svg>
				</div>
			</ng-container>

			<span *ngIf="!pagesUnknown && lastPage <= 1" class="bx--pagination__text">
				<ng-container *ngIf="!showPageInput">{{currentPage}}</ng-container>
				{{ofLastPageText.subject | i18nReplace: {last: lastPage} | async}}
			</span>
			<span *ngIf="!pagesUnknown && lastPage > 1" class="bx--pagination__text">
				<ng-container *ngIf="!showPageInput">{{currentPage}}</ng-container>
				{{ofLastPagesText.subject | i18nReplace: {last: lastPage} | async}}
			</span>
			<span *ngIf="pagesUnknown" class="bx--pagination__text">
				<ng-container *ngIf="!showPageInput">{{currentPage}}</ng-container>
				{{pageText.subject | async}} {{currentPage}}
			</span>
			<div class="bx--pagination__control-buttons">
				<button
					ibmButton="ghost"
					iconOnly="true"
					class="bx--pagination__button bx--pagination__button--backward"
					[ngClass]="{
						'bx--pagination__button--no-index': currentPage <= 1 || disabled
					}"
					tabindex="0"
					[attr.aria-label]="backwardText.subject | async"
					(click)="selectPage.emit(previousPage)"
					[disabled]="(currentPage <= 1 || disabled ? true : null)">
					<svg ibmIcon="caret--left" size="16"></svg>
				</button>

				<button
					ibmButton="ghost"
					iconOnly="true"
					class="
						bx--pagination__button
						bx--pagination__button--forward"
					[ngClass]="{
						'bx--pagination__button--no-index': currentPage >= lastPage || disabled
					}"
					tabindex="0"
					[attr.aria-label]="forwardText.subject | async"
					(click)="selectPage.emit(nextPage)"
					[disabled]="(currentPage >= lastPage || disabled ? true : null)">
					<svg ibmIcon="caret--right" size="16"></svg>
				</button>
			</div>
		</div>
	</div>
	`
            }]
    }], function () { return [{ type: ɵngcc1.I18n }, { type: ɵngcc2.ExperimentalService }]; }, { skeleton: [{
            type: Input
        }], disabled: [{
            type: Input
        }], pageInputDisabled: [{
            type: Input
        }], showPageInput: [{
            type: Input
        }], pagesUnknown: [{
            type: Input
        }], pageSelectThreshold: [{
            type: Input
        }], itemsPerPageOptions: [{
            type: Input
        }], selectPage: [{
            type: Output
        }], translations: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/pagination-nav--basic)
 *
 * ```html
 * <ibm-pagination-nav [model]="model" (selectPage)="selectPage($event)"></ibm-pagination-nav>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=pagination-nav--basic</example-url>
 */
class PaginationNav {
    constructor(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Number of items to show in pagination. Minimum is 4.
         */
        this.numOfItemsToShow = 4;
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.nextItemText = this.i18n.getOverridable("PAGINATION.NEXT");
        this.previousItemText = this.i18n.getOverridable("PAGINATION.PREVIOUS");
        PaginationNav.paginationCounter++;
    }
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"NEXT": "Next",
     *		"PREVIOUS": "Previous",
     * }
     * ```
     */
    set translations(value) {
        const valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
        this.nextItemText.override(valueWithDefaults.NEXT);
        this.previousItemText.override(valueWithDefaults.PREVIOUS);
    }
    get totalNumbersArray() {
        return range(this.totalDataLength + 1, 1);
    }
    get currentPage() {
        return this.model.currentPage;
    }
    set currentPage(value) {
        value = Number(value);
        // emits the value to allow the user to update current page
        // in the model once the page is loaded
        this.selectPage.emit(value);
    }
    get totalDataLength() {
        return this.model.totalDataLength;
    }
    get startOffset() {
        return this.numOfItemsToShow <= 4 && this.currentPage > 1 ? 0 : 1;
    }
    get frontCuts() {
        const cuts = this.getCuts();
        return cuts.front;
    }
    get backCuts() {
        const cuts = this.getCuts();
        return cuts.back;
    }
    get leftArrowDisabled() {
        return this.disabled || this.currentPage === 1;
    }
    get rightArrowDisabled() {
        return this.disabled || this.currentPage === this.totalDataLength;
    }
    handleOverflowSelection(page) {
        if (typeof page === "number") {
            this.currentPage = page;
        }
    }
    jumpToNext() {
        this.currentPage = this.currentPage < this.totalDataLength ? this.currentPage + 1 : this.totalDataLength;
    }
    jumpToPrevious() {
        this.currentPage = this.currentPage > 1 ? this.currentPage - 1 : 1;
    }
    getPages() {
        if (this.totalDataLength <= 1) {
            return null;
        }
        const cuts = this.getCuts();
        return this.totalNumbersArray.slice(this.startOffset + cuts.front, (1 + cuts.back) * -1);
    }
    getCuts(splitPoint = null) {
        const page = this.currentPage - 1;
        const totalItems = this.totalDataLength;
        const itemsThatFit = this.numOfItemsToShow;
        if (itemsThatFit >= totalItems) {
            return {
                front: 0,
                back: 0
            };
        }
        const split = splitPoint || Math.ceil(itemsThatFit / 2) - 1;
        let frontHidden = page + 1 - split;
        let backHidden = totalItems - page - (itemsThatFit - split) + 1;
        if (frontHidden <= 1) {
            backHidden -= frontHidden <= 0 ? Math.abs(frontHidden) + 1 : 0;
            frontHidden = 0;
        }
        if (backHidden <= 1) {
            frontHidden -= backHidden <= 0 ? Math.abs(backHidden) + 1 : 0;
            backHidden = 0;
        }
        return {
            front: frontHidden,
            back: backHidden
        };
    }
}
PaginationNav.ɵfac = function PaginationNav_Factory(t) { return new (t || PaginationNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ExperimentalService)); };
PaginationNav.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PaginationNav, selectors: [["ibm-pagination-nav"]], inputs: { disabled: "disabled", numOfItemsToShow: "numOfItemsToShow", translations: "translations", model: "model" }, outputs: { selectPage: "selectPage" }, decls: 20, vars: 13, consts: [[1, "bx--pagination-nav"], [1, "bx--pagination-nav__list"], [1, "bx--pagination-nav__list-item"], [1, "bx--btn", "bx--btn--ghost", "bx--pagination-nav-previous", "bx--btn--icon-only", "bx--tooltip__trigger", "bx--tooltip--a11y", "bx--tooltip--bottom", "bx--tooltip--align-center", 3, "disabled", "click"], [1, "bx--assistive-text"], ["ibmIcon", "caret--left", "size", "16", 1, "bx--btn__icon", 2, "display", "inherit"], ["page", "1", 3, "isActive", "click", 4, "ngIf"], [3, "count", "fromIndex", "change", 4, "ngIf"], [3, "page", "isActive", "click", 4, "ngFor", "ngForOf"], [3, "page", "isActive", "click", 4, "ngIf"], [1, "bx--btn", "bx--btn--ghost", "bx--pagination-nav-next", "bx--btn--icon-only", "bx--tooltip__trigger", "bx--tooltip--a11y", "bx--tooltip--bottom", "bx--tooltip--align-center", 3, "disabled", "click"], ["ibmIcon", "caret--right", "size", "16", 1, "bx--btn__icon", 2, "display", "inherit"], ["page", "1", 3, "isActive", "click"], [3, "count", "fromIndex", "change"], [3, "page", "isActive", "click"]], template: function PaginationNav_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "ul", 1);
        ɵngcc0.ɵɵelementStart(3, "li", 2);
        ɵngcc0.ɵɵelementStart(4, "button", 3);
        ɵngcc0.ɵɵlistener("click", function PaginationNav_Template_button_click_4_listener() { return ctx.jumpToPrevious(); });
        ɵngcc0.ɵɵelementStart(5, "span", 4);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(8, "svg", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, PaginationNav_ibm_pagination_nav_item_9_Template, 1, 1, "ibm-pagination-nav-item", 6);
        ɵngcc0.ɵɵtemplate(10, PaginationNav_ibm_pagination_overflow_10_Template, 1, 2, "ibm-pagination-overflow", 7);
        ɵngcc0.ɵɵtemplate(11, PaginationNav_ibm_pagination_nav_item_11_Template, 1, 2, "ibm-pagination-nav-item", 8);
        ɵngcc0.ɵɵtemplate(12, PaginationNav_ibm_pagination_overflow_12_Template, 1, 2, "ibm-pagination-overflow", 7);
        ɵngcc0.ɵɵtemplate(13, PaginationNav_ibm_pagination_nav_item_13_Template, 1, 2, "ibm-pagination-nav-item", 9);
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelementStart(14, "li", 2);
        ɵngcc0.ɵɵelementStart(15, "button", 10);
        ɵngcc0.ɵɵlistener("click", function PaginationNav_Template_button_click_15_listener() { return ctx.jumpToNext(); });
        ɵngcc0.ɵɵelementStart(16, "span", 4);
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(19, "svg", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.leftArrowDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 9, ctx.previousItemText.subject));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.numOfItemsToShow >= 5 || ctx.numOfItemsToShow <= 4 && ctx.currentPage <= 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.frontCuts);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.getPages());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.backCuts);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.totalDataLength > 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.rightArrowDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(18, 11, ctx.nextItemText.subject));
    } }, directives: function () { return [ɵngcc5.IconDirective, ɵngcc3.NgIf, ɵngcc3.NgForOf, PaginationNavItem, PaginationOverflow]; }, pipes: function () { return [ɵngcc3.AsyncPipe]; }, encapsulation: 2 });
PaginationNav.paginationCounter = 0;
/** @nocollapse */
PaginationNav.ctorParameters = () => [
    { type: I18n },
    { type: ExperimentalService }
];
PaginationNav.propDecorators = {
    model: [{ type: Input }],
    disabled: [{ type: Input }],
    numOfItemsToShow: [{ type: Input }],
    translations: [{ type: Input }],
    selectPage: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaginationNav, [{
        type: Component,
        args: [{
                selector: "ibm-pagination-nav",
                template: `
	<div>
		<div class="bx--pagination-nav">
			<ul class="bx--pagination-nav__list">
				<li class="bx--pagination-nav__list-item">
					<button
						class="bx--btn bx--btn--ghost bx--pagination-nav-previous
						bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center"
						[disabled]="leftArrowDisabled"
						(click)="jumpToPrevious()">
						<span class="bx--assistive-text">{{previousItemText.subject | async}}</span>
						<svg
							ibmIcon="caret--left"
							size="16"
							style="display: inherit"
							class="bx--btn__icon">
						</svg>
					</button>
				</li>
				<ibm-pagination-nav-item
					*ngIf="this.numOfItemsToShow >= 5 || (this.numOfItemsToShow <= 4 && currentPage <= 1)"
					page="1"
					(click)="currentPage = 1"
					[isActive]="currentPage == 1">
				</ibm-pagination-nav-item>
				<ibm-pagination-overflow
					*ngIf="frontCuts"
					[count]="frontCuts"
					[fromIndex]="startOffset"
					(change)="handleOverflowSelection($event)">
				</ibm-pagination-overflow>
				<ibm-pagination-nav-item
					*ngFor="let page of getPages();"
					[page]="page"
					(click)="currentPage = page"
					[isActive]="currentPage == page">
				</ibm-pagination-nav-item>
				<ibm-pagination-overflow
					*ngIf="backCuts"
					[count]="backCuts"
					[fromIndex]="totalNumbersArray.length - backCuts - 1"
					(change)="handleOverflowSelection($event)">
				</ibm-pagination-overflow>
				<ibm-pagination-nav-item
					*ngIf="totalDataLength > 1"
					[page]="totalNumbersArray.length"
					(click)="currentPage = totalNumbersArray.length"
					[isActive]="currentPage == totalNumbersArray.length">
				</ibm-pagination-nav-item>
				<li class="bx--pagination-nav__list-item">
					<button
						class="bx--btn bx--btn--ghost bx--pagination-nav-next
						bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center"
						[disabled]="rightArrowDisabled"
						(click)="jumpToNext()">
						<span class="bx--assistive-text">{{nextItemText.subject | async}}</span>
						<svg
							ibmIcon="caret--right"
							size="16"
							style="display: inherit"
							class="bx--btn__icon">
						</svg>
					</button>
				</li>
			</ul>
		</div>
	</div>
	`
            }]
    }], function () { return [{ type: ɵngcc1.I18n }, { type: ɵngcc2.ExperimentalService }]; }, { disabled: [{
            type: Input
        }], numOfItemsToShow: [{
            type: Input
        }], selectPage: [{
            type: Output
        }], translations: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

/**
 * Used to present a single navigation item in a pagination list
 *
 *  * ```html
 * <ibm-pagination-nav-item [page]="5" [isActive]="false" (click)="handleClick(value)"></ibm-pagination-nav-item>
 * ```
 */
class PaginationNavItem {
    constructor() {
        /**
         * The page for this component to dipslay
         */
        this.page = 0;
        /**
         * The state for this component to dipslay
         */
        this.isActive = false;
        /**
         * Emits click event
         */
        this.click = new EventEmitter();
    }
}
PaginationNavItem.ɵfac = function PaginationNavItem_Factory(t) { return new (t || PaginationNavItem)(); };
PaginationNavItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PaginationNavItem, selectors: [["ibm-pagination-nav-item"]], inputs: { page: "page", isActive: "isActive" }, outputs: { click: "click" }, decls: 5, vars: 5, consts: [[1, "bx--pagination-nav__list-item"], ["type", "button", 1, "bx--pagination-nav__page", 3, "ngClass", "click"], [1, "bx--pagination-nav__accessibility-label"]], template: function PaginationNavItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "li", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function PaginationNavItem_Template_button_click_1_listener() { return ctx.click.emit(ctx.page); });
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c6, ctx.isActive));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.page, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.page, " ");
    } }, directives: [ɵngcc3.NgClass], encapsulation: 2 });
/** @nocollapse */
PaginationNavItem.ctorParameters = () => [];
PaginationNavItem.propDecorators = {
    page: [{ type: Input }],
    isActive: [{ type: Input }],
    click: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaginationNavItem, [{
        type: Component,
        args: [{
                selector: "ibm-pagination-nav-item",
                template: `
		<li class="bx--pagination-nav__list-item">
			<button
				type="button"
				class="bx--pagination-nav__page"
				[ngClass]="{ 'bx--pagination-nav__page--active': isActive }"
				(click)="click.emit(page)">
				<span class="bx--pagination-nav__accessibility-label">
					{{page}}
				</span>
				{{page}}
			</button>
		</li>
	`
            }]
    }], function () { return []; }, { page: [{
            type: Input
        }], isActive: [{
            type: Input
        }], click: [{
            type: Output
        }] }); })();

/**
 * Used to present a selection of pages when there is an overflow
 * in the pagination list
 *
 * * ```html
 * <ibm-pagination-overflow [fromIndex]="5" [count]="30" (change)="handleChange(value)"></ibm-pagination-overflow>
 * ```
 */
class PaginationOverflow {
    constructor() {
        /**
         * Emits click event
         */
        this.change = new EventEmitter();
    }
    get countAsArray() {
        return [...Array(this.count)];
    }
    handleChange(event) {
        event.target.value = "";
    }
}
PaginationOverflow.ɵfac = function PaginationOverflow_Factory(t) { return new (t || PaginationOverflow)(); };
PaginationOverflow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PaginationOverflow, selectors: [["ibm-pagination-overflow"]], inputs: { fromIndex: "fromIndex", count: "count" }, outputs: { change: "change" }, decls: 2, vars: 2, consts: [["class", "bx--pagination-nav__list-item", 4, "ngIf"], [3, "page", 4, "ngIf"], [1, "bx--pagination-nav__list-item"], [1, "bx--pagination-nav__select"], [1, "bx--pagination-nav__page", "bx--pagination-nav__page--select", 3, "change"], ["value", "", "hidden", ""], [3, "click", 4, "ngFor", "ngForOf"], [1, "bx--pagination-nav__select-icon-wrapper"], ["ibmIcon", "overflow-menu--horizontal", "size", "16", 1, "bx--pagination-nav__select-icon", 2, "display", "inherit"], [3, "click"], [3, "page"]], template: function PaginationOverflow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PaginationOverflow_li_0_Template, 7, 1, "li", 0);
        ɵngcc0.ɵɵtemplate(1, PaginationOverflow_ibm_pagination_nav_item_1_Template, 1, 1, "ibm-pagination-nav-item", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.count > 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.count === 1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.NgSelectOption, ɵngcc4.ɵangular_packages_forms_forms_x, ɵngcc3.NgForOf, ɵngcc5.IconDirective, PaginationNavItem], encapsulation: 2 });
/** @nocollapse */
PaginationOverflow.ctorParameters = () => [];
PaginationOverflow.propDecorators = {
    fromIndex: [{ type: Input }],
    count: [{ type: Input }],
    change: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaginationOverflow, [{
        type: Component,
        args: [{
                selector: "ibm-pagination-overflow",
                template: `
		<li class="bx--pagination-nav__list-item" *ngIf="count > 1">
			<div class="bx--pagination-nav__select">
			<select
				class="bx--pagination-nav__page bx--pagination-nav__page--select" (change)="handleChange($event)">
				<option value="" hidden></option>
				<option
				(click)="change.emit(fromIndex + i + 1)"
				*ngFor="let item of countAsArray; let i = index">
					{{fromIndex + i + 1}}
				</option>
			</select>
			<div class="bx--pagination-nav__select-icon-wrapper">
				<svg
					ibmIcon="overflow-menu--horizontal"
					size="16"
					style="display: inherit"
					class="bx--pagination-nav__select-icon">
				</svg>
			</div>
			</div>
		</li>
		<ibm-pagination-nav-item *ngIf="count === 1" [page]="fromIndex + 1"></ibm-pagination-nav-item>
	`
            }]
    }], function () { return []; }, { change: [{
            type: Output
        }], fromIndex: [{
            type: Input
        }], count: [{
            type: Input
        }] }); })();

class PaginationModule {
}
PaginationModule.ɵfac = function PaginationModule_Factory(t) { return new (t || PaginationModule)(); };
PaginationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PaginationModule });
PaginationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            I18nModule,
            ExperimentalModule,
            IconModule,
            ButtonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PaginationModule, { declarations: function () { return [Pagination, PaginationNav, PaginationNavItem, PaginationOverflow]; }, imports: function () { return [CommonModule,
        FormsModule,
        I18nModule,
        ExperimentalModule,
        IconModule,
        ButtonModule]; }, exports: function () { return [Pagination, PaginationNav, PaginationNavItem, PaginationOverflow]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaginationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    Pagination,
                    PaginationNav,
                    PaginationNavItem,
                    PaginationOverflow
                ],
                exports: [
                    Pagination,
                    PaginationNav,
                    PaginationNavItem,
                    PaginationOverflow
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    I18nModule,
                    ExperimentalModule,
                    IconModule,
                    ButtonModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { PaginationModel, Pagination, PaginationModule, PaginationNav, PaginationNavItem, PaginationOverflow };

//# sourceMappingURL=carbon-components-angular-pagination.js.map