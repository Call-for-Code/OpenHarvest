/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-datepicker-input.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { Component, Input, Output, EventEmitter, ElementRef, TemplateRef, ViewChild, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IconModule } from 'carbon-components-angular/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'carbon-components-angular/icon';

const _c0 = ["input"];
function DatePickerInput_label_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.label);
} }
function DatePickerInput_label_3_2_ng_template_0_Template(rf, ctx) { }
function DatePickerInput_label_3_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatePickerInput_label_3_2_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.label);
} }
function DatePickerInput_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 8);
    ɵngcc0.ɵɵtemplate(1, DatePickerInput_label_3_ng_container_1_Template, 2, 1, "ng-container", 9);
    ɵngcc0.ɵɵtemplate(2, DatePickerInput_label_3_2_Template, 1, 1, undefined, 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("for", ctx_r0.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isTemplate(ctx_r0.label));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isTemplate(ctx_r0.label));
} }
const _c1 = function (a0, a1) { return { "bx--date-picker__input--sm": a0, "bx--date-picker__input--xl": a1 }; };
function DatePickerInput_input_5_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 11, 12);
    ɵngcc0.ɵɵlistener("change", function DatePickerInput_input_5_Template_input_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(7, _c1, ctx_r1.size === "sm", ctx_r1.size === "xl"))("value", ctx_r1.value)("pattern", ctx_r1.pattern)("placeholder", ctx_r1.placeholder)("id", ctx_r1.id)("disabled", ctx_r1.disabled);
    ɵngcc0.ɵɵattribute("data-invalid", ctx_r1.invalid ? true : undefined);
} }
function DatePickerInput__svg_svg_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 13);
} }
function DatePickerInput_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.invalidText);
} }
function DatePickerInput_div_7_2_ng_template_0_Template(rf, ctx) { }
function DatePickerInput_div_7_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatePickerInput_div_7_2_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r11.invalidText);
} }
function DatePickerInput_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵtemplate(1, DatePickerInput_div_7_ng_container_1_Template, 2, 1, "ng-container", 9);
    ɵngcc0.ɵɵtemplate(2, DatePickerInput_div_7_2_Template, 1, 1, undefined, 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.isTemplate(ctx_r3.invalidText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isTemplate(ctx_r3.invalidText));
} }
const _c2 = function (a0, a1, a2, a3, a4) { return { "bx--date-picker--simple": a0, "bx--date-picker--single": a1, "bx--date-picker--range": a2, "bx--date-picker--light": a3, "bx--skeleton": a4 }; };
const _c3 = function (a0) { return { "bx--date-picker-input__wrapper--invalid": a0 }; };
class DatePickerInput {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Select a calendar type for the `model`.
         * Internal purposes only.
         */
        this.type = "simple";
        this.id = `datepicker-${DatePickerInput.datePickerCount++}`;
        this.hasIcon = false;
        this.placeholder = "mm/dd/yyyy";
        this.pattern = "^\\d{1,2}/\\d{1,2}/\\d{4}$";
        this.valueChange = new EventEmitter();
        this.theme = "dark";
        this.disabled = false;
        this.invalid = false;
        this.skeleton = false;
        this.value = "";
        this.size = "md";
        this.onTouched = () => { };
        this.propagateChange = (_) => { };
    }
    onChange(event) {
        this.value = event.target.value;
        this.valueChange.emit(this.value);
        this.propagateChange(this.value);
        this.onTouched();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
DatePickerInput.ɵfac = function DatePickerInput_Factory(t) { return new (t || DatePickerInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DatePickerInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatePickerInput, selectors: [["ibm-date-picker-input"]], viewQuery: function DatePickerInput_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, inputs: { type: "type", id: "id", hasIcon: "hasIcon", placeholder: "placeholder", pattern: "pattern", theme: "theme", disabled: "disabled", invalid: "invalid", skeleton: "skeleton", value: "value", size: "size", label: "label", invalidText: "invalidText" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: DatePickerInput,
                multi: true
            }
        ])], decls: 8, vars: 14, consts: [[1, "bx--form-item"], [1, "bx--date-picker", 3, "ngClass"], [1, "bx--date-picker-container"], ["class", "bx--label", 3, "for", 4, "ngIf"], [1, "bx--date-picker-input__wrapper", 3, "ngClass"], ["autocomplete", "off", "type", "text", "class", "bx--date-picker__input", 3, "ngClass", "value", "pattern", "placeholder", "id", "disabled", "change", 4, "ngIf"], ["ibmIcon", "calendar", "size", "16", "class", "bx--date-picker__icon", 4, "ngIf"], ["class", "bx--form-requirement", 4, "ngIf"], [1, "bx--label", 3, "for"], [4, "ngIf"], [3, "ngTemplateOutlet"], ["autocomplete", "off", "type", "text", 1, "bx--date-picker__input", 3, "ngClass", "value", "pattern", "placeholder", "id", "disabled", "change"], ["input", ""], ["ibmIcon", "calendar", "size", "16", 1, "bx--date-picker__icon"], [1, "bx--form-requirement"]], template: function DatePickerInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, DatePickerInput_label_3_Template, 3, 3, "label", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, DatePickerInput_input_5_Template, 2, 10, "input", 5);
        ɵngcc0.ɵɵtemplate(6, DatePickerInput__svg_svg_6_Template, 1, 0, "svg", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, DatePickerInput_div_7_Template, 3, 2, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction5(6, _c2, ctx.type === "simple", ctx.type === "single", ctx.type === "range", ctx.theme === "light", ctx.skeleton));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(12, _c3, ctx.invalid));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "simple");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc2.IconDirective], encapsulation: 2 });
DatePickerInput.datePickerCount = 0;
/** @nocollapse */
DatePickerInput.ctorParameters = () => [
    { type: ElementRef }
];
DatePickerInput.propDecorators = {
    type: [{ type: Input }],
    id: [{ type: Input }],
    hasIcon: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    pattern: [{ type: Input }],
    valueChange: [{ type: Output }],
    theme: [{ type: Input }],
    disabled: [{ type: Input }],
    invalid: [{ type: Input }],
    invalidText: [{ type: Input }],
    skeleton: [{ type: Input }],
    value: [{ type: Input }],
    size: [{ type: Input }],
    input: [{ type: ViewChild, args: ["input", { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerInput, [{
        type: Component,
        args: [{
                selector: "ibm-date-picker-input",
                template: `
	<div class="bx--form-item">
		<div class="bx--date-picker"
			[ngClass]="{
				'bx--date-picker--simple' : type === 'simple',
				'bx--date-picker--single' : type === 'single',
				'bx--date-picker--range' : type === 'range',
				'bx--date-picker--light' : theme === 'light',
				'bx--skeleton' : skeleton
			}">
			<div class="bx--date-picker-container">
				<label *ngIf="label" [for]="id" class="bx--label">
					<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
					<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
				</label>
				<div class="bx--date-picker-input__wrapper"
					[ngClass]="{
						'bx--date-picker-input__wrapper--invalid': invalid
					}">
					<input
						#input
						*ngIf="!skeleton"
						autocomplete="off"
						type="text"
						class="bx--date-picker__input"
						[ngClass]="{
							'bx--date-picker__input--sm': size === 'sm',
							'bx--date-picker__input--xl': size === 'xl'
						}"
						[attr.data-invalid]="invalid ? true : undefined"
						[value]="value"
						[pattern]="pattern"
						[placeholder]="placeholder"
						[id]= "id"
						[disabled]="disabled"
						(change)="onChange($event)"/>
						<svg *ngIf="type !== 'simple'" ibmIcon="calendar" size="16" class="bx--date-picker__icon"></svg>
				</div>
				<div *ngIf="invalid" class="bx--form-requirement">
					<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
					<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
				</div>
			</div>
		</div>
</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: DatePickerInput,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { type: [{
            type: Input
        }], id: [{
            type: Input
        }], hasIcon: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], pattern: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], theme: [{
            type: Input
        }], disabled: [{
            type: Input
        }], invalid: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], value: [{
            type: Input
        }], size: [{
            type: Input
        }], label: [{
            type: Input
        }], invalidText: [{
            type: Input
        }], input: [{
            type: ViewChild,
            args: ["input", { static: false }]
        }] }); })();

class DatePickerInputModule {
}
DatePickerInputModule.ɵfac = function DatePickerInputModule_Factory(t) { return new (t || DatePickerInputModule)(); };
DatePickerInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DatePickerInputModule });
DatePickerInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DatePickerInputModule, { declarations: function () { return [DatePickerInput]; }, imports: function () { return [CommonModule,
        IconModule]; }, exports: function () { return [DatePickerInput]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePickerInputModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DatePickerInput
                ],
                exports: [
                    DatePickerInput
                ],
                imports: [
                    CommonModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DatePickerInputModule, DatePickerInput };

//# sourceMappingURL=carbon-components-angular-datepicker-input.js.map