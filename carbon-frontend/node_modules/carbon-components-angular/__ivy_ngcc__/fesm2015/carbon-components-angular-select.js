/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-select.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Component, Input, Output, HostListener, EventEmitter, TemplateRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'carbon-components-angular/icon';

function Select_ng_template_1_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
} }
function Select_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Select_ng_template_1_div_0_Template, 1, 0, "div", 4);
    ɵngcc0.ɵɵelement(1, "div", 5);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.label);
} }
function Select_div_2_label_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r8.label);
} }
function Select_div_2_label_1_2_ng_template_0_Template(rf, ctx) { }
function Select_div_2_label_1_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Select_div_2_label_1_2_ng_template_0_Template, 0, 0, "ng-template", 13);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r9.label);
} }
function Select_div_2_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 11);
    ɵngcc0.ɵɵtemplate(1, Select_div_2_label_1_ng_container_1_Template, 2, 1, "ng-container", 12);
    ɵngcc0.ɵɵtemplate(2, Select_div_2_label_1_2_Template, 1, 1, undefined, 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("for", ctx_r5.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isTemplate(ctx_r5.label));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.isTemplate(ctx_r5.label));
} }
function Select_div_2_div_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r11.helperText);
} }
function Select_div_2_div_2_2_ng_template_0_Template(rf, ctx) { }
function Select_div_2_div_2_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Select_div_2_div_2_2_ng_template_0_Template, 0, 0, "ng-template", 13);
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r12.helperText);
} }
function Select_div_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵtemplate(1, Select_div_2_div_2_ng_container_1_Template, 2, 1, "ng-container", 12);
    ɵngcc0.ɵɵtemplate(2, Select_div_2_div_2_2_Template, 1, 1, undefined, 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r6.isTemplate(ctx_r6.helperText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.isTemplate(ctx_r6.helperText));
} }
function Select_div_2_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function Select_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtemplate(1, Select_div_2_div_3_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r2 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
const _c0 = function (a0, a1, a2, a3) { return { "bx--select--inline": a0, "bx--select--light": a1, "bx--select--invalid": a2, "bx--select--disabled": a3 }; };
function Select_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, Select_div_2_label_1_Template, 3, 3, "label", 8);
    ɵngcc0.ɵɵtemplate(2, Select_div_2_div_2_Template, 3, 2, "div", 9);
    ɵngcc0.ɵɵtemplate(3, Select_div_2_div_3_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(5, _c0, ctx_r1.display === "inline", ctx_r1.theme === "light", ctx_r1.invalid, ctx_r1.disabled));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.helperText);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.display === "inline")("ngIfElse", _r2);
} }
function Select_ng_template_3__svg_svg_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 23);
} }
function Select_ng_template_3_div_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r17.invalidText);
} }
function Select_ng_template_3_div_6_2_ng_template_0_Template(rf, ctx) { }
function Select_ng_template_3_div_6_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Select_ng_template_3_div_6_2_ng_template_0_Template, 0, 0, "ng-template", 13);
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r18.invalidText);
} }
function Select_ng_template_3_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵtemplate(1, Select_ng_template_3_div_6_ng_container_1_Template, 2, 1, "ng-container", 12);
    ɵngcc0.ɵɵtemplate(2, Select_ng_template_3_div_6_2_Template, 1, 1, undefined, 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r16.isTemplate(ctx_r16.invalidText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r16.isTemplate(ctx_r16.invalidText));
} }
const _c1 = function (a0, a1) { return { "bx--select-input--xl": a0, "bx--select-input--sm": a1 }; };
function Select_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "select", 18);
    ɵngcc0.ɵɵlistener("change", function Select_ng_template_3_Template_select_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onChange($event); });
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(3, "svg", 19);
    ɵngcc0.ɵɵelement(4, "path", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, Select_ng_template_3__svg_svg_5_Template, 1, 0, "svg", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, Select_ng_template_3_div_6_Template, 3, 2, "div", 22);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-invalid", ctx_r3.invalid ? true : null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r3.value)("disabled", ctx_r3.disabled)("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c1, ctx_r3.size === "xl", ctx_r3.size === "sm"));
    ɵngcc0.ɵɵattribute("id", ctx_r3.id)("aria-label", ctx_r3.ariaLabel)("aria-invalid", ctx_r3.invalid ? "true" : null);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.invalid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.invalid && ctx_r3.invalidText);
} }
const _c2 = ["*"];
class OptGroup {
    constructor() {
        this.inputClass = "bx--select-optgroup";
    }
}
OptGroup.ɵfac = function OptGroup_Factory(t) { return new (t || OptGroup)(); };
OptGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OptGroup, selectors: [["optgroup"]], hostVars: 2, hostBindings: function OptGroup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.inputClass);
    } } });
OptGroup.propDecorators = {
    inputClass: [{ type: HostBinding, args: ["class",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptGroup, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line
                selector: "optgroup"
            }]
    }], function () { return []; }, { inputClass: [{
            type: HostBinding,
            args: ["class"]
        }] }); })();

class Option {
    constructor() {
        this.inputClass = "bx--select-option";
    }
}
Option.ɵfac = function Option_Factory(t) { return new (t || Option)(); };
Option.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Option, selectors: [["option"]], hostVars: 2, hostBindings: function Option_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.inputClass);
    } } });
Option.propDecorators = {
    inputClass: [{ type: HostBinding, args: ["class",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Option, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line
                selector: "option"
            }]
    }], function () { return []; }, { inputClass: [{
            type: HostBinding,
            args: ["class"]
        }] }); })();

/**
 * `ibm-select` provides a styled `select` component.
 *
 * [See demo](../../?path=/story/select--basic)
 *
 * Example:
 *
 * ```
 * <ibm-select [(ngModel)]="model">
 * 	<option value="default" disabled selected hidden>Choose an option</option>
 * 	<option value="option1">Option 1</option>
 *	<option value="option2">Option 2</option>
 * 	<option value="option3">Option 3</option>
 * </ibm-select>
 *	```
 *
 * <example-url>../../iframe.html?id=select--basic</example-url>
 */
class Select {
    constructor() {
        /**
         * `inline` or `default` select displays
         */
        this.display = "default";
        /**
         * Sets the unique ID. Defaults to `select-${total count of selects instantiated}`
         */
        this.id = `select-${Select.selectCount++}`;
        /**
         * Number input field render size
         */
        this.size = "md";
        /**
         * Set to true to disable component.
         */
        this.disabled = false;
        /**
         * Set to true for a loading select.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid select component.
         */
        this.invalid = false;
        /**
         * `light` or `dark` select theme
         */
        this.theme = "dark";
        this.valueChange = new EventEmitter();
        this._value = "";
        /**
         * placeholder declarations. Replaced by the functions provided to `registerOnChange` and `registerOnTouched`
         */
        this.onChangeHandler = (_) => { };
        this.onTouchedHandler = () => { };
    }
    get value() {
        return this._value;
    }
    set value(v) {
        this._value = v;
    }
    /**
     * Receives a value from the model.
     */
    writeValue(obj) {
        this.value = obj;
    }
    /**
     * Registers a listener that notifies the model when the control updates
     */
    registerOnChange(fn) {
        this.onChangeHandler = fn;
    }
    /**
     * Registers a listener that notifies the model when the control is blurred
     */
    registerOnTouched(fn) {
        this.onTouchedHandler = fn;
    }
    /**
     * Sets the disabled state through the model
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Handles the change event from the `select`.
     * Sends events to the change handler and emits a `selected` event.
     */
    onChange(event) {
        this.value = event.target.value;
        this.onChangeHandler(event.target.value);
        this.valueChange.emit(event.target.value);
    }
    /**
     * Listens for the host blurring, and notifies the model
     */
    focusOut() {
        this.onTouchedHandler();
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
Select.ɵfac = function Select_Factory(t) { return new (t || Select)(); };
Select.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Select, selectors: [["ibm-select"]], hostBindings: function Select_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function Select_focusout_HostBindingHandler() { return ctx.focusOut(); });
    } }, inputs: { display: "display", id: "id", size: "size", disabled: "disabled", skeleton: "skeleton", invalid: "invalid", theme: "theme", label: "label", helperText: "helperText", invalidText: "invalidText", ariaLabel: "ariaLabel" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Select,
                multi: true
            }
        ])], ngContentSelectors: _c2, decls: 5, vars: 2, consts: [[1, "bx--form-item"], [3, "ngIf"], ["class", "bx--select", 3, "ngClass", 4, "ngIf"], ["noInline", ""], ["class", "bx--label bx--skeleton", 4, "ngIf"], [1, "bx--select", "bx--skeleton"], [1, "bx--label", "bx--skeleton"], [1, "bx--select", 3, "ngClass"], ["class", "bx--label", 3, "for", 4, "ngIf"], ["class", "bx--form__helper-text", 4, "ngIf"], ["class", "bx--select-input--inline__wrapper", 4, "ngIf", "ngIfElse"], [1, "bx--label", 3, "for"], [4, "ngIf"], [3, "ngTemplateOutlet"], [1, "bx--form__helper-text"], [1, "bx--select-input--inline__wrapper"], [4, "ngTemplateOutlet"], [1, "bx--select-input__wrapper"], [1, "bx--select-input", 3, "value", "disabled", "ngClass", "change"], ["focusable", "false", "preserveAspectRatio", "xMidYMid meet", "xmlns", "http://www.w3.org/2000/svg", "width", "16", "height", "16", "viewBox", "0 0 16 16", "aria-hidden", "true", 1, "bx--select__arrow", 2, "will-change", "transform"], ["d", "M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"], ["ibmIcon", "warning--filled", "size", "16", "class", "bx--select__invalid-icon", 4, "ngIf"], ["role", "alert", "class", "bx--form-requirement", "aria-live", "polite", 4, "ngIf"], ["ibmIcon", "warning--filled", "size", "16", 1, "bx--select__invalid-icon"], ["role", "alert", "aria-live", "polite", 1, "bx--form-requirement"]], template: function Select_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, Select_ng_template_1_Template, 2, 1, "ng-template", 1);
        ɵngcc0.ɵɵtemplate(2, Select_div_2_Template, 4, 10, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, Select_ng_template_3_Template, 7, 12, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.skeleton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc1.NgTemplateOutlet, ɵngcc2.IconDirective], styles: [".bx--select--inline[_ngcontent-%COMP%]   .bx--form__helper-text[_ngcontent-%COMP%] {\n\t\t\torder: 4;\n\t\t}\n\n\t\t.bx--select--inline[_ngcontent-%COMP%]:not(.bx--select--invalid)   .bx--form__helper-text[_ngcontent-%COMP%] {\n\t\t\tmargin-top: 0;\n\t\t}"] });
/**
 * Tracks the total number of selects instantiated. Used to generate unique IDs
 */
Select.selectCount = 0;
Select.propDecorators = {
    display: [{ type: Input }],
    label: [{ type: Input }],
    helperText: [{ type: Input }],
    invalidText: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    skeleton: [{ type: Input }],
    invalid: [{ type: Input }],
    theme: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    valueChange: [{ type: Output }],
    focusOut: [{ type: HostListener, args: ["focusout",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Select, [{
        type: Component,
        args: [{
                selector: "ibm-select",
                template: `
		<div class="bx--form-item">
			<ng-template [ngIf]="skeleton">
				<div *ngIf="label" class="bx--label bx--skeleton"></div>
				<div class="bx--select bx--skeleton"></div>
			</ng-template>
			<div
				*ngIf="!skeleton"
				class="bx--select"
				[ngClass]="{
					'bx--select--inline': display === 'inline',
					'bx--select--light': theme === 'light',
					'bx--select--invalid': invalid,
					'bx--select--disabled': disabled
				}">
				<label *ngIf="label" [for]="id" class="bx--label">
					<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
					<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
				</label>
				<div *ngIf="helperText" class="bx--form__helper-text">
					<ng-container *ngIf="!isTemplate(helperText)">{{helperText}}</ng-container>
					<ng-template *ngIf="isTemplate(helperText)" [ngTemplateOutlet]="helperText"></ng-template>
				</div>
				<div *ngIf="display === 'inline'; else noInline" class="bx--select-input--inline__wrapper">
					<ng-container *ngTemplateOutlet="noInline"></ng-container>
				</div>
			</div>
		</div>

		<!-- select element: dynamically projected based on 'display' variant -->
		<ng-template #noInline>
			<div class="bx--select-input__wrapper" [attr.data-invalid]="(invalid ? true : null)">
				<select
					[attr.id]="id"
					[value]="value"
					[attr.aria-label]="ariaLabel"
					[disabled]="disabled"
					(change)="onChange($event)"
					[attr.aria-invalid]="invalid ? 'true' : null"
					class="bx--select-input"
					[ngClass]="{
						'bx--select-input--xl': size === 'xl',
						'bx--select-input--sm': size === 'sm'
					}">
					<ng-content></ng-content>
				</select>
				<svg
					focusable="false"
					preserveAspectRatio="xMidYMid meet"
					style="will-change: transform;"
					xmlns="http://www.w3.org/2000/svg"
					class="bx--select__arrow"
					width="16"
					height="16"
					viewBox="0 0 16 16"
					aria-hidden="true">
					<path d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"></path>
				</svg>
				<svg
					*ngIf="invalid"
					ibmIcon="warning--filled"
					size="16"
					class="bx--select__invalid-icon">
				</svg>
			</div>
			<div *ngIf="invalid && invalidText" role="alert" class="bx--form-requirement" aria-live="polite">
				<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
				<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
			</div>
		</ng-template>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Select,
                        multi: true
                    }
                ],
                styles: [`
		.bx--select--inline .bx--form__helper-text {
			order: 4;
		}

		.bx--select--inline:not(.bx--select--invalid) .bx--form__helper-text {
			margin-top: 0;
		}
	`]
            }]
    }], function () { return []; }, { display: [{
            type: Input
        }], id: [{
            type: Input
        }], size: [{
            type: Input
        }], disabled: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], invalid: [{
            type: Input
        }], theme: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], 
    /**
     * Listens for the host blurring, and notifies the model
     */
    focusOut: [{
            type: HostListener,
            args: ["focusout"]
        }], label: [{
            type: Input
        }], helperText: [{
            type: Input
        }], invalidText: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }] }); })();

// modules
class SelectModule {
}
SelectModule.ɵfac = function SelectModule_Factory(t) { return new (t || SelectModule)(); };
SelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SelectModule });
SelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SelectModule, { declarations: function () { return [Select, Option, OptGroup]; }, imports: function () { return [CommonModule,
        FormsModule,
        IconModule]; }, exports: function () { return [Select, Option, OptGroup]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    Select,
                    Option,
                    OptGroup
                ],
                exports: [
                    Select,
                    Option,
                    OptGroup
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { OptGroup, Option, Select, SelectModule };

//# sourceMappingURL=carbon-components-angular-select.js.map