/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-number-input.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, EventEmitter, Output, TemplateRef, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * Used to emit changes performed on number input components.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/i18n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'carbon-components-angular/icon';

function NumberComponent_label_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "label", 9);
} }
function NumberComponent_label_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.label);
} }
function NumberComponent_label_1_2_ng_template_0_Template(rf, ctx) { }
function NumberComponent_label_1_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NumberComponent_label_1_2_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.label);
} }
function NumberComponent_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 10);
    ɵngcc0.ɵɵtemplate(1, NumberComponent_label_1_ng_container_1_Template, 2, 1, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(2, NumberComponent_label_1_2_Template, 1, 1, undefined, 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("for", ctx_r1.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isTemplate(ctx_r1.label));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isTemplate(ctx_r1.label));
} }
function NumberComponent__svg_svg_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 13);
} }
function NumberComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "button", 15);
    ɵngcc0.ɵɵlistener("click", function NumberComponent_div_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onIncrement(); });
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(3, "svg", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(4, "button", 17);
    ɵngcc0.ɵɵlistener("click", function NumberComponent_div_6_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onDecrement(); });
    ɵngcc0.ɵɵpipe(5, "async");
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(6, "svg", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r3.getIncrementLabel()));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r3.getDecrementLabel()));
} }
function NumberComponent_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.helperText);
} }
function NumberComponent_div_7_2_ng_template_0_Template(rf, ctx) { }
function NumberComponent_div_7_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NumberComponent_div_7_2_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r13.helperText);
} }
function NumberComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵtemplate(1, NumberComponent_div_7_ng_container_1_Template, 2, 1, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(2, NumberComponent_div_7_2_Template, 1, 1, undefined, 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.isTemplate(ctx_r4.helperText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.isTemplate(ctx_r4.helperText));
} }
function NumberComponent_div_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r15.invalidText);
} }
function NumberComponent_div_8_2_ng_template_0_Template(rf, ctx) { }
function NumberComponent_div_8_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NumberComponent_div_8_2_ng_template_0_Template, 0, 0, "ng-template", 12);
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r16.invalidText);
} }
function NumberComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵtemplate(1, NumberComponent_div_8_ng_container_1_Template, 2, 1, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(2, NumberComponent_div_8_2_Template, 1, 1, undefined, 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isTemplate(ctx_r5.invalidText));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.isTemplate(ctx_r5.invalidText));
} }
const _c0 = function (a0, a1, a2, a3, a4, a5) { return { "bx--number--light": a0, "bx--number--nolabel": a1, "bx--number--helpertext": a2, "bx--skeleton": a3, "bx--number--sm": a4, "bx--number--xl": a5 }; };
class NumberChange {
}
/**
 * [See demo](../../?path=/story/number--basic)
 *
 * <example-url>../../iframe.html?id=number--basic</example-url>
 */
class NumberComponent {
    /**
     * Creates an instance of `Number`.
     */
    constructor(i18n) {
        this.i18n = i18n;
        this.containerClass = true;
        /**
         * `light` or `dark` number input theme.
         */
        this.theme = "dark";
        /**
         * Set to `true` for a disabled number input.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading number component.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid number component.
         */
        this.invalid = false;
        /**
         * The unique id for the number component.
         */
        this.id = `number-${NumberComponent.numberCount}`;
        /**
         * Number input field render size
         */
        this.size = "md";
        /**
         * Sets the min attribute on the `input` element.
         */
        this.min = null;
        /**
         * Sets the max attribute on the `input` element.
         */
        this.max = null;
        /**
         * Sets the amount the number controls increment and decrement by.
         */
        this.step = 1;
        /**
         * Emits event notifying other classes when a change in state occurs in the input.
         */
        this.change = new EventEmitter();
        this._value = 0;
        this._decrementLabel = this.i18n.getOverridable("NUMBER.DECREMENT");
        this._incrementLabel = this.i18n.getOverridable("NUMBER.INCREMENT");
        /**
         * Called when number input is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = () => { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = (_) => { };
        NumberComponent.numberCount++;
    }
    /**
     * Sets the value attribute on the `input` element.
     */
    set value(v) {
        if (v === "" || v === null) {
            this._value = null;
            return;
        }
        this._value = Number(v);
    }
    get value() {
        return this._value;
    }
    set decrementLabel(value) {
        this._decrementLabel.override(value);
    }
    get decrementLabel() {
        return this._decrementLabel.value;
    }
    set incrementLabel(value) {
        this._incrementLabel.override(value);
    }
    get incrementLabel() {
        return this._incrementLabel.value;
    }
    /**
     * This is the initial value set to the component
     * @param value The input value.
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the number input is touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    focusOut() {
        this.onTouched();
    }
    /**
     * Sets the disabled state through the model
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Adds `step` to the current `value`.
     */
    onIncrement() {
        if (this.max === null || this.value + this.step <= this.max) {
            this.value += this.step;
            this.value = parseFloat(this.value.toPrecision(this.precision));
            this.emitChangeEvent();
        }
    }
    /**
     * Subtracts `step` to the current `value`.
     */
    onDecrement() {
        if (this.min === null || this.value - this.step >= this.min) {
            this.value -= this.step;
            this.value = parseFloat(this.value.toPrecision(this.precision));
            this.emitChangeEvent();
        }
    }
    getDecrementLabel() {
        return this._decrementLabel.subject;
    }
    getIncrementLabel() {
        return this._incrementLabel.subject;
    }
    /**
     * Creates a class of `NumberChange` to emit the change in the `Number`.
     */
    emitChangeEvent() {
        let event = new NumberChange();
        event.source = this;
        event.value = this.value;
        this.change.emit(event);
        this.propagateChange(this.value);
    }
    onNumberInputChange(event) {
        this.value = event.target.value;
        this.emitChangeEvent();
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
NumberComponent.ɵfac = function NumberComponent_Factory(t) { return new (t || NumberComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n)); };
NumberComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NumberComponent, selectors: [["ibm-number"]], hostVars: 2, hostBindings: function NumberComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function NumberComponent_focusout_HostBindingHandler() { return ctx.focusOut(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("bx--form-item", ctx.containerClass);
    } }, inputs: { theme: "theme", disabled: "disabled", skeleton: "skeleton", invalid: "invalid", id: "id", size: "size", min: "min", max: "max", step: "step", value: "value", decrementLabel: "decrementLabel", incrementLabel: "incrementLabel", required: "required", label: "label", helperText: "helperText", invalidText: "invalidText", precision: "precision" }, outputs: { change: "change" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: NumberComponent,
                multi: true
            }
        ])], decls: 9, vars: 22, consts: [["class", "bx--label bx--skeleton", 4, "ngIf"], ["class", "bx--label", 3, "for", 4, "ngIf"], ["data-numberinput", "", 1, "bx--number", 3, "ngClass"], [1, "bx--number__input-wrapper"], ["type", "number", 3, "id", "value", "disabled", "required", "input"], ["ibmIcon", "warning--filled", "size", "16", "class", "bx--number__invalid", 4, "ngIf"], ["class", "bx--number__controls", 4, "ngIf"], ["class", "bx--form__helper-text", 4, "ngIf"], ["class", "bx--form-requirement", 4, "ngIf"], [1, "bx--label", "bx--skeleton"], [1, "bx--label", 3, "for"], [4, "ngIf"], [3, "ngTemplateOutlet"], ["ibmIcon", "warning--filled", "size", "16", 1, "bx--number__invalid"], [1, "bx--number__controls"], ["type", "button", "aria-live", "polite", "aria-atomic", "true", 1, "bx--number__control-btn", "up-icon", 3, "click"], ["ibmIcon", "caret--up", "size", "16"], ["type", "button", "aria-live", "polite", "aria-atomic", "true", 1, "bx--number__control-btn", "down-icon", 3, "click"], ["ibmIcon", "caret--down", "size", "16"], [1, "bx--form__helper-text"], [1, "bx--form-requirement"]], template: function NumberComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NumberComponent_label_0_Template, 1, 0, "label", 0);
        ɵngcc0.ɵɵtemplate(1, NumberComponent_label_1_Template, 3, 3, "label", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "input", 4);
        ɵngcc0.ɵɵlistener("input", function NumberComponent_Template_input_input_4_listener($event) { return ctx.onNumberInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, NumberComponent__svg_svg_5_Template, 1, 0, "svg", 5);
        ɵngcc0.ɵɵtemplate(6, NumberComponent_div_6_Template, 7, 6, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, NumberComponent_div_7_Template, 3, 2, "div", 7);
        ɵngcc0.ɵɵtemplate(8, NumberComponent_div_8_Template, 3, 2, "div", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.skeleton && ctx.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton && ctx.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction6(15, _c0, ctx.theme === "light", !ctx.label, ctx.helperText, ctx.skeleton, ctx.size === "sm", ctx.size === "xl"));
        ɵngcc0.ɵɵattribute("data-invalid", ctx.invalid ? true : null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.id)("value", ctx.value)("disabled", ctx.disabled)("required", ctx.required);
        ɵngcc0.ɵɵattribute("min", ctx.min)("max", ctx.max)("step", ctx.step);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton && ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.skeleton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helperText && !ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.invalid);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc2.NgTemplateOutlet, ɵngcc3.IconDirective], pipes: [ɵngcc2.AsyncPipe], encapsulation: 2 });
/**
 * Variable used for creating unique ids for number input components.
 */
NumberComponent.numberCount = 0;
/** @nocollapse */
NumberComponent.ctorParameters = () => [
    { type: I18n }
];
NumberComponent.propDecorators = {
    containerClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    theme: [{ type: Input }],
    disabled: [{ type: Input }],
    skeleton: [{ type: Input }],
    invalid: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    label: [{ type: Input }],
    helperText: [{ type: Input }],
    invalidText: [{ type: Input }],
    step: [{ type: Input }],
    precision: [{ type: Input }],
    change: [{ type: Output }],
    decrementLabel: [{ type: Input }],
    incrementLabel: [{ type: Input }],
    focusOut: [{ type: HostListener, args: ["focusout",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberComponent, [{
        type: Component,
        args: [{
                selector: "ibm-number",
                template: `
		<label *ngIf="skeleton && label" class="bx--label bx--skeleton"></label>
		<label *ngIf="!skeleton && label" [for]="id" class="bx--label">
			<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
			<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
		</label>
		<div
			data-numberinput
			[attr.data-invalid]="(invalid ? true : null)"
			class="bx--number"
			[ngClass]="{
				'bx--number--light': theme === 'light',
				'bx--number--nolabel': !label,
				'bx--number--helpertext': helperText,
				'bx--skeleton' : skeleton,
				'bx--number--sm': size === 'sm',
				'bx--number--xl': size === 'xl'
			}">
			<div class="bx--number__input-wrapper">
				<input
					type="number"
					[id]="id"
					[value]="value"
					[attr.min]="min"
					[attr.max]="max"
					[attr.step]="step"
					[disabled]="disabled"
					[required]="required"
					(input)="onNumberInputChange($event)"/>
				<svg
					*ngIf="!skeleton && invalid"
					ibmIcon="warning--filled"
					size="16"
					class="bx--number__invalid">
				</svg>
				<div *ngIf="!skeleton" class="bx--number__controls">
					<button
						class="bx--number__control-btn up-icon"
						type="button"
						aria-live="polite"
						aria-atomic="true"
						[attr.aria-label]="getIncrementLabel() | async"
						(click)="onIncrement()">
						<svg ibmIcon="caret--up" size="16"></svg>
					</button>
					<button
						class="bx--number__control-btn down-icon"
						type="button"
						aria-live="polite"
						aria-atomic="true"
						[attr.aria-label]="getDecrementLabel() | async"
						(click)="onDecrement()">
						<svg ibmIcon="caret--down" size="16"></svg>
					</button>
				</div>
			</div>
			<div *ngIf="helperText && !invalid" class="bx--form__helper-text">
				<ng-container *ngIf="!isTemplate(helperText)">{{helperText}}</ng-container>
				<ng-template *ngIf="isTemplate(helperText)" [ngTemplateOutlet]="helperText"></ng-template>
			</div>
			<div *ngIf="invalid" class="bx--form-requirement">
				<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
				<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
			</div>
		</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NumberComponent,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.I18n }]; }, { containerClass: [{
            type: HostBinding,
            args: ["class.bx--form-item"]
        }], theme: [{
            type: Input
        }], disabled: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], invalid: [{
            type: Input
        }], id: [{
            type: Input
        }], size: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], step: [{
            type: Input
        }], change: [{
            type: Output
        }], value: [{
            type: Input
        }], decrementLabel: [{
            type: Input
        }], incrementLabel: [{
            type: Input
        }], focusOut: [{
            type: HostListener,
            args: ["focusout"]
        }], required: [{
            type: Input
        }], label: [{
            type: Input
        }], helperText: [{
            type: Input
        }], invalidText: [{
            type: Input
        }], precision: [{
            type: Input
        }] }); })();

// modules
class NumberModule {
}
NumberModule.ɵfac = function NumberModule_Factory(t) { return new (t || NumberModule)(); };
NumberModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NumberModule });
NumberModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            FormsModule,
            CommonModule,
            I18nModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NumberModule, { declarations: function () { return [NumberComponent]; }, imports: function () { return [FormsModule,
        CommonModule,
        I18nModule,
        IconModule]; }, exports: function () { return [NumberComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NumberComponent
                ],
                exports: [
                    NumberComponent
                ],
                imports: [
                    FormsModule,
                    CommonModule,
                    I18nModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NumberComponent as Number, NumberChange, NumberComponent, NumberModule };

//# sourceMappingURL=carbon-components-angular-number-input.js.map