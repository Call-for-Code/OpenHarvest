/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-progress-indicator.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DialogModule } from 'carbon-components-angular/dialog';
import { ExperimentalService, ExperimentalModule } from 'carbon-components-angular/experimental';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * [See demo](../../?path=/story/progress-indicator--basic)
 *
 * <example-url>../../iframe.html?id=progress-indicator--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'carbon-components-angular/experimental';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'carbon-components-angular/icon';
import * as ɵngcc4 from 'carbon-components-angular/dialog';

function ProgressIndicator_li_1__svg_svg_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 11);
} }
function ProgressIndicator_li_1__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg");
    ɵngcc0.ɵɵelement(1, "path", 12);
    ɵngcc0.ɵɵelementEnd();
} }
function ProgressIndicator_li_1__svg_svg_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg");
    ɵngcc0.ɵɵelement(1, "path", 13);
    ɵngcc0.ɵɵelementEnd();
} }
function ProgressIndicator_li_1__svg_svg_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "svg", 14);
} }
function ProgressIndicator_li_1_p_6_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p", 15);
    ɵngcc0.ɵɵlistener("click", function ProgressIndicator_li_1_p_6_Template_p_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); const step_r1 = ctx_r11.$implicit; const i_r2 = ctx_r11.index; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.stepSelected.emit({ step: step_r1, index: i_r2 }); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ibmTooltip", step_r1.tooltip.content)("trigger", step_r1.tooltip.trigger)("placement", step_r1.tooltip.placement)("title", step_r1.tooltip.title)("gap", step_r1.tooltip.gap)("appendInline", step_r1.tooltip.appendInline)("data", step_r1.tooltip.data);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", step_r1.text, " ");
} }
function ProgressIndicator_li_1_p_7_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p", 16);
    ɵngcc0.ɵɵlistener("click", function ProgressIndicator_li_1_p_7_Template_p_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); const step_r1 = ctx_r15.$implicit; const i_r2 = ctx_r15.index; const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.stepSelected.emit({ step: step_r1, index: i_r2 }); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(step_r1.text);
} }
function ProgressIndicator_li_1_p_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 17);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(step_r1.optionalText);
} }
const _c0 = function (a0) { return { "bx--progress-step--disabled": a0 }; };
function ProgressIndicator_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵtemplate(2, ProgressIndicator_li_1__svg_svg_2_Template, 1, 0, "svg", 4);
    ɵngcc0.ɵɵtemplate(3, ProgressIndicator_li_1__svg_svg_3_Template, 2, 0, "svg", 5);
    ɵngcc0.ɵɵtemplate(4, ProgressIndicator_li_1__svg_svg_4_Template, 2, 0, "svg", 5);
    ɵngcc0.ɵɵtemplate(5, ProgressIndicator_li_1__svg_svg_5_Template, 1, 0, "svg", 6);
    ɵngcc0.ɵɵtemplate(6, ProgressIndicator_li_1_p_6_Template, 2, 8, "p", 7);
    ɵngcc0.ɵɵtemplate(7, ProgressIndicator_li_1_p_7_Template, 2, 1, "p", 8);
    ɵngcc0.ɵɵtemplate(8, ProgressIndicator_li_1_p_8_Template, 2, 1, "p", 9);
    ɵngcc0.ɵɵelement(9, "span", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r1 = ctx.$implicit;
    ɵngcc0.ɵɵclassMapInterpolate1("bx--progress-step bx--progress-step--", step_r1.state[0], "");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(11, _c0, step_r1.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", step_r1.state.includes("complete"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", step_r1.state.includes("current"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", step_r1.state.includes("incomplete"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", step_r1.state.includes("error"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", step_r1.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !step_r1.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", step_r1.optionalText);
} }
const _c1 = function (a0, a1, a2) { return { "bx--skeleton": a0, "bx--progress--vertical": a1, "bx--progress--space-equal": a2 }; };
class ProgressIndicator {
    constructor(experimental) {
        this.experimental = experimental;
        this.stepSelected = new EventEmitter();
        this.orientation = "horizontal";
        this.skeleton = false;
        this.spacing = "default";
    }
    static skeletonSteps(stepCount) {
        const steps = [];
        for (let i = 0; i < stepCount; i++) {
            steps.push({ "state": ["incomplete"] });
        }
        return steps;
    }
    get current() {
        return this.steps.findIndex(step => step.state.includes("current"));
    }
    set current(current) {
        this._current = current;
    }
    ngOnChanges(changes) {
        if (changes.steps || changes.current) {
            this.setProgressIndicatorStates();
        }
    }
    setProgressIndicatorStates() {
        if (this.steps === undefined) {
            return;
        }
        if (this._current === undefined || this._current < 0) {
            for (let i = 0; i < this.steps.length; i++) {
                this.steps[i].state[0] = "incomplete";
            }
            return;
        }
        if (this._current > this.steps.length - 1) {
            for (let i = 0; i < this.steps.length; i++) {
                this.steps[i].state[0] = "complete";
            }
            return;
        }
        this.steps[this._current].state[0] = "current";
        for (let i = 0; i < this._current; i++) {
            this.steps[i].state[0] = "complete";
        }
        for (let i = this._current + 1; i < this.steps.length; i++) {
            this.steps[i].state[0] = "incomplete";
        }
    }
}
ProgressIndicator.ɵfac = function ProgressIndicator_Factory(t) { return new (t || ProgressIndicator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ExperimentalService)); };
ProgressIndicator.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressIndicator, selectors: [["ibm-progress-indicator"]], inputs: { orientation: "orientation", skeleton: "skeleton", spacing: "spacing", current: "current", steps: "steps" }, outputs: { stepSelected: "stepSelected" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 6, consts: [["data-progress", "", "data-progress-current", "", 1, "bx--progress", 3, "ngClass"], [3, "class", "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"], ["role", "button", "tabindex", "-1", 1, "bx--progress-step-button", "bx--progress-step-button--unclickable"], ["ibmIcon", "checkmark--outline", "size", "16", 4, "ngIf"], [4, "ngIf"], ["ibmIcon", "warning", "size", "16", "class", "bx--progress__warning", 4, "ngIf"], ["class", "bx--progress-label", 3, "ibmTooltip", "trigger", "placement", "title", "gap", "appendInline", "data", "click", 4, "ngIf"], ["class", "bx--progress-label", 3, "click", 4, "ngIf"], ["class", "bx--progress-optional", 4, "ngIf"], [1, "bx--progress-line"], ["ibmIcon", "checkmark--outline", "size", "16"], ["d", "M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0"], ["d", "M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z"], ["ibmIcon", "warning", "size", "16", 1, "bx--progress__warning"], [1, "bx--progress-label", 3, "ibmTooltip", "trigger", "placement", "title", "gap", "appendInline", "data", "click"], [1, "bx--progress-label", 3, "click"], [1, "bx--progress-optional"]], template: function ProgressIndicator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, ProgressIndicator_li_1_Template, 10, 13, "li", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(2, _c1, ctx.skeleton, ctx.orientation === "vertical", ctx.spacing === "equal" && ctx.orientation !== "vertical"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.steps);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc3.IconDirective, ɵngcc4.TooltipDirective], encapsulation: 2 });
/** @nocollapse */
ProgressIndicator.ctorParameters = () => [
    { type: ExperimentalService }
];
ProgressIndicator.propDecorators = {
    stepSelected: [{ type: Output }],
    steps: [{ type: Input }],
    orientation: [{ type: Input }],
    skeleton: [{ type: Input }],
    spacing: [{ type: Input }],
    current: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressIndicator, [{
        type: Component,
        args: [{
                selector: "ibm-progress-indicator",
                template: `
	<ul
		data-progress
		data-progress-current
		class="bx--progress"
		[ngClass]="{
			'bx--skeleton': skeleton,
			'bx--progress--vertical': (orientation === 'vertical'),
			'bx--progress--space-equal': spacing === 'equal' && orientation !== 'vertical'
		}">
		<li
			class="bx--progress-step bx--progress-step--{{step.state[0]}}"
			*ngFor="let step of steps; let i = index"
			[ngClass]="{'bx--progress-step--disabled' : step.disabled}">
			<div class="bx--progress-step-button bx--progress-step-button--unclickable" role="button" tabindex="-1">
				<svg ibmIcon="checkmark--outline" size="16" *ngIf="step.state.includes('complete')"></svg>
				<svg *ngIf="step.state.includes('current')">
					<path d="M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0" ></path>
				</svg>
				<svg *ngIf="step.state.includes('incomplete')">
					<path
						d="M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z">
					</path>
				</svg>
				<svg ibmIcon="warning" size="16" *ngIf="step.state.includes('error')" class="bx--progress__warning"></svg>
				<p
					class="bx--progress-label"
					*ngIf="step.tooltip"
					[ibmTooltip]="step.tooltip.content"
					[trigger]="step.tooltip.trigger"
					[placement]="step.tooltip.placement"
					[title]="step.tooltip.title"
					[gap]="step.tooltip.gap"
					[appendInline]="step.tooltip.appendInline"
					[data]="step.tooltip.data"
					(click)="stepSelected.emit({ step: step, index: i })">
					{{step.text}}
				</p>
				<p class="bx--progress-label" *ngIf="!step.tooltip" (click)="stepSelected.emit({ step: step, index: i })">{{step.text}}</p>
				<p *ngIf="step.optionalText" class="bx--progress-optional">{{step.optionalText}}</p>
				<span class="bx--progress-line"></span>
			</div>
		</li>
	</ul>
	`
            }]
    }], function () { return [{ type: ɵngcc1.ExperimentalService }]; }, { stepSelected: [{
            type: Output
        }], orientation: [{
            type: Input
        }], skeleton: [{
            type: Input
        }], spacing: [{
            type: Input
        }], current: [{
            type: Input
        }], steps: [{
            type: Input
        }] }); })();

class ProgressIndicatorModule {
}
ProgressIndicatorModule.ɵfac = function ProgressIndicatorModule_Factory(t) { return new (t || ProgressIndicatorModule)(); };
ProgressIndicatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProgressIndicatorModule });
ProgressIndicatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            DialogModule,
            ExperimentalModule,
            IconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressIndicatorModule, { declarations: function () { return [ProgressIndicator]; }, imports: function () { return [CommonModule,
        DialogModule,
        ExperimentalModule,
        IconModule]; }, exports: function () { return [ProgressIndicator]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressIndicatorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ProgressIndicator
                ],
                exports: [
                    ProgressIndicator
                ],
                imports: [
                    CommonModule,
                    DialogModule,
                    ExperimentalModule,
                    IconModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ProgressIndicator, ProgressIndicatorModule };

//# sourceMappingURL=carbon-components-angular-progress-indicator.js.map