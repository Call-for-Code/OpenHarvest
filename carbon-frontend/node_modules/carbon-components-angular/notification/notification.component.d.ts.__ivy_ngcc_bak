/**
 *
 * carbon-angular v0.0.0 | notification.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, ComponentRef } from "@angular/core";
import { NotificationContent } from "./notification-content.interface";
import { I18n } from "carbon-components-angular/i18n";
import { NotificationDisplayService } from "./notification-display.service";
/**
 * Notification messages are displayed toward the top of the UI and do not interrupt userâ€™s work.
 *
 * [See demo](../../?path=/story/notification--basic)
 *
 * <example-url>../../iframe.html?id=notification--basic</example-url>
 */
export declare class Notification {
    protected notificationDisplayService: NotificationDisplayService;
    protected i18n: I18n;
    private static notificationCount;
    /**
     * Can have `type`, `title`, and `message` members.
     *
     * `type` can be one of `"info"`, `"warning"`, `"error"`, `"success"`
     *
     * `message` is the message to display
     */
    notificationObj: NotificationContent;
    /**
     * Emits on close.
     */
    close: EventEmitter<any>;
    componentRef: ComponentRef<Notification>;
    notification: any;
    notificationID: string;
    notificationClass: boolean;
    role: string;
    readonly isError: boolean;
    readonly isInfo: boolean;
    readonly isSuccess: boolean;
    readonly isWarning: boolean;
    readonly isLowContrast: boolean;
    readonly isCloseHidden: boolean;
    protected defaultNotificationObj: {
        title: string;
        message: string;
        type: string;
        showClose: boolean;
        closeLabel: any;
    };
    protected _notificationObj: NotificationContent;
    constructor(notificationDisplayService: NotificationDisplayService, i18n: I18n);
    /**
     * Emits close event.
     */
    onClose(): void;
    onClick(action: any, event: any): void;
    destroy(): void;
}
