{"version":3,"file":"notification.service.d.ts","sources":["notification.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | notification.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ApplicationRef, ComponentFactoryResolver, ComponentRef, EventEmitter, Injector, OnDestroy, NgZone } from \"@angular/core\";\nimport { NotificationContent, ToastContent } from \"./notification-content.interface\";\nimport { Notification } from \"./notification.component\";\nimport { Toast } from \"./toast.component\";\n/**\n * Provides a way to use the notification component.\n *\n * Notifications are displayed toward the top of the UI and do not interrupt the userâ€™s work.\n */\nexport declare class NotificationService implements OnDestroy {\n    protected injector: Injector;\n    protected componentFactoryResolver: ComponentFactoryResolver;\n    protected applicationRef: ApplicationRef;\n    protected ngZone: NgZone;\n    /**\n     * An array containing `ComponentRef`s to all the notifications this service instance\n     * is responsible for.\n     *\n     */\n    notificationRefs: ComponentRef<any>[];\n    onClose: EventEmitter<any>;\n    /**\n     * Constructs NotificationService.\n     *\n     * @param injector\n     * @param componentFactoryResolver\n     * @param applicationRef\n     */\n    constructor(injector: Injector, componentFactoryResolver: ComponentFactoryResolver, applicationRef: ApplicationRef, ngZone: NgZone);\n    /**\n     * Shows the notification based on the `notificationObj`.\n     *\n     * @param notificationObj Can have `type`, `message`, `target`, `duration` and `smart` members.\n     *\n     * **Members:**\n     *\n     * * `type` can be one of `\"info\"`, `\"warning\"`, `\"danger\"`, `\"success\"`\n     * * `message` is message for notification to display\n     * * `target` is css selector defining an element to append notification to. If not provided,\n     * `showNotification()` creates a place for the notification in `body`\n     * * `duration` is number of ms to close the notification after. If used in combination with `smart`,\n     * it's added to the calculated timeout\n     * * `smart`, set to `true` if you want to use smart notification.\n     *\n     * **Example:**\n     * ```typescript\n     * // Info notification, saying \"Sample message.\" added to the element with id notification-container\n     * // uses smart timeout with added duration of 1 second.\n     * {\n     *\ttype: \"info\",\n     *\tmessage: \"Sample message.\",\n     *\ttarget: \"#notification-container\",\n     *\tduration: 1000,\n     *\tsmart: true\n     * }\n     * ```\n     *\n     * @param [notificationComp=Notification] If provided, used to resolve component factory\n     */\n    showNotification(notificationObj: NotificationContent | ToastContent, notificationComp?: typeof Notification): Notification;\n    showToast(notificationObj: NotificationContent | ToastContent, notificationComp?: typeof Toast): Notification;\n    /**\n     * Programatically closes notification based on `notificationRef`.\n     *\n     * @param notificationRef `ComponentRef` of a notification or `Notification` component you wish to close\n     */\n    close(notificationRef: any): void;\n    /**\n     * Calculates the amount of time user needs to read the message in the notification.\n     *\n     * @param notificationObj Same object used to instantiate notification.\n     *\n     * In addition to `type` and `message` members, use `duration` member to add\n     * some extra time (in ms) to timeout if you need to.\n     * @returns calculated timeout (in ms) for smart notification\n     */\n    getSmartTimeout(notificationObj: any): number;\n    /**\n     * OnDestroy hook.\n     *\n     * Destroys all living notifications it is responsible for.\n     *\n     */\n    ngOnDestroy(): void;\n}\n"]}