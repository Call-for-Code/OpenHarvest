{"version":3,"sources":["ng://carbon-components-angular/placeholder/placeholder.service.ts","ng://carbon-components-angular/placeholder/placeholder.component.ts","ng://carbon-components-angular/placeholder/placeholder.module.ts"],"sourcesContent":["import {\n\tComponentRef,\n\tViewContainerRef,\n\tComponentFactory,\n\tInjector\n} from \"@angular/core\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Singleton service used to register the container for out-of-flow components to insert into.\n * Also used to insert/remove components from that view.\n */\n@Injectable()\nexport class PlaceholderService {\n\t/**\n\t * Main `ViewContainerRef` to insert components into\n\t */\n\tprotected viewContainerRef: ViewContainerRef = null;\n\t/**\n\t * Map of id's to secondary `ViewContainerRef`s\n\t */\n\tprotected viewContainerMap: Map<any, ViewContainerRef> = new Map();\n\t/**\n\t * Used by `Placeholder` to register view-container reference.\n\t */\n\tregisterViewContainerRef(vcRef: ViewContainerRef, id?: any): void {\n\t\tif (id) {\n\t\t\tthis.viewContainerMap.set(id, vcRef);\n\t\t} else {\n\t\t\tthis.viewContainerRef = vcRef;\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns component in the view.\n\t */\n\tcreateComponent(componentFactory: ComponentFactory<any>, injector: Injector, id?: any): ComponentRef<any> {\n\t\tif (id) {\n\t\t\tif (!this.viewContainerMap.has(id)) {\n\t\t\t\tconsole.error(`No view container with id ${id} found`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.viewContainerMap.get(id).createComponent(componentFactory, null, injector);\n\t\t}\n\t\tif (!this.viewContainerRef) {\n\t\t\tconsole.error(\"No view container defined! Likely due to a missing `ibm-placeholder`\");\n\t\t\treturn;\n\t\t}\n\t\treturn this.viewContainerRef.createComponent(componentFactory, null, injector);\n\t}\n\n\tdestroyComponent(component: ComponentRef<any>) {\n\t\tcomponent.destroy();\n\t}\n\n\thasComponentRef(component: ComponentRef<any>, id?: any) {\n\t\tif (id) {\n\t\t\treturn !(this.viewContainerMap.get(id).indexOf(component.hostView) < 0);\n\t\t}\n\n\t\treturn !(this.viewContainerRef.indexOf(component.hostView) < 0);\n\t}\n\n\thasPlaceholderRef(id?: any) {\n\t\tif (id) {\n\t\t\treturn this.viewContainerMap.has(id);\n\t\t}\n\t\treturn !!this.viewContainerRef;\n\t}\n\n\tappendElement(element: HTMLElement, id?: any): HTMLElement {\n\t\tif (id) {\n\t\t\treturn this.viewContainerMap.get(id).element.nativeElement.appendChild(element);\n\t\t}\n\t\treturn this.viewContainerRef.element.nativeElement.appendChild(element);\n\t}\n\n\tremoveElement(element: HTMLElement, id?: any): HTMLElement {\n\t\tif (id) {\n\t\t\treturn this.viewContainerMap.get(id).element.nativeElement.removeChild(element);\n\t\t}\n\t\treturn this.viewContainerRef.element.nativeElement.removeChild(element);\n\t}\n\n\thasElement(element: HTMLElement, id?: any): boolean {\n\t\tif (id) {\n\t\t\treturn this.viewContainerMap.get(id).element.nativeElement.contains(element);\n\t\t}\n\t\treturn this.viewContainerRef.element.nativeElement.contains(element);\n\t}\n}\n","import {\n\tComponent,\n\tOnInit,\n\tViewContainerRef,\n\tViewChild,\n\tInput\n} from \"@angular/core\";\nimport { PlaceholderService } from \"./placeholder.service\";\n\n/**\n * Using a modal, dialog (Tooltip, OverflowMenu), or any other component that draws out of the normal page flow\n * in your application *requires* this component (`ibm-placeholder`).\n * It would generally be placed near the end of your root app component template\n * (app.component.ts or app.component.html) as:\n *\n * ```\n * <ibm-placeholder></ibm-placeholder>\n * ```\n */\n@Component({\n\tselector: \"ibm-placeholder\",\n\ttemplate: `<div #placeholder></div>`\n})\nexport class Placeholder implements OnInit {\n\t@Input() id: any;\n\t/**\n\t * Maintains a reference to the view DOM element of the `Placeholder`.\n\t */\n\t// @ts-ignore\n\t@ViewChild(\"placeholder\", { read: ViewContainerRef, static: true }) viewContainerRef: ViewContainerRef;\n\n\t/**\n\t * Creates an instance of `Placeholder`.\n\t */\n\tconstructor(public placeholderService: PlaceholderService) { }\n\n\t/**\n\t * Registers the components view with `PlaceholderService`\n\t */\n\tngOnInit() {\n\t\t// TODO use `id` to register with the placeholderService\n\t\tthis.placeholderService.registerViewContainerRef(this.viewContainerRef);\n\t}\n}\n","// modules\nimport { NgModule, SkipSelf, Optional } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { Placeholder } from \"./placeholder.component\";\nimport { PlaceholderService } from \"./placeholder.service\";\n\n// either provides a new instance of PlaceholderService, or returns the parent\nexport function PLACEHOLDER_SERVICE_PROVIDER_FACTORY(parentService: PlaceholderService) {\n\treturn parentService || new PlaceholderService();\n}\n\n// placeholder service *must* be a singleton to ensure the placeholder viewRef is accessible globally\nexport const PLACEHOLDER_SERVICE_PROVIDER = {\n\tprovide: PlaceholderService,\n\tdeps: [[new Optional(), new SkipSelf(), PlaceholderService]],\n\tuseFactory: PLACEHOLDER_SERVICE_PROVIDER_FACTORY\n};\n\n@NgModule({\n\tdeclarations: [ Placeholder ],\n\texports: [ Placeholder ],\n\tproviders: [ PLACEHOLDER_SERVICE_PROVIDER ],\n\timports: [ CommonModule ]\n})\nexport class PlaceholderModule { }\n"],"names":["PlaceholderService","prototype","registerViewContainerRef","vcRef","id","this","viewContainerMap","set","viewContainerRef","createComponent","componentFactory","injector","has","get","console","error","destroyComponent","component","destroy","hasComponentRef","indexOf","hostView","hasPlaceholderRef","appendElement","element","nativeElement","appendChild","removeElement","removeChild","hasElement","contains","Injectable","Map","Placeholder","ngOnInit","placeholderService","Component","args","selector","template","Input","ViewChild","read","ViewContainerRef","static","PLACEHOLDER_SERVICE_PROVIDER_FACTORY","parentService","PLACEHOLDER_SERVICE_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","PlaceholderModule","NgModule","declarations","exports","providers","imports","CommonModule"],"mappings":"ubAYA,IAAAA,GAaCA,EAAAC,UAAAC,yBAAA,SAAyBC,EAAyBC,GAC7CA,EACHC,KAAKC,iBAAiBC,IAAIH,EAAID,GAE9BE,KAAKG,iBAAmBL,GAO1BH,EAAAC,UAAAQ,gBAAA,SAAgBC,EAAyCC,EAAoBP,GAC5E,OAAIA,EACEC,KAAKC,iBAAiBM,IAAIR,GAIxBC,KAAKC,iBAAiBO,IAAIT,GAAIK,gBAAgBC,EAAkB,KAAMC,QAH5EG,QAAQC,MAAM,6BAA6BX,EAAE,UAK1CC,KAAKG,iBAIHH,KAAKG,iBAAiBC,gBAAgBC,EAAkB,KAAMC,QAHpEG,QAAQC,MAAM,yEAMhBf,EAAAC,UAAAe,iBAAA,SAAiBC,GAChBA,EAAUC,WAGXlB,EAAAC,UAAAkB,gBAAA,SAAgBF,EAA8Bb,GAC7C,OAAIA,IACMC,KAAKC,iBAAiBO,IAAIT,GAAIgB,QAAQH,EAAUI,UAAY,KAG7DhB,KAAKG,iBAAiBY,QAAQH,EAAUI,UAAY,IAG9DrB,EAAAC,UAAAqB,kBAAA,SAAkBlB,GACjB,OAAIA,EACIC,KAAKC,iBAAiBM,IAAIR,KAEzBC,KAAKG,kBAGfR,EAAAC,UAAAsB,cAAA,SAAcC,EAAsBpB,GACnC,OAAIA,EACIC,KAAKC,iBAAiBO,IAAIT,GAAIoB,QAAQC,cAAcC,YAAYF,GAEjEnB,KAAKG,iBAAiBgB,QAAQC,cAAcC,YAAYF,IAGhExB,EAAAC,UAAA0B,cAAA,SAAcH,EAAsBpB,GACnC,OAAIA,EACIC,KAAKC,iBAAiBO,IAAIT,GAAIoB,QAAQC,cAAcG,YAAYJ,GAEjEnB,KAAKG,iBAAiBgB,QAAQC,cAAcG,YAAYJ,IAGhExB,EAAAC,UAAA4B,WAAA,SAAWL,EAAsBpB,GAChC,OAAIA,EACIC,KAAKC,iBAAiBO,IAAIT,GAAIoB,QAAQC,cAAcK,SAASN,GAE9DnB,KAAKG,iBAAiBgB,QAAQC,cAAcK,SAASN,I,oBA5E7DO,EAAAA,aA8ED/B,GA9EA,SAAAA,IAKWK,KAAAG,iBAAqC,KAIrCH,KAAAC,iBAA+C,IAAI0B,ICF9D,IAAAC,GAoBCA,EAAAhC,UAAAiC,SAAA,WAEC7B,KAAK8B,mBAAmBjC,yBAAyBG,KAAKG,mB,oBAtBvD4B,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,kBACVC,SAAU,+B,yCAdFvC,K,4BAiBPwC,EAAAA,Q,wBAKAC,EAAAA,UAASJ,KAAA,CAAC,cAAe,CAAEK,KAAMC,EAAAA,iBAAkBC,UAAQ,OAc7DX,GATC,SAAAA,EAAmBE,GAAA9B,KAAA8B,mBAAAA,ECzBpB,SAAgBU,EAAqCC,GACpD,OAAOA,GAAiB,IAAI9C,EAI7B,IAAa+C,EAA+B,CAC3CC,QAAShD,EACTiD,KAAM,CAAC,CAAC,IAAIC,EAAAA,SAAY,IAAIC,EAAAA,SAAYnD,IACxCoD,WAAYP,GAGbQ,G,oBAACC,EAAAA,SAAQjB,KAAA,CAAC,CACTkB,aAAc,CAAEtB,GAChBuB,QAAS,CAAEvB,GACXwB,UAAW,CAAEV,GACbW,QAAS,CAAEC,EAAAA,kBAEqBN,GANjC,SAAAA,K"}