/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-tag.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/tag', ['exports', '@angular/core', '@angular/common', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].tag = {}),global.ng.core,global.ng.common,global['carbon-components-angular'].icon));
}(this, (function (exports,core,common,icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * Component that represents a tag for labelling/categorizing using keywords
     *
     * [See demo](../../?path=/story/tag--basic)
     *
     * <example-url>../../iframe.html?id=tag--basic</example-url>
     */
    var Tag = /** @class */ (function () {
        function Tag() {
            /**
             * type of the tag determines the styling
             *
             * Reference `TagType` for v9 applications, and `TagTypeExperimental` for v10/v9 experimental mode applications
             */
            this.type = "gray";
            this.class = "";
        }
        Object.defineProperty(Tag.prototype, "attrClass", {
            get: function () {
                return "bx--tag bx--tag--" + this.type + " " + this.class;
            },
            enumerable: true,
            configurable: true
        });
        Tag.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-tag",
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        Tag.propDecorators = {
            type: [{ type: core.Input }],
            class: [{ type: core.Input }],
            attrClass: [{ type: core.HostBinding, args: ["attr.class",] }]
        };
        return Tag;
    }());

    var TagFilter = /** @class */ (function (_super) {
        __extends(TagFilter, _super);
        function TagFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.closeButtonLabel = "Clear Filter";
            /**
             * Function for close/delete the tag
             */
            _this.close = new core.EventEmitter();
            /**
             * We need to stop the immedate propagation of click on the close button
             * to prevent undesired effects when used within dialogs.
             *
             * We need to emit a click event on close to allow for clicks to be listened
             * to on the immediate close button element. `action` distinguishes between clicks on
             * the tag vs. clicks on the close button.
             */
            _this.click = new core.EventEmitter();
            return _this;
        }
        TagFilter.prototype.onClick = function (event) {
            event.stopImmediatePropagation();
            this.click.emit({ action: "click" });
        };
        TagFilter.prototype.onClose = function (event) {
            event.stopImmediatePropagation();
            this.click.emit({ action: "close" });
            this.close.emit();
        };
        Object.defineProperty(TagFilter.prototype, "attrClass", {
            get: function () {
                return "bx--tag bx--tag--filter bx--tag--" + this.type + " " + this.class;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TagFilter.prototype, "attrAriaLabel", {
            get: function () {
                return ((this.title || "") + " " + this.closeButtonLabel).trim();
            },
            enumerable: true,
            configurable: true
        });
        TagFilter.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-tag-filter",
                        template: "\n\t\t<span\n\t\t\tclass=\"bx--tag__label\"\n\t\t\t[attr.title]=\"title ? title : null\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</span>\n\t\t<button\n\t\t\tclass=\"bx--tag__close-icon\"\n\t\t\t(click)=\"onClose($event)\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[title]=\"closeButtonLabel\">\n\t\t\t<span class=\"bx--visually-hidden\">{{closeButtonLabel}}</span>\n\t\t\t<svg ibmIcon=\"close\" size=\"16\"></svg>\n\t\t</button>\n\t"
                    }] }
        ];
        TagFilter.propDecorators = {
            closeButtonLabel: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            title: [{ type: core.Input }],
            close: [{ type: core.Output }],
            click: [{ type: core.Output }],
            attrClass: [{ type: core.HostBinding, args: ["attr.class",] }],
            attrAriaLabel: [{ type: core.HostBinding, args: ["attr.aria-label",] }]
        };
        return TagFilter;
    }(Tag));

    var TagModule = /** @class */ (function () {
        function TagModule() {
        }
        TagModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [Tag, TagFilter],
                        exports: [Tag, TagFilter],
                        imports: [common.CommonModule, icon.IconModule]
                    },] }
        ];
        return TagModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TagFilter = TagFilter;
    exports.Tag = Tag;
    exports.TagModule = TagModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-tag.umd.js.map