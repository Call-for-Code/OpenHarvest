/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-ui-shell.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('carbon-components-angular/icon'), require('rxjs'), require('@angular/platform-browser'), require('@angular/router'), require('@angular/core'), require('@angular/common'), require('carbon-components-angular/i18n')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/ui-shell', ['exports', 'carbon-components-angular/icon', 'rxjs', '@angular/platform-browser', '@angular/router', '@angular/core', '@angular/common', 'carbon-components-angular/i18n'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular']['ui-shell'] = {}),global['carbon-components-angular'].icon,global.rxjs,global.ng.platformBrowser,global.ng.router,global.ng.core,global.ng.common,global['carbon-components-angular'].i18n));
}(this, (function (exports,icon,rxjs,platformBrowser,router,core,common,i18n) { 'use strict';

    /**
     * A fixed header and navigation.
     * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
     * and global actions (generally in the form of `Panel`s).
     *
     * [See demo](../../?path=/story/ui-shell--header)
     *
     * <example-url>../../iframe.html?id=ui-shell--header</example-url>
     */
    var Header = /** @class */ (function () {
        function Header(i18n$$1, domSanitizer, router$$1) {
            this.i18n = i18n$$1;
            this.domSanitizer = domSanitizer;
            this.router = router$$1;
            /**
             * Top level branding. Defaults to "IBM"
             */
            this.brand = "IBM";
            /**
             * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
             */
            this.useRouter = false;
            /**
             * Emits the navigation status promise when the link is activated
             */
            this.navigation = new core.EventEmitter();
            this._href = "javascript:void(0)";
        }
        Object.defineProperty(Header.prototype, "href", {
            get: function () {
                return this.domSanitizer.bypassSecurityTrustUrl(this._href);
            },
            /**
             * Optional link for the header
             */
            set: function (v) {
                this._href = v;
            },
            enumerable: true,
            configurable: true
        });
        Header.prototype.isTemplate = function (value) {
            return value instanceof core.TemplateRef;
        };
        Header.prototype.navigate = function (event) {
            if (this.router && this.route) {
                event.preventDefault();
                var status_1 = this.router.navigate(this.route, this.routeExtras);
                this.navigation.emit(status_1);
            }
        };
        Header.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-header",
                        template: "\n\t\t<header\n\t\t\tclass=\"bx--header\"\n\t\t\t[attr.aria-label]=\"brand + ' ' + name\">\n\t\t\t<a\n\t\t\t\t*ngIf=\"skipTo\"\n\t\t\t\tclass=\"bx--skip-to-content\"\n\t\t\t\t[href]=\"skipTo\"\n\t\t\t\ttabindex=\"0\">\n\t\t\t\t{{ i18n.get(\"UI_SHELL.SKIP_TO\") | async }}\n\t\t\t</a>\n\t\t\t<ng-content select=\"ibm-hamburger\"></ng-content>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(brand)\"\n\t\t\t\t[ngTemplateOutlet]=\"brand\">\n\t\t\t</ng-template>\n\t\t\t<ng-container *ngIf=\"!isTemplate(brand)\" [ngSwitch]=\"useRouter\">\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"false\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[href]=\"href\"\n\t\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"true\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[routerLink]=\"route\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t\t<ng-content></ng-content>\n\t\t</header>\n\t"
                    }] }
        ];
        /** @nocollapse */
        Header.ctorParameters = function () {
            return [
                { type: i18n.I18n },
                { type: platformBrowser.DomSanitizer },
                { type: router.Router, decorators: [{ type: core.Optional }] }
            ];
        };
        Header.propDecorators = {
            skipTo: [{ type: core.Input }],
            name: [{ type: core.Input }],
            brand: [{ type: core.Input }],
            href: [{ type: core.Input }],
            route: [{ type: core.Input }],
            routeExtras: [{ type: core.Input }],
            useRouter: [{ type: core.Input }],
            navigation: [{ type: core.Output }]
        };
        return Header;
    }());

    /**
     * Individual item in the header. May be used a direct child of `HeaderNavigation` or `HeaderMenu`
     */
    var HeaderItem = /** @class */ (function () {
        function HeaderItem(domSanitizer, router$$1) {
            this.domSanitizer = domSanitizer;
            this.router = router$$1;
            /**
             * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
             */
            this.useRouter = false;
            /**
             * Emits the navigation status promise when the link is activated
             */
            this.navigation = new core.EventEmitter();
            this._href = "javascript:void(0)";
        }
        Object.defineProperty(HeaderItem.prototype, "href", {
            get: function () {
                return this.domSanitizer.bypassSecurityTrustUrl(this._href);
            },
            set: function (v) {
                // Needed when component is created dynamically with a model.
                if (v === undefined) {
                    return;
                }
                this._href = v;
            },
            enumerable: true,
            configurable: true
        });
        HeaderItem.prototype.navigate = function (event) {
            if (this.router && this.route) {
                event.preventDefault();
                var status_1 = this.router.navigate(this.route, this.routeExtras);
                this.navigation.emit(status_1);
            }
        };
        HeaderItem.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-header-item",
                        template: "\n\t\t<li style=\"height: 100%\">\n\t\t\t<ng-container [ngSwitch]=\"useRouter\">\n\t\t\t\t<ng-template #content><ng-content></ng-content></ng-template>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"false\"\n\t\t\t\t\tclass=\"bx--header__menu-item\"\n\t\t\t\t\trole=\"menuitem\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t[ngClass]=\"{'bx--header__menu-item--current' : isCurrentPage}\"\n\t\t\t\t\t[href]=\"href\"\n\t\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"content\"></ng-container>\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"true\"\n\t\t\t\t\tclass=\"bx--header__menu-item\"\n\t\t\t\t\trole=\"menuitem\"\n\t\t\t\t\t[routerLinkActive]=\"['bx--header__menu-item--current']\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t[ngClass]=\"{'bx--header__menu-item--current' : isCurrentPage}\"\n\t\t\t\t\t[routerLink]=\"route\"\n\t\t\t\t\t[routerLinkActive]=\"activeLinkClass\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"content\"></ng-container>\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t</li>\n\t"
                    }] }
        ];
        /** @nocollapse */
        HeaderItem.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: router.Router, decorators: [{ type: core.Optional }] }
            ];
        };
        HeaderItem.propDecorators = {
            href: [{ type: core.Input }],
            useRouter: [{ type: core.Input }],
            activeLinkClass: [{ type: core.Input }],
            isCurrentPage: [{ type: core.Input }],
            route: [{ type: core.Input }],
            routeExtras: [{ type: core.Input }],
            navigation: [{ type: core.Output }]
        };
        return HeaderItem;
    }());

    /**
     * Dropdown menu container for navigation items.
     */
    var HeaderMenu = /** @class */ (function () {
        function HeaderMenu(domSanitizer, elementRef) {
            this.domSanitizer = domSanitizer;
            this.elementRef = elementRef;
            this.trigger = "click";
            this.expanded = false;
            this._href = "javascript:void(0)";
        }
        Object.defineProperty(HeaderMenu.prototype, "href", {
            get: function () {
                return this.domSanitizer.bypassSecurityTrustUrl(this._href);
            },
            set: function (v) {
                // Needed when component is created dynamically with a model.
                if (v === undefined) {
                    return;
                }
                this._href = v;
            },
            enumerable: true,
            configurable: true
        });
        HeaderMenu.prototype.onClick = function () {
            if (this.trigger === "click") {
                this.expanded = !this.expanded;
            }
        };
        HeaderMenu.prototype.onMouseOver = function () {
            if (this.trigger === "mouseover") {
                this.expanded = true;
            }
        };
        HeaderMenu.prototype.onMouseOut = function () {
            if (this.trigger === "mouseover") {
                this.expanded = false;
            }
        };
        HeaderMenu.prototype.onFocusOut = function (event) {
            if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {
                this.expanded = false;
            }
        };
        HeaderMenu.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-header-menu",
                        template: "\n\t\t<li\n\t\t\tclass=\"bx--header__submenu\"\n\t\t\tstyle=\"height: 100%\">\n\t\t\t<a\n\t\t\t\tclass=\"bx--header__menu-item bx--header__menu-title\"\n\t\t\t\t[href]=\"href\"\n\t\t\t\trole=\"menuitem\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t[attr.aria-expanded]=\"expanded\">\n\t\t\t\t{{title}}\n\t\t\t\t<ng-template *ngIf=\"icon; else defaultIcon\" [ngTemplateOutlet]=\"icon\"></ng-template>\n\t\t\t\t<ng-template #defaultIcon>\n\t\t\t\t\t<svg class=\"bx--header__menu-arrow\" width=\"12\" height=\"7\" aria-hidden=\"true\">\n\t\t\t\t\t\t<path d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</ng-template>\n\t\t\t</a>\n\t\t\t<ul class=\"bx--header__menu\" role=\"menu\" [attr.aria-label]=\"title\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t\t<ng-container *ngFor=\"let headerItem of headerItems\">\n\t\t\t\t\t<ibm-header-item\n\t\t\t\t\t\t[href]=\"headerItem.href\"\n\t\t\t\t\t\t[route]=\"headerItem.route\"\n\t\t\t\t\t\t[routeExtras]=\"headerItem.routeExtras\">\n\t\t\t\t\t\t{{ headerItem.content }}\n\t\t\t\t\t</ibm-header-item>\n\t\t\t\t</ng-container>\n\t\t\t</ul>\n\t\t</li>\n\t"
                    }] }
        ];
        /** @nocollapse */
        HeaderMenu.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: core.ElementRef }
            ];
        };
        HeaderMenu.propDecorators = {
            title: [{ type: core.Input }],
            href: [{ type: core.Input }],
            trigger: [{ type: core.Input }],
            headerItems: [{ type: core.Input }],
            icon: [{ type: core.Input }],
            onClick: [{ type: core.HostListener, args: ["click",] }],
            onMouseOver: [{ type: core.HostListener, args: ["mouseover",] }],
            onMouseOut: [{ type: core.HostListener, args: ["mouseout",] }],
            onFocusOut: [{ type: core.HostListener, args: ["focusout", ["$event"],] }]
        };
        return HeaderMenu;
    }());

    /**
     * Container for header navigation items
     */
    var HeaderNavigation = /** @class */ (function () {
        function HeaderNavigation() {
            this.height = 100;
        }
        HeaderNavigation.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-header-navigation",
                        template: "\n\t\t<nav class=\"bx--header__nav\" [attr.aria-label]=\"ariaLabel\">\n\t\t\t<ul class=\"bx--header__menu-bar\" role=\"menubar\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t\t<ng-container *ngFor=\"let navigationItem of navigationItems\">\n\t\t\t\t\t<ibm-header-item\n\t\t\t\t\t\t*ngIf=\"navigationItem.type === 'item'\"\n\t\t\t\t\t\t[href]=\"navigationItem.href\"\n\t\t\t\t\t\t[route]=\"navigationItem.route\"\n\t\t\t\t\t\t[routeExtras]=\"navigationItem.routeExtras\">\n\t\t\t\t\t\t{{ navigationItem.content }}\n\t\t\t\t\t</ibm-header-item>\n\t\t\t\t\t<ibm-header-menu\n\t\t\t\t\t\t*ngIf=\"navigationItem.type === 'menu'\"\n\t\t\t\t\t\t[href]=\"navigationItem.href\"\n\t\t\t\t\t\t[title]=\"navigationItem.title\"\n\t\t\t\t\t\t[trigger]=\"navigationItem.trigger ? navigationItem.trigger : 'click'\"\n\t\t\t\t\t\t[headerItems]=\"navigationItem.menuItems\">\n\t\t\t\t\t</ibm-header-menu>\n\t\t\t\t</ng-container>\n\t\t\t</ul>\n\t\t</nav>\n\t"
                    }] }
        ];
        HeaderNavigation.propDecorators = {
            height: [{ type: core.HostBinding, args: ["style.height.%",] }],
            ariaLabel: [{ type: core.Input }],
            navigationItems: [{ type: core.Input }]
        };
        return HeaderNavigation;
    }());

    /**
     * Container for `HeaderAction`s.
     */
    var HeaderGlobal = /** @class */ (function () {
        function HeaderGlobal() {
            this.hostClass = true;
        }
        HeaderGlobal.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-header-global",
                        template: "\n\t\t<ng-content></ng-content>\n\t"
                    }] }
        ];
        HeaderGlobal.propDecorators = {
            hostClass: [{ type: core.HostBinding, args: ["class.bx--header__global",] }]
        };
        return HeaderGlobal;
    }());

    /**
     * Contained by `HeaderGlobal`. Generally used to trigger `Panel`s
     */
    var HeaderAction = /** @class */ (function () {
        function HeaderAction() {
            /**
             * Title. Populates the aria-label as well as the browser `title` tooltip
             */
            this.title = "";
            /**
             * Toggles the active state. May be used to toggle a `Panel`s active state.
             */
            this.active = false;
            /**
             * "Change" emitter to allow double binding to the `active` Input.
             */
            this.activeChange = new core.EventEmitter();
            /**
             * Emits when the action has been clicked.
             */
            this.selected = new core.EventEmitter();
        }
        HeaderAction.prototype.onClick = function () {
            this.active = !this.active;
            this.selected.emit(this.active);
            this.activeChange.emit(this.active);
        };
        HeaderAction.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-header-action",
                        template: "\n\t\t<button\n\t\t\tclass=\"bx--header__action\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--header__action--active': active\n\t\t\t}\"\n\t\t\t[title]=\"title\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t(click)=\"onClick()\">\n\t\t\t<ng-content></ng-content>\n\t\t</button>\n\t"
                    }] }
        ];
        HeaderAction.propDecorators = {
            title: [{ type: core.Input }],
            ariaLabel: [{ type: core.Input }],
            active: [{ type: core.Input }],
            activeChange: [{ type: core.Output }],
            selected: [{ type: core.Output }]
        };
        return HeaderAction;
    }());

    /**
     * A toggle for the side navigation
     */
    var Hamburger = /** @class */ (function () {
        function Hamburger(i18n$$1) {
            this.i18n = i18n$$1;
            /**
             * Controls the active/selected state for the `Hamburger` menu.
             */
            this.active = false;
            /**
             * `EventEmitter` to notify parent components of menu click events.
             */
            this.selected = new core.EventEmitter();
        }
        /**
         * Emit the Hamburger click event upwards.
         */
        Hamburger.prototype.doClick = function () {
            this.selected.emit(this.active);
        };
        Hamburger.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-hamburger",
                        template: "\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t(click)=\"doClick()\"\n\t\t\t[ngClass]=\"{'bx--header__action--active': active}\"\n\t\t\tclass=\"bx--header__menu-trigger bx--header__action bx--header__menu-toggle\"\n\t\t\t[attr.aria-label]=\"active\n\t\t\t\t? (i18n.get('UI_SHELL.HEADER.CLOSE_MENU') | async)\n\t\t\t\t: (i18n.get('UI_SHELL.HEADER.OPEN_MENU') | async)\"\n\t\t\t[attr.title]=\"active\n\t\t\t\t? (i18n.get('UI_SHELL.HEADER.CLOSE_MENU') | async)\n\t\t\t\t: (i18n.get('UI_SHELL.HEADER.OPEN_MENU') | async)\">\n\t\t\t<svg *ngIf=\"!active\" ibmIcon=\"menu\" size=\"20\"></svg>\n\t\t\t<svg *ngIf=\"active\" ibmIcon=\"close\" size=\"20\"></svg>\n\t\t</button>\n\t"
                    }] }
        ];
        /** @nocollapse */
        Hamburger.ctorParameters = function () {
            return [
                { type: i18n.I18n }
            ];
        };
        Hamburger.propDecorators = {
            active: [{ type: core.Input }],
            selected: [{ type: core.Output }]
        };
        return Hamburger;
    }());

    var HeaderModule = /** @class */ (function () {
        function HeaderModule() {
        }
        HeaderModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Header,
                            HeaderItem,
                            HeaderMenu,
                            HeaderNavigation,
                            HeaderGlobal,
                            HeaderAction,
                            Hamburger
                        ],
                        imports: [
                            common.CommonModule,
                            i18n.I18nModule,
                            icon.IconModule,
                            router.RouterModule
                        ],
                        exports: [
                            Header,
                            HeaderItem,
                            HeaderMenu,
                            HeaderNavigation,
                            HeaderGlobal,
                            HeaderAction,
                            Hamburger
                        ]
                    },] }
        ];
        return HeaderModule;
    }());

    /**
     * `Sidenav` is a fixed left navigation that may contain `SideNavItem`s or `SideNavMenu`s
     *
     * [See demo](../../?path=/story/ui-shell--side-navigation)
     *
     * <example-url>../../iframe.html?id=ui-shell--side-navigation</example-url>
     */
    var SideNav = /** @class */ (function () {
        function SideNav(i18n$$1) {
            this.i18n = i18n$$1;
            this.role = "complementary";
            this.hostClass = true;
            this.ariaLabel = "Side navigation";
            /**
             * Controls the expanded (`true`) or collapsed (`false`) state when on a small screen.
             */
            this.expanded = true;
            /**
             * Controls the hidden (`true`) or visible (`false`) state
             */
            this.hidden = false;
            this.rail = false;
            this.ux = true;
            this.allowExpansion = false;
        }
        SideNav.prototype.toggle = function () {
            this.expanded = !this.expanded;
        };
        SideNav.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-sidenav",
                        template: "\n\t\t<nav class=\"bx--side-nav__navigation\" role=\"navigation\" [attr.aria-label]=\"ariaLabel\">\n\t\t\t<ng-content select=\"ibm-sidenav-header\"></ng-content>\n\t\t\t<ul class=\"bx--side-nav__items\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"bx--side-nav__header-navigation bx--side-nav__header-divider\">\n\t\t\t\t\t<ng-container *ngFor=\"let navigationItem of navigationItems\">\n\t\t\t\t\t\t<ibm-sidenav-item\n\t\t\t\t\t\t\t*ngIf=\"navigationItem.type === 'item'\"\n\t\t\t\t\t\t\t[href]=\"navigationItem.href\"\n\t\t\t\t\t\t\t[route]=\"navigationItem.route\"\n\t\t\t\t\t\t\t[routeExtras]=\"navigationItem.routeExtras\">\n\t\t\t\t\t\t\t{{ navigationItem.content }}\n\t\t\t\t\t\t</ibm-sidenav-item>\n\t\t\t\t\t\t<ibm-sidenav-menu\n\t\t\t\t\t\t\t*ngIf=\"navigationItem.type === 'menu'\"\n\t\t\t\t\t\t\t[title]=\"navigationItem.title\"\n\t\t\t\t\t\t\t[menuItems]=\"navigationItem.menuItems\">\n\t\t\t\t\t\t</ibm-sidenav-menu>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</div>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ul>\n\t\t\t<footer class=\"bx--side-nav__footer\">\n\t\t\t\t<button\n\t\t\t\t\t*ngIf=\"allowExpansion\"\n\t\t\t\t\tclass=\"bx--side-nav__toggle\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t[title]=\"(expanded ? i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_CLOSE') : i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_OPEN')) | async\"\n\t\t\t\t\t(click)=\"toggle()\">\n\t\t\t\t\t<div class=\"bx--side-nav__icon\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t*ngIf=\"expanded\"\n\t\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\twidth=\"20\"\n\t\t\t\t\t\t\theight=\"20\"\n\t\t\t\t\t\t\tviewBox=\"0 0 32 32\"\n\t\t\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t\t\t<path d=\"M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4l6.6 6.6L8 22.6 9.4 24l6.6-6.6 6.6 6.6 1.4-1.4-6.6-6.6L24 9.4z\"></path>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t*ngIf=\"!expanded\"\n\t\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\twidth=\"20\"\n\t\t\t\t\t\t\theight=\"20\"\n\t\t\t\t\t\t\tviewBox=\"0 0 32 32\"\n\t\t\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t\t\t<path d=\"M22 16L12 26l-1.4-1.4 8.6-8.6-8.6-8.6L12 6z\"></path>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"bx--assistive-text\">\n\t\t\t\t\t\t{{(expanded ? i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_CLOSE') : i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_OPEN')) | async}}\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\t\t\t</footer>\n\t\t</nav>\n\t",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        SideNav.ctorParameters = function () {
            return [
                { type: i18n.I18n }
            ];
        };
        SideNav.propDecorators = {
            role: [{ type: core.HostBinding, args: ["attr.role",] }],
            hostClass: [{ type: core.HostBinding, args: ["class.bx--side-nav",] }],
            ariaLabel: [{ type: core.HostBinding, args: ["attr.aria-label",] }, { type: core.Input }],
            expanded: [{ type: core.HostBinding, args: ["class.bx--side-nav--expanded",] }, { type: core.Input }],
            hidden: [{ type: core.HostBinding, args: ["class.bx--side-nav--hidden",] }, { type: core.Input }],
            rail: [{ type: core.HostBinding, args: ["class.bx--side-nav--rail",] }, { type: core.Input }],
            ux: [{ type: core.HostBinding, args: ["class.bx--side-nav--ux",] }],
            allowExpansion: [{ type: core.Input }],
            navigationItems: [{ type: core.Input }]
        };
        return SideNav;
    }());

    /**
     * `SideNavItem` can either be a child of `SideNav` or `SideNavMenu`
     */
    var SideNavItem = /** @class */ (function () {
        function SideNavItem(domSanitizer, router$$1) {
            this.domSanitizer = domSanitizer;
            this.router = router$$1;
            /**
             * Toggles the active (current page) state for the link.
             */
            this.active = false;
            this.isSubMenu = false;
            /**
             * Emits the navigation status promise when the link is activated
             */
            this.navigation = new core.EventEmitter();
            /**
             * Emits when `active` input is changed. This is mainly used to indicate to any parent menu items that a
             * child sidenav item is active or not active.
             */
            this.selected = new core.EventEmitter();
            this._href = "javascript:void(0)";
        }
        Object.defineProperty(SideNavItem.prototype, "href", {
            get: function () {
                return this.domSanitizer.bypassSecurityTrustUrl(this._href);
            },
            /**
             * Link for the item. NOTE: *do not* pass unsafe or untrusted values, this has the potential to open you up to XSS attacks
             */
            set: function (v) {
                // Needed when component is created dynamically with a model.
                if (v === undefined) {
                    return;
                }
                this._href = v;
            },
            enumerable: true,
            configurable: true
        });
        SideNavItem.prototype.ngOnChanges = function (changes) {
            if (changes.active) {
                this.selected.emit(this.active);
            }
        };
        SideNavItem.prototype.navigate = function (event) {
            if (this.router && this.route) {
                event.preventDefault();
                var status_1 = this.router.navigate(this.route, this.routeExtras);
                this.navigation.emit(status_1);
            }
        };
        SideNavItem.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-sidenav-item",
                        template: "\n\t\t<li [ngClass]=\"{\n\t\t\t'bx--side-nav__item': !isSubMenu,\n\t\t\t'bx--side-nav__menu-item': isSubMenu\n\t\t}\"\n\t\t[attr.role]=\"(isSubMenu ? 'listitem' : null)\">\n\t\t\t<a\n\t\t\t\tclass=\"bx--side-nav__link\"\n\t\t\t\t[href]=\"href\"\n\t\t\t\t[attr.role]=\"(isSubMenu ? 'menuitem' : null)\"\n\t\t\t\t[attr.aria-current]=\"(active ? 'page' : null)\"\n\t\t\t\t[title]=\"title\"\n\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t<div *ngIf=\"!isSubMenu\" class=\"bx--side-nav__icon\">\n\t\t\t\t\t<ng-content select=\"svg, [icon]\"></ng-content>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"bx--side-nav__link-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t</li>\n\t"
                    }] }
        ];
        /** @nocollapse */
        SideNavItem.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: router.Router, decorators: [{ type: core.Optional }] }
            ];
        };
        SideNavItem.propDecorators = {
            href: [{ type: core.Input }],
            active: [{ type: core.Input }],
            route: [{ type: core.Input }],
            isSubMenu: [{ type: core.Input }],
            routeExtras: [{ type: core.Input }],
            title: [{ type: core.Input }],
            navigation: [{ type: core.Output }],
            selected: [{ type: core.Output }]
        };
        return SideNavItem;
    }());

    /**
     * `SideNavMenu` provides a method to group `SideNavItem`s under a common heading.
     */
    var SideNavMenu = /** @class */ (function () {
        function SideNavMenu() {
            /**
             * Controls the visibility of the child `SideNavItem`s
             */
            this.expanded = false;
            /**
             * Controls the active status indicator on the menu if there is an active
             * child sidenav item.
             */
            this.hasActiveChild = false;
            this.activeItemsSubscription = new rxjs.Subscription();
        }
        SideNavMenu.prototype.ngAfterContentInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.sidenavItems.forEach(function (item) {
                    item.isSubMenu = true;
                    _this.findActiveChildren();
                    var activeItemSubscription = item.selected.subscribe(function () {
                        _this.findActiveChildren();
                    });
                    _this.activeItemsSubscription.add(activeItemSubscription);
                });
                _this.sidenavItems.changes.subscribe(function () {
                    _this.sidenavItems.forEach(function (item) {
                        item.isSubMenu = true;
                        _this.findActiveChildren();
                        var activeItemSubscription = item.selected.subscribe(function () {
                            _this.findActiveChildren();
                        });
                        _this.activeItemsSubscription.add(activeItemSubscription);
                    });
                });
            });
        };
        SideNavMenu.prototype.ngOnDestroy = function () {
            this.activeItemsSubscription.unsubscribe();
        };
        SideNavMenu.prototype.toggle = function () {
            this.expanded = !this.expanded;
        };
        SideNavMenu.prototype.findActiveChildren = function () {
            if (this.sidenavItems.some(function (item) { return item.active; })) {
                this.hasActiveChild = true;
            }
            else {
                this.hasActiveChild = false;
            }
        };
        SideNavMenu.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-sidenav-menu",
                        template: "\n\t\t<li\n\t\t\tclass=\"bx--side-nav__item bx--side-nav__item--icon\"\n\t\t\t[ngClass]=\"{ 'bx--side-nav__item--active': hasActiveChild }\">\n\t\t\t<button\n\t\t\t\t(click)=\"toggle()\"\n\t\t\t\tclass=\"bx--side-nav__submenu\"\n\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t\ttype=\"button\">\n\t\t\t\t<div class=\"bx--side-nav__icon\">\n\t\t\t\t\t<ng-content select=\"[icon]\"></ng-content>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"bx--side-nav__submenu-title\">{{title}}</span>\n\t\t\t\t<div class=\"bx--side-nav__icon bx--side-nav__icon--small bx--side-nav__submenu-chevron\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"20\"\n\t\t\t\t\t\theight=\"20\"\n\t\t\t\t\t\tviewBox=\"0 0 32 32\"\n\t\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t\t<path d=\"M16 22L6 12l1.4-1.4 8.6 8.6 8.6-8.6L26 12z\"></path>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</button>\n\t\t\t<ul class=\"bx--side-nav__menu\" role=\"menu\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t\t<ng-container *ngFor=\"let menuItem of menuItems\">\n\t\t\t\t\t<ibm-sidenav-item\n\t\t\t\t\t\t[href]=\"menuItem.href\"\n\t\t\t\t\t\t[route]=\"menuItem.route\"\n\t\t\t\t\t\t[routeExtras]=\"menuItem.routeExtras\"\n\t\t\t\t\t\t[isSubMenu]=\"true\">\n\t\t\t\t\t\t{{ menuItem.content }}\n\t\t\t\t\t</ibm-sidenav-item>\n\t\t\t\t</ng-container>\n\t\t\t</ul>\n\t\t</li>\n\t"
                    }] }
        ];
        SideNavMenu.propDecorators = {
            title: [{ type: core.Input }],
            expanded: [{ type: core.Input }],
            hasActiveChild: [{ type: core.Input }],
            menuItems: [{ type: core.Input }],
            sidenavItems: [{ type: core.ContentChildren, args: [SideNavItem,] }]
        };
        return SideNavMenu;
    }());

    var SideNavModule = /** @class */ (function () {
        function SideNavModule() {
        }
        SideNavModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SideNav,
                            SideNavItem,
                            SideNavMenu
                        ],
                        imports: [common.CommonModule, i18n.I18nModule],
                        exports: [
                            SideNav,
                            SideNavItem,
                            SideNavMenu
                        ]
                    },] }
        ];
        return SideNavModule;
    }());

    /**
     * `Panel` is a component that can be used to display content on the right side of the screen.
     * `Panel`s are generally activated by and linked to a `HeaderAction` component.
     */
    var Panel = /** @class */ (function () {
        function Panel() {
            /**
             * Controls the visibility of the panel
             */
            this.expanded = false;
            this.ariaLabel = "Header panel";
        }
        Panel.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-panel",
                        template: "\n\t\t<div\n\t\t\tclass=\"bx--panel--overlay\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--panel--expanded': expanded\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t"
                    }] }
        ];
        Panel.propDecorators = {
            expanded: [{ type: core.Input }],
            ariaLabel: [{ type: core.Input }]
        };
        return Panel;
    }());

    /**
     * Container for switcher items.
     *
     * ```html
     * <ibm-switcher-list>
     * 	<ibm-switcher-list-item>one</ibm-switcher-list-item>
     * 	<ibm-switcher-list-item [active]="true">two</ibm-switcher-list-item>
     * 	<ibm-switcher-list-item>three</ibm-switcher-list-item>
     * </ibm-switcher-list>
     * ```
     */
    var SwitcherList = /** @class */ (function () {
        function SwitcherList() {
        }
        SwitcherList.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-switcher-list",
                        template: "\n\t\t<ul class=\"bx--switcher\">\n\t\t\t<ng-content></ng-content>\n\t\t</ul>\n\t"
                    }] }
        ];
        return SwitcherList;
    }());

    /**
     * Represents an item in a switcher list.
     */
    var SwitcherListItem = /** @class */ (function () {
        function SwitcherListItem(domSanitizer, router$$1) {
            this.domSanitizer = domSanitizer;
            this.router = router$$1;
            /**
             * Enables the "active" state for an item. Commonly used to indicate the current page or selection.
             */
            this.active = false;
            /**
             * Emits the navigation status promise when the link is activated
             */
            this.navigation = new core.EventEmitter();
            this.itemClass = true;
            this.itemRole = "listitem";
            this._href = "javascript:void(0)";
            this._target = "";
        }
        Object.defineProperty(SwitcherListItem.prototype, "href", {
            get: function () {
                return this.domSanitizer.bypassSecurityTrustUrl(this._href);
            },
            /**
             * Optional link for the underlying anchor.
             */
            set: function (value) {
                this._href = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SwitcherListItem.prototype, "target", {
            get: function () {
                return this._target;
            },
            /**
             * Optional target for the underlying anchor.
             */
            set: function (value) {
                this._target = value;
            },
            enumerable: true,
            configurable: true
        });
        SwitcherListItem.prototype.navigate = function (event) {
            if (this.router && this.route) {
                event.preventDefault();
                var status_1 = this.router.navigate(this.route, this.routeExtras);
                this.navigation.emit(status_1);
            }
        };
        SwitcherListItem.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-switcher-list-item",
                        template: "\n\t\t<a\n\t\t\tclass=\"bx--switcher__item-link\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--switcher__item-link--selected': active\n\t\t\t}\"\n\t\t\t[href]=\"href\"\n\t\t\t[target]=\"target\"\n\t\t\t(click)=\"navigate($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</a>\n\t"
                    }] }
        ];
        /** @nocollapse */
        SwitcherListItem.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: router.Router, decorators: [{ type: core.Optional }] }
            ];
        };
        SwitcherListItem.propDecorators = {
            active: [{ type: core.Input }],
            route: [{ type: core.Input }],
            routeExtras: [{ type: core.Input }],
            href: [{ type: core.Input }],
            navigation: [{ type: core.Output }],
            target: [{ type: core.Input }],
            itemClass: [{ type: core.HostBinding, args: ["class.bx--switcher__item",] }],
            itemRole: [{ type: core.HostBinding, args: ["attr.role",] }]
        };
        return SwitcherListItem;
    }());

    var PanelModule = /** @class */ (function () {
        function PanelModule() {
        }
        PanelModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Panel,
                            SwitcherList,
                            SwitcherListItem
                        ],
                        imports: [common.CommonModule, i18n.I18nModule],
                        exports: [
                            Panel,
                            SwitcherList,
                            SwitcherListItem
                        ]
                    },] }
        ];
        return PanelModule;
    }());

    var UIShellModule = /** @class */ (function () {
        function UIShellModule() {
        }
        UIShellModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            i18n.I18nModule,
                            HeaderModule,
                            SideNavModule,
                            PanelModule
                        ],
                        exports: [
                            HeaderModule,
                            SideNavModule,
                            PanelModule
                        ]
                    },] }
        ];
        return UIShellModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Header = Header;
    exports.HeaderItem = HeaderItem;
    exports.HeaderMenu = HeaderMenu;
    exports.HeaderNavigation = HeaderNavigation;
    exports.HeaderGlobal = HeaderGlobal;
    exports.HeaderAction = HeaderAction;
    exports.Hamburger = Hamburger;
    exports.HeaderModule = HeaderModule;
    exports.SideNav = SideNav;
    exports.SideNavItem = SideNavItem;
    exports.SideNavMenu = SideNavMenu;
    exports.SideNavModule = SideNavModule;
    exports.Panel = Panel;
    exports.SwitcherList = SwitcherList;
    exports.SwitcherListItem = SwitcherListItem;
    exports.PanelModule = PanelModule;
    exports.UIShellModule = UIShellModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-ui-shell.umd.js.map