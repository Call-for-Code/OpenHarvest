/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-grid.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/grid', ['exports', '@angular/common', '@angular/core'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].grid = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,core) { 'use strict';

    /**
     * [See demo](../../?path=/story/grid--basic)
     *
     * <example-url>../../iframe.html?id=grid--basic</example-url>
     */
    var GridDirective = /** @class */ (function () {
        function GridDirective() {
            this.baseClass = true;
            this.condensed = false;
        }
        GridDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmGrid]"
                    },] }
        ];
        GridDirective.propDecorators = {
            baseClass: [{ type: core.HostBinding, args: ["class.bx--grid",] }],
            condensed: [{ type: core.HostBinding, args: ["class.bx--grid--condensed",] }, { type: core.Input }]
        };
        return GridDirective;
    }());
    var RowDirective = /** @class */ (function () {
        function RowDirective() {
            this.gutter = true;
            this.leftGutter = true;
            this.rightGutter = true;
            this.baseClass = true;
            this.condensed = false;
        }
        Object.defineProperty(RowDirective.prototype, "showGutter", {
            get: function () {
                return !this.gutter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RowDirective.prototype, "showLeftGutter", {
            get: function () {
                return !this.leftGutter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RowDirective.prototype, "showRightGutter", {
            get: function () {
                return !this.rightGutter;
            },
            enumerable: true,
            configurable: true
        });
        RowDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmRow]"
                    },] }
        ];
        RowDirective.propDecorators = {
            gutter: [{ type: core.Input }],
            leftGutter: [{ type: core.Input }],
            rightGutter: [{ type: core.Input }],
            baseClass: [{ type: core.HostBinding, args: ["class.bx--row",] }],
            condensed: [{ type: core.HostBinding, args: ["class.bx--row--condensed",] }, { type: core.Input }],
            showGutter: [{ type: core.HostBinding, args: ["class.bx--no-gutter",] }],
            showLeftGutter: [{ type: core.HostBinding, args: ["class.bx--no-gutter--left",] }],
            showRightGutter: [{ type: core.HostBinding, args: ["class.bx--no-gutter--right",] }]
        };
        return RowDirective;
    }());
    var ColumnDirective = /** @class */ (function () {
        function ColumnDirective() {
            this.class = "";
            this.columnNumbers = {};
            this.offsets = {};
            this._columnClasses = [];
        }
        Object.defineProperty(ColumnDirective.prototype, "columnClasses", {
            get: function () {
                return this._columnClasses.join(" ");
            },
            enumerable: true,
            configurable: true
        });
        ColumnDirective.prototype.set = function (classes) {
            this._columnClasses = classes.split(" ");
        };
        ColumnDirective.prototype.ngOnInit = function () {
            var _this = this;
            try {
                var columnKeys = Object.keys(this.columnNumbers);
                if (columnKeys.length <= 0) {
                    this._columnClasses.push("bx--col");
                }
                columnKeys.forEach(function (key) {
                    if (_this.columnNumbers[key] === "nobreak") {
                        _this._columnClasses.push("bx--col-" + key);
                    }
                    else {
                        _this._columnClasses.push("bx--col-" + key + "-" + _this.columnNumbers[key]);
                    }
                });
                Object.keys(this.offsets).forEach(function (key) {
                    _this._columnClasses.push("bx--offset-" + key + "-" + _this.offsets[key]);
                });
            }
            catch (err) {
                console.error("Malformed `offsets` or `columnNumbers`: " + err);
            }
            if (this.class) {
                this._columnClasses.push(this.class);
            }
        };
        ColumnDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmCol]"
                    },] }
        ];
        ColumnDirective.propDecorators = {
            class: [{ type: core.Input }],
            columnNumbers: [{ type: core.Input }],
            offsets: [{ type: core.Input }],
            columnClasses: [{ type: core.HostBinding, args: ["class",] }]
        };
        return ColumnDirective;
    }());

    var GridModule = /** @class */ (function () {
        function GridModule() {
        }
        GridModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ColumnDirective,
                            GridDirective,
                            RowDirective
                        ],
                        exports: [
                            ColumnDirective,
                            GridDirective,
                            RowDirective
                        ],
                        imports: [common.CommonModule]
                    },] }
        ];
        return GridModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.GridModule = GridModule;
    exports.GridDirective = GridDirective;
    exports.RowDirective = RowDirective;
    exports.ColumnDirective = ColumnDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-grid.umd.js.map