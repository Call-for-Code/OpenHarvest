/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-accordion.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/accordion', ['exports', '@angular/core', '@angular/common', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].accordion = {}),global.ng.core,global.ng.common,global['carbon-components-angular'].icon));
}(this, (function (exports,core,common,icon) { 'use strict';

    var AccordionItem = /** @class */ (function () {
        function AccordionItem() {
            this.context = null;
            this.id = "accordion-item-" + AccordionItem.accordionItemCount;
            this.skeleton = false;
            this.selected = new core.EventEmitter();
            this.itemClass = true;
            this.expanded = false;
            this.itemType = "list-item";
            this.role = "heading";
            this.ariaLevel = 3;
            AccordionItem.accordionItemCount++;
        }
        AccordionItem.prototype.toggleExpanded = function () {
            if (!this.skeleton) {
                this.expanded = !this.expanded;
                this.selected.emit({ id: this.id, expanded: this.expanded });
            }
        };
        AccordionItem.prototype.isTemplate = function (value) {
            return value instanceof core.TemplateRef;
        };
        AccordionItem.accordionItemCount = 0;
        AccordionItem.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-accordion-item",
                        template: "\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t[attr.aria-controls]=\"id\"\n\t\t\t(click)=\"toggleExpanded()\"\n\t\t\tclass=\"bx--accordion__heading\">\n\t\t\t<svg ibmIcon=\"chevron--right\" size=\"16\" class=\"bx--accordion__arrow\"></svg>\n\t\t\t<p *ngIf=\"!isTemplate(title)\"\n\t\t\t\tclass=\"bx--accordion__title\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton__text': skeleton\n\t\t\t\t}\">\n\t\t\t\t{{!skeleton ? title : null}}\n\t\t\t</p>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(title)\"\n\t\t\t\t[ngTemplateOutlet]=\"title\"\n\t\t\t\t[ngTemplateOutletContext]=\"context\">\n\t\t\t</ng-template>\n\t\t</button>\n\t\t<div [id]=\"id\" class=\"bx--accordion__content\">\n\t\t\t<ng-content *ngIf=\"!skeleton; else skeletonTemplate\"></ng-content>\n\t\t\t<ng-template #skeletonTemplate>\n\t\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 90%\"></p>\n\t\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 80%\"></p>\n\t\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 95%\"></p>\n\t\t\t</ng-template>\n\t\t</div>\n\t"
                    }] }
        ];
        /** @nocollapse */
        AccordionItem.ctorParameters = function () { return []; };
        AccordionItem.propDecorators = {
            title: [{ type: core.Input }],
            context: [{ type: core.Input }],
            id: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            selected: [{ type: core.Output }],
            itemClass: [{ type: core.HostBinding, args: ["class.bx--accordion__item",] }],
            expanded: [{ type: core.HostBinding, args: ["class.bx--accordion__item--active",] }, { type: core.Input }],
            itemType: [{ type: core.HostBinding, args: ["style.display",] }],
            role: [{ type: core.HostBinding, args: ["attr.role",] }],
            ariaLevel: [{ type: core.HostBinding, args: ["attr.aria-level",] }, { type: core.Input }]
        };
        return AccordionItem;
    }());

    /**
     * [See demo](../../?path=/story/accordion--basic)
     *
     * <example-url>../../iframe.html?id=accordion--basic</example-url>
     */
    var Accordion = /** @class */ (function () {
        function Accordion() {
            this.align = "end";
            this._skeleton = false;
        }
        Object.defineProperty(Accordion.prototype, "skeleton", {
            get: function () {
                return this._skeleton;
            },
            set: function (value) {
                this._skeleton = value;
                this.updateChildren();
            },
            enumerable: true,
            configurable: true
        });
        Accordion.prototype.ngAfterContentInit = function () {
            this.updateChildren();
        };
        Accordion.prototype.updateChildren = function () {
            var _this = this;
            if (this.children) {
                this.children.toArray().forEach(function (child) { return child.skeleton = _this.skeleton; });
            }
        };
        Accordion.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-accordion",
                        template: "\n\t\t<ul class=\"bx--accordion\"\n\t\t\t[class.bx--accordion--end]=\"align == 'end'\"\n\t\t\t[class.bx--accordion--start]=\"align == 'start'\">\n\t\t\t<ng-content></ng-content>\n\t\t</ul>\n\t"
                    }] }
        ];
        Accordion.propDecorators = {
            align: [{ type: core.Input }],
            children: [{ type: core.ContentChildren, args: [AccordionItem,] }],
            skeleton: [{ type: core.Input }]
        };
        return Accordion;
    }());

    var AccordionModule = /** @class */ (function () {
        function AccordionModule() {
        }
        AccordionModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Accordion,
                            AccordionItem
                        ],
                        exports: [
                            Accordion,
                            AccordionItem
                        ],
                        imports: [
                            common.CommonModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return AccordionModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccordionItem = AccordionItem;
    exports.Accordion = Accordion;
    exports.AccordionModule = AccordionModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-accordion.umd.js.map