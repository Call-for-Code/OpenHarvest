{"version":3,"sources":["ng://carbon-components-angular/code-snippet/code-snippet.component.ts","ng://carbon-components-angular/code-snippet/code-snippet.module.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tHostBinding,\n\tViewChild,\n\tHostListener,\n\tAfterViewInit\n} from \"@angular/core\";\n\nimport { I18n } from \"carbon-components-angular/i18n\";\n\nexport enum SnippetType {\n\tsingle = \"single\",\n\tmulti = \"multi\",\n\tinline = \"inline\"\n}\n\n/**\n * [See demo](../../?path=/story/code-snippet--basic)\n *\n * ```html\n * <ibm-code-snippet>Code</ibm-code-snippet>\n * ```\n *\n * <example-url>../../iframe.html?id=code-snippet--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-code-snippet\",\n\ttemplate: `\n\t\t<ng-container *ngIf=\"display === 'inline'; else notInline\">\n\t\t\t<ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container>\n\t\t\t<ng-container *ngTemplateOutlet=\"feedbackTemplate\"></ng-container>\n\t\t</ng-container>\n\n\t\t<ng-template #notInline>\n\t\t\t<div class=\"bx--snippet-container\" [attr.aria-label]=\"translations.CODE_SNIPPET_TEXT\">\n\t\t\t\t<ng-container *ngIf=\"skeleton\">\n\t\t\t\t\t<span *ngIf=\"display === 'single'; else multiSkeleton\"></span>\n\t\t\t\t\t<ng-template #multiSkeleton>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ng-container>\n\t\t\t\t<pre *ngIf=\"!skeleton\"><ng-container *ngTemplateOutlet=\"codeTemplate\"></ng-container></pre>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\tclass=\"bx--snippet-button\"\n\t\t\t\t[attr.aria-label]=\"translations.COPY_CODE\"\n\t\t\t\t(click)=\"onCopyButtonClicked()\"\n\t\t\t\ttabindex=\"0\">\n\t\t\t\t<svg ibmIcon=\"copy\" size=\"16\" class=\"bx--snippet__icon\"></svg>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"feedbackTemplate\"></ng-container>\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\t*ngIf=\"shouldShowExpandButton\"\n\t\t\t\tclass=\"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\"\n\t\t\t\t(click)=\"toggleSnippetExpansion()\"\n\t\t\t\ttype=\"button\">\n\t\t\t\t<span class=\"bx--snippet-btn--text\">{{expanded ? translations.SHOW_LESS : translations.SHOW_MORE}}</span>\n\t\t\t\t<svg ibmIcon=\"chevron--down\" size=\"16\" class=\"bx--icon-chevron--down\" [ariaLabel]=\"translations.SHOW_MORE_ICON\"></svg>\n\t\t\t</button>\n\t\t</ng-template>\n\n\t\t<ng-template #codeTemplate>\n\t\t\t<code #code><ng-content></ng-content></code>\n\t\t</ng-template>\n\n\t\t<ng-template #feedbackTemplate>\n\t\t\t<div\n\t\t\tclass=\"bx--btn--copy__feedback\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--btn--copy__feedback--displayed': showFeedback\n\t\t\t}\"\n\t\t\t[attr.data-feedback]=\"feedbackText\">\n\t\t\t</div>\n\t\t</ng-template>\n\t`\n})\nexport class CodeSnippet implements AfterViewInit {\n\t/**\n\t * Variable used for creating unique ids for code-snippet components.\n\t */\n\tstatic codeSnippetCount = 0;\n\n\t/**\n\t * It can be `\"single\"`, `\"multi\"` or `\"inline\"`\n\t *\n\t */\n\t@Input() display: SnippetType = SnippetType.single;\n\t@Input() translations = this.i18n.get().CODE_SNIPPET;\n\n\t/**\n\t * Set to `\"light\"` to apply the light style on the code snippet.\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\n\t/**\n\t * Text displayed in the tooltip when user clicks button to copy code.\n\t *\n\t */\n\t@Input() feedbackText = this.translations.COPIED;\n\n\t/**\n\t * Time in miliseconds to keep the feedback tooltip displayed.\n\t *\n\t */\n\t@Input() feedbackTimeout = 2000;\n\n\t@HostBinding(\"class.bx--snippet--expand\") @Input() expanded = false;\n\t@HostBinding(\"class.bx--skeleton\") @Input() skeleton = false;\n\n\t@HostBinding(\"class.bx--snippet\") snippetClass = true;\n\t@HostBinding(\"class.bx--snippet--single\") get snippetSingleClass() {\n\t\treturn this.display === SnippetType.single;\n\t}\n\t@HostBinding(\"class.bx--snippet--multi\") get snippetMultiClass() {\n\t\treturn this.display === SnippetType.multi;\n\t}\n\t@HostBinding(\"class.bx--snippet--inline\") get snippetInlineClass() {\n\t\treturn this.display === SnippetType.inline;\n\t}\n\t@HostBinding(\"class.bx--snippet--light\") get snippetInlineLightClass() {\n\t\treturn this.display === SnippetType.inline && this.theme === \"light\";\n\t}\n\t@HostBinding(\"class.bx--btn--copy\") get btnCopyClass() {\n\t\treturn this.display === SnippetType.inline;\n\t}\n\n\t@HostBinding(\"style.display\") get displayStyle() {\n\t\treturn this.display !== SnippetType.inline ? \"block\" : null;\n\t}\n\t@HostBinding(\"attr.type\") get attrType() {\n\t\treturn this.display === SnippetType.inline ? \"button\" : null;\n\t}\n\n\t// @ts-ignore\n\t@ViewChild(\"code\", { static: false }) code;\n\n\tget shouldShowExpandButton() {\n\t\t// Checks if `hasExpand` button has been initialized in `AfterViewInit` before detecting whether or not to\n\t\t// show the expand button when the code displayed in the component changes during the life of the component.\n\t\t// This is to avoid the `ExpressionChangedAfterItHasBeenCheckedError`.\n\t\tif (this.hasExpandButton === null) {\n\t\t\treturn this.hasExpandButton;\n\t\t}\n\t\treturn this.canExpand();\n\t}\n\n\tshowFeedback = false;\n\n\thasExpandButton = null;\n\n\t/**\n\t * Creates an instance of CodeSnippet.\n\t */\n\tconstructor(protected i18n: I18n) {\n\t\tCodeSnippet.codeSnippetCount++;\n\t}\n\n\ttoggleSnippetExpansion() {\n\t\tthis.expanded = !this.expanded;\n\t}\n\n\t/**\n\t * Copies the code from the `<code>` block to clipboard.\n\t *\n\t */\n\tcopyCode() {\n\t\t// create invisible, uneditable textarea with our code in it\n\t\tconst textarea = document.createElement(\"textarea\");\n\t\ttextarea.value = this.code.nativeElement.innerText || this.code.nativeElement.textContent;\n\t\ttextarea.setAttribute(\"readonly\", \"\");\n\t\ttextarea.style.position = \"absolute\";\n\t\ttextarea.style.right = \"-99999px\";\n\t\tdocument.body.appendChild(textarea);\n\n\t\t// save user selection\n\t\tconst selected = document.getSelection().rangeCount ? document.getSelection().getRangeAt(0) : null;\n\n\t\t// copy to clipboard\n\t\ttextarea.select();\n\t\tdocument.execCommand(\"copy\");\n\n\t\t// remove textarea\n\t\tdocument.body.removeChild(textarea);\n\n\t\t// restore user selection\n\t\tif (selected) {\n\t\t\tdocument.getSelection().removeAllRanges();\n\t\t\tdocument.getSelection().addRange(selected);\n\t\t}\n\t}\n\n\tonCopyButtonClicked() {\n\t\tthis.copyCode();\n\n\t\tthis.showFeedback = true;\n\n\t\tsetTimeout(() => {\n\t\t\tthis.showFeedback = false;\n\t\t}, this.feedbackTimeout);\n\t}\n\n\tngAfterViewInit() {\n\t\tsetTimeout(() => {\n\t\t\tif (this.canExpand()) {\n\t\t\t\tthis.hasExpandButton = true;\n\t\t\t} else {\n\t\t\t\tthis.hasExpandButton = false;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Inline code snippet acts as button and makes the whole component clickable.\n\t *\n\t * This handles clicks in that case.\n\t */\n\t@HostListener(\"click\")\n\thostClick() {\n\t\tif (this.display !== SnippetType.inline) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.onCopyButtonClicked();\n\t}\n\n\tprotected canExpand() {\n\t\treturn (this.code && this.code.nativeElement.getBoundingClientRect().height > 255) && this.display === \"multi\";\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\nimport { I18nModule } from \"carbon-components-angular/i18n\";\n\n// imports\nimport { CodeSnippet } from \"./code-snippet.component\";\n\n@NgModule({\n\tdeclarations: [\n\t\tCodeSnippet\n\t],\n\texports: [\n\t\tCodeSnippet\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tI18nModule,\n\t\tIconModule\n\t]\n})\nexport class CodeSnippetModule { }\n"],"names":["SnippetType","CodeSnippet","Object","defineProperty","prototype","this","display","single","multi","inline","theme","hasExpandButton","canExpand","toggleSnippetExpansion","expanded","copyCode","textarea","document","createElement","value","code","nativeElement","innerText","textContent","setAttribute","style","position","right","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","onCopyButtonClicked","_this","showFeedback","setTimeout","feedbackTimeout","ngAfterViewInit","hostClick","getBoundingClientRect","height","codeSnippetCount","Component","args","selector","template","I18n","Input","HostBinding","type","ViewChild","static","HostListener","i18n","translations","get","CODE_SNIPPET","feedbackText","COPIED","skeleton","snippetClass","CodeSnippetModule","NgModule","declarations","exports","imports","CommonModule","FormsModule","I18nModule","IconModule"],"mappings":"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"}