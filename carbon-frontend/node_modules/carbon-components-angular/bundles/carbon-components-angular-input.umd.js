/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-input.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/common'), require('@angular/core'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/input', ['exports', '@angular/forms', '@angular/common', '@angular/core', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].input = {}),global.ng.forms,global.ng.common,global.ng.core,global['carbon-components-angular'].icon));
}(this, (function (exports,forms,common,core,icon) { 'use strict';

    /**
     * A directive for applying styling to an input element.
     *
     * Example:
     *
     * ```html
     * <input ibmText/>
     * ```
     *
     * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
     */
    var TextInput = /** @class */ (function () {
        function TextInput() {
            /**
             * `light` or `dark` input theme
             */
            this.theme = "dark";
            /**
             * Input field render size
             */
            this.size = "md";
            this.inputClass = true;
            this.invalid = false;
            this.skeleton = false;
        }
        Object.defineProperty(TextInput.prototype, "isSizeXl", {
            get: function () {
                return this.size === "xl";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput.prototype, "isSizeSm", {
            get: function () {
                return this.size === "sm";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput.prototype, "isLightTheme", {
            get: function () {
                return this.theme === "light";
            },
            enumerable: true,
            configurable: true
        });
        TextInput.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmText]"
                    },] }
        ];
        TextInput.propDecorators = {
            theme: [{ type: core.Input }],
            size: [{ type: core.Input }],
            inputClass: [{ type: core.HostBinding, args: ["class.bx--text-input",] }],
            isSizeXl: [{ type: core.HostBinding, args: ["class.bx--text-input--xl",] }],
            isSizeSm: [{ type: core.HostBinding, args: ["class.bx--text-input--sm",] }],
            invalid: [{ type: core.HostBinding, args: ["class.bx--text-input--invalid",] }, { type: core.Input }],
            skeleton: [{ type: core.HostBinding, args: ["class.bx--skeleton",] }, { type: core.Input }],
            isLightTheme: [{ type: core.HostBinding, args: ["class.bx--text-input--light",] }]
        };
        return TextInput;
    }());

    /**
     * A directive for applying styling to a textarea element.
     *
     * Example:
     *
     * ```html
     * <textarea ibmTextArea></textarea>
     * ```
     *
     * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
     */
    var TextArea = /** @class */ (function () {
        function TextArea() {
            /**
             * `light` or `dark` input theme
             */
            this.theme = "dark";
            this.baseClass = true;
            this.invalid = false;
            this.skeleton = false;
        }
        Object.defineProperty(TextArea.prototype, "isLightTheme", {
            get: function () {
                return this.theme === "light";
            },
            enumerable: true,
            configurable: true
        });
        TextArea.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmTextArea]"
                    },] }
        ];
        TextArea.propDecorators = {
            theme: [{ type: core.Input }],
            baseClass: [{ type: core.HostBinding, args: ["class.bx--text-area",] }],
            invalid: [{ type: core.HostBinding, args: ["class.bx--text-area--invalid",] }, { type: core.Input }],
            skeleton: [{ type: core.HostBinding, args: ["class.bx--skeleton",] }, { type: core.Input }],
            isLightTheme: [{ type: core.HostBinding, args: ["class.bx--text-area--light",] }]
        };
        return TextArea;
    }());

    /**
     * [See demo](../../?path=/story/input--label)
     *
     * ```html
     * <ibm-label labelState="success">
     * 	<label label>Field with success</label>
     * 	<input type="text" class="input-field">
     * </ibm-label>
     *
     * <ibm-label labelState="warning">
     * 	<label label>Field with warning</label>
     * 	<input type="text" class="input-field">
     * </ibm-label>
     *
     * <ibm-label labelState="error">
     * 	<label label>Field with error</label>
     * 	<input type="text" class="input-field">
     * </ibm-label>
     * ```
     *
     * <example-url>../../iframe.html?id=input--label</example-url>
     */
    var Label = /** @class */ (function () {
        /**
         * Creates an instance of Label.
         */
        function Label() {
            /**
             * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with
             * its input counterpart through the 'for' attribute.
             */
            this.labelInputID = "ibm-label-" + Label.labelCounter;
            /**
             * The class of the wrapper
             */
            this.wrapperClass = "bx--text-input__field-wrapper";
            /**
             * State of the `Label` will determine the styles applied.
             */
            this.labelState = "";
            /**
             * Set to `true` for a loading label.
             */
            this.skeleton = false;
            /**
             * Set to `true` for an invalid label component.
             */
            this.invalid = false;
            this.labelClass = true;
            Label.labelCounter++;
        }
        /**
         * Update wrapper class if a textarea is hosted.
         */
        Label.prototype.ngAfterContentInit = function () {
            if (this.textArea) {
                this.wrapperClass = "bx--text-area__wrapper";
            }
        };
        /**
         * Sets the id on the input item associated with the `Label`.
         */
        Label.prototype.ngAfterViewInit = function () {
            if (this.wrapper) {
                var inputElement = this.wrapper.nativeElement.querySelector("input,textarea,div");
                if (inputElement) {
                    inputElement.setAttribute("id", this.labelInputID);
                }
            }
        };
        Label.prototype.isTemplate = function (value) {
            return value instanceof core.TemplateRef;
        };
        /**
         * Used to build the id of the input item associated with the `Label`.
         */
        Label.labelCounter = 0;
        Label.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-label",
                        template: "\n\t\t<label\n\t\t\t[for]=\"labelInputID\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"bx--label\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t\t<div [class]=\"wrapperClass\" [attr.data-invalid]=\"(invalid ? true : null)\" #wrapper>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--text-input__invalid-icon bx--text-area__invalid-icon\">\n\t\t\t</svg>\n\t\t\t<ng-content select=\"input,textarea,div\"></ng-content>\n\t\t</div>\n\t\t<div *ngIf=\"!skeleton && helperText && !invalid\" class=\"bx--form__helper-text\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t"
                    }] }
        ];
        /** @nocollapse */
        Label.ctorParameters = function () { return []; };
        Label.propDecorators = {
            labelState: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            helperText: [{ type: core.Input }],
            invalidText: [{ type: core.Input }],
            invalid: [{ type: core.Input }],
            ariaLabel: [{ type: core.Input }],
            wrapper: [{ type: core.ViewChild, args: ["wrapper", { static: false },] }],
            textArea: [{ type: core.ContentChild, args: [TextArea, { static: false },] }],
            labelClass: [{ type: core.HostBinding, args: ["class.bx--form-item",] }]
        };
        return Label;
    }());

    // modules
    var InputModule = /** @class */ (function () {
        function InputModule() {
        }
        InputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Label,
                            TextInput,
                            TextArea
                        ],
                        exports: [
                            Label,
                            TextInput,
                            TextArea
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return InputModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TextInput = TextInput;
    exports.InputModule = InputModule;
    exports.Label = Label;
    exports.TextArea = TextArea;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-input.umd.js.map