{"version":3,"file":"carbon-components-angular-input.umd.js.map","sources":["ng://carbon-components-angular/input/input.directive.ts","ng://carbon-components-angular/input/text-area.directive.ts","ng://carbon-components-angular/input/label.component.ts","ng://carbon-components-angular/input/input.module.ts","ng://carbon-components-angular/input/carbon-components-angular-input.ts"],"sourcesContent":["import { Directive, HostBinding, Input } from \"@angular/core\";\n\n/**\n * A directive for applying styling to an input element.\n *\n * Example:\n *\n * ```html\n * <input ibmText/>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.\n */\n@Directive({\n\tselector: \"[ibmText]\"\n})\nexport class TextInput {\n\t/**\n\t * `light` or `dark` input theme\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\n\t/**\n\t * Input field render size\n\t */\n\t@Input() size: \"sm\" | \"md\" | \"xl\" = \"md\";\n\n\t@HostBinding(\"class.bx--text-input\") inputClass = true;\n\t@HostBinding(\"class.bx--text-input--xl\") get isSizeXl() {\n\t\treturn this.size === \"xl\";\n\t}\n\t@HostBinding(\"class.bx--text-input--sm\") get isSizeSm() {\n\t\treturn this.size === \"sm\";\n\t}\n\t@HostBinding(\"class.bx--text-input--invalid\") @Input() invalid = false;\n\t@HostBinding(\"class.bx--skeleton\") @Input() skeleton = false;\n\t@HostBinding(\"class.bx--text-input--light\") get isLightTheme() {\n\t\treturn this.theme === \"light\";\n\t}\n}\n","import { Directive, HostBinding, Input } from \"@angular/core\";\n\n/**\n * A directive for applying styling to a textarea element.\n *\n * Example:\n *\n * ```html\n * <textarea ibmTextArea></textarea>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.\n */\n@Directive({\n\tselector: \"[ibmTextArea]\"\n})\nexport class TextArea {\n\t/**\n\t * `light` or `dark` input theme\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\n\t@HostBinding(\"class.bx--text-area\") baseClass = true;\n\t@HostBinding(\"class.bx--text-area--invalid\") @Input() invalid = false;\n\t@HostBinding(\"class.bx--skeleton\") @Input() skeleton = false;\n\t@HostBinding(\"class.bx--text-area--light\") get isLightTheme() {\n\t\treturn this.theme === \"light\";\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tAfterViewInit,\n\tElementRef,\n\tHostBinding,\n\tTemplateRef,\n\tViewChild,\n\tContentChild,\n\tAfterContentInit\n} from \"@angular/core\";\n\nimport { TextArea } from \"./text-area.directive\";\n\n/**\n * [See demo](../../?path=/story/input--label)\n *\n * ```html\n * <ibm-label labelState=\"success\">\n * \t<label label>Field with success</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n *\n * <ibm-label labelState=\"warning\">\n * \t<label label>Field with warning</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n *\n * <ibm-label labelState=\"error\">\n * \t<label label>Field with error</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n * ```\n *\n * <example-url>../../iframe.html?id=input--label</example-url>\n */\n@Component({\n\tselector: \"ibm-label\",\n\ttemplate: `\n\t\t<label\n\t\t\t[for]=\"labelInputID\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"bx--label\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t\t<div [class]=\"wrapperClass\" [attr.data-invalid]=\"(invalid ? true : null)\" #wrapper>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--text-input__invalid-icon bx--text-area__invalid-icon\">\n\t\t\t</svg>\n\t\t\t<ng-content select=\"input,textarea,div\"></ng-content>\n\t\t</div>\n\t\t<div *ngIf=\"!skeleton && helperText && !invalid\" class=\"bx--form__helper-text\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t`\n})\nexport class Label implements AfterContentInit, AfterViewInit {\n\t/**\n\t * Used to build the id of the input item associated with the `Label`.\n\t */\n\tstatic labelCounter = 0;\n\t/**\n\t * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with\n\t * its input counterpart through the 'for' attribute.\n\t */\n\tlabelInputID = \"ibm-label-\" + Label.labelCounter;\n\t/**\n\t * The class of the wrapper\n\t */\n\twrapperClass = \"bx--text-input__field-wrapper\";\n\n\t/**\n\t * State of the `Label` will determine the styles applied.\n\t */\n\t@Input() labelState: \"success\" | \"warning\" | \"error\" | \"\" = \"\";\n\t/**\n\t * Set to `true` for a loading label.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Optional helper text that appears under the label.\n\t */\n\t@Input() helperText: string | TemplateRef<any>;\n\t/**\n\t * Sets the invalid text.\n\t */\n\t@Input() invalidText: string | TemplateRef<any>;\n\t/**\n\t * Set to `true` for an invalid label component.\n\t */\n\t@Input() invalid = false;\n\t/**\n\t * Set the arialabel for label\n\t */\n\t@Input() ariaLabel: string;\n\n\t// @ts-ignore\n\t@ViewChild(\"wrapper\", { static: false }) wrapper: ElementRef<HTMLDivElement>;\n\n\t// @ts-ignore\n\t@ContentChild(TextArea, { static: false }) textArea: TextArea;\n\n\t@HostBinding(\"class.bx--form-item\") labelClass = true;\n\n\t/**\n\t * Creates an instance of Label.\n\t */\n\tconstructor() {\n\t\tLabel.labelCounter++;\n\t}\n\n\t/**\n\t * Update wrapper class if a textarea is hosted.\n\t */\n\tngAfterContentInit() {\n\t\tif (this.textArea) {\n\t\t\tthis.wrapperClass = \"bx--text-area__wrapper\";\n\t\t}\n\t}\n\n\t/**\n\t * Sets the id on the input item associated with the `Label`.\n\t */\n\tngAfterViewInit() {\n\t\tif (this.wrapper) {\n\t\t\tconst inputElement = this.wrapper.nativeElement.querySelector(\"input,textarea,div\");\n\t\t\tif (inputElement) {\n\t\t\t\tinputElement.setAttribute(\"id\", this.labelInputID);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic isTemplate(value) {\n\t\treturn value instanceof TemplateRef;\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { Label } from \"./label.component\";\nimport { TextInput } from \"./input.directive\";\nimport { TextArea } from \"./text-area.directive\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tLabel,\n\t\tTextInput,\n\t\tTextArea\n\t],\n\texports: [\n\t\tLabel,\n\t\tTextInput,\n\t\tTextArea\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tIconModule\n\t]\n})\nexport class InputModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["Directive","Input","HostBinding","TemplateRef","Component","ViewChild","ContentChild","NgModule","CommonModule","FormsModule","IconModule"],"mappings":"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"}
