{"version":3,"sources":["ng://carbon-components-angular/timepicker/timepicker.component.ts","ng://carbon-components-angular/timepicker/timepicker.module.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding,\n\tTemplateRef,\n\tHostListener\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\n\n/**\n * [See demo](../../?path=/story/time-picker--simple)\n *\n * <example-url>../../iframe.html?id=time-picker--simple</example-url>\n */\n@Component({\n\tselector: \"ibm-timepicker\",\n\ttemplate: `\n\t\t<label *ngIf=\"!skeleton && label\" [for]=\"id\" class=\"bx--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t</label>\n\t\t<div\n\t\t\tclass=\"bx--time-picker\"\n\t\t\t[ngClass]=\"{'bx--time-picker--invalid' : invalid}\">\n\t\t\t<div class=\"bx--time-picker__input\">\n\t\t\t\t<input\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--text-input--light': theme === 'light',\n\t\t\t\t\t\t'bx--skeleton': skeleton\n\t\t\t\t\t}\"\n\t\t\t\t\t[value]=\"value\"\n\t\t\t\t\t[placeholder]=\"placeholder\"\n\t\t\t\t\t[attr.data-invalid]=\"invalid ? true : undefined\"\n\t\t\t\t\t[pattern]=\"pattern\"\n\t\t\t\t\t[attr.id]=\"id\"\n\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\tmaxlength=\"5\"\n\t\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclass=\"bx--time-picker__input-field bx--text-input\">\n\t\t\t</div>\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: TimePicker,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class TimePicker implements ControlValueAccessor {\n\t/**\n\t * Tracks the total number of selects instantiated. Used to generate unique IDs\n\t */\n\tstatic timePickerCount = 0;\n\n\t@Input() invalid = false;\n\t@Input() invalidText: string | TemplateRef<any>;\n\t@Input() label: string | TemplateRef<any>;\n\t@Input() placeholder = \"hh:mm\";\n\t@Input() pattern = \"(1[012]|[0-9]):[0-5][0-9]\";\n\t@Input() id = `timepicker-${TimePicker.timePickerCount++}`;\n\t@Input() disabled = false;\n\t@Input() value: string;\n\n\t/**\n\t * Set to true for a loading select.\n\t */\n\t@Input() skeleton = false;\n\n\t/**\n\t * `light` or `dark` select theme\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\n\t@Output() valueChange: EventEmitter<string> = new EventEmitter();\n\n\twriteValue(value: string) {\n\t\tthis.value = value;\n\t}\n\n\tregisterOnChange(callback: any) {\n\t\tthis.onChangeHandler = callback;\n\t}\n\n\tregisterOnTouched(callback: any) {\n\t\tthis.onTouchedHandler = callback;\n\t}\n\n\tsetDisabledState(isDisabled: boolean) {\n\t\tthis.disabled = isDisabled;\n\t}\n\n\tonChange(event) {\n\t\tthis.onChangeHandler(event.target.value);\n\t\tthis.valueChange.emit(event.target.value);\n\t}\n\n\t@HostListener(\"focusout\")\n\tfocusOut() {\n\t\tthis.onTouchedHandler();\n\t}\n\n\tpublic isTemplate(value) {\n\t\treturn value instanceof TemplateRef;\n\t}\n\n\tprotected onChangeHandler = (_: any) => { };\n\tprotected onTouchedHandler = () => { };\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { TimePicker } from \"./timepicker.component\";\nimport { TimePickerSelectModule } from \"carbon-components-angular/timepicker-select\";\n\n@NgModule({\n\tdeclarations: [\n\t\tTimePicker\n\t],\n\texports: [\n\t\tTimePicker\n\t],\n\timports: [\n\t\tTimePickerSelectModule,\n\t\tCommonModule\n\t]\n})\nexport class TimePickerModule { }\n"],"names":["TimePicker","prototype","writeValue","value","this","registerOnChange","callback","onChangeHandler","registerOnTouched","onTouchedHandler","setDisabledState","isDisabled","disabled","onChange","event","target","valueChange","emit","focusOut","isTemplate","TemplateRef","timePickerCount","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","Input","Output","HostListener","invalid","placeholder","pattern","id","skeleton","theme","EventEmitter","_","NgModule","declarations","exports","imports","TimePickerSelectModule","CommonModule","TimePickerModule"],"mappings":"woBAgBA,IAAAA,GAqECA,EAAAC,UAAAC,WAAA,SAAWC,GACVC,KAAKD,MAAQA,GAGdH,EAAAC,UAAAI,iBAAA,SAAiBC,GAChBF,KAAKG,gBAAkBD,GAGxBN,EAAAC,UAAAO,kBAAA,SAAkBF,GACjBF,KAAKK,iBAAmBH,GAGzBN,EAAAC,UAAAS,iBAAA,SAAiBC,GAChBP,KAAKQ,SAAWD,GAGjBX,EAAAC,UAAAY,SAAA,SAASC,GACRV,KAAKG,gBAAgBO,EAAMC,OAAOZ,OAClCC,KAAKY,YAAYC,KAAKH,EAAMC,OAAOZ,QAIpCH,EAAAC,UAAAiB,SADA,WAECd,KAAKK,oBAGCT,EAAAC,UAAAkB,WAAP,SAAkBhB,GACjB,OAAOA,aAAiBiB,EAAAA,aAlDlBpB,EAAAqB,gBAAkB,E,oBA9CzBC,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,iBACVC,SAAU,+sCAgCVC,UAAW,CACV,CACCC,QAASC,EAAAA,kBACTC,YAAa7B,EACb8B,OAAO,Q,iCAURC,EAAAA,Q,mBACAA,EAAAA,Q,aACAA,EAAAA,Q,mBACAA,EAAAA,Q,eACAA,EAAAA,Q,UACAA,EAAAA,Q,gBACAA,EAAAA,Q,aACAA,EAAAA,Q,gBAKAA,EAAAA,Q,aAKAA,EAAAA,Q,mBAEAC,EAAAA,S,gBAuBAC,EAAAA,aAAYV,KAAA,CAAC,eAWfvB,GArGA,SAAAA,IAgDUI,KAAA8B,SAAU,EAGV9B,KAAA+B,YAAc,QACd/B,KAAAgC,QAAU,4BACVhC,KAAAiC,GAAK,cAAcrC,EAAWqB,kBAC9BjB,KAAAQ,UAAW,EAMXR,KAAAkC,UAAW,EAKXlC,KAAAmC,MAA0B,OAEzBnC,KAAAY,YAAoC,IAAIwB,EAAAA,aAgCxCpC,KAAAG,gBAAkB,SAACkC,KACnBrC,KAAAK,iBAAmB,a,2BC/G7BiC,EAAAA,SAAQnB,KAAA,CAAC,CACToB,aAAc,CACb3C,GAED4C,QAAS,CACR5C,GAED6C,QAAS,CACRC,EAAAA,uBACAC,EAAAA,kBAG8BC,GAZhC,SAAAA,K"}