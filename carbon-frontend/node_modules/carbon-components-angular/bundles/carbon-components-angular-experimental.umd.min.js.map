{"version":3,"sources":["ng://carbon-components-angular/experimental/experimental.service.ts","ng://carbon-components-angular/experimental/experimental.module.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\n\n/**\n * Represents options for an experiment. The only required property is `enabled`, however other options may be supplied.\n */\nexport interface Experiment {\n\tenabled: boolean;\n\t[key: string]: any;\n}\n\n@Injectable()\nexport class ExperimentalService {\n\t/**\n\t * Map to hold all our experiments\n\t */\n\tprivate experiments = new Map<string, Experiment>();\n\n\t/**\n\t * Adds an experiment if it doesn't exist.\n\t */\n\taddExperiment(name: string, options: Experiment = {enabled: false}) {\n\t\tif (!this.experiments.has(name)) {\n\t\t\tthis.experiments.set(name, options);\n\t\t}\n\t}\n\n\t/**\n\t * Enables an experiment by name\n\t * @param name name of the experiment to enable\n\t */\n\tenableExperiment(name: string) {\n\t\tconst experiment = this.getExperiment(name);\n\t\texperiment.enabled = true;\n\t}\n\n\t/**\n\t * Disables an experiment by name\n\t * @param name name of the experiment to disable\n\t */\n\tdisableExperiment(name: string) {\n\t\tconst experiment = this.getExperiment(name);\n\t\texperiment.enabled = false;\n\t}\n\n\t/**\n\t * Get the options for an experiment by name\n\t * @param name name of experiment to get\n\t */\n\tgetExperiment(name: string): Experiment {\n\t\tif (!this.experiments.has(name)) {\n\t\t\tthis.addExperiment(name);\n\t\t\treturn this.getExperiment(name);\n\t\t}\n\n\t\treturn this.experiments.get(name);\n\t}\n\n\t/**\n\t * Get an array of tuples representing an experiment and it's options\n\t */\n\tgetExperiments(): Array<[string, Experiment]> {\n\t\treturn Array.from(this.experiments.entries());\n\t}\n}\n","import { NgModule, SkipSelf, Optional } from \"@angular/core\";\nimport { ExperimentalService } from \"./experimental.service\";\n\n// either provides a new instance of ExperimentalService, or returns the parent\nexport function EXPERIMENTAL_SERVICE_PROVIDER_FACTORY(parentService: ExperimentalService) {\n\treturn parentService || new ExperimentalService();\n}\n\nexport const EXPERIMENTAL_SERVICE_PROVIDER = {\n\tprovide: ExperimentalService,\n\tdeps: [[new Optional(), new SkipSelf(), ExperimentalService]],\n\tuseFactory: EXPERIMENTAL_SERVICE_PROVIDER_FACTORY\n};\n\n@NgModule({\n\tproviders: [\n\t\tExperimentalService,\n\t\tEXPERIMENTAL_SERVICE_PROVIDER\n\t]\n})\nexport class ExperimentalModule { }\n"],"names":["ExperimentalService","prototype","addExperiment","name","options","enabled","this","experiments","has","set","enableExperiment","getExperiment","disableExperiment","get","getExperiments","Array","from","entries","Injectable","Map","EXPERIMENTAL_SERVICE_PROVIDER_FACTORY","parentService","EXPERIMENTAL_SERVICE_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ExperimentalModule","NgModule","args","providers"],"mappings":"qYAoBCA,EAAAC,UAAAC,cAAA,SAAcC,EAAcC,QAAA,IAAAA,IAAAA,EAAA,CAAuBC,SAAS,IACtDC,KAAKC,YAAYC,IAAIL,IACzBG,KAAKC,YAAYE,IAAIN,EAAMC,IAQ7BJ,EAAAC,UAAAS,iBAAA,SAAiBP,GACGG,KAAKK,cAAcR,GAC3BE,SAAU,GAOtBL,EAAAC,UAAAW,kBAAA,SAAkBT,GACEG,KAAKK,cAAcR,GAC3BE,SAAU,GAOtBL,EAAAC,UAAAU,cAAA,SAAcR,GACb,OAAKG,KAAKC,YAAYC,IAAIL,GAKnBG,KAAKC,YAAYM,IAAIV,IAJ3BG,KAAKJ,cAAcC,GACZG,KAAKK,cAAcR,KAS5BH,EAAAC,UAAAa,eAAA,WACC,OAAOC,MAAMC,KAAKV,KAAKC,YAAYU,Y,oBAnDpCC,EAAAA,aAqDDlB,GArDA,SAAAA,IAKSM,KAAAC,YAAc,IAAIY,ICX3B,SAAgBC,EAAsCC,GACrD,OAAOA,GAAiB,IAAIrB,EAG7B,IAAasB,EAAgC,CAC5CC,QAASvB,EACTwB,KAAM,CAAC,CAAC,IAAIC,EAAAA,SAAY,IAAIC,EAAAA,SAAY1B,IACxC2B,WAAYP,GAGbQ,G,oBAACC,EAAAA,SAAQC,KAAA,CAAC,CACTC,UAAW,CACV/B,EACAsB,OAGgCM,GANlC,SAAAA,K"}