/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-progress-indicator.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('carbon-components-angular/dialog'), require('carbon-components-angular/experimental'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/progress-indicator', ['exports', '@angular/core', '@angular/common', 'carbon-components-angular/dialog', 'carbon-components-angular/experimental', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular']['progress-indicator'] = {}),global.ng.core,global.ng.common,global['carbon-components-angular'].dialog,global['carbon-components-angular'].experimental,global['carbon-components-angular'].icon));
}(this, (function (exports,core,common,dialog,experimental,icon) { 'use strict';

    /**
     * [See demo](../../?path=/story/progress-indicator--basic)
     *
     * <example-url>../../iframe.html?id=progress-indicator--basic</example-url>
     */
    var ProgressIndicator = /** @class */ (function () {
        function ProgressIndicator(experimental$$1) {
            this.experimental = experimental$$1;
            this.stepSelected = new core.EventEmitter();
            this.orientation = "horizontal";
            this.skeleton = false;
            this.spacing = "default";
        }
        ProgressIndicator.skeletonSteps = function (stepCount) {
            var steps = [];
            for (var i = 0; i < stepCount; i++) {
                steps.push({ "state": ["incomplete"] });
            }
            return steps;
        };
        Object.defineProperty(ProgressIndicator.prototype, "current", {
            get: function () {
                return this.steps.findIndex(function (step) { return step.state.includes("current"); });
            },
            set: function (current) {
                this._current = current;
            },
            enumerable: true,
            configurable: true
        });
        ProgressIndicator.prototype.ngOnChanges = function (changes) {
            if (changes.steps || changes.current) {
                this.setProgressIndicatorStates();
            }
        };
        ProgressIndicator.prototype.setProgressIndicatorStates = function () {
            if (this.steps === undefined) {
                return;
            }
            if (this._current === undefined || this._current < 0) {
                for (var i = 0; i < this.steps.length; i++) {
                    this.steps[i].state[0] = "incomplete";
                }
                return;
            }
            if (this._current > this.steps.length - 1) {
                for (var i = 0; i < this.steps.length; i++) {
                    this.steps[i].state[0] = "complete";
                }
                return;
            }
            this.steps[this._current].state[0] = "current";
            for (var i = 0; i < this._current; i++) {
                this.steps[i].state[0] = "complete";
            }
            for (var i = this._current + 1; i < this.steps.length; i++) {
                this.steps[i].state[0] = "incomplete";
            }
        };
        ProgressIndicator.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-progress-indicator",
                        template: "\n\t<ul\n\t\tdata-progress\n\t\tdata-progress-current\n\t\tclass=\"bx--progress\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--skeleton': skeleton,\n\t\t\t'bx--progress--vertical': (orientation === 'vertical'),\n\t\t\t'bx--progress--space-equal': spacing === 'equal' && orientation !== 'vertical'\n\t\t}\">\n\t\t<li\n\t\t\tclass=\"bx--progress-step bx--progress-step--{{step.state[0]}}\"\n\t\t\t*ngFor=\"let step of steps; let i = index\"\n\t\t\t[ngClass]=\"{'bx--progress-step--disabled' : step.disabled}\">\n\t\t\t<div class=\"bx--progress-step-button bx--progress-step-button--unclickable\" role=\"button\" tabindex=\"-1\">\n\t\t\t\t<svg ibmIcon=\"checkmark--outline\" size=\"16\" *ngIf=\"step.state.includes('complete')\"></svg>\n\t\t\t\t<svg *ngIf=\"step.state.includes('current')\">\n\t\t\t\t\t<path d=\"M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0\" ></path>\n\t\t\t\t</svg>\n\t\t\t\t<svg *ngIf=\"step.state.includes('incomplete')\">\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t\t<svg ibmIcon=\"warning\" size=\"16\" *ngIf=\"step.state.includes('error')\" class=\"bx--progress__warning\"></svg>\n\t\t\t\t<p\n\t\t\t\t\tclass=\"bx--progress-label\"\n\t\t\t\t\t*ngIf=\"step.tooltip\"\n\t\t\t\t\t[ibmTooltip]=\"step.tooltip.content\"\n\t\t\t\t\t[trigger]=\"step.tooltip.trigger\"\n\t\t\t\t\t[placement]=\"step.tooltip.placement\"\n\t\t\t\t\t[title]=\"step.tooltip.title\"\n\t\t\t\t\t[gap]=\"step.tooltip.gap\"\n\t\t\t\t\t[appendInline]=\"step.tooltip.appendInline\"\n\t\t\t\t\t[data]=\"step.tooltip.data\"\n\t\t\t\t\t(click)=\"stepSelected.emit({ step: step, index: i })\">\n\t\t\t\t\t{{step.text}}\n\t\t\t\t</p>\n\t\t\t\t<p class=\"bx--progress-label\" *ngIf=\"!step.tooltip\" (click)=\"stepSelected.emit({ step: step, index: i })\">{{step.text}}</p>\n\t\t\t\t<p *ngIf=\"step.optionalText\" class=\"bx--progress-optional\">{{step.optionalText}}</p>\n\t\t\t\t<span class=\"bx--progress-line\"></span>\n\t\t\t</div>\n\t\t</li>\n\t</ul>\n\t"
                    }] }
        ];
        /** @nocollapse */
        ProgressIndicator.ctorParameters = function () {
            return [
                { type: experimental.ExperimentalService }
            ];
        };
        ProgressIndicator.propDecorators = {
            stepSelected: [{ type: core.Output }],
            steps: [{ type: core.Input }],
            orientation: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            spacing: [{ type: core.Input }],
            current: [{ type: core.Input }]
        };
        return ProgressIndicator;
    }());

    var ProgressIndicatorModule = /** @class */ (function () {
        function ProgressIndicatorModule() {
        }
        ProgressIndicatorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ProgressIndicator
                        ],
                        exports: [
                            ProgressIndicator
                        ],
                        imports: [
                            common.CommonModule,
                            dialog.DialogModule,
                            experimental.ExperimentalModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return ProgressIndicatorModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ProgressIndicator = ProgressIndicator;
    exports.ProgressIndicatorModule = ProgressIndicatorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-progress-indicator.umd.js.map