{"version":3,"file":"carbon-components-angular-checkbox.umd.js.map","sources":["ng://carbon-components-angular/checkbox/checkbox.component.ts","ng://carbon-components-angular/checkbox/checkbox.module.ts","ng://carbon-components-angular/checkbox/carbon-components-angular-checkbox.ts"],"sourcesContent":["import {\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tEventEmitter,\n\tInput,\n\tOutput,\n\tViewChild,\n\tHostBinding,\n\tHostListener\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\nimport { CheckboxValue } from \"./checkbox.types\";\n\n/**\n * Defines the set of states for a checkbox component.\n */\nexport enum CheckboxState {\n\tInit,\n\tIndeterminate,\n\tChecked,\n\tUnchecked\n}\n\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\nexport class CheckboxChange {\n\t/**\n\t * Contains the `Checkbox` that has been changed.\n\t */\n\tsource: Checkbox;\n\t/**\n\t * The state of the `Checkbox` encompassed in the `CheckboxChange` class.\n\t */\n\tchecked: boolean;\n}\n\n/**\n * [See demo](../../?path=/story/checkbox--basic)\n *\n * <example-url>../../iframe.html?id=checkbox--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-checkbox\",\n\ttemplate: `\n\t\t<div class=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t[attr.aria-checked]=\"(indeterminate ? 'mixed' : checked)\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"bx--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'bx--visually-hidden' : hideLabel}\" class=\"bx--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: Checkbox,\n\t\t\tmulti: true\n\t\t}\n\t],\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Checkbox implements ControlValueAccessor, AfterViewInit {\n\t/**\n\t * Variable used for creating unique ids for checkbox components.\n\t */\n\tstatic checkboxCount = 0;\n\n\t/**\n\t * Size of the checkbox.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() size: \"sm\" | \"md\" = \"md\";\n\t/**\n\t * Set to `true` for checkbox to be rendered with nested styles.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() nested: boolean;\n\t/**\n\t * Set to `true` for checkbox to be rendered without any classes on the host element.\n\t */\n\t@Input() inline = false;\n\t/**\n\t * Set to `true` for a disabled checkbox.\n\t */\n\t@Input() disabled = false;\n\t/**\n\t * Set to `true` for a loading checkbox.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Set to `true` to hide the checkbox labels.\n\t */\n\t@Input() hideLabel = false;\n\t/**\n\t * Sets the name attribute on the `input` element.\n\t */\n\t@Input() name: string;\n\t/**\n\t * The unique id for the checkbox component.\n\t */\n\t@Input() id = `checkbox-${Checkbox.checkboxCount}`;\n\t/**\n\t * Reflects the required attribute of the `input` element.\n\t */\n\t@Input() required: boolean;\n\t/**\n\t * Sets the value attribute on the `input` element.\n\t */\n\t@Input() value: CheckboxValue;\n\t/**\n\t * Used to set the `aria-label` attribute on the input element.\n\t *\n\t * @deprecated since v4 use the `ariaLabel` input instead\n\t */\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"aria-label\") set ariaLabel(value: string) {\n\t\tthis._ariaLabel = value;\n\t}\n\n\tget ariaLabel() {\n\t\treturn this._ariaLabel;\n\t}\n\n\t// TODO: drop the `_`\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"ariaLabel\") _ariaLabel = \"\";\n\n\t/**\n\t * Used to set the `aria-labelledby` attribute on the input element.\n\t *\n\t * @deprecated since v4 use the `ariaLabelledby` input instead\n\t */\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"aria-labelledby\") set ariaLabelledby(value: string) {\n\t\tthis._ariaLabelledby = value;\n\t}\n\n\tget ariaLabelledby() {\n\t\treturn this._ariaLabelledby;\n\t}\n\n\t// TODO: drop the `_`\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"ariaLabelledby\") _ariaLabelledby: string;\n\n\t/**\n\t * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n\t *\n\t * Allows double binding with the `indeterminateChange` Output.\n\t */\n\t@Input() set indeterminate(indeterminate: boolean) {\n\t\tif (indeterminate === this._indeterminate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._indeterminate = indeterminate;\n\n\t\tif (this._indeterminate) {\n\t\t\tthis.transitionCheckboxState(CheckboxState.Indeterminate);\n\t\t} else {\n\t\t\tthis.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n\t\t}\n\n\t\tthis.inputCheckbox.nativeElement.indeterminate = indeterminate;\n\t\tthis.changeDetectorRef.markForCheck();\n\t\tthis.indeterminateChange.emit(this._indeterminate);\n\t}\n\n\t/**\n\t * Reflects whether the checkbox state is indeterminate.\n\t */\n\tget indeterminate() {\n\t\treturn this._indeterminate;\n\t}\n\n\t/**\n\t * Sets the `checked` state. `true` for checked, `false` for unchecked\n\t *\n\t * Allows double binding with the `checkedChange` Output.\n\t */\n\t@Input() set checked (checked: boolean) {\n\t\tthis.setChecked(checked, false);\n\t}\n\n\t/**\n\t * Returns value `true` if state is selected for the checkbox.\n\t */\n\tget checked() {\n\t\treturn this._checked;\n\t}\n\n\t@HostBinding(\"class.bx--checkbox-wrapper\") get checkboxWrapperClass() {\n\t\treturn !this.inline;\n\t}\n\t@HostBinding(\"class.bx--form-item\") get formItemClass() {\n\t\treturn !this.inline;\n\t}\n\n\t/**\n\t * Emits click event.\n\t */\n\t@Output() click = new EventEmitter<void>();\n\t/**\n\t * Emits event notifying other classes when a change in state occurs on a checkbox after a\n\t * click.\n\t *\n\t * @deprecated since v4 use `checked` and `checkedChange` instead\n\t */\n\t@Output() change = new EventEmitter<any>();\n\n\t/**\n\t * Emits an event when the value of the checkbox changes.\n\t *\n\t * Allows double biding with the `checked` Input.\n\t */\n\t@Output() checkedChange = new EventEmitter<boolean>();\n\n\t/**\n\t * Emits event notifying other classes when a change in state occurs specifically\n\t * on an indeterminate checkbox.\n\t */\n\t@Output() indeterminateChange = new EventEmitter<boolean>();\n\n\t/**\n\t * Set to `true` if the input checkbox is selected (or checked).\n\t */\n\t_checked = false;\n\t/**\n\t * Set to `true` if the input checkbox is in state indeterminate.\n\t */\n\t_indeterminate = false;\n\n\t/**\n\t * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n\t */\n\tcurrentCheckboxState = CheckboxState.Init;\n\n\t/**\n\t * Maintains a reference to the view DOM element of the `Checkbox`.\n\t */\n\t// @ts-ignore\n\t@ViewChild(\"inputCheckbox\", { static: false }) inputCheckbox: ElementRef;\n\n\t/**\n\t * Creates an instance of `Checkbox`.\n\t */\n\tconstructor(protected changeDetectorRef: ChangeDetectorRef) {\n\t\tCheckbox.checkboxCount++;\n\t}\n\n\t/**\n\t * Toggle the selected state of the checkbox.\n\t */\n\tpublic toggle() {\n\t\t// Flip checked and reset indeterminate\n\t\tthis.setChecked(!this.checked, true);\n\t}\n\n\t/**\n\t * Writes a value from `ngModel` to the component.\n\t *\n\t * In this case the value is the `checked` property.\n\t *\n\t * @param value boolean, corresponds to the `checked` property.\n\t */\n\tpublic writeValue(value: any) {\n\t\t// Set checked and reset indeterminate\n\t\tthis.setChecked(!!value, true);\n\t}\n\n\t/**\n\t * Sets a method in order to propagate changes back to the form.\n\t */\n\tpublic registerOnChange(fn: any) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\t/**\n\t * Registers a callback to be triggered when the control has been touched.\n\t * @param fn Callback to be triggered when the checkbox is touched.\n\t */\n\tpublic registerOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\t@HostListener(\"focusout\")\n\tfocusOut() {\n\t\tthis.onTouched();\n\t}\n\n\t/**\n\t * Executes on the event of a change within `Checkbox` to block propagation.\n\t */\n\tonChange(event: Event) {\n\t\tevent.stopPropagation();\n\t}\n\n\t/**\n\t * Handles click events on the `Checkbox` and emits changes to other classes.\n\t */\n\tonClick(event: Event) {\n\t\tif (this.click.observers.length) {\n\t\t\t// Disable default checkbox activation behavior which flips checked and resets indeterminate.\n\t\t\t// This allows the parent component to control the checked/indeterminate properties.\n\t\t\tevent.preventDefault();\n\t\t\tthis.click.emit();\n\t\t\treturn;\n\t\t}\n\t\tif (!this.disabled) {\n\t\t\tthis.toggle();\n\t\t\tthis.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n\t\t\tthis.emitChangeEvent();\n\t\t}\n\t}\n\n\n\t/**\n\t * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n\t */\n\tonTouched: () => any = () => {};\n\n\t/**\n\t * Handles changes between checkbox states.\n\t */\n\ttransitionCheckboxState(newState: CheckboxState) {\n\t\tthis.currentCheckboxState = newState;\n\t}\n\n\t/**\n\t * Creates instance of `CheckboxChange` used to propagate the change event.\n\t */\n\temitChangeEvent() {\n\t\t/* begin deprecation */\n\t\tlet event = new CheckboxChange();\n\t\tevent.source = this;\n\t\tevent.checked = this.checked;\n\t\tthis.change.emit(event);\n\t\t/* end deprecation */\n\n\t\tthis.checkedChange.emit(this.checked);\n\t\tthis.propagateChange(this.checked);\n\t}\n\n\t/**\n\t * Updates the checkbox if it is in the indeterminate state.\n\t */\n\tngAfterViewInit() {\n\t\tif (this.indeterminate) {\n\t\t\tthis.inputCheckbox.nativeElement.indeterminate = true;\n\t\t}\n\t}\n\n\t/**\n\t * Method set in `registerOnChange` to propagate changes back to the form.\n\t */\n\tpropagateChange = (_: any) => {};\n\n\t/**\n\t * Sets checked state and optionally resets indeterminate state.\n\t */\n\tprivate setChecked(checked: boolean, resetIndeterminate: boolean) {\n\t\tif (checked === this._checked) {\n\t\t\treturn;\n\t\t}\n\t\tthis._checked = checked;\n\t\t// Reset indeterminate if requested\n\t\tif (resetIndeterminate && this._indeterminate) {\n\t\t\tthis._indeterminate = false;\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tthis.indeterminateChange.emit(this._indeterminate);\n\t\t\t});\n\t\t}\n\t\tthis.changeDetectorRef.markForCheck();\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { Checkbox } from \"./checkbox.component\";\n\n@NgModule({\n\tdeclarations: [\n\t\tCheckbox\n\t],\n\texports: [\n\t\tCheckbox\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule\n\t]\n})\nexport class CheckboxModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["CheckboxState","EventEmitter","Component","NG_VALUE_ACCESSOR","ChangeDetectionStrategy","ChangeDetectorRef","Input","HostBinding","Output","ViewChild","HostListener","NgModule","CommonModule","FormsModule"],"mappings":"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"}
