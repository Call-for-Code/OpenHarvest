{"version":3,"sources":["ng://carbon-components-angular/inline-loading/inline-loading.component.ts","ng://carbon-components-angular/inline-loading/inline-loading.module.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding\n} from \"@angular/core\";\n\nexport enum InlineLoadingState {\n\t/** It hides the whole component. */\n\tHidden = \"hidden\",\n\t/** It shows the `loadingText` but no loading animation. */\n\tInactive = \"inactive\",\n\t/** It shows the `loadingText` with loading animation. */\n\tActive = \"active\",\n\t/** It shows the `successText` with a success state. */\n\tFinished = \"finished\",\n\t/** It shows the `errorText` with an error state. */\n\tError = \"error\"\n}\n\n/**\n * [See demo](../../?path=/story/inline-loading--basic)\n *\n * <example-url>../../iframe.html?id=inline-loading--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-inline-loading\",\n\ttemplate: `\n\t\t<div *ngIf=\"state !== InlineLoadingState.Hidden\"\n\t\t\tclass=\"bx--inline-loading__animation\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\t\tclass=\"bx--loading bx--loading--small\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--loading--stop': state === InlineLoadingState.Inactive\n\t\t\t\t}\">\n\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n\t\t\t\t\t<circle class=\"bx--loading__background\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t\t<circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Finished\"\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading__checkmark-container\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Error\"\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading--error\">\n\t\t\t</svg>\n\t\t</div>\n\t\t<p\n\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\tclass=\"bx--inline-loading__text\">{{loadingText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Finished\" class=\"bx--inline-loading__text\">{{successText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Error\" class=\"bx--inline-loading__text\">{{errorText}}</p>\n\t`\n})\nexport class InlineLoading {\n\tInlineLoadingState = InlineLoadingState;\n\n\t/**\n\t * Specify the text description for the loading state.\n\t */\n\t@Input() state: InlineLoadingState | string = InlineLoadingState.Active;\n\t/**\n\t * Specify the text description for the loading state.\n\t */\n\t@Input() loadingText: string;\n\t/**\n\t * Specify the text description for the success state.\n\t */\n\t@Input() successText: string;\n\t/**\n\t * Provide a delay for the `setTimeout` for success.\n\t */\n\t@Input() successDelay = 1500;\n\t/**\n\t * Specify the text description for the error state.\n\t */\n\t@Input() errorText: string;\n\t/**\n\t * set to `false` to stop the loading animation\n\t */\n\t@Input() get isActive() {\n\t\treturn this.state === InlineLoadingState.Active;\n\t}\n\tset isActive(active: boolean) {\n\t\tthis.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;\n\t}\n\n\t/**\n\t * Returns value `true` if the component is in the success state.\n\t */\n\t@Input() get success() {\n\t\treturn this.state === InlineLoadingState.Finished;\n\t}\n\t/**\n\t * Set the component's state to match the parameter and emits onSuccess if it exits.\n\t */\n\tset success(success: boolean) {\n\t\tthis.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;\n\t\tif (this.state === InlineLoadingState.Finished) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.onSuccess.emit();\n\t\t\t}, this.successDelay);\n\t\t}\n\t}\n\n\t/**\n\t * Emits event after the success state is active\n\t */\n\t@Output() onSuccess: EventEmitter<any> = new EventEmitter();\n\n\t@HostBinding(\"class.bx--inline-loading\") loadingClass = true;\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { InlineLoading } from \"./inline-loading.component\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n\n@NgModule({\n\tdeclarations: [InlineLoading],\n\texports: [InlineLoading],\n\timports: [CommonModule, IconModule]\n})\nexport class InlineLoadingModule { }\n"],"names":["InlineLoadingState","InlineLoading","Object","defineProperty","prototype","this","state","Active","active","Inactive","Finished","success","_this","Error","setTimeout","onSuccess","emit","successDelay","Component","args","selector","template","Input","Output","HostBinding","EventEmitter","loadingClass","NgModule","declarations","exports","imports","CommonModule","IconModule","InlineLoadingModule"],"mappings":"ijBAQA,IAAYA,GAAAA,EAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAE7B,OAAA,SAEAA,EAAA,SAAA,WAEAA,EAAA,OAAA,SAEAA,EAAA,SAAA,WAEAA,EAAA,MAAA,QAQD,IAAAC,GA8DCC,OAAAC,eAAaF,EAAAG,UAAA,WAAQ,C,IAArB,WACC,OAAOC,KAAKC,QAAUN,EAAAA,mBAAmBO,Q,IAE1C,SAAaC,GACZH,KAAKC,MAAQE,EAASR,EAAAA,mBAAmBO,OAASP,EAAAA,mBAAmBS,U,gCAMtEP,OAAAC,eAAaF,EAAAG,UAAA,UAAO,C,IAApB,WACC,OAAOC,KAAKC,QAAUN,EAAAA,mBAAmBU,U,IAK1C,SAAYC,GAAZ,IAAAC,EAAAP,KACCA,KAAKC,MAAQK,EAAUX,EAAAA,mBAAmBU,SAAWV,EAAAA,mBAAmBa,MACpER,KAAKC,QAAUN,EAAAA,mBAAmBU,UACrCI,WAAW,WACVF,EAAKG,UAAUC,QACbX,KAAKY,e,oDAnFVC,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,qBACVC,SAAU,o1C,+BAwCTC,EAAAA,Q,mBAIAA,EAAAA,Q,mBAIAA,EAAAA,Q,oBAIAA,EAAAA,Q,iBAIAA,EAAAA,Q,gBAIAA,EAAAA,Q,eAUAA,EAAAA,Q,iBAkBAC,EAAAA,S,oBAEAC,EAAAA,YAAWL,KAAA,CAAC,+BACdlB,GA7FA,SAAAA,IAqCCI,KAAAL,mBAAqBA,EAAAA,mBAKZK,KAAAC,MAAqCN,EAAAA,mBAAmBO,OAYxDF,KAAAY,aAAe,KAoCdZ,KAAAU,UAA+B,IAAIU,EAAAA,aAEJpB,KAAAqB,cAAe,E,2BC/GxDC,EAAAA,SAAQR,KAAA,CAAC,CACTS,aAAc,CAAC3B,GACf4B,QAAS,CAAC5B,GACV6B,QAAS,CAACC,EAAAA,aAAcC,EAAAA,gBAEUC,GALnC,SAAAA,K"}