/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-inline-loading.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/inline-loading', ['exports', '@angular/core', '@angular/common', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular']['inline-loading'] = {}),global.ng.core,global.ng.common,global['carbon-components-angular'].icon));
}(this, (function (exports,core,common,icon) { 'use strict';

    (function (InlineLoadingState) {
        /** It hides the whole component. */
        InlineLoadingState["Hidden"] = "hidden";
        /** It shows the `loadingText` but no loading animation. */
        InlineLoadingState["Inactive"] = "inactive";
        /** It shows the `loadingText` with loading animation. */
        InlineLoadingState["Active"] = "active";
        /** It shows the `successText` with a success state. */
        InlineLoadingState["Finished"] = "finished";
        /** It shows the `errorText` with an error state. */
        InlineLoadingState["Error"] = "error";
    })(exports.InlineLoadingState || (exports.InlineLoadingState = {}));
    /**
     * [See demo](../../?path=/story/inline-loading--basic)
     *
     * <example-url>../../iframe.html?id=inline-loading--basic</example-url>
     */
    var InlineLoading = /** @class */ (function () {
        function InlineLoading() {
            this.InlineLoadingState = exports.InlineLoadingState;
            /**
             * Specify the text description for the loading state.
             */
            this.state = exports.InlineLoadingState.Active;
            /**
             * Provide a delay for the `setTimeout` for success.
             */
            this.successDelay = 1500;
            /**
             * Emits event after the success state is active
             */
            this.onSuccess = new core.EventEmitter();
            this.loadingClass = true;
        }
        Object.defineProperty(InlineLoading.prototype, "isActive", {
            /**
             * set to `false` to stop the loading animation
             */
            get: function () {
                return this.state === exports.InlineLoadingState.Active;
            },
            set: function (active) {
                this.state = active ? exports.InlineLoadingState.Active : exports.InlineLoadingState.Inactive;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlineLoading.prototype, "success", {
            /**
             * Returns value `true` if the component is in the success state.
             */
            get: function () {
                return this.state === exports.InlineLoadingState.Finished;
            },
            /**
             * Set the component's state to match the parameter and emits onSuccess if it exits.
             */
            set: function (success) {
                var _this = this;
                this.state = success ? exports.InlineLoadingState.Finished : exports.InlineLoadingState.Error;
                if (this.state === exports.InlineLoadingState.Finished) {
                    setTimeout(function () {
                        _this.onSuccess.emit();
                    }, this.successDelay);
                }
            },
            enumerable: true,
            configurable: true
        });
        InlineLoading.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-inline-loading",
                        template: "\n\t\t<div *ngIf=\"state !== InlineLoadingState.Hidden\"\n\t\t\tclass=\"bx--inline-loading__animation\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\t\tclass=\"bx--loading bx--loading--small\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--loading--stop': state === InlineLoadingState.Inactive\n\t\t\t\t}\">\n\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n\t\t\t\t\t<circle class=\"bx--loading__background\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t\t<circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Finished\"\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading__checkmark-container\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Error\"\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading--error\">\n\t\t\t</svg>\n\t\t</div>\n\t\t<p\n\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\tclass=\"bx--inline-loading__text\">{{loadingText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Finished\" class=\"bx--inline-loading__text\">{{successText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Error\" class=\"bx--inline-loading__text\">{{errorText}}</p>\n\t"
                    }] }
        ];
        InlineLoading.propDecorators = {
            state: [{ type: core.Input }],
            loadingText: [{ type: core.Input }],
            successText: [{ type: core.Input }],
            successDelay: [{ type: core.Input }],
            errorText: [{ type: core.Input }],
            isActive: [{ type: core.Input }],
            success: [{ type: core.Input }],
            onSuccess: [{ type: core.Output }],
            loadingClass: [{ type: core.HostBinding, args: ["class.bx--inline-loading",] }]
        };
        return InlineLoading;
    }());

    var InlineLoadingModule = /** @class */ (function () {
        function InlineLoadingModule() {
        }
        InlineLoadingModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [InlineLoading],
                        exports: [InlineLoading],
                        imports: [common.CommonModule, icon.IconModule]
                    },] }
        ];
        return InlineLoadingModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.InlineLoading = InlineLoading;
    exports.InlineLoadingModule = InlineLoadingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-inline-loading.umd.js.map