/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-file-uploader.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('carbon-components-angular/i18n'), require('@angular/core'), require('@angular/common'), require('carbon-components-angular/button'), require('carbon-components-angular/loading'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/file-uploader', ['exports', '@angular/forms', 'carbon-components-angular/i18n', '@angular/core', '@angular/common', 'carbon-components-angular/button', 'carbon-components-angular/loading', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular']['file-uploader'] = {}),global.ng.forms,global['carbon-components-angular'].i18n,global.ng.core,global.ng.common,global['carbon-components-angular'].button,global['carbon-components-angular'].loading,global['carbon-components-angular'].icon));
}(this, (function (exports,forms,i18n,core,common,button,loading,icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    var noop = function () { };
    /**
     * [See demo](../../?path=/story/file-uploader--basic)
     *
     * <example-url>../../iframe.html?id=file-uploader--basic</example-url>
     */
    var FileUploader = /** @class */ (function () {
        function FileUploader(i18n$$1) {
            this.i18n = i18n$$1;
            /**
             * Accessible text for the button that opens the upload window.
             *
             * Defaults to the `FILE_UPLOADER.OPEN` value from the i18n service
             */
            this.buttonText = this.i18n.get().FILE_UPLOADER.OPEN;
            /**
             * Type set for button
             */
            this.buttonType = "primary";
            /**
             * Specify the types of files that the input should be able to receive
             */
            this.accept = [];
            /**
             * Set to `false` to tell the component to only accept a single file on upload.
             *
             * Defaults to `true`. Accepts multiple files.
             */
            this.multiple = true;
            /**
             * Set to `true` for a loading file uploader.
             */
            this.skeleton = false;
            /**
             * Set to `true` to enable drag and drop.
             */
            this.drop = false;
            /**
             * Provides a unique id for the underlying <input> node
             */
            this.fileUploaderId = "file-uploader-" + FileUploader.fileUploaderCount;
            /**
             * The list of files that have been submitted to be uploaded
             */
            this.files = new Set();
            /**
             * Set to `true` to disable upload button
             */
            this.disabled = false;
            this.filesChange = new core.EventEmitter();
            /**
             * Controls the state of the drag and drop file container
             */
            this.dragOver = false;
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
            FileUploader.fileUploaderCount++;
        }
        Object.defineProperty(FileUploader.prototype, "value", {
            /**
             * Specifies the property to be used as the return value to `ngModel`
             */
            get: function () {
                return this.files;
            },
            set: function (v) {
                if (v !== this.files) {
                    this.files = v;
                    this.onChangeCallback(v);
                }
            },
            enumerable: true,
            configurable: true
        });
        FileUploader.prototype.onBlur = function () {
            this.onTouchedCallback();
        };
        Object.defineProperty(FileUploader.prototype, "fileList", {
            get: function () {
                return Array.from(this.fileInput.nativeElement.files);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Propagates the injected `value`.
         */
        FileUploader.prototype.writeValue = function (value) {
            if (value !== this.value) {
                this.files = value;
            }
        };
        FileUploader.prototype.createFileItem = function (file) {
            return {
                uploaded: false,
                state: "edit",
                invalid: false,
                invalidText: "",
                file: file
            };
        };
        FileUploader.prototype.onFilesAdded = function () {
            var e_1, _a;
            if (!this.multiple) {
                this.files.clear();
            }
            try {
                for (var _b = __values(this.fileList), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var file = _c.value;
                    var fileItem = this.createFileItem(file);
                    this.files.add(fileItem);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            this.filesChange.emit(this.files);
            this.value = this.files;
        };
        FileUploader.prototype.onDragOver = function (event) {
            event.stopPropagation();
            event.preventDefault();
            this.dragOver = true;
        };
        FileUploader.prototype.onDragLeave = function (event) {
            event.stopPropagation();
            event.preventDefault();
            this.dragOver = false;
        };
        FileUploader.prototype.onDrop = function (event) {
            var _this = this;
            event.stopPropagation();
            event.preventDefault();
            var transferredFiles = Array.from(event.dataTransfer.files);
            transferredFiles.filter(function (_a) {
                var name = _a.name, type = _a.type;
                // Get the file extension and add a "." to the beginning.
                var fileExtension = name.split(".").pop().replace(/^/, ".");
                // Check if the accept array contains the mime type or extension of the file.
                return _this.accept.includes(type) || _this.accept.includes(fileExtension) || !_this.accept.length;
            }).forEach(function (file) {
                if (!_this.files.size || _this.multiple) {
                    var fileItem = _this.createFileItem(file);
                    _this.files.add(fileItem);
                }
            });
            this.filesChange.emit(this.files);
            this.value = this.files;
            this.dragOver = false;
        };
        FileUploader.prototype.removeFile = function (fileItem) {
            if (this.files) {
                this.files.delete(fileItem);
            }
            this.fileInput.nativeElement.value = "";
            this.filesChange.emit(this.files);
        };
        FileUploader.prototype.isTemplate = function (value) {
            return value instanceof core.TemplateRef;
        };
        /**
         * Registers the injected function to control the touch use of the `FileUploader`.
         */
        FileUploader.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        /**
         * Sets a method in order to propagate changes back to the form.
         */
        FileUploader.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        /**
         * Counter used to create unique ids for file-uploader components
         */
        FileUploader.fileUploaderCount = 0;
        FileUploader.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-file-uploader",
                        template: "\n\t\t<ng-container *ngIf=\"!skeleton; else skeletonTemplate\">\n\t\t\t<label [for]=\"fileUploaderId\" class=\"bx--file--label\">{{title}}</label>\n\t\t\t<p class=\"bx--label-description\">{{description}}</p>\n\t\t\t<div class=\"bx--file\">\n\t\t\t\t<label\n\t\t\t\t\t*ngIf=\"drop\"\n\t\t\t\t\tclass=\"bx--file-browse-btn\"\n\t\t\t\t\t(keyup.enter)=\"fileInput.click()\"\n\t\t\t\t\t(keyup.space)=\"fileInput.click()\"\n\t\t\t\t\t[ngClass]=\"{'bx--file-browse-btn--disabled': disabled}\"\n\t\t\t\t\ttabindex=\"0\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"bx--file__drop-container\"\n\t\t\t\t\t\t[ngClass]=\"{'bx--file__drop-container--drag-over': dragOver}\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\t(click)=\"fileInput.click()\"\n\t\t\t\t\t\t[attr.for]=\"fileUploaderId\"\n\t\t\t\t\t\t(dragover)=\"onDragOver($event)\"\n\t\t\t\t\t\t(dragleave)=\"onDragLeave($event)\"\n\t\t\t\t\t\t(drop)=\"onDrop($event)\">\n\t\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(dropText)\">{{dropText}}</ng-container>\n\t\t\t\t\t\t<ng-template *ngIf=\"isTemplate(dropText)\" [ngTemplateOutlet]=\"dropText\"></ng-template>\n\t\t\t\t\t</div>\n\t\t\t\t</label>\n\t\t\t\t<button\n\t\t\t\t\t*ngIf=\"!drop\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t[ibmButton]=\"buttonType\"\n\t\t\t\t\t(click)=\"fileInput.click()\"\n\t\t\t\t\t[attr.for]=\"fileUploaderId\"\n\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t[disabled]=\"disabled\">\n\t\t\t\t\t{{buttonText}}\n\t\t\t\t</button>\n\t\t\t\t<input\n\t\t\t\t\t#fileInput\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\tclass=\"bx--file-input\"\n\t\t\t\t\t[accept]=\"accept\"\n\t\t\t\t\t[id]=\"fileUploaderId\"\n\t\t\t\t\t[multiple]=\"multiple\"\n\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t(change)=\"onFilesAdded()\"\n\t\t\t\t\t[disabled]=\"disabled\"/>\n\t\t\t\t<div class=\"bx--file-container\">\n\t\t\t\t\t<ng-container *ngFor=\"let fileItem of files\">\n\t\t\t\t\t\t<ibm-file [fileItem]=\"fileItem\" (remove)=\"removeFile(fileItem)\"></ibm-file>\n\t\t\t\t\t\t<div *ngIf=\"fileItem.invalid\" class=\"bx--form-requirement\">\n\t\t\t\t\t\t\t{{fileItem.invalidText}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ng-container>\n\n\t\t<ng-template #skeletonTemplate>\n\t\t\t<div class=\"bx--skeleton__text\" style=\"width: 100px\"></div>\n\t\t\t<div class=\"bx--skeleton__text\" style=\"width: 225px\"></div>\n\t\t\t<button ibmButton skeleton=\"true\"></button>\n\t\t</ng-template>\n\t",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: FileUploader,
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        FileUploader.ctorParameters = function () {
            return [
                { type: i18n.I18n }
            ];
        };
        FileUploader.propDecorators = {
            buttonText: [{ type: core.Input }],
            buttonType: [{ type: core.Input }],
            title: [{ type: core.Input }],
            description: [{ type: core.Input }],
            accept: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            size: [{ type: core.Input }],
            drop: [{ type: core.Input }],
            dropText: [{ type: core.Input }],
            fileUploaderId: [{ type: core.Input }],
            fileInput: [{ type: core.ViewChild, args: ["fileInput", { static: false },] }],
            files: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            filesChange: [{ type: core.Output }]
        };
        return FileUploader;
    }());

    var FileComponent = /** @class */ (function () {
        function FileComponent(i18n$$1) {
            this.i18n = i18n$$1;
            /**
             * Accessible translations for the close and complete icons
             */
            this.translations = this.i18n.get().FILE_UPLOADER;
            this.remove = new core.EventEmitter();
            this.selectedFile = true;
        }
        Object.defineProperty(FileComponent.prototype, "isInvalidText", {
            get: function () {
                return this.fileItem.invalidText;
            },
            enumerable: true,
            configurable: true
        });
        FileComponent.prototype.ngOnDestroy = function () {
            this.remove.emit();
        };
        FileComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-file",
                        template: "\n\t\t<p class=\"bx--file-filename\">{{fileItem.file.name}}</p>\n\t\t<span\n\t\t\t*ngIf=\"fileItem.state === 'edit'\"\n\t\t\tclass=\"bx--file__state-container\"\n\t\t\t(click)=\"remove.emit()\"\n\t\t\t(keyup.enter)=\"remove.emit()\"\n\t\t\t(keyup.space)=\"remove.emit()\"\n\t\t\ttabindex=\"0\">\n\t\t\t<svg\n\t\t\t\t*ngIf=\"isInvalidText\"\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tclass=\"bx--file--invalid\"\n\t\t\t\tsize=\"16\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"close\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--file-close\"\n\t\t\t\t[ariaLabel]=\"translations.REMOVE_BUTTON\">\n\t\t\t</svg>\n\t\t</span>\n\t\t<span *ngIf=\"fileItem.state === 'upload'\">\n\t\t\t<div class=\"bx--inline-loading__animation\">\n\t\t\t\t<ibm-loading size=\"sm\"></ibm-loading>\n\t\t\t</div>\n\t\t</span>\n\t\t<span\n\t\t\t*ngIf=\"fileItem.state === 'complete'\"\n\t\t\tclass=\"bx--file__state-container\"\n\t\t\ttabindex=\"0\">\n\n\t\t\t<svg\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--file-complete\"\n\t\t\t\t[ariaLabel]=\"translations.CHECKMARK\">\n\t\t\t</svg>\n\t\t</span>\n\t"
                    }] }
        ];
        /** @nocollapse */
        FileComponent.ctorParameters = function () {
            return [
                { type: i18n.I18n }
            ];
        };
        FileComponent.propDecorators = {
            translations: [{ type: core.Input }],
            fileItem: [{ type: core.Input }],
            remove: [{ type: core.Output }],
            selectedFile: [{ type: core.HostBinding, args: ["class.bx--file__selected-file",] }],
            isInvalidText: [{ type: core.HostBinding, args: ["class.bx--file__selected-file--invalid",] }]
        };
        return FileComponent;
    }());

    var FileUploaderModule = /** @class */ (function () {
        function FileUploaderModule() {
        }
        FileUploaderModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FileUploader, FileComponent],
                        exports: [FileUploader, FileComponent],
                        imports: [
                            common.CommonModule,
                            button.ButtonModule,
                            loading.LoadingModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return FileUploaderModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FileUploader = FileUploader;
    exports.FileComponent = FileComponent;
    exports.FileUploaderModule = FileUploaderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-file-uploader.umd.js.map