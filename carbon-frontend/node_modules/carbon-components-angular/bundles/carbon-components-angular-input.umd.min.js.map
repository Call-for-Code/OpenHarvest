{"version":3,"sources":["ng://carbon-components-angular/input/input.directive.ts","ng://carbon-components-angular/input/text-area.directive.ts","ng://carbon-components-angular/input/label.component.ts","ng://carbon-components-angular/input/input.module.ts"],"sourcesContent":["import { Directive, HostBinding, Input } from \"@angular/core\";\n\n/**\n * A directive for applying styling to an input element.\n *\n * Example:\n *\n * ```html\n * <input ibmText/>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.\n */\n@Directive({\n\tselector: \"[ibmText]\"\n})\nexport class TextInput {\n\t/**\n\t * `light` or `dark` input theme\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\n\t/**\n\t * Input field render size\n\t */\n\t@Input() size: \"sm\" | \"md\" | \"xl\" = \"md\";\n\n\t@HostBinding(\"class.bx--text-input\") inputClass = true;\n\t@HostBinding(\"class.bx--text-input--xl\") get isSizeXl() {\n\t\treturn this.size === \"xl\";\n\t}\n\t@HostBinding(\"class.bx--text-input--sm\") get isSizeSm() {\n\t\treturn this.size === \"sm\";\n\t}\n\t@HostBinding(\"class.bx--text-input--invalid\") @Input() invalid = false;\n\t@HostBinding(\"class.bx--skeleton\") @Input() skeleton = false;\n\t@HostBinding(\"class.bx--text-input--light\") get isLightTheme() {\n\t\treturn this.theme === \"light\";\n\t}\n}\n","import { Directive, HostBinding, Input } from \"@angular/core\";\n\n/**\n * A directive for applying styling to a textarea element.\n *\n * Example:\n *\n * ```html\n * <textarea ibmTextArea></textarea>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.\n */\n@Directive({\n\tselector: \"[ibmTextArea]\"\n})\nexport class TextArea {\n\t/**\n\t * `light` or `dark` input theme\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\n\t@HostBinding(\"class.bx--text-area\") baseClass = true;\n\t@HostBinding(\"class.bx--text-area--invalid\") @Input() invalid = false;\n\t@HostBinding(\"class.bx--skeleton\") @Input() skeleton = false;\n\t@HostBinding(\"class.bx--text-area--light\") get isLightTheme() {\n\t\treturn this.theme === \"light\";\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tAfterViewInit,\n\tElementRef,\n\tHostBinding,\n\tTemplateRef,\n\tViewChild,\n\tContentChild,\n\tAfterContentInit\n} from \"@angular/core\";\n\nimport { TextArea } from \"./text-area.directive\";\n\n/**\n * [See demo](../../?path=/story/input--label)\n *\n * ```html\n * <ibm-label labelState=\"success\">\n * \t<label label>Field with success</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n *\n * <ibm-label labelState=\"warning\">\n * \t<label label>Field with warning</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n *\n * <ibm-label labelState=\"error\">\n * \t<label label>Field with error</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n * ```\n *\n * <example-url>../../iframe.html?id=input--label</example-url>\n */\n@Component({\n\tselector: \"ibm-label\",\n\ttemplate: `\n\t\t<label\n\t\t\t[for]=\"labelInputID\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"bx--label\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t\t<div [class]=\"wrapperClass\" [attr.data-invalid]=\"(invalid ? true : null)\" #wrapper>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--text-input__invalid-icon bx--text-area__invalid-icon\">\n\t\t\t</svg>\n\t\t\t<ng-content select=\"input,textarea,div\"></ng-content>\n\t\t</div>\n\t\t<div *ngIf=\"!skeleton && helperText && !invalid\" class=\"bx--form__helper-text\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t`\n})\nexport class Label implements AfterContentInit, AfterViewInit {\n\t/**\n\t * Used to build the id of the input item associated with the `Label`.\n\t */\n\tstatic labelCounter = 0;\n\t/**\n\t * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with\n\t * its input counterpart through the 'for' attribute.\n\t */\n\tlabelInputID = \"ibm-label-\" + Label.labelCounter;\n\t/**\n\t * The class of the wrapper\n\t */\n\twrapperClass = \"bx--text-input__field-wrapper\";\n\n\t/**\n\t * State of the `Label` will determine the styles applied.\n\t */\n\t@Input() labelState: \"success\" | \"warning\" | \"error\" | \"\" = \"\";\n\t/**\n\t * Set to `true` for a loading label.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Optional helper text that appears under the label.\n\t */\n\t@Input() helperText: string | TemplateRef<any>;\n\t/**\n\t * Sets the invalid text.\n\t */\n\t@Input() invalidText: string | TemplateRef<any>;\n\t/**\n\t * Set to `true` for an invalid label component.\n\t */\n\t@Input() invalid = false;\n\t/**\n\t * Set the arialabel for label\n\t */\n\t@Input() ariaLabel: string;\n\n\t// @ts-ignore\n\t@ViewChild(\"wrapper\", { static: false }) wrapper: ElementRef<HTMLDivElement>;\n\n\t// @ts-ignore\n\t@ContentChild(TextArea, { static: false }) textArea: TextArea;\n\n\t@HostBinding(\"class.bx--form-item\") labelClass = true;\n\n\t/**\n\t * Creates an instance of Label.\n\t */\n\tconstructor() {\n\t\tLabel.labelCounter++;\n\t}\n\n\t/**\n\t * Update wrapper class if a textarea is hosted.\n\t */\n\tngAfterContentInit() {\n\t\tif (this.textArea) {\n\t\t\tthis.wrapperClass = \"bx--text-area__wrapper\";\n\t\t}\n\t}\n\n\t/**\n\t * Sets the id on the input item associated with the `Label`.\n\t */\n\tngAfterViewInit() {\n\t\tif (this.wrapper) {\n\t\t\tconst inputElement = this.wrapper.nativeElement.querySelector(\"input,textarea,div\");\n\t\t\tif (inputElement) {\n\t\t\t\tinputElement.setAttribute(\"id\", this.labelInputID);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic isTemplate(value) {\n\t\treturn value instanceof TemplateRef;\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { Label } from \"./label.component\";\nimport { TextInput } from \"./input.directive\";\nimport { TextArea } from \"./text-area.directive\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tLabel,\n\t\tTextInput,\n\t\tTextArea\n\t],\n\texports: [\n\t\tLabel,\n\t\tTextInput,\n\t\tTextArea\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tIconModule\n\t]\n})\nexport class InputModule { }\n"],"names":["TextInput","Object","defineProperty","prototype","this","size","theme","Directive","args","selector","Input","HostBinding","type","inputClass","invalid","skeleton","TextArea","baseClass","Label","ngAfterContentInit","textArea","wrapperClass","ngAfterViewInit","inputElement","wrapper","nativeElement","querySelector","setAttribute","labelInputID","isTemplate","value","TemplateRef","labelCounter","Component","template","ViewChild","static","ContentChild","labelState","labelClass","InputModule","NgModule","declarations","exports","imports","CommonModule","FormsModule","IconModule"],"mappings":"olBAaA,IAAAA,GAeCC,OAAAC,eAA6CF,EAAAG,UAAA,WAAQ,C,IAArD,WACC,MAAqB,OAAdC,KAAKC,M,gCAEbJ,OAAAC,eAA6CF,EAAAG,UAAA,WAAQ,C,IAArD,WACC,MAAqB,OAAdC,KAAKC,M,gCAIbJ,OAAAC,eAAgDF,EAAAG,UAAA,eAAY,C,IAA5D,WACC,MAAsB,UAAfC,KAAKE,O,oDAxBbC,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,gB,+BAMTC,EAAAA,Q,YAKAA,EAAAA,Q,kBAEAC,EAAAA,YAAWH,KAAA,CAAC,0B,gBACZG,EAAAA,YAAWH,KAAA,CAAC,8B,gBAGZG,EAAAA,YAAWH,KAAA,CAAC,8B,eAGZG,EAAAA,YAAWH,KAAA,CAAC,kCAA+B,CAAAI,KAAGF,EAAAA,Q,gBAC9CC,EAAAA,YAAWH,KAAA,CAAC,uBAAoB,CAAAI,KAAGF,EAAAA,Q,oBACnCC,EAAAA,YAAWH,KAAA,CAAC,kCAGdR,GA1BA,SAAAA,IAOUI,KAAAE,MAA0B,OAK1BF,KAAAC,KAA2B,KAECD,KAAAS,YAAa,EAOKT,KAAAU,SAAU,EACrBV,KAAAW,UAAW,ECtBxD,IAAAC,GAYCf,OAAAC,eAA+Cc,EAAAb,UAAA,eAAY,C,IAA3D,WACC,MAAsB,UAAfC,KAAKE,O,oDAbbC,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,oB,+BAMTC,EAAAA,Q,iBAEAC,EAAAA,YAAWH,KAAA,CAAC,yB,eACZG,EAAAA,YAAWH,KAAA,CAAC,iCAA8B,CAAAI,KAAGF,EAAAA,Q,gBAC7CC,EAAAA,YAAWH,KAAA,CAAC,uBAAoB,CAAAI,KAAGF,EAAAA,Q,oBACnCC,EAAAA,YAAWH,KAAA,CAAC,iCAGdQ,GAfA,SAAAA,IAOUZ,KAAAE,MAA0B,OAECF,KAAAa,WAAY,EACMb,KAAAU,SAAU,EACpBV,KAAAW,UAAW,ECYxD,IAAAG,GAyFCA,EAAAf,UAAAgB,mBAAA,WACKf,KAAKgB,WACRhB,KAAKiB,aAAe,2BAOtBH,EAAAf,UAAAmB,gBAAA,WACC,IACOC,GADHnB,KAAKoB,UACFD,EAAenB,KAAKoB,QAAQC,cAAcC,cAAc,wBAE7DH,EAAaI,aAAa,KAAMvB,KAAKwB,eAKjCV,EAAAf,UAAA0B,WAAP,SAAkBC,GACjB,OAAOA,aAAiBC,EAAAA,aAzElBb,EAAAc,aAAe,E,oBAnCtBC,EAAAA,UAASzB,KAAA,CAAC,CACVC,SAAU,YACVyB,SAAU,4kC,0EA+CTxB,EAAAA,Q,gBAIAA,EAAAA,Q,kBAIAA,EAAAA,Q,mBAIAA,EAAAA,Q,eAIAA,EAAAA,Q,iBAIAA,EAAAA,Q,eAGAyB,EAAAA,UAAS3B,KAAA,CAAC,UAAW,CAAE4B,UAAQ,M,gBAG/BC,EAAAA,aAAY7B,KAAA,CAACQ,EAAU,CAAEoB,UAAQ,M,kBAEjCzB,EAAAA,YAAWH,KAAA,CAAC,0BAiCdU,GA5BC,SAAAA,IA1CAd,KAAAwB,aAAe,aAAeV,EAAMc,aAIpC5B,KAAAiB,aAAe,gCAKNjB,KAAAkC,WAAmD,GAInDlC,KAAAW,UAAW,EAYXX,KAAAU,SAAU,EAYiBV,KAAAmC,YAAa,EAMhDrB,EAAMc,eCtHR,IAAAQ,G,oBAUCC,EAAAA,SAAQjC,KAAA,CAAC,CACTkC,aAAc,CACbxB,EACAlB,EACAgB,GAED2B,QAAS,CACRzB,EACAlB,EACAgB,GAED4B,QAAS,CACRC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,gBAGyBP,GAjB3B,SAAAA,K"}