/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-icon.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@carbon/icon-helpers'), require('@angular/core'), require('@angular/common'), require('@carbon/icons/es/add/16'), require('@carbon/icons/es/calendar/16'), require('@carbon/icons/es/caret--down/16'), require('@carbon/icons/es/caret--left/16'), require('@carbon/icons/es/caret--right/16'), require('@carbon/icons/es/caret--up/16'), require('@carbon/icons/es/checkmark/16'), require('@carbon/icons/es/checkmark--filled/16'), require('@carbon/icons/es/checkmark--outline/16'), require('@carbon/icons/es/chevron--down/16'), require('@carbon/icons/es/chevron--right/16'), require('@carbon/icons/es/close/16'), require('@carbon/icons/es/close/20'), require('@carbon/icons/es/copy/16'), require('@carbon/icons/es/delete/16'), require('@carbon/icons/es/download/16'), require('@carbon/icons/es/error--filled/16'), require('@carbon/icons/es/information--filled/16'), require('@carbon/icons/es/menu/16'), require('@carbon/icons/es/menu/20'), require('@carbon/icons/es/overflow-menu--vertical/16'), require('@carbon/icons/es/overflow-menu--horizontal/16'), require('@carbon/icons/es/save/16'), require('@carbon/icons/es/search/16'), require('@carbon/icons/es/settings/16'), require('@carbon/icons/es/warning/16'), require('@carbon/icons/es/warning--filled/16')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/icon', ['exports', '@carbon/icon-helpers', '@angular/core', '@angular/common', '@carbon/icons/es/add/16', '@carbon/icons/es/calendar/16', '@carbon/icons/es/caret--down/16', '@carbon/icons/es/caret--left/16', '@carbon/icons/es/caret--right/16', '@carbon/icons/es/caret--up/16', '@carbon/icons/es/checkmark/16', '@carbon/icons/es/checkmark--filled/16', '@carbon/icons/es/checkmark--outline/16', '@carbon/icons/es/chevron--down/16', '@carbon/icons/es/chevron--right/16', '@carbon/icons/es/close/16', '@carbon/icons/es/close/20', '@carbon/icons/es/copy/16', '@carbon/icons/es/delete/16', '@carbon/icons/es/download/16', '@carbon/icons/es/error--filled/16', '@carbon/icons/es/information--filled/16', '@carbon/icons/es/menu/16', '@carbon/icons/es/menu/20', '@carbon/icons/es/overflow-menu--vertical/16', '@carbon/icons/es/overflow-menu--horizontal/16', '@carbon/icons/es/save/16', '@carbon/icons/es/search/16', '@carbon/icons/es/settings/16', '@carbon/icons/es/warning/16', '@carbon/icons/es/warning--filled/16'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].icon = {}),global.iconHelpers,global.ng.core,global.ng.common,global.Add16,global.Calendar16,global.CaretDown16,global.CaretLeft16,global.CaretRight16,global.CaretUp16,global.Checkmark16,global.CheckmarkFilled16,global.CheckmarkOutline16,global.ChevronDown16,global.ChevronRight16,global.Close16,global.Close20,global.Copy16,global.Delete16,global.Download16,global.ErrorFilled16,global.InformationFilled16,global.Menu16,global.Menu20,global.OverflowMenuVertical16,global.OverflowMenuHorizontal16,global.Save16,global.Search16,global.Settings16,global.Warning16,global.WarningFilled16));
}(this, (function (exports,iconHelpers,core,common,Add16,Calendar16,CaretDown16,CaretLeft16,CaretRight16,CaretUp16,Checkmark16,CheckmarkFilled16,CheckmarkOutline16,ChevronDown16,ChevronRight16,Close16,Close20,Copy16,Delete16,Download16,ErrorFilled16,InformationFilled16,Menu16,Menu20,OverflowMenuVertical16,OverflowMenuHorizontal16,Save16,Search16,Settings16,Warning16,WarningFilled16) { 'use strict';

    Add16 = Add16 && Add16.hasOwnProperty('default') ? Add16['default'] : Add16;
    Calendar16 = Calendar16 && Calendar16.hasOwnProperty('default') ? Calendar16['default'] : Calendar16;
    CaretDown16 = CaretDown16 && CaretDown16.hasOwnProperty('default') ? CaretDown16['default'] : CaretDown16;
    CaretLeft16 = CaretLeft16 && CaretLeft16.hasOwnProperty('default') ? CaretLeft16['default'] : CaretLeft16;
    CaretRight16 = CaretRight16 && CaretRight16.hasOwnProperty('default') ? CaretRight16['default'] : CaretRight16;
    CaretUp16 = CaretUp16 && CaretUp16.hasOwnProperty('default') ? CaretUp16['default'] : CaretUp16;
    Checkmark16 = Checkmark16 && Checkmark16.hasOwnProperty('default') ? Checkmark16['default'] : Checkmark16;
    CheckmarkFilled16 = CheckmarkFilled16 && CheckmarkFilled16.hasOwnProperty('default') ? CheckmarkFilled16['default'] : CheckmarkFilled16;
    CheckmarkOutline16 = CheckmarkOutline16 && CheckmarkOutline16.hasOwnProperty('default') ? CheckmarkOutline16['default'] : CheckmarkOutline16;
    ChevronDown16 = ChevronDown16 && ChevronDown16.hasOwnProperty('default') ? ChevronDown16['default'] : ChevronDown16;
    ChevronRight16 = ChevronRight16 && ChevronRight16.hasOwnProperty('default') ? ChevronRight16['default'] : ChevronRight16;
    Close16 = Close16 && Close16.hasOwnProperty('default') ? Close16['default'] : Close16;
    Close20 = Close20 && Close20.hasOwnProperty('default') ? Close20['default'] : Close20;
    Copy16 = Copy16 && Copy16.hasOwnProperty('default') ? Copy16['default'] : Copy16;
    Delete16 = Delete16 && Delete16.hasOwnProperty('default') ? Delete16['default'] : Delete16;
    Download16 = Download16 && Download16.hasOwnProperty('default') ? Download16['default'] : Download16;
    ErrorFilled16 = ErrorFilled16 && ErrorFilled16.hasOwnProperty('default') ? ErrorFilled16['default'] : ErrorFilled16;
    InformationFilled16 = InformationFilled16 && InformationFilled16.hasOwnProperty('default') ? InformationFilled16['default'] : InformationFilled16;
    Menu16 = Menu16 && Menu16.hasOwnProperty('default') ? Menu16['default'] : Menu16;
    Menu20 = Menu20 && Menu20.hasOwnProperty('default') ? Menu20['default'] : Menu20;
    OverflowMenuVertical16 = OverflowMenuVertical16 && OverflowMenuVertical16.hasOwnProperty('default') ? OverflowMenuVertical16['default'] : OverflowMenuVertical16;
    OverflowMenuHorizontal16 = OverflowMenuHorizontal16 && OverflowMenuHorizontal16.hasOwnProperty('default') ? OverflowMenuHorizontal16['default'] : OverflowMenuHorizontal16;
    Save16 = Save16 && Save16.hasOwnProperty('default') ? Save16['default'] : Save16;
    Search16 = Search16 && Search16.hasOwnProperty('default') ? Search16['default'] : Search16;
    Settings16 = Settings16 && Settings16.hasOwnProperty('default') ? Settings16['default'] : Settings16;
    Warning16 = Warning16 && Warning16.hasOwnProperty('default') ? Warning16['default'] : Warning16;
    WarningFilled16 = WarningFilled16 && WarningFilled16.hasOwnProperty('default') ? WarningFilled16['default'] : WarningFilled16;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * Abstract class that represent a cache of icons.
     *
     * The actual caching mechanism will be implementation specific,
     * but it's likely a good idea to key by the icons name and/or size.
     * Icon name and size will always be strings, and they will be the two consistent
     * identifiers of an icon. For the purposes of storage additonal descriptor properties may
     * be used, but the name and size are the only ones guarenteed to be passed for lookup purposes.
     */
    var IconCache = /** @class */ (function () {
        function IconCache() {
        }
        return IconCache;
    }());
    /**
     * Custom error for when a name can't be found
     */
    var IconNameNotFoundError = /** @class */ (function (_super) {
        __extends(IconNameNotFoundError, _super);
        function IconNameNotFoundError(name) {
            return _super.call(this, "Icon " + name + " not found") || this;
        }
        return IconNameNotFoundError;
    }(Error));
    /**
     * Custom error for when a specific size can't be found
     */
    var IconSizeNotFoundError = /** @class */ (function (_super) {
        __extends(IconSizeNotFoundError, _super);
        function IconSizeNotFoundError(size, name) {
            return _super.call(this, "Size ${size} for ${name} not found") || this;
        }
        return IconSizeNotFoundError;
    }(Error));
    /**
     * Concrete implementation of `IconCache` as a simple in memory cache
     */
    var IconMemoryCache = /** @class */ (function (_super) {
        __extends(IconMemoryCache, _super);
        function IconMemoryCache() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.iconMap = new Map();
            return _this;
        }
        IconMemoryCache.prototype.get = function (name, size) {
            if (!this.iconMap.has(name)) {
                throw new IconNameNotFoundError(name);
            }
            var sizeMap = this.iconMap.get(name);
            if (!sizeMap.has(size)) {
                throw new IconSizeNotFoundError(size, name);
            }
            return sizeMap.get(size);
        };
        IconMemoryCache.prototype.set = function (name, size, descriptor) {
            if (!this.iconMap.has(name)) {
                this.iconMap.set(name, new Map());
            }
            var sizeMap = this.iconMap.get(name);
            sizeMap.set(size, descriptor);
        };
        return IconMemoryCache;
    }(IconCache));
    /**
     * The icon service is a singleton service responsible for registering and retriving icons from `@carbon/icons`.
     *
     * It's important to register icons before use. It's reccommended to register your icons early, likely in your app.component.
     *
     * To allow for improved tree shaking _do not_ import all the icons from `@carbon/icons` and register them.
     * Instead register only the icons in use by your application. If your application makes use of lazy loaded
     * modules you may also lazy load the icons used in that module by registering them early on in that module.
     *
     * `ngOnInit` should be sufficiantly early to register icons.
     *
     * Example:
     * ```
     * import { Accessibility16 } from "@carbon/icons";
     *
     * // ...
     *
     * class MyComponent implements OnInit {
     * 	constructor(protected iconService: IconService) {}
     *
     * 	// ...
     *
     * 	ngOnInit() {
     * 		this.iconService.register(Accessibility16);
     * 	}
     *
     * 	// ...
     * }
     * ```
     *
     * If needed it is possible to register an icon under a different name, via `registerAs`.
     */
    var IconService = /** @class */ (function () {
        function IconService() {
            this.iconCache = new IconMemoryCache();
        }
        /**
         * Registers an array of icons based on the metadata provided by `@carbon/cions`
         */
        IconService.prototype.registerAll = function (descriptors) {
            var _this = this;
            descriptors.forEach(function (icon) { return _this.register(icon); });
        };
        /**
         * Registers an icon based on the metadata provided by `@carbon/icons`
         */
        IconService.prototype.register = function (descriptor) {
            var name = descriptor.name;
            this.registerAs(name, descriptor);
        };
        /**
         * Registers an icon based on a uniqe name and metadata provided by `@carbon/icons`
         */
        IconService.prototype.registerAs = function (name, descriptor) {
            var size = descriptor.size;
            this.iconCache.set(name, size.toString(), descriptor);
        };
        /**
         * Gets an icon, converts it to a string, and caches the result
         */
        IconService.prototype.get = function (name, size) {
            try {
                var icon = this.iconCache.get(name, size.toString());
                if (!icon.svg) {
                    icon.svg = iconHelpers.toString(icon);
                }
                return icon;
            }
            catch (e) {
                throw e;
            }
        };
        /**
         * Configure various service settings (caching strategy ...)
         */
        IconService.prototype.configure = function (options) {
            this.iconCache = options.cache;
        };
        IconService.decorators = [
            { type: core.Injectable }
        ];
        return IconService;
    }());

    /**
     * A directive for applying styling to an input element.
     *
     * Example:
     *
     * ```html
     * <input ibmText/>
     * ```
     *
     * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
     */
    var IconDirective = /** @class */ (function () {
        function IconDirective(elementRef, iconService) {
            this.elementRef = elementRef;
            this.iconService = iconService;
            this.ibmIcon = "";
            this.size = "16";
            this.title = "";
            this.ariaLabel = "";
            this.ariaLabelledBy = "";
            this.ariaHidden = "";
            this.isFocusable = false;
        }
        IconDirective.prototype.ngAfterViewInit = function () {
            var root = this.elementRef.nativeElement;
            var icon;
            try {
                icon = this.iconService.get(this.ibmIcon, this.size.toString());
            }
            catch (error) {
                console.warn(error);
                // bail out
                return;
            }
            var domParser = new DOMParser();
            var rawSVG = icon.svg;
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = root.tagName.toUpperCase() !== "SVG" ? svgElement : svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                root.appendChild(root.ownerDocument.importNode(node, true));
                // type the node because the angular compiler freaks out if it
                // ends up thinking it's a `Node` instead of a `ChildNode`
                node = node.nextSibling;
            }
            var svg = root.tagName.toUpperCase() !== "SVG" ? svgElement : root;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var attributes = iconHelpers.getAttributes({
                width: icon.attrs.height,
                height: icon.attrs.height,
                viewBox: icon.attrs.viewBox,
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledBy,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes["title"]) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                IconDirective.titleIdCounter++;
                title.setAttribute("id", icon.name + "-title-" + IconDirective.titleIdCounter);
                // title must be first for screen readers
                svg.insertBefore(title, svg.firstElementChild);
                svg.setAttribute("aria-labelledby", icon.name + "-title-" + IconDirective.titleIdCounter);
            }
        };
        IconDirective.titleIdCounter = 0;
        IconDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIcon]"
                    },] }
        ];
        /** @nocollapse */
        IconDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: IconService }
            ];
        };
        IconDirective.propDecorators = {
            ibmIcon: [{ type: core.Input }],
            size: [{ type: core.Input }],
            title: [{ type: core.Input }],
            ariaLabel: [{ type: core.Input }],
            ariaLabelledBy: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return IconDirective;
    }());

    // modules
    // either provides a new instance of IconService, or returns the parent
    function ICON_SERVICE_PROVIDER_FACTORY(parentService) {
        return parentService || new IconService();
    }
    // icon service *must* be a singleton to ensure that icons are accessible globally and not duplicated
    var ICON_SERVICE_PROVIDER = {
        provide: IconService,
        deps: [[new core.Optional(), new core.SkipSelf(), IconService]],
        useFactory: ICON_SERVICE_PROVIDER_FACTORY
    };
    var IconModule = /** @class */ (function () {
        function IconModule(iconService) {
            this.iconService = iconService;
            iconService.registerAll([
                Add16,
                Calendar16,
                CaretDown16,
                CaretLeft16,
                CaretRight16,
                CaretUp16,
                Checkmark16,
                CheckmarkFilled16,
                CheckmarkOutline16,
                ChevronDown16,
                ChevronRight16,
                Close16,
                Close20,
                Copy16,
                Delete16,
                Download16,
                ErrorFilled16,
                InformationFilled16,
                Menu16,
                Menu20,
                OverflowMenuVertical16,
                OverflowMenuHorizontal16,
                Save16,
                Search16,
                Settings16,
                Warning16,
                WarningFilled16
            ]);
        }
        IconModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            IconDirective
                        ],
                        exports: [
                            IconDirective
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        providers: [
                            ICON_SERVICE_PROVIDER
                        ]
                    },] }
        ];
        /** @nocollapse */
        IconModule.ctorParameters = function () {
            return [
                { type: IconService }
            ];
        };
        return IconModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.IconDirective = IconDirective;
    exports.ICON_SERVICE_PROVIDER = ICON_SERVICE_PROVIDER;
    exports.ICON_SERVICE_PROVIDER_FACTORY = ICON_SERVICE_PROVIDER_FACTORY;
    exports.IconModule = IconModule;
    exports.IconCache = IconCache;
    exports.IconMemoryCache = IconMemoryCache;
    exports.IconNameNotFoundError = IconNameNotFoundError;
    exports.IconService = IconService;
    exports.IconSizeNotFoundError = IconSizeNotFoundError;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-icon.umd.js.map