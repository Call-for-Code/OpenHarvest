/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-select.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/select', ['exports', '@angular/core', '@angular/forms', '@angular/common', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].select = {}),global.ng.core,global.ng.forms,global.ng.common,global['carbon-components-angular'].icon));
}(this, (function (exports,core,forms,common,icon) { 'use strict';

    var OptGroup = /** @class */ (function () {
        function OptGroup() {
            this.inputClass = "bx--select-optgroup";
        }
        OptGroup.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line
                        selector: "optgroup"
                    },] }
        ];
        OptGroup.propDecorators = {
            inputClass: [{ type: core.HostBinding, args: ["class",] }]
        };
        return OptGroup;
    }());

    var Option = /** @class */ (function () {
        function Option() {
            this.inputClass = "bx--select-option";
        }
        Option.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line
                        selector: "option"
                    },] }
        ];
        Option.propDecorators = {
            inputClass: [{ type: core.HostBinding, args: ["class",] }]
        };
        return Option;
    }());

    /**
     * `ibm-select` provides a styled `select` component.
     *
     * [See demo](../../?path=/story/select--basic)
     *
     * Example:
     *
     * ```
     * <ibm-select [(ngModel)]="model">
     * 	<option value="default" disabled selected hidden>Choose an option</option>
     * 	<option value="option1">Option 1</option>
     *	<option value="option2">Option 2</option>
     * 	<option value="option3">Option 3</option>
     * </ibm-select>
     *	```
     *
     * <example-url>../../iframe.html?id=select--basic</example-url>
     */
    var Select = /** @class */ (function () {
        function Select() {
            /**
             * `inline` or `default` select displays
             */
            this.display = "default";
            /**
             * Sets the unique ID. Defaults to `select-${total count of selects instantiated}`
             */
            this.id = "select-" + Select.selectCount++;
            /**
             * Number input field render size
             */
            this.size = "md";
            /**
             * Set to true to disable component.
             */
            this.disabled = false;
            /**
             * Set to true for a loading select.
             */
            this.skeleton = false;
            /**
             * Set to `true` for an invalid select component.
             */
            this.invalid = false;
            /**
             * `light` or `dark` select theme
             */
            this.theme = "dark";
            this.valueChange = new core.EventEmitter();
            this._value = "";
            /**
             * placeholder declarations. Replaced by the functions provided to `registerOnChange` and `registerOnTouched`
             */
            this.onChangeHandler = function (_) { };
            this.onTouchedHandler = function () { };
        }
        Object.defineProperty(Select.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (v) {
                this._value = v;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Receives a value from the model.
         */
        Select.prototype.writeValue = function (obj) {
            this.value = obj;
        };
        /**
         * Registers a listener that notifies the model when the control updates
         */
        Select.prototype.registerOnChange = function (fn) {
            this.onChangeHandler = fn;
        };
        /**
         * Registers a listener that notifies the model when the control is blurred
         */
        Select.prototype.registerOnTouched = function (fn) {
            this.onTouchedHandler = fn;
        };
        /**
         * Sets the disabled state through the model
         */
        Select.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * Handles the change event from the `select`.
         * Sends events to the change handler and emits a `selected` event.
         */
        Select.prototype.onChange = function (event) {
            this.value = event.target.value;
            this.onChangeHandler(event.target.value);
            this.valueChange.emit(event.target.value);
        };
        /**
         * Listens for the host blurring, and notifies the model
         */
        Select.prototype.focusOut = function () {
            this.onTouchedHandler();
        };
        Select.prototype.isTemplate = function (value) {
            return value instanceof core.TemplateRef;
        };
        /**
         * Tracks the total number of selects instantiated. Used to generate unique IDs
         */
        Select.selectCount = 0;
        Select.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-select",
                        template: "\n\t\t<div class=\"bx--form-item\">\n\t\t\t<ng-template [ngIf]=\"skeleton\">\n\t\t\t\t<div *ngIf=\"label\" class=\"bx--label bx--skeleton\"></div>\n\t\t\t\t<div class=\"bx--select bx--skeleton\"></div>\n\t\t\t</ng-template>\n\t\t\t<div\n\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\tclass=\"bx--select\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--select--inline': display === 'inline',\n\t\t\t\t\t'bx--select--light': theme === 'light',\n\t\t\t\t\t'bx--select--invalid': invalid,\n\t\t\t\t\t'bx--select--disabled': disabled\n\t\t\t\t}\">\n\t\t\t\t<label *ngIf=\"label\" [for]=\"id\" class=\"bx--label\">\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t\t\t</label>\n\t\t\t\t<div *ngIf=\"helperText\" class=\"bx--form__helper-text\">\n\t\t\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"display === 'inline'; else noInline\" class=\"bx--select-input--inline__wrapper\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"noInline\"></ng-container>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- select element: dynamically projected based on 'display' variant -->\n\t\t<ng-template #noInline>\n\t\t\t<div class=\"bx--select-input__wrapper\" [attr.data-invalid]=\"(invalid ? true : null)\">\n\t\t\t\t<select\n\t\t\t\t\t[attr.id]=\"id\"\n\t\t\t\t\t[value]=\"value\"\n\t\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t\t[attr.aria-invalid]=\"invalid ? 'true' : null\"\n\t\t\t\t\tclass=\"bx--select-input\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--select-input--xl': size === 'xl',\n\t\t\t\t\t\t'bx--select-input--sm': size === 'sm'\n\t\t\t\t\t}\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</select>\n\t\t\t\t<svg\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"bx--select__arrow\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z\"></path>\n\t\t\t\t</svg>\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\tclass=\"bx--select__invalid-icon\">\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"invalid && invalidText\" role=\"alert\" class=\"bx--form-requirement\" aria-live=\"polite\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t\t</div>\n\t\t</ng-template>\n\t",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: Select,
                                multi: true
                            }
                        ],
                        styles: ["\n\t\t.bx--select--inline .bx--form__helper-text {\n\t\t\torder: 4;\n\t\t}\n\n\t\t.bx--select--inline:not(.bx--select--invalid) .bx--form__helper-text {\n\t\t\tmargin-top: 0;\n\t\t}\n\t"]
                    }] }
        ];
        Select.propDecorators = {
            display: [{ type: core.Input }],
            label: [{ type: core.Input }],
            helperText: [{ type: core.Input }],
            invalidText: [{ type: core.Input }],
            id: [{ type: core.Input }],
            size: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            invalid: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            ariaLabel: [{ type: core.Input }],
            valueChange: [{ type: core.Output }],
            focusOut: [{ type: core.HostListener, args: ["focusout",] }]
        };
        return Select;
    }());

    // modules
    var SelectModule = /** @class */ (function () {
        function SelectModule() {
        }
        SelectModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Select,
                            Option,
                            OptGroup
                        ],
                        exports: [
                            Select,
                            Option,
                            OptGroup
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return SelectModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.OptGroup = OptGroup;
    exports.Option = Option;
    exports.Select = Select;
    exports.SelectModule = SelectModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-select.umd.js.map