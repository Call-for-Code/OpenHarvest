/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-search.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('carbon-components-angular/i18n'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/search', ['exports', '@angular/core', '@angular/forms', '@angular/common', 'carbon-components-angular/i18n', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].search = {}),global.ng.core,global.ng.forms,global.ng.common,global['carbon-components-angular'].i18n,global['carbon-components-angular'].icon));
}(this, (function (exports,core,forms,common,i18n,icon) { 'use strict';

    /**
     * [See demo](../../?path=/story/search--basic)
     *
     * <example-url>../../iframe.html?id=search--basic</example-url>
     */
    var Search = /** @class */ (function () {
        /**
         * Creates an instance of `Search`.
         * @param i18n The i18n translations.
         */
        function Search(elementRef, i18n$$1) {
            this.elementRef = elementRef;
            this.i18n = i18n$$1;
            /**
             * `light` or `dark` search theme.
             */
            this.theme = "dark";
            /**
             * Set to `true` for a disabled search input.
             */
            this.disabled = false;
            /**
             * Set to `true` for a toolbar search component.
             */
            this.toolbar = false;
            /**
             * Set to `true` for a loading search component.
             */
            this.skeleton = false;
            /**
             * Set to `true` to expand the toolbar search component.
             */
            this.active = false;
            /**
             * Specifies whether the search component is used in the table toolbar.
             */
            this.tableSearch = false;
            /**
             * The unique id for the search component.
             */
            this.id = "search-" + Search.searchCount;
            /**
             * Sets the value attribute on the `input` element.
             */
            this.value = "";
            /**
             * Sets the autocomplete attribute on the `input` element.
             * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values
             */
            this.autocomplete = "on";
            /**
             * Sets the text inside the `label` tag.
             */
            this.label = this.i18n.get().SEARCH.LABEL;
            /**
             * Sets the placeholder attribute on the `input` element.
             */
            this.placeholder = this.i18n.get().SEARCH.PLACEHOLDER;
            /**
             * Used to set the `title` attribute of the clear button.
             */
            this.clearButtonTitle = this.i18n.get().SEARCH.CLEAR_BUTTON;
            /**
             * Title for the search trigger
             */
            this.searchTitle = "";
            /**
             * Emits an event when value is changed.
             */
            this.valueChange = new core.EventEmitter();
            this.open = new core.EventEmitter();
            /**
             * Emits an event when the clear button is clicked.
             */
            this.clear = new core.EventEmitter();
            /**
             * Emits an event on enter.
             */
            this.search = new core.EventEmitter();
            this._size = "md";
            /**
             * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.
             */
            this.onTouched = function () { };
            /**
             * Method set in `registerOnChange` to propagate changes back to the form.
             */
            this.propagateChange = function (_) { };
            Search.searchCount++;
        }
        Object.defineProperty(Search.prototype, "containerClass", {
            get: function () { return !this.toolbar; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Search.prototype, "size", {
            get: function () {
                return this._size;
            },
            /**
             * Size of the search field.
             */
            set: function (value) {
                this._size = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * This is the initial value set to the component
         * @param value The input value.
         */
        Search.prototype.writeValue = function (value) {
            this.value = value;
        };
        /**
         * Sets a method in order to propagate changes back to the form.
         */
        Search.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        /**
         * Registers a callback to be triggered when the control has been touched.
         * @param fn Callback to be triggered when the search input is touched.
         */
        Search.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * Called when text is written in the input.
         * @param search The input text.
         */
        Search.prototype.onSearch = function (search) {
            this.value = search;
            this.doValueChange();
        };
        /**
         * Called on enter.
         */
        Search.prototype.onEnter = function () {
            this.search.emit(this.value);
        };
        /**
         * Called when clear button is clicked.
         */
        Search.prototype.clearSearch = function () {
            this.value = "";
            this.clear.emit();
            this.propagateChange(this.value);
        };
        Search.prototype.doValueChange = function () {
            this.valueChange.emit(this.value);
            this.propagateChange(this.value);
        };
        Search.prototype.openSearch = function () {
            var _this = this;
            this.active = true;
            this.open.emit(this.active);
            setTimeout(function () { return _this.inputRef.nativeElement.focus(); });
        };
        Search.prototype.keyDown = function (event) {
            if (this.toolbar) {
                if (event.key === "Escape") {
                    this.active = false;
                }
                else if (event.key === "Enter") {
                    this.openSearch();
                }
            }
        };
        Search.prototype.focusOut = function (event) {
            this.onTouched();
            if (this.toolbar &&
                this.inputRef &&
                this.inputRef.nativeElement.value === "" &&
                event.relatedTarget === null) {
                this.active = false;
                this.open.emit(this.active);
            }
        };
        /**
         * Variable used for creating unique ids for search components.
         */
        Search.searchCount = 0;
        Search.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-search",
                        template: "<div\n\tclass=\"bx--search\"\n\t[ngClass]=\"{\n\t\t'bx--search--sm': size === 'sm',\n\t\t'bx--search--lg': size === 'md',\n\t\t'bx--search--xl': size === 'xl',\n\t\t'bx--search--light': theme === 'light',\n\t\t'bx--skeleton': skeleton,\n\t\t'bx--toolbar-search': toolbar,\n\t\t'bx--toolbar-search--active': toolbar && active\n\t}\"\n\trole=\"search\"\n\t[attr.aria-label]=\"ariaLabel\"\n\ttabindex=\"0\"\n\t(click)=\"openSearch()\">\n\t<label class=\"bx--label\" [for]=\"id\">{{label}}</label>\n\n\t<div *ngIf=\"skeleton; else enableInput\" class=\"bx--search-input\"></div>\n\t<ng-template #enableInput>\n\t\t<input\n\t\t\t#input\n\t\t\tclass=\"bx--search-input\"\n\t\t\t[type]=\"tableSearch || !toolbar ? 'text' : 'search'\"\n\t\t\t[id]=\"id\"\n\t\t\t[value]=\"value\"\n\t\t\t[autocomplete]=\"autocomplete\"\n\t\t\t[placeholder]=\"placeholder\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[required]=\"required\"\n\t\t\t(input)=\"onSearch($event.target.value)\"\n\t\t\t(keyup.enter)=\"onEnter()\"/>\n\t\t<button\n\t\t\t*ngIf=\"!tableSearch && toolbar\"\n\t\t\tclass=\"bx--toolbar-search__btn\"\n\t\t\t(click)=\"openSearch()\"\n\t\t\taria-label=\"Open search\">\n\t\t\t<svg ibmIcon=\"search\" size=\"16\" class=\"bx--search-magnifier\"></svg>\n\t\t</button>\n\t\t<svg\n\t\t\tibmIcon=\"search\"\n\t\t\t*ngIf=\"tableSearch || !toolbar\"\n\t\t\tclass=\"bx--search-magnifier\"\n\t\t\tsize=\"16\">\n\t\t</svg>\n\t</ng-template>\n\n\t<button\n\t\t*ngIf=\"tableSearch || !toolbar\"\n\t\tclass=\"bx--search-close\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--search-close--hidden': !value || value.length === 0\n\t\t}\"\n\t\t[title]=\"clearButtonTitle\"\n\t\t(click)=\"clearSearch()\">\n\t\t<span class=\"bx--visually-hidden\">{{ clearButtonTitle }}</span>\n\t\t<svg ibmIcon=\"close\" size=\"16\"></svg>\n\t</button>\n</div>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: Search,
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        Search.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: i18n.I18n }
            ];
        };
        Search.propDecorators = {
            containerClass: [{ type: core.HostBinding, args: ["class.bx--form-item",] }],
            theme: [{ type: core.Input }],
            size: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            toolbar: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            active: [{ type: core.Input }],
            tableSearch: [{ type: core.Input }],
            name: [{ type: core.Input }],
            id: [{ type: core.Input }],
            required: [{ type: core.Input }],
            value: [{ type: core.Input }],
            autocomplete: [{ type: core.Input }],
            label: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            clearButtonTitle: [{ type: core.Input }],
            searchTitle: [{ type: core.Input }],
            ariaLabel: [{ type: core.Input }],
            valueChange: [{ type: core.Output }],
            open: [{ type: core.Output }],
            clear: [{ type: core.Output }],
            search: [{ type: core.Output }],
            inputRef: [{ type: core.ViewChild, args: ["input", { static: false },] }],
            keyDown: [{ type: core.HostListener, args: ["keydown", ["$event"],] }],
            focusOut: [{ type: core.HostListener, args: ["focusout", ["$event"],] }]
        };
        return Search;
    }());

    // modules
    var SearchModule = /** @class */ (function () {
        function SearchModule() {
        }
        SearchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Search
                        ],
                        exports: [
                            Search
                        ],
                        imports: [
                            forms.FormsModule,
                            common.CommonModule,
                            i18n.I18nModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return SearchModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Search = Search;
    exports.SearchModule = SearchModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-search.umd.js.map