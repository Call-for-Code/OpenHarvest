{"version":3,"file":"carbon-components-angular-progress-indicator.umd.js.map","sources":["ng://carbon-components-angular/progress-indicator/progress-indicator.component.ts","ng://carbon-components-angular/progress-indicator/progress-indicator.module.ts","ng://carbon-components-angular/progress-indicator/carbon-components-angular-progress-indicator.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter, OnChanges, SimpleChanges\n} from \"@angular/core\";\nimport { ExperimentalService } from \"carbon-components-angular/experimental\";\nimport { Step } from \"./progress-indicator-step.interface\";\n\n/**\n * [See demo](../../?path=/story/progress-indicator--basic)\n *\n * <example-url>../../iframe.html?id=progress-indicator--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-progress-indicator\",\n\ttemplate: `\n\t<ul\n\t\tdata-progress\n\t\tdata-progress-current\n\t\tclass=\"bx--progress\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--skeleton': skeleton,\n\t\t\t'bx--progress--vertical': (orientation === 'vertical'),\n\t\t\t'bx--progress--space-equal': spacing === 'equal' && orientation !== 'vertical'\n\t\t}\">\n\t\t<li\n\t\t\tclass=\"bx--progress-step bx--progress-step--{{step.state[0]}}\"\n\t\t\t*ngFor=\"let step of steps; let i = index\"\n\t\t\t[ngClass]=\"{'bx--progress-step--disabled' : step.disabled}\">\n\t\t\t<div class=\"bx--progress-step-button bx--progress-step-button--unclickable\" role=\"button\" tabindex=\"-1\">\n\t\t\t\t<svg ibmIcon=\"checkmark--outline\" size=\"16\" *ngIf=\"step.state.includes('complete')\"></svg>\n\t\t\t\t<svg *ngIf=\"step.state.includes('current')\">\n\t\t\t\t\t<path d=\"M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0\" ></path>\n\t\t\t\t</svg>\n\t\t\t\t<svg *ngIf=\"step.state.includes('incomplete')\">\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t\t<svg ibmIcon=\"warning\" size=\"16\" *ngIf=\"step.state.includes('error')\" class=\"bx--progress__warning\"></svg>\n\t\t\t\t<p\n\t\t\t\t\tclass=\"bx--progress-label\"\n\t\t\t\t\t*ngIf=\"step.tooltip\"\n\t\t\t\t\t[ibmTooltip]=\"step.tooltip.content\"\n\t\t\t\t\t[trigger]=\"step.tooltip.trigger\"\n\t\t\t\t\t[placement]=\"step.tooltip.placement\"\n\t\t\t\t\t[title]=\"step.tooltip.title\"\n\t\t\t\t\t[gap]=\"step.tooltip.gap\"\n\t\t\t\t\t[appendInline]=\"step.tooltip.appendInline\"\n\t\t\t\t\t[data]=\"step.tooltip.data\"\n\t\t\t\t\t(click)=\"stepSelected.emit({ step: step, index: i })\">\n\t\t\t\t\t{{step.text}}\n\t\t\t\t</p>\n\t\t\t\t<p class=\"bx--progress-label\" *ngIf=\"!step.tooltip\" (click)=\"stepSelected.emit({ step: step, index: i })\">{{step.text}}</p>\n\t\t\t\t<p *ngIf=\"step.optionalText\" class=\"bx--progress-optional\">{{step.optionalText}}</p>\n\t\t\t\t<span class=\"bx--progress-line\"></span>\n\t\t\t</div>\n\t\t</li>\n\t</ul>\n\t`\n})\nexport class ProgressIndicator implements OnChanges {\n\tstatic skeletonSteps(stepCount: number) {\n\t\tconst steps = [];\n\t\tfor (let i = 0; i < stepCount; i++) {\n\t\t\tsteps.push({\"state\": [\"incomplete\"]});\n\t\t}\n\n\t\treturn steps;\n\t}\n\n\t@Output() stepSelected = new EventEmitter<{ step: Step, index: number }>();\n\n\t@Input() steps: Array<Step>;\n\t@Input() orientation: \"horizontal\" | \"vertical\" = \"horizontal\";\n\t@Input() skeleton = false;\n\t@Input() spacing: \"default\" | \"equal\" = \"default\";\n\n\t@Input() get current() {\n\t\treturn this.steps.findIndex(step => step.state.includes(\"current\"));\n\t}\n\tset current(current: number) {\n\t\tthis._current = current;\n\t}\n\tprivate _current: number;\n\n\tconstructor(protected experimental: ExperimentalService) {}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (changes.steps || changes.current) {\n\t\t\tthis.setProgressIndicatorStates();\n\t\t}\n\t}\n\n\tprivate setProgressIndicatorStates() {\n\t\tif (this.steps === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._current === undefined || this._current < 0) {\n\t\t\tfor (let i = 0; i < this.steps.length; i++) {\n\t\t\t\tthis.steps[i].state[0] = \"incomplete\";\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._current > this.steps.length - 1) {\n\t\t\tfor (let i = 0; i < this.steps.length; i++) {\n\t\t\t\tthis.steps[i].state[0] = \"complete\";\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.steps[this._current].state[0] = \"current\";\n\t\tfor (let i = 0; i < this._current; i++) {\n\t\t\tthis.steps[i].state[0] = \"complete\";\n\t\t}\n\t\tfor (let i = this._current + 1; i < this.steps.length; i++) {\n\t\t\tthis.steps[i].state[0] = \"incomplete\";\n\t\t}\n\t}\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { ProgressIndicator } from \"./progress-indicator.component\";\nimport { DialogModule } from \"carbon-components-angular/dialog\";\nimport { ExperimentalModule } from \"carbon-components-angular/experimental\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tProgressIndicator\n\t],\n\texports: [\n\t\tProgressIndicator\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tDialogModule,\n\t\tExperimentalModule,\n\t\tIconModule\n\t]\n})\nexport class ProgressIndicatorModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["experimental","EventEmitter","Component","ExperimentalService","Output","Input","NgModule","CommonModule","DialogModule","ExperimentalModule","IconModule"],"mappings":"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"}
