/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-common.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/common', ['exports'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].common = {})));
}(this, (function (exports) { 'use strict';

    var tabbableSelector = "a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']), " +
        "button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']), " +
        "textarea:not([disabled]):not([tabindex=\'-1\']), " +
        "iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]";
    var tabbableSelectorIgnoreTabIndex = "a[href], area[href], input:not([disabled]), " +
        "button:not([disabled]),select:not([disabled]), " +
        "textarea:not([disabled]), " +
        "iframe, object, embed, *[tabindex], *[contenteditable=true]";
    function getFocusElementList(element, selector) {
        if (selector === void 0) {
            selector = tabbableSelector;
        }
        var elements = element.querySelectorAll(selector);
        return elements ? Array.prototype.filter.call(elements, function (el) { return isVisible(el); }) : elements;
    }
    function isFocusInFirstItem(event, list) {
        if (list.length > 0) {
            return (event.target || event.srcElement) === list[0];
        }
        return false;
    }
    function isFocusInLastItem(event, list) {
        if (list.length > 0) {
            return (event.target || event.srcElement) === list[list.length - 1];
        }
        return false;
    }
    function isElementFocused(event, element) {
        return (event.target || event.srcElement) === element;
    }
    function focusFirstFocusableElement(list) {
        if (list.length > 0) {
            list[0].focus();
            return true;
        }
        return false;
    }
    function focusLastFocusableElement(list) {
        if (list.length > 0) {
            list[list.length - 1].focus();
            return true;
        }
        return false;
    }
    function isVisible(element) {
        return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
    }
    function cycleTabs(event, element) {
        if (event.key === "Tab") {
            var list = getFocusElementList(element);
            var focusChanged = false;
            if (event.shiftKey) {
                if (isFocusInFirstItem(event, list) || isElementFocused(event, element)) {
                    focusChanged = focusLastFocusableElement(list);
                }
            }
            else {
                if (isFocusInLastItem(event, list)) {
                    focusChanged = focusFirstFocusableElement(list);
                }
            }
            if (focusChanged) {
                event.preventDefault();
                event.stopPropagation();
            }
        }
    }

    /**
     * Does what python's `range` function does, with a slightly different
     * signature because of Typescript limitations.
     *
     * Useful for numbered loops in angular templates, since we can do
     * a normal for loop.
     *
     * @export
     * @param stop Generate numbers up to, but not including this number
     * @param [start=0] Starting number of the sequence
     * @param [step=1] Difference between each number in the sequence
     * @returns an array with resulting numbers
     */
    function range(stop, start, step) {
        if (start === void 0) {
            start = 0;
        }
        if (step === void 0) {
            step = 1;
        }
        return Array(Math.ceil((stop - start) / step)).fill(0).map(function (x, i) { return i * step + start; });
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.cycleTabs = cycleTabs;
    exports.focusFirstFocusableElement = focusFirstFocusableElement;
    exports.focusLastFocusableElement = focusLastFocusableElement;
    exports.getFocusElementList = getFocusElementList;
    exports.isElementFocused = isElementFocused;
    exports.isFocusInFirstItem = isFocusInFirstItem;
    exports.isFocusInLastItem = isFocusInLastItem;
    exports.isVisible = isVisible;
    exports.tabbableSelector = tabbableSelector;
    exports.tabbableSelectorIgnoreTabIndex = tabbableSelectorIgnoreTabIndex;
    exports.range = range;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-common.umd.js.map