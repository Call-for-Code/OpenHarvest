{"version":3,"file":"carbon-components-angular-inline-loading.umd.js.map","sources":["ng://carbon-components-angular/inline-loading/inline-loading.component.ts","ng://carbon-components-angular/inline-loading/inline-loading.module.ts","ng://carbon-components-angular/inline-loading/carbon-components-angular-inline-loading.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding\n} from \"@angular/core\";\n\nexport enum InlineLoadingState {\n\t/** It hides the whole component. */\n\tHidden = \"hidden\",\n\t/** It shows the `loadingText` but no loading animation. */\n\tInactive = \"inactive\",\n\t/** It shows the `loadingText` with loading animation. */\n\tActive = \"active\",\n\t/** It shows the `successText` with a success state. */\n\tFinished = \"finished\",\n\t/** It shows the `errorText` with an error state. */\n\tError = \"error\"\n}\n\n/**\n * [See demo](../../?path=/story/inline-loading--basic)\n *\n * <example-url>../../iframe.html?id=inline-loading--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-inline-loading\",\n\ttemplate: `\n\t\t<div *ngIf=\"state !== InlineLoadingState.Hidden\"\n\t\t\tclass=\"bx--inline-loading__animation\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\t\tclass=\"bx--loading bx--loading--small\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--loading--stop': state === InlineLoadingState.Inactive\n\t\t\t\t}\">\n\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n\t\t\t\t\t<circle class=\"bx--loading__background\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t\t<circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"30\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Finished\"\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading__checkmark-container\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Error\"\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading--error\">\n\t\t\t</svg>\n\t\t</div>\n\t\t<p\n\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\tclass=\"bx--inline-loading__text\">{{loadingText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Finished\" class=\"bx--inline-loading__text\">{{successText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Error\" class=\"bx--inline-loading__text\">{{errorText}}</p>\n\t`\n})\nexport class InlineLoading {\n\tInlineLoadingState = InlineLoadingState;\n\n\t/**\n\t * Specify the text description for the loading state.\n\t */\n\t@Input() state: InlineLoadingState | string = InlineLoadingState.Active;\n\t/**\n\t * Specify the text description for the loading state.\n\t */\n\t@Input() loadingText: string;\n\t/**\n\t * Specify the text description for the success state.\n\t */\n\t@Input() successText: string;\n\t/**\n\t * Provide a delay for the `setTimeout` for success.\n\t */\n\t@Input() successDelay = 1500;\n\t/**\n\t * Specify the text description for the error state.\n\t */\n\t@Input() errorText: string;\n\t/**\n\t * set to `false` to stop the loading animation\n\t */\n\t@Input() get isActive() {\n\t\treturn this.state === InlineLoadingState.Active;\n\t}\n\tset isActive(active: boolean) {\n\t\tthis.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;\n\t}\n\n\t/**\n\t * Returns value `true` if the component is in the success state.\n\t */\n\t@Input() get success() {\n\t\treturn this.state === InlineLoadingState.Finished;\n\t}\n\t/**\n\t * Set the component's state to match the parameter and emits onSuccess if it exits.\n\t */\n\tset success(success: boolean) {\n\t\tthis.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;\n\t\tif (this.state === InlineLoadingState.Finished) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.onSuccess.emit();\n\t\t\t}, this.successDelay);\n\t\t}\n\t}\n\n\t/**\n\t * Emits event after the success state is active\n\t */\n\t@Output() onSuccess: EventEmitter<any> = new EventEmitter();\n\n\t@HostBinding(\"class.bx--inline-loading\") loadingClass = true;\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { InlineLoading } from \"./inline-loading.component\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n\n@NgModule({\n\tdeclarations: [InlineLoading],\n\texports: [InlineLoading],\n\timports: [CommonModule, IconModule]\n})\nexport class InlineLoadingModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InlineLoadingState","EventEmitter","Component","Input","Output","HostBinding","NgModule","CommonModule","IconModule"],"mappings":";;;;;;IAQA,WAAY,kBAAkB;;QAE7B,uCAAiB,CAAA;;QAEjB,2CAAqB,CAAA;;QAErB,uCAAiB,CAAA;;QAEjB,2CAAqB,CAAA;;QAErB,qCAAe,CAAA;IAChB,CAAC,EAXWA,0BAAkB,KAAlBA,0BAAkB,QAW7B;IAED;;;;;AAKA;QAAA;YAqCC,uBAAkB,GAAGA,0BAAkB,CAAC;;;;YAK/B,UAAK,GAAgCA,0BAAkB,CAAC,MAAM,CAAC;;;;YAY/D,iBAAY,GAAG,IAAI,CAAC;;;;YAoCnB,cAAS,GAAsB,IAAIC,iBAAY,EAAE,CAAC;YAEnB,iBAAY,GAAG,IAAI,CAAC;SAC7D;QA/BA,sBAAa,mCAAQ;;;;iBAArB;gBACC,OAAO,IAAI,CAAC,KAAK,KAAKD,0BAAkB,CAAC,MAAM,CAAC;aAChD;iBACD,UAAa,MAAe;gBAC3B,IAAI,CAAC,KAAK,GAAG,MAAM,GAAGA,0BAAkB,CAAC,MAAM,GAAGA,0BAAkB,CAAC,QAAQ,CAAC;aAC9E;;;WAHA;QAQD,sBAAa,kCAAO;;;;iBAApB;gBACC,OAAO,IAAI,CAAC,KAAK,KAAKA,0BAAkB,CAAC,QAAQ,CAAC;aAClD;;;;iBAID,UAAY,OAAgB;gBAA5B,iBAOC;gBANA,IAAI,CAAC,KAAK,GAAG,OAAO,GAAGA,0BAAkB,CAAC,QAAQ,GAAGA,0BAAkB,CAAC,KAAK,CAAC;gBAC9E,IAAI,IAAI,CAAC,KAAK,KAAKA,0BAAkB,CAAC,QAAQ,EAAE;oBAC/C,UAAU,CAAC;wBACV,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;qBACtB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;iBACtB;aACD;;;WAXA;;oBA1EDE,cAAS,SAAC;wBACV,QAAQ,EAAE,oBAAoB;wBAC9B,QAAQ,EAAE,u4CAgCT;qBACD;;;4BAOCC,UAAK;kCAILA,UAAK;kCAILA,UAAK;mCAILA,UAAK;gCAILA,UAAK;+BAILA,UAAK;8BAULA,UAAK;gCAkBLC,WAAM;mCAENC,gBAAW,SAAC,0BAA0B;;QACxC,oBAAC;KA7FD;;;QCnBA;SAKoC;;oBALnCC,aAAQ,SAAC;wBACT,YAAY,EAAE,CAAC,aAAa,CAAC;wBAC7B,OAAO,EAAE,CAAC,aAAa,CAAC;wBACxB,OAAO,EAAE,CAACC,mBAAY,EAAEC,eAAU,CAAC;qBACnC;;QACkC,0BAAC;KALpC;;ICPA;;OAEG;;;;;;;;;;;;;"}
