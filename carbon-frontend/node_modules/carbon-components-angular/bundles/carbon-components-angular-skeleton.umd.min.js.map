{"version":3,"sources":["ng://carbon-components-angular/skeleton/skeleton-placeholder.component.ts","ng://carbon-components-angular/skeleton/skeleton-text.component.ts","ng://carbon-components-angular/skeleton/skeleton.module.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-skeleton-placeholder\",\n\ttemplate: `\n\t\t<div class=\"bx--skeleton__placeholder\"></div>`\n})\nexport class SkeletonPlaceholder { }\n","import { Component, Input, OnChanges } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-skeleton-text\",\n\ttemplate: `\n\t\t<p\n\t\t\t*ngFor=\"let width of lineWidths\"\n\t\t\tclass=\"bx--skeleton__text\"\n\t\t\t[style.width]=\"width\">\n\t\t</p>\n\t`\n})\nexport class SkeletonText implements OnChanges {\n\t@Input() lines = 5;\n\n\t@Input() minLineWidth = 100;\n\n\t@Input() maxLineWidth = 300;\n\n\tlineWidths: Array<string>;\n\n\t/**\n\t * Returns a random width in pixels based off a min width, and a max width.\n\t */\n\tgetRandomInt(min, max) {\n\t\treturn `${Math.floor(Math.random() * (max - min + 1) + min) + \"px\"}`;\n\t}\n\n\tngOnChanges() {\n\t\t// Creates an array of length defined by input lines with content from\n\t\t// 0 to lines - 1, maps each value to a random width in pixels.\n\t\tthis.lineWidths =\n\t\t\tArray.from(Array(this.lines).keys())\n\t\t\t\t.map(num => this.getRandomInt(this.minLineWidth, this.maxLineWidth));\n\t}\n}\n","import { SkeletonPlaceholder } from \"./skeleton-placeholder.component\";\nimport { SkeletonText } from \"./skeleton-text.component\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n\tdeclarations: [\n\t\tSkeletonPlaceholder,\n\t\tSkeletonText\n\t],\n\texports: [\n\t\tSkeletonPlaceholder,\n\t\tSkeletonText\n\t],\n\timports: [\n\t\tCommonModule\n\t]\n})\nexport class SkeletonModule { }\n"],"names":["Component","args","selector","template","SkeletonPlaceholder","SkeletonText","prototype","getRandomInt","min","max","Math","floor","random","ngOnChanges","_this","this","lineWidths","Array","from","lines","keys","map","num","minLineWidth","maxLineWidth","Input","NgModule","declarations","exports","imports","CommonModule","SkeletonModule"],"mappings":"4cAECA,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,2BACVC,SAAU,0DAGwBC,GALnC,SAAAA,K,OCsBCC,EAAAC,UAAAC,aAAA,SAAaC,EAAKC,GACjB,OAAUC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAAO,MAG/DH,EAAAC,UAAAO,YAAA,WAAA,IAAAC,EAAAC,KAGCA,KAAKC,WACJC,MAAMC,KAAKD,MAAMF,KAAKI,OAAOC,QAC3BC,IAAI,SAAAC,GAAO,OAAAR,EAAKP,aAAaO,EAAKS,aAAcT,EAAKU,iB,oBA/BzDxB,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,oBACVC,SAAU,qI,+BASTsB,EAAAA,Q,oBAEAA,EAAAA,Q,oBAEAA,EAAAA,SAkBFpB,GAjCA,SAAAA,IAWUU,KAAAI,MAAQ,EAERJ,KAAAQ,aAAe,IAEfR,KAAAS,aAAe,I,2BCZxBE,EAAAA,SAAQzB,KAAA,CAAC,CACT0B,aAAc,CACbvB,EACAC,GAEDuB,QAAS,CACRxB,EACAC,GAEDwB,QAAS,CACRC,EAAAA,kBAG4BC,GAb9B,SAAAA,K"}