{"version":3,"sources":["ng://carbon-components-angular/structured-list/list-column.component.ts","ng://carbon-components-angular/structured-list/list-header.component.ts","ng://carbon-components-angular/structured-list/list-row.component.ts","ng://carbon-components-angular/structured-list/structured-list.component.ts","ng://carbon-components-angular/structured-list/structured-list.module.ts"],"sourcesContent":["import { Component, HostBinding, Input } from \"@angular/core\";\n\n/**\n * `ListColumn` represents a single column in a `StructuredList`.\n *\n * `ListColumn`s can be used in a `ListHeader` to specify the column headers, or in `ListRow`s to specify the column data.\n *\n * Example:\n * ```html\n * <ibm-list-column nowrap=\"true\">Column 1</ibm-list-column>\n * ```\n */\n@Component({\n\tselector: \"ibm-list-column\",\n\ttemplate: `\n\t\t<span *ngIf=\"skeleton\"></span>\n\t\t<ng-content></ng-content>\n\t`\n})\nexport class ListColumn {\n\t@Input() skeleton = false;\n\n\t@HostBinding(\"class.bx--structured-list-th\") isHeaderColumn = true;\n\t@HostBinding(\"class.bx--structured-list-td\") isBodyColumn = true;\n\t/**\n\t * Applies `white-space: nowrap` to the content of this `ListColumn`\n\t */\n\t@HostBinding(\"class.bx--structured-list-content--nowrap\") @Input() nowrap = false;\n}\n","import {\n\tComponent,\n\tHostBinding,\n\tContentChildren,\n\tQueryList,\n\tAfterContentInit,\n\tInput\n} from \"@angular/core\";\nimport { ListColumn } from \"./list-column.component\";\n\n/**\n * `ListHeader` provides a container for the `ListColumn`s that make up the header of a structured list.\n *\n * Example:\n * ```html\n * \t<ibm-list-header>\n *\t\t<ibm-list-column nowrap=\"true\">Column 1</ibm-list-column>\n *\t\t<ibm-list-column nowrap=\"true\">Column 2</ibm-list-column>\n *\t\t<ibm-list-column>Column 3</ibm-list-column>\n *\t</ibm-list-header>\n * ```\n */\n@Component({\n\tselector: \"ibm-list-header\",\n\ttemplate: `\n\t\t<div class=\"bx--structured-list-row bx--structured-list-row--header-row\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"selection\" class=\"bx--structured-list-th\"></div>\n\t\t</div>\n\t`\n})\nexport class ListHeader implements AfterContentInit {\n\t@HostBinding(\"class.bx--structured-list-thead\") wrapper = true;\n\n\t@Input()\n\tset skeleton(value: any) {\n\t\tthis._skeleton = value;\n\t\tthis.updateChildren();\n\t}\n\n\tget skeleton(): any {\n\t\treturn this._skeleton;\n\t}\n\n\t@ContentChildren(ListColumn) columns: QueryList<ListColumn>;\n\n\t/**\n\t * Set by the containing `StructuredList`. Adds a dummy header for the selection column when set to true.\n\t */\n\tselection = false;\n\n\tprotected _skeleton = false;\n\n\tngAfterContentInit() {\n\t\tthis.columns.forEach(column => {\n\t\t\tcolumn.isBodyColumn = false;\n\t\t\tcolumn.isHeaderColumn = true;\n\t\t});\n\t\tthis.updateChildren();\n\t}\n\n\tprotected updateChildren() {\n\t\tif (this.columns) {\n\t\t\tthis.columns.toArray().forEach(child => child.skeleton = this.skeleton);\n\t\t}\n\t}\n}\n","import {\n\tComponent,\n\tHostBinding,\n\tContentChildren,\n\tQueryList,\n\tAfterContentInit,\n\tInput,\n\tHostListener,\n\tViewChild,\n\tElementRef,\n\tEventEmitter,\n\tOutput\n} from \"@angular/core\";\nimport { ListColumn } from \"./list-column.component\";\n\n/**\n * `ListRow` provides a container for the `ListColumn`s that make up the body of a structured list.\n *\n * Example:\n * ```html\n * \t<ibm-list-row>\n *\t\t<ibm-list-column>Row 1</ibm-list-column>\n *\t\t<ibm-list-column nowrap=\"true\">Row One</ibm-list-column>\n *\t\t<ibm-list-column>\n *\t\t\tLorem ipsum dolor sit amet,\n *\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t</ibm-list-column>\n *\t</ibm-list-row>\n * ```\n */\n@Component({\n\tselector: \"ibm-list-row\",\n\ttemplate: `\n\t\t<ng-content></ng-content>\n\t\t<ng-container *ngIf=\"selection\">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\ttabindex=\"-1\"\n\t\t\t\tclass=\"bx--structured-list-input\"\n\t\t\t\ttype=\"radio\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[title]=\"label\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t[checked]=\"selected\"/>\n\t\t\t<div class=\"bx--structured-list-td\">\n\t\t\t\t<svg ibmIcon=\"checkmark--filled\" size=\"16\" class=\"bx--structured-list-svg\"></svg>\n\t\t\t</div>\n\t\t</ng-container>\n\t`\n})\nexport class ListRow implements AfterContentInit {\n\t@Input() @HostBinding(\"class.bx--structured-list-row--selected\") selected = false;\n\t/**\n\t * Applies an accessible label to the row. Defaults to no label.\n\t */\n\t@Input() @HostBinding(\"attr.aria-label\") label;\n\t/**\n\t * The value for the row. Returned via `ngModel` or `selected` event on the containing `StructuredList`.\n\t */\n\t@Input() value;\n\t/**\n\t * Internal event used to notify the containing `StructuredList` of changes.\n\t */\n\t@Output() change: EventEmitter<Event> = new EventEmitter();\n\n\t/**\n\t * Set by the containing `StructuredList`. Enables or disables row level selection features.\n\t */\n\tselection = false;\n\t/**\n\t * Set by the containing `StructuredList`. When `selection = true`, used for the `name` property on the radio input.\n\t */\n\tname = \"list\";\n\n\t@HostBinding(\"class.bx--structured-list-row\") wrapper = true;\n\t@HostBinding(\"attr.tabindex\") tabindex = this.selection ? \"0\" : null;\n\n\t@ContentChildren(ListColumn) columns: QueryList<ListColumn>;\n\n\t// @ts-ignore\n\t@ViewChild(\"input\", { static: false }) input: ElementRef;\n\n\tngAfterContentInit() {\n\t\tthis.columns.forEach(column => {\n\t\t\tcolumn.isBodyColumn = true;\n\t\t\tcolumn.isHeaderColumn = false;\n\t\t});\n\t}\n\n\t@HostListener(\"click\")\n\tonclick() {\n\t\tif (this.selection) {\n\t\t\tthis.input.nativeElement.click();\n\t\t}\n\t}\n\n\tonChange(event) {\n\t\tthis.change.emit(event);\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tContentChildren,\n\tQueryList,\n\tAfterContentInit,\n\tOutput,\n\tEventEmitter\n} from \"@angular/core\";\nimport { ListRow } from \"./list-row.component\";\nimport { ListHeader } from \"./list-header.component\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\n\n/**\n * Structured Lists represent related tabular data. For larger datasets consider a full `Table`.\n *\n * [See demo](../../?path=/story/structured-list--basic)\n *\n * See [structured-list/usage](https://www.carbondesignsystem.com/components/structured-list/usage) for usage guidance.\n *\n * A basic structued list looks something like:\n * ```html\n *\t<ibm-structured-list>\n *\t\t<ibm-list-header>\n *\t\t\t<ibm-list-column nowrap=\"true\">Column 1</ibm-list-column>\n *\t\t\t<ibm-list-column nowrap=\"true\">Column 2</ibm-list-column>\n *\t\t\t<ibm-list-column>Column 3</ibm-list-column>\n *\t\t</ibm-list-header>\n *\t\t<ibm-list-row>\n *\t\t\t<ibm-list-column>Row 1</ibm-list-column>\n *\t\t\t<ibm-list-column nowrap=\"true\">Row One</ibm-list-column>\n *\t\t\t<ibm-list-column>\n *\t\t\t\tLorem ipsum dolor sit amet,\n *\t\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t\t</ibm-list-column>\n *\t\t</ibm-list-row>\n *\t\t<ibm-list-row>\n *\t\t\t<ibm-list-column>Row 2</ibm-list-column>\n *\t\t\t<ibm-list-column nowrap=\"true\">Row Two</ibm-list-column>\n *\t\t\t<ibm-list-column>\n *\t\t\t\tLorem ipsum dolor sit amet,\n *\t\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t\t</ibm-list-column>\n *\t\t</ibm-list-row>\n *\t</ibm-structured-list>\n * ```\n *\n * <example-url>../../iframe.html?id=structured-list--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-structured-list\",\n\ttemplate: `\n\t\t<section\n\t\t\tclass=\"bx--structured-list\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--structured-list--border': border,\n\t\t\t\t'bx--structured-list--selection': selection,\n\t\t\t\t'bx--structured-list--condensed': condensed,\n\t\t\t\t'bx--structured-list-content--nowrap': nowrap,\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content select=\"ibm-list-header\"></ng-content>\n\t\t\t<div class=\"bx--structured-list-tbody\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</section>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: StructuredList,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class StructuredList implements AfterContentInit, ControlValueAccessor {\n\t/**\n\t * A counter to provide unique default values.\n\t */\n\tstatic listCount = 0;\n\t/**\n\t * Set to `true` to enable radio like selection of the rows.\n\t */\n\t@Input() selection = false;\n\t/**\n\t * Set to `true` to apply a border and white background.\n\t */\n\t@Input() border = false;\n\t/**\n\t * Set to `true` to apply a condensed style to the headers and rows.\n\t */\n\t@Input() condensed = false;\n\t/**\n\t * Set to `true` to apply `white-space: nowrap` on _all_ conent.\n\t */\n\t@Input() nowrap = false;\n\t/**\n\t * Used when `selection = true` as the row radio group `name`\n\t */\n\t@Input() name = `structured-list-${StructuredList.listCount++}`;\n\n\t/**\n\t * Sets the skeleton value for all `ListHeader` to the skeleton value of `StructuredList`.\n\t */\n\t@Input()\n\tset skeleton(value: any) {\n\t\tthis._skeleton = value;\n\t\tthis.updateChildren();\n\t}\n\n\t/**\n\t * Returns the skeleton value in the `StructuredList` if there is one.\n\t */\n\tget skeleton(): any {\n\t\treturn this._skeleton;\n\t}\n\n\t/**\n\t * Emits an event when the row selection changes.\n\t *\n\t * Emits an object that looks like:\n\t * ```javascript\n\t * {\n\t * \tvalue: \"something\",\n\t * \tselected: true,\n\t * \tname: \"structured-list-1\"\n\t * }\n\t * ```\n\t */\n\t@Output() selected: EventEmitter<{value: string, selected: boolean, name: string}> = new EventEmitter();\n\n\t@ContentChildren(ListRow) rows: QueryList<ListRow>;\n\t@ContentChildren(ListHeader) headers: QueryList<ListHeader>;\n\n\tprotected _skeleton = false;\n\n\tonChange = (_: any) => { };\n\n\tonTouched = () => { };\n\n\tngAfterContentInit() {\n\t\tconst setSelection = (rowOrHeader: ListRow | ListHeader) => {\n\t\t\trowOrHeader.selection = this.selection;\n\t\t};\n\n\t\tthis.headers.forEach(setSelection);\n\t\tthis.rows.forEach(row => {\n\t\t\tsetSelection(row);\n\t\t\trow.name = this.name;\n\t\t\trow.tabindex = this.selection ? \"0\" : \"null\";\n\t\t\trow.change.subscribe(() => {\n\t\t\t\tthis.selected.emit({\n\t\t\t\t\tvalue: row.value,\n\t\t\t\t\tselected: row.selected,\n\t\t\t\t\tname: this.name\n\t\t\t\t});\n\t\t\t\tthis.onChange(row.value);\n\t\t\t});\n\t\t});\n\t\tthis.updateChildren();\n\t}\n\n\twriteValue(value: any) {\n\t\tif (!this.rows) { return; }\n\t\tthis.rows.forEach(row => {\n\t\t\tif (row.value === value) {\n\t\t\t\trow.selected = true;\n\t\t\t} else {\n\t\t\t\trow.selected = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterOnChange(fn: any) {\n\t\tthis.onChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\tprotected updateChildren() {\n\t\tif (this.headers) {\n\t\t\tthis.headers.toArray().forEach(child => child.skeleton = this.skeleton);\n\t\t}\n\t}\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { StructuredList } from \"./structured-list.component\";\nimport { ListRow } from \"./list-row.component\";\nimport { ListHeader } from \"./list-header.component\";\nimport { ListColumn } from \"./list-column.component\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tStructuredList,\n\t\tListRow,\n\t\tListHeader,\n\t\tListColumn\n\t],\n\texports: [\n\t\tStructuredList,\n\t\tListRow,\n\t\tListHeader,\n\t\tListColumn\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tIconModule\n\t]\n})\nexport class StructuredListModule { }\n"],"names":["ListColumn","Component","args","selector","template","Input","HostBinding","type","this","skeleton","isHeaderColumn","isBodyColumn","nowrap","ListHeader","Object","defineProperty","prototype","_skeleton","value","updateChildren","ngAfterContentInit","columns","forEach","column","_this","toArray","child","ContentChildren","wrapper","selection","ListRow","onclick","input","nativeElement","click","onChange","event","change","emit","Output","ViewChild","static","HostListener","selected","EventEmitter","name","tabindex","StructuredList","setSelection","rowOrHeader","headers","rows","row","subscribe","writeValue","registerOnChange","fn","registerOnTouched","onTouched","listCount","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","border","condensed","_","NgModule","declarations","exports","imports","CommonModule","IconModule","StructuredListModule"],"mappings":"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"}