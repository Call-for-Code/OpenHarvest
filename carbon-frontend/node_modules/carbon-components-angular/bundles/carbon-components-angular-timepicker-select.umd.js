/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-timepicker-select.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/core'), require('@angular/common'), require('carbon-components-angular/select'), require('carbon-components-angular/icon')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/timepicker-select', ['exports', '@angular/forms', '@angular/core', '@angular/common', 'carbon-components-angular/select', 'carbon-components-angular/icon'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular']['timepicker-select'] = {}),global.ng.forms,global.ng.core,global.ng.common,global['carbon-components-angular'].select,global['carbon-components-angular'].icon));
}(this, (function (exports,forms,core,common,select,icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * [See demo](../../?path=/story/time-picker-select--simple)
     *
     * <example-url>../../iframe.html?id=time-picker-select--simple</example-url>
     */
    var TimePickerSelect = /** @class */ (function (_super) {
        __extends(TimePickerSelect, _super);
        function TimePickerSelect() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.timeSelect = true;
            _this.timePickerSelect = true;
            _this.id = "timepicker-select-" + TimePickerSelect.selectCount++;
            /**
             * Set to true for a loading select.
             */
            _this.skeleton = false;
            /**
             * `light` or `dark` select theme
             */
            _this.theme = "dark";
            _this.timePickerSelectSkeleton = _this.skeleton;
            return _this;
        }
        Object.defineProperty(TimePickerSelect.prototype, "timePickerSelectLight", {
            get: function () {
                return this.theme === "light";
            },
            enumerable: true,
            configurable: true
        });
        TimePickerSelect.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-timepicker-select",
                        template: "\n\t\t<label *ngIf=\"!skeleton && label\" [attr.for]=\"id\" class=\"bx--label bx--visually-hidden\">{{label}}</label>\n\t\t<div class=\"bx--select-input__wrapper\">\n\t\t\t<select\n\t\t\t\t#select\n\t\t\t\t[attr.id]=\"id\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\tclass=\"bx--select-input\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</select>\n\t\t\t<svg ibmIcon=\"chevron--down\" size=\"16\" *ngIf=\"!skeleton\" class=\"bx--select__arrow\"></svg>\n\t\t</div>\n\t",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: TimePickerSelect,
                                multi: true
                            }
                        ]
                    }] }
        ];
        TimePickerSelect.propDecorators = {
            timeSelect: [{ type: core.HostBinding, args: ["class.bx--select",] }],
            timePickerSelect: [{ type: core.HostBinding, args: ["class.bx--time-picker__select",] }],
            id: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            label: [{ type: core.Input }],
            timePickerSelectSkeleton: [{ type: core.HostBinding, args: ["class.bx--skeleton",] }],
            timePickerSelectLight: [{ type: core.HostBinding, args: ["class.bx--select--light",] }]
        };
        return TimePickerSelect;
    }(select.Select));

    var TimePickerSelectModule = /** @class */ (function () {
        function TimePickerSelectModule() {
        }
        TimePickerSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TimePickerSelect
                        ],
                        exports: [
                            TimePickerSelect
                        ],
                        imports: [
                            select.SelectModule,
                            common.CommonModule,
                            icon.IconModule
                        ]
                    },] }
        ];
        return TimePickerSelectModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TimePickerSelect = TimePickerSelect;
    exports.TimePickerSelectModule = TimePickerSelectModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-timepicker-select.umd.js.map