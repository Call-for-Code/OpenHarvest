/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-toggle.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('carbon-components-angular/checkbox'), require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('carbon-components-angular/i18n')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/toggle', ['exports', 'carbon-components-angular/checkbox', '@angular/core', '@angular/forms', '@angular/common', 'carbon-components-angular/i18n'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].toggle = {}),global['carbon-components-angular'].checkbox,global.ng.core,global.ng.forms,global.ng.common,global['carbon-components-angular'].i18n));
}(this, (function (exports,checkbox,core,forms,common,i18n) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    (function (ToggleState) {
        ToggleState[ToggleState["Init"] = 0] = "Init";
        ToggleState[ToggleState["Indeterminate"] = 1] = "Indeterminate";
        ToggleState[ToggleState["Checked"] = 2] = "Checked";
        ToggleState[ToggleState["Unchecked"] = 3] = "Unchecked";
    })(exports.ToggleState || (exports.ToggleState = {}));
    /**
     * Used to emit changes performed on toggle components.
     *
     * @deprecated since v4
     */
    var ToggleChange = /** @class */ (function () {
        function ToggleChange() {
        }
        return ToggleChange;
    }());
    /**
     * [See demo](../../?path=/story/toggle--basic)
     *
     * ```html
     * <ibm-toggle [(ngModel)]="toggleState">Toggle</ibm-toggle>
     * ```
     *
     * <example-url>../../iframe.html?id=toggle--basic</example-url>
     */
    var Toggle = /** @class */ (function (_super) {
        __extends(Toggle, _super);
        /**
         * Creates an instance of Toggle.
         */
        function Toggle(changeDetectorRef, i18n$$1) {
            var _this = _super.call(this, changeDetectorRef) || this;
            _this.changeDetectorRef = changeDetectorRef;
            _this.i18n = i18n$$1;
            /**
             * Size of the toggle component.
             */
            _this.size = "md";
            /**
             * Set to `true` for a loading toggle.
             */
            _this.skeleton = false;
            /**
             * The unique id allocated to the `Toggle`.
             */
            _this.id = "toggle-" + Toggle.toggleCount;
            /**
             * Emits event notifying other classes when a change in state occurs on a toggle after a
             * click.
             *
             * @deprecated since v4
             */
            _this.change = new core.EventEmitter();
            _this._offValues = _this.i18n.getOverridable("TOGGLE.OFF");
            _this._onValues = _this.i18n.getOverridable("TOGGLE.ON");
            Toggle.toggleCount++;
            return _this;
        }
        Object.defineProperty(Toggle.prototype, "offText", {
            get: function () {
                return this._offValues.value;
            },
            /**
             * Text that is set on the left side of the toggle.
             */
            set: function (value) {
                this._offValues.override(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toggle.prototype, "onText", {
            get: function () {
                return this._onValues.value;
            },
            /**
             * Text that is set on the right side of the toggle.
             */
            set: function (value) {
                this._onValues.override(value);
            },
            enumerable: true,
            configurable: true
        });
        Toggle.prototype.getOffText = function () {
            return this._offValues.subject;
        };
        Toggle.prototype.getOnText = function () {
            return this._onValues.subject;
        };
        /**
         * Creates instance of `ToggleChange` used to propagate the change event.
         */
        Toggle.prototype.emitChangeEvent = function () {
            /* begin deprecation */
            var event = new ToggleChange();
            event.source = this;
            event.checked = this.checked;
            this.change.emit(event);
            /* end deprecation */
            this.checkedChange.emit(this.checked);
            this.propagateChange(this.checked);
        };
        Toggle.prototype.isTemplate = function (value) {
            return value instanceof core.TemplateRef;
        };
        /**
         * Variable used for creating unique ids for toggle components.
         */
        Toggle.toggleCount = 0;
        Toggle.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-toggle",
                        template: "\n\t\t<label *ngIf=\"label\" [id]=\"ariaLabelledby\" class=\"bx--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t</label>\n\t\t<input\n\t\t\tclass=\"bx--toggle-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--toggle-input--small': size === 'sm',\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\"\n\t\t\t[id]=\"id\"\n\t\t\t[value]=\"value\"\n\t\t\t[name]=\"name\"\n\t\t\t[required]=\"required\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t[attr.aria-checked]=\"checked\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<label\n\t\t\tclass=\"bx--toggle-input__label\"\n\t\t\t[for]=\"id\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<span class=\"bx--toggle__switch\">\n\t\t\t\t<span class=\"bx--toggle__text--off\">{{(!skeleton ? getOffText() : null) | async }}</span>\n\t\t\t\t<span class=\"bx--toggle__text--on\">{{(!skeleton ? getOnText() : null) | async}}</span>\n\t\t\t</span>\n\t\t</label>\n\t",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: Toggle,
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        Toggle.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: i18n.I18n }
            ];
        };
        Toggle.propDecorators = {
            offText: [{ type: core.Input }],
            onText: [{ type: core.Input }],
            label: [{ type: core.Input }],
            size: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            change: [{ type: core.Output }]
        };
        return Toggle;
    }(checkbox.Checkbox));

    // modules
    var ToggleModule = /** @class */ (function () {
        function ToggleModule() {
        }
        ToggleModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Toggle
                        ],
                        exports: [
                            Toggle
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            i18n.I18nModule
                        ]
                    },] }
        ];
        return ToggleModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ToggleChange = ToggleChange;
    exports.Toggle = Toggle;
    exports.ToggleModule = ToggleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-toggle.umd.js.map