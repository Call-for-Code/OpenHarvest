/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-progress-indicator.umd.min.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("carbon-components-angular/dialog"),require("carbon-components-angular/experimental"),require("carbon-components-angular/icon")):"function"==typeof define&&define.amd?define("carbon-components-angular/progress-indicator",["exports","@angular/core","@angular/common","carbon-components-angular/dialog","carbon-components-angular/experimental","carbon-components-angular/icon"],e):e((t["carbon-components-angular"]=t["carbon-components-angular"]||{},t["carbon-components-angular"]["progress-indicator"]={}),t.ng.core,t.ng.common,t["carbon-components-angular"].dialog,t["carbon-components-angular"].experimental,t["carbon-components-angular"].icon)}(this,function(t,e,n,s,o,r){"use strict";var p=(a.skeletonSteps=function(t){for(var e=[],n=0;n<t;n++)e.push({state:["incomplete"]});return e},Object.defineProperty(a.prototype,"current",{get:function(){return this.steps.findIndex(function(t){return t.state.includes("current")})},set:function(t){this._current=t},enumerable:!0,configurable:!0}),a.prototype.ngOnChanges=function(t){(t.steps||t.current)&&this.setProgressIndicatorStates()},a.prototype.setProgressIndicatorStates=function(){if(this.steps!==undefined)if(this._current===undefined||this._current<0)for(var t=0;t<this.steps.length;t++)this.steps[t].state[0]="incomplete";else if(this._current>this.steps.length-1)for(t=0;t<this.steps.length;t++)this.steps[t].state[0]="complete";else{for(this.steps[this._current].state[0]="current",t=0;t<this._current;t++)this.steps[t].state[0]="complete";for(t=this._current+1;t<this.steps.length;t++)this.steps[t].state[0]="incomplete"}},a.decorators=[{type:e.Component,args:[{selector:"ibm-progress-indicator",template:'\n\t<ul\n\t\tdata-progress\n\t\tdata-progress-current\n\t\tclass="bx--progress"\n\t\t[ngClass]="{\n\t\t\t\'bx--skeleton\': skeleton,\n\t\t\t\'bx--progress--vertical\': (orientation === \'vertical\'),\n\t\t\t\'bx--progress--space-equal\': spacing === \'equal\' && orientation !== \'vertical\'\n\t\t}">\n\t\t<li\n\t\t\tclass="bx--progress-step bx--progress-step--{{step.state[0]}}"\n\t\t\t*ngFor="let step of steps; let i = index"\n\t\t\t[ngClass]="{\'bx--progress-step--disabled\' : step.disabled}">\n\t\t\t<div class="bx--progress-step-button bx--progress-step-button--unclickable" role="button" tabindex="-1">\n\t\t\t\t<svg ibmIcon="checkmark--outline" size="16" *ngIf="step.state.includes(\'complete\')"></svg>\n\t\t\t\t<svg *ngIf="step.state.includes(\'current\')">\n\t\t\t\t\t<path d="M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0" ></path>\n\t\t\t\t</svg>\n\t\t\t\t<svg *ngIf="step.state.includes(\'incomplete\')">\n\t\t\t\t\t<path\n\t\t\t\t\t\td="M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t\t<svg ibmIcon="warning" size="16" *ngIf="step.state.includes(\'error\')" class="bx--progress__warning"></svg>\n\t\t\t\t<p\n\t\t\t\t\tclass="bx--progress-label"\n\t\t\t\t\t*ngIf="step.tooltip"\n\t\t\t\t\t[ibmTooltip]="step.tooltip.content"\n\t\t\t\t\t[trigger]="step.tooltip.trigger"\n\t\t\t\t\t[placement]="step.tooltip.placement"\n\t\t\t\t\t[title]="step.tooltip.title"\n\t\t\t\t\t[gap]="step.tooltip.gap"\n\t\t\t\t\t[appendInline]="step.tooltip.appendInline"\n\t\t\t\t\t[data]="step.tooltip.data"\n\t\t\t\t\t(click)="stepSelected.emit({ step: step, index: i })">\n\t\t\t\t\t{{step.text}}\n\t\t\t\t</p>\n\t\t\t\t<p class="bx--progress-label" *ngIf="!step.tooltip" (click)="stepSelected.emit({ step: step, index: i })">{{step.text}}</p>\n\t\t\t\t<p *ngIf="step.optionalText" class="bx--progress-optional">{{step.optionalText}}</p>\n\t\t\t\t<span class="bx--progress-line"></span>\n\t\t\t</div>\n\t\t</li>\n\t</ul>\n\t'}]}],a.ctorParameters=function(){return[{type:o.ExperimentalService}]},a.propDecorators={stepSelected:[{type:e.Output}],steps:[{type:e.Input}],orientation:[{type:e.Input}],skeleton:[{type:e.Input}],spacing:[{type:e.Input}],current:[{type:e.Input}]},a);function a(t){this.experimental=t,this.stepSelected=new e.EventEmitter,this.orientation="horizontal",this.skeleton=!1,this.spacing="default"}var i=(c.decorators=[{type:e.NgModule,args:[{declarations:[p],exports:[p],imports:[n.CommonModule,s.DialogModule,o.ExperimentalModule,r.IconModule]}]}],c);function c(){}t.ProgressIndicator=p,t.ProgressIndicatorModule=i,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=carbon-components-angular-progress-indicator.umd.min.js.map