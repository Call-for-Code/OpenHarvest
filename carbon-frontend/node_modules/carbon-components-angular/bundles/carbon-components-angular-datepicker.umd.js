/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-datepicker.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('flatpickr/dist/plugins/rangePlugin'), require('flatpickr'), require('@angular/forms'), require('rxjs'), require('flatpickr/dist/l10n/index'), require('carbon-components-angular/datepicker-input'), require('@angular/core'), require('@angular/common'), require('carbon-components-angular/utils'), require('carbon-components-angular/i18n')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/datepicker', ['exports', 'flatpickr/dist/plugins/rangePlugin', 'flatpickr', '@angular/forms', 'rxjs', 'flatpickr/dist/l10n/index', 'carbon-components-angular/datepicker-input', '@angular/core', '@angular/common', 'carbon-components-angular/utils', 'carbon-components-angular/i18n'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular'].datepicker = {}),global.rangePlugin,global.flatpickr,global.ng.forms,global.rxjs,global.languages,global['carbon-components-angular']['datepicker-input'],global.ng.core,global.ng.common,global['carbon-components-angular'].utils,global['carbon-components-angular'].i18n));
}(this, (function (exports,rangePlugin,flatpickr,forms,rxjs,languages,datepickerInput,core,common,utils,i18n) { 'use strict';

    rangePlugin = rangePlugin && rangePlugin.hasOwnProperty('default') ? rangePlugin['default'] : rangePlugin;
    flatpickr = flatpickr && flatpickr.hasOwnProperty('default') ? flatpickr['default'] : flatpickr;
    var languages__default = 'default' in languages ? languages['default'] : languages;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * This is from carbon-components.
     * We need it to format the month select according to specs.
     * Carbon currently doesn't expose this as a seperate package,
     * and we don't import the carbon-components js (on purpose)
     * so some copy pasta is required
     *
     * ref: https://github.com/carbon-design-system/carbon/blob/
     * 	f06f38f0c2ef624e409a3d5711e897a79f4c88fc/packages/components/src/components/date-picker/date-picker.js#L52-L123
     */
    var monthToStr = function (monthNumber, shorthand, locale) {
        return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
    };
    var config = {
        selectorInit: "[data-date-picker]",
        selectorDatePickerInput: "[data-date-picker-input]",
        selectorDatePickerInputFrom: "[data-date-picker-input-from]",
        selectorDatePickerInputTo: "[data-date-picker-input-to]",
        selectorDatePickerIcon: "[data-date-picker-icon]",
        selectorFlatpickrMonthYearContainer: ".flatpickr-current-month",
        selectorFlatpickrYearContainer: ".numInputWrapper",
        selectorFlatpickrCurrentMonth: ".cur-month",
        classCalendarContainer: "bx--date-picker__calendar",
        classMonth: "bx--date-picker__month",
        classWeekdays: "bx--date-picker__weekdays",
        classDays: "bx--date-picker__days",
        classWeekday: "bx--date-picker__weekday",
        classDay: "bx--date-picker__day",
        classFocused: "bx--focused",
        classVisuallyHidden: "bx--visually-hidden",
        classFlatpickrCurrentMonth: "cur-month",
        attribType: "data-date-picker-type",
        dateFormat: "m/d/Y",
        shorthand: false
    };
    var carbonFlatpickrMonthSelectPlugin = function (fp) {
        var setupElements = function () {
            var _a;
            if (!fp.monthElements || !fp.yearElements) {
                return;
            }
            fp.monthElements.forEach(function (elem) {
                if (!elem.parentNode) {
                    return;
                }
                elem.parentNode.removeChild(elem);
            });
            (_a = fp.monthElements).splice.apply(_a, __spread([0,
                fp.monthElements.length], fp.monthElements.map(function () {
                // eslint-disable-next-line no-underscore-dangle
                var monthElement = fp._createElement("span", config.classFlatpickrCurrentMonth);
                monthElement.textContent = monthToStr(fp.currentMonth, config.shorthand === true, fp.l10n);
                fp.yearElements[0]
                    .closest(config.selectorFlatpickrMonthYearContainer)
                    .insertBefore(monthElement, fp.yearElements[0].closest(config.selectorFlatpickrYearContainer));
                return monthElement;
            })));
        };
        var updateCurrentMonth = function () {
            if (!fp.yearElements) {
                return;
            }
            var monthStr = monthToStr(fp.currentMonth, config.shorthand === true, fp.l10n);
            fp.yearElements.forEach(function (elem) {
                var currentMonthContainer = elem.closest(config.selectorFlatpickrMonthYearContainer);
                Array.prototype.forEach.call(currentMonthContainer.querySelectorAll(".cur-month"), function (monthElement) {
                    monthElement.textContent = monthStr;
                });
            });
        };
        var register = function () {
            fp.loadedPlugins.push("carbonFlatpickrMonthSelectPlugin");
        };
        return {
            onMonthChange: updateCurrentMonth,
            onValueUpdate: updateCurrentMonth,
            onOpen: updateCurrentMonth,
            onReady: [setupElements, updateCurrentMonth, register]
        };
    };

    /**
     * [See demo](../../?path=/story/date-picker--single)
     *
     * <example-url>../../iframe.html?id=date-picker--single</example-url>
     */
    var DatePicker = /** @class */ (function () {
        function DatePicker(elementRef, elementService, i18n$$1) {
            var _this = this;
            this.elementRef = elementRef;
            this.elementService = elementService;
            this.i18n = i18n$$1;
            /**
             * Select calendar range mode
             */
            this.range = false;
            /**
             * Format of date
             *
             * For reference: https://flatpickr.js.org/formatting/
             */
            this.dateFormat = "m/d/Y";
            /**
             * Language of the flatpickr calendar.
             *
             * For reference of the possible locales:
             * https://github.com/flatpickr/flatpickr/blob/master/src/l10n/index.ts
             */
            this.language = "en";
            this.placeholder = "mm/dd/yyyy";
            /**
             * The pattern for the underlying input element
             * @deprecated as of v4 - switch to inputPattern
             */
            this.pattern = "^\\d{1,2}/\\d{1,2}/\\d{4}$";
            this.id = "datepicker-" + DatePicker.datePickerCount++;
            this.theme = "dark";
            this.disabled = false;
            this.invalid = false;
            this.size = "md";
            this.rangeInvalid = false;
            this.skeleton = false;
            this.plugins = [];
            this.valueChange = new core.EventEmitter();
            this._value = [];
            this._flatpickrOptions = {
                allowInput: true
            };
            this.flatpickrBaseOptions = {
                mode: "single",
                dateFormat: "m/d/Y",
                plugins: this.plugins,
                onOpen: function () {
                    _this.updateClassNames();
                    _this.updateCalendarListeners();
                },
                onClose: function () {
                    // This makes sure that the `flatpickrInstance selectedDates` are in sync with the values of
                    // the inputs when the calendar closes.
                    if (_this.range && _this.flatpickrInstance) {
                        var inputValue = _this.input.input.nativeElement.value;
                        var rangeInputValue = _this.rangeInput.input.nativeElement.value;
                        if (inputValue || rangeInputValue) {
                            var parseDate = function (date) { return _this.flatpickrInstance.parseDate(date, _this.dateFormat); };
                            _this.setDateValues([parseDate(inputValue), parseDate(rangeInputValue)]);
                            _this.doSelect(_this.flatpickrInstance.selectedDates);
                        }
                    }
                },
                onDayCreate: function (_dObj, _dStr, _fp, dayElem) {
                    dayElem.classList.add("bx--date-picker__day");
                },
                nextArrow: this.rightArrowHTML(),
                prevArrow: this.leftArrowHTML(),
                value: this.value
            };
            this.flatpickrInstance = null;
            this.visibilitySubscription = new rxjs.Subscription();
            this.onTouched = function () { };
            this.propagateChange = function (_) { };
            this.preventCalendarClose = function (event) { return event.stopPropagation(); };
        }
        Object.defineProperty(DatePicker.prototype, "inputPattern", {
            get: function () {
                return this.pattern;
            },
            /**
             * The pattern for the underlying input element
             */
            set: function (value) {
                this.pattern = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (v) {
                if (!v) {
                    v = [];
                }
                this._value = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "flatpickrOptions", {
            get: function () {
                var plugins = __spread(this.plugins, [carbonFlatpickrMonthSelectPlugin]);
                if (this.range) {
                    plugins.push(rangePlugin({ input: "#" + this.id + "-rangeInput", position: "left" }));
                }
                return Object.assign({}, this._flatpickrOptions, this.flatpickrBaseOptions, {
                    mode: this.range ? "range" : "single",
                    plugins: plugins,
                    dateFormat: this.dateFormat,
                    locale: languages__default[this.language]
                });
            },
            set: function (options) {
                this._flatpickrOptions = Object.assign({}, this._flatpickrOptions, options);
            },
            enumerable: true,
            configurable: true
        });
        DatePicker.prototype.ngOnInit = function () {
            var _this = this;
            // if i18n is set to anything other than en we'll want to change the language
            // otherwise we'll just use the local setting
            if (this.i18n.getLocale() !== "en") {
                this.i18n.getLocaleObservable().subscribe(function (locale) {
                    _this.language = locale;
                    _this.resetFlackpickrInstance();
                });
            }
        };
        DatePicker.prototype.ngOnChanges = function (changes) {
            this.resetFlackpickrInstance(changes.value);
        };
        DatePicker.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.visibilitySubscription = this.elementService
                .visibility(this.elementRef.nativeElement, this.elementRef.nativeElement)
                .subscribe(function (value) {
                if (_this.isFlatpickrLoaded() && _this.flatpickrInstance.isOpen) {
                    _this.flatpickrInstance._positionCalendar(_this.elementRef.nativeElement.querySelector("#" + _this.id + "-input"));
                    if (!value.visible) {
                        _this.flatpickrInstance.close();
                    }
                }
            });
        };
        // because the actual view may be delayed in loading (think projection into a tab pane)
        // and because we rely on a library that operates outside the Angular view of the world
        // we need to keep trying to load the library, until the relevant DOM is actually live
        DatePicker.prototype.ngAfterViewChecked = function () {
            if (!this.isFlatpickrLoaded()) {
                /// @ts-ignore ts is unhappy with the below call to `flatpickr`
                this.flatpickrInstance = flatpickr("#" + this.id + "-input", this.flatpickrOptions);
                // if (and only if) the initialization succeeded, we can set the date values
                if (this.isFlatpickrLoaded()) {
                    if (this.value.length > 0) {
                        this.setDateValues(this.value);
                    }
                }
            }
        };
        DatePicker.prototype.ngAfterContentInit = function () {
            languages__default.en.weekdays.shorthand
                = languages__default.en.weekdays.longhand.map(function (day) {
                    if (day === "Thursday") {
                        return "Th";
                    }
                    return day.charAt(0);
                });
        };
        DatePicker.prototype.onFocus = function () {
            // Updates the month manually when calendar mode is range because month
            // will not update properly without manually updating them on focus.
            if (this.range) {
                if (this.rangeInput.input.nativeElement === document.activeElement && this.flatpickrInstance.selectedDates[1]) {
                    var currentMonth = this.flatpickrInstance.selectedDates[1].getMonth();
                    this.flatpickrInstance.changeMonth(currentMonth, false);
                }
                else if (this.input.input.nativeElement === document.activeElement && this.flatpickrInstance.selectedDates[0]) {
                    var currentMonth = this.flatpickrInstance.selectedDates[0].getMonth();
                    this.flatpickrInstance.changeMonth(currentMonth, false);
                }
            }
            this.onTouched();
        };
        /**
         * Writes a value from the model to the component. Expects the value to be `null` or `(Date | string)[]`
         * @param value value received from the model
         */
        DatePicker.prototype.writeValue = function (value) {
            var _this = this;
            this.value = value;
            setTimeout(function () {
                if (_this.isFlatpickrLoaded() && _this.flatpickrInstance.config) {
                    _this.setDateValues(_this.value);
                }
            });
        };
        DatePicker.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        DatePicker.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * Cleans up our flatpickr instance
         */
        DatePicker.prototype.ngOnDestroy = function () {
            if (!this.isFlatpickrLoaded()) {
                return;
            }
            this.flatpickrInstance.destroy();
            this.visibilitySubscription.unsubscribe();
        };
        /**
         * Handles the `valueChange` event from the primary/single input
         */
        DatePicker.prototype.onValueChange = function (event) {
            if (this.isFlatpickrLoaded()) {
                var date = this.flatpickrInstance.parseDate(event, this.dateFormat);
                if (this.range) {
                    this.setDateValues([date, this.flatpickrInstance.selectedDates[1]]);
                }
                else {
                    this.setDateValues([date]);
                }
                this.doSelect(this.flatpickrInstance.selectedDates);
            }
        };
        /**
         * Handles the `valueChange` event from the range input
         */
        DatePicker.prototype.onRangeValueChange = function (event) {
            if (this.isFlatpickrLoaded() && this.flatpickrInstance.isOpen) {
                var date = this.flatpickrInstance.parseDate(event, this.dateFormat);
                this.setDateValues([this.flatpickrInstance.selectedDates[0], date]);
                this.doSelect(this.flatpickrInstance.selectedDates);
            }
        };
        /**
         * Handles opening the calendar "properly" when the calendar icon is clicked.
         */
        DatePicker.prototype.openCalendar = function (datepickerInput$$1) {
            if (this.range) {
                datepickerInput$$1.input.nativeElement.click();
                // If the first input's calendar icon is clicked when calendar is in range mode, then
                // the month and year needs to be manually changed to the current selected month and
                // year otherwise the calendar view will not be updated upon opening.
                if (datepickerInput$$1 === this.input && this.flatpickrInstance.selectedDates[0]) {
                    var currentMonth = this.flatpickrInstance.selectedDates[0].getMonth();
                    this.flatpickrInstance.currentYear = this.flatpickrInstance.selectedDates[0].getFullYear();
                    this.flatpickrInstance.changeMonth(currentMonth, false);
                }
            }
            else {
                // Single-mode flatpickr handles mousedown but not click, so nativeElement.click() won't
                // work when the calendar icon is clicked. In this case we simply use flatpickr.open().
                this.flatpickrInstance.open();
            }
        };
        DatePicker.prototype.updateCalendarListeners = function () {
            var _this = this;
            var calendarContainer = document.querySelectorAll(".flatpickr-calendar");
            Array.from(calendarContainer).forEach(function (calendar) {
                calendar.removeEventListener("click", _this.preventCalendarClose);
                calendar.addEventListener("click", _this.preventCalendarClose);
            });
        };
        /**
         * Resets the flatpickr instance while keeping the date values (or updating them if newDates is provided)
         *
         * Used to pick up input changes or locale changes.
         *
         * @param newDates An optional SimpleChange of date values
         */
        DatePicker.prototype.resetFlackpickrInstance = function (newDates) {
            if (this.isFlatpickrLoaded()) {
                var dates = this.flatpickrInstance.selectedDates;
                if (newDates && this.didDateValueChange(newDates.currentValue, newDates.previousValue)) {
                    dates = newDates.currentValue;
                }
                // only reset the flatpickr instance on Input changes
                this.flatpickrInstance = flatpickr("#" + this.id + "-input", this.flatpickrOptions);
                this.setDateValues(dates);
            }
        };
        /**
         * Carbon uses a number of specific classnames for parts of the flatpickr - this idempotent method applies them if needed.
         */
        DatePicker.prototype.updateClassNames = function () {
            var _this = this;
            if (!this.elementRef) {
                return;
            }
            // get all the possible flatpickrs in the document - we need to add classes to (potentially) all of them
            var calendarContainer = document.querySelectorAll(".flatpickr-calendar");
            var monthContainer = document.querySelectorAll(".flatpickr-month");
            var weekdaysContainer = document.querySelectorAll(".flatpickr-weekdays");
            var weekdayContainer = document.querySelectorAll(".flatpickr-weekday");
            var daysContainer = document.querySelectorAll(".flatpickr-days");
            var dayContainer = document.querySelectorAll(".flatpickr-day");
            // add classes to lists of elements
            var addClassIfNotExists = function (classname, elementList) {
                Array.from(elementList).forEach(function (element) {
                    if (!element.classList.contains(classname)) {
                        element.classList.add(classname);
                    }
                });
            };
            // add classes (but only if they don't exist, small perf win)
            addClassIfNotExists("bx--date-picker__calendar", calendarContainer);
            addClassIfNotExists("bx--date-picker__month", monthContainer);
            addClassIfNotExists("bx--date-picker__weekdays", weekdaysContainer);
            addClassIfNotExists("bx--date-picker__days", daysContainer);
            // add weekday classes and format the text
            Array.from(weekdayContainer).forEach(function (element) {
                element.innerHTML = element.innerHTML.replace(/\s+/g, "");
                element.classList.add("bx--date-picker__weekday");
            });
            // add day classes and special case the "today" element based on `this.value`
            Array.from(dayContainer).forEach(function (element) {
                element.classList.add("bx--date-picker__day");
                if (!_this.value) {
                    return;
                }
                if (element.classList.contains("today") && _this.value.length > 0) {
                    element.classList.add("no-border");
                }
                else if (element.classList.contains("today") && _this.value.length === 0) {
                    element.classList.remove("no-border");
                }
            });
        };
        /**
         * Applies the given date value array to both the flatpickr instance and the `input`(s)
         * @param dates the date values to apply
         */
        DatePicker.prototype.setDateValues = function (dates) {
            if (this.isFlatpickrLoaded()) {
                var singleInput_1 = this.elementRef.nativeElement.querySelector("#" + this.id + "-input");
                var rangeInput_1 = this.elementRef.nativeElement.querySelector("#" + this.id + "-rangeInput");
                // set the date on the instance
                this.flatpickrInstance.setDate(dates);
                // we can either set a date value or an empty string, so we start with an empty string
                var singleDate_1 = "";
                // if date is a string, parse and format
                if (typeof this.flatpickrInstance.selectedDates[0] === "string") {
                    singleDate_1 = this.flatpickrInstance.parseDate(this.flatpickrInstance.selectedDates[0], this.dateFormat);
                    singleDate_1 = this.flatpickrInstance.formatDate(singleDate_1, this.dateFormat);
                    // if date is not a string we can assume it's a Date and we should format
                }
                else if (!!this.flatpickrInstance.selectedDates[0]) {
                    singleDate_1 = this.flatpickrInstance.formatDate(this.flatpickrInstance.selectedDates[0], this.dateFormat);
                }
                if (rangeInput_1) {
                    // we can either set a date value or an empty string, so we start with an empty string
                    var rangeDate_1 = "";
                    // if date is a string, parse and format
                    if (typeof this.flatpickrInstance.selectedDates[1] === "string") {
                        rangeDate_1 = this.flatpickrInstance.parseDate(this.flatpickrInstance.selectedDates[1].toString(), this.dateFormat);
                        rangeDate_1 = this.flatpickrInstance.formatDate(rangeDate_1, this.dateFormat);
                        // if date is not a string we can assume it's a Date and we should format
                    }
                    else if (!!this.flatpickrInstance.selectedDates[1]) {
                        rangeDate_1 = this.flatpickrInstance.formatDate(this.flatpickrInstance.selectedDates[1], this.dateFormat);
                    }
                    setTimeout(function () {
                        // apply the values
                        rangeInput_1.value = rangeDate_1;
                        singleInput_1.value = singleDate_1;
                    });
                }
            }
        };
        DatePicker.prototype.doSelect = function (selectedValue) {
            // In range mode, if a date is selected from the first calendar that is from the previous month,
            // the month will not be updated on the calendar until the calendar is re-opened.
            // This will make sure the calendar is updated with the correct month.
            if (this.range && this.flatpickrInstance.selectedDates[0]) {
                var currentMonth = this.flatpickrInstance.selectedDates[0].getMonth();
                this.flatpickrInstance.changeMonth(currentMonth, false);
            }
            this.valueChange.emit(selectedValue);
            this.propagateChange(selectedValue);
        };
        DatePicker.prototype.didDateValueChange = function (currentValue, previousValue) {
            return currentValue[0] !== previousValue[0] || currentValue[1] !== previousValue[1];
        };
        /**
         * More advanced checking of the loaded state of flatpickr
         */
        DatePicker.prototype.isFlatpickrLoaded = function () {
            // cast the instance to a boolean, and some method that has to exist for the library to be loaded in this case `setDate`
            return !!this.flatpickrInstance && !!this.flatpickrInstance.setDate;
        };
        /**
         * Right arrow HTML passed to flatpickr
         */
        DatePicker.prototype.rightArrowHTML = function () {
            return "\n\t\t\t<svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\">\n\t\t\t\t<polygon points=\"11,8 6,13 5.3,12.3 9.6,8 5.3,3.7 6,3 \"/>\n\t\t\t\t<rect width=\"16\" height=\"16\" style=\"fill:none\" />\n\t\t\t</svg>";
        };
        /**
         * Left arrow HTML passed to flatpickr
         */
        DatePicker.prototype.leftArrowHTML = function () {
            return "\n\t\t\t<svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\">\n\t\t\t\t<polygon points=\"5,8 10,3 10.7,3.7 6.4,8 10.7,12.3 10,13 \"/>\n\t\t\t\t<rect width=\"16\" height=\"16\" style=\"fill:none\" />\n\t\t\t</svg>";
        };
        DatePicker.datePickerCount = 0;
        DatePicker.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-date-picker",
                        template: "\n\t<div class=\"bx--form-item\">\n\t\t<div\n\t\t\tclass=\"bx--date-picker\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--date-picker--range' : range,\n\t\t\t\t'bx--date-picker--single' : !range,\n\t\t\t\t'bx--date-picker--light' : theme === 'light',\n\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t}\">\n\t\t\t<div class=\"bx--date-picker-container\">\n\t\t\t\t<ibm-date-picker-input\n\t\t\t\t\t#input\n\t\t\t\t\t[label]=\"label\"\n\t\t\t\t\t[placeholder]=\"placeholder\"\n\t\t\t\t\t[pattern]=\"inputPattern\"\n\t\t\t\t\t[id]=\"id + '-input'\"\n\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t[type]=\"(range ? 'range' : 'single')\"\n\t\t\t\t\t[hasIcon]=\"(range ? false : true)\"\n\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t[invalid]=\"invalid\"\n\t\t\t\t\t[invalidText]=\"invalidText\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t(valueChange)=\"onValueChange($event)\"\n\t\t\t\t\t(click)=\"openCalendar(input)\">\n\t\t\t\t</ibm-date-picker-input>\n\t\t\t</div>\n\n\t\t\t<div *ngIf=\"range\" class=\"bx--date-picker-container\">\n\t\t\t\t<ibm-date-picker-input\n\t\t\t\t\t#rangeInput\n\t\t\t\t\t[label]=\"rangeLabel\"\n\t\t\t\t\t[placeholder]=\"placeholder\"\n\t\t\t\t\t[pattern]=\"inputPattern\"\n\t\t\t\t\t[id]=\"id + '-rangeInput'\"\n\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t[type]=\"(range ? 'range' : 'single')\"\n\t\t\t\t\t[hasIcon]=\"(range ? true : null)\"\n\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t[invalid]=\"rangeInvalid\"\n\t\t\t\t\t[invalidText]=\"rangeInvalidText\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t(valueChange)=\"onRangeValueChange($event)\"\n\t\t\t\t\t(click)=\"openCalendar(rangeInput)\">\n\t\t\t\t</ibm-date-picker-input>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: DatePicker,
                                multi: true
                            }
                        ],
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".dayContainer {\n\t\t\tjustify-content: initial;\n\t\t}"]
                    }] }
        ];
        /** @nocollapse */
        DatePicker.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: utils.ElementService },
                { type: i18n.I18n }
            ];
        };
        DatePicker.propDecorators = {
            range: [{ type: core.Input }],
            dateFormat: [{ type: core.Input }],
            language: [{ type: core.Input }],
            label: [{ type: core.Input }],
            rangeLabel: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            pattern: [{ type: core.Input }],
            inputPattern: [{ type: core.Input }],
            id: [{ type: core.Input }],
            value: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            invalid: [{ type: core.Input }],
            invalidText: [{ type: core.Input }],
            size: [{ type: core.Input }],
            rangeInvalid: [{ type: core.Input }],
            rangeInvalidText: [{ type: core.Input }],
            skeleton: [{ type: core.Input }],
            plugins: [{ type: core.Input }],
            flatpickrOptions: [{ type: core.Input }],
            input: [{ type: core.ViewChild, args: ["input", { static: true },] }],
            rangeInput: [{ type: core.ViewChild, args: ["rangeInput", { static: false },] }],
            valueChange: [{ type: core.Output }],
            onFocus: [{ type: core.HostListener, args: ["focusin",] }]
        };
        return DatePicker;
    }());

    var DatePickerModule = /** @class */ (function () {
        function DatePickerModule() {
        }
        DatePickerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DatePicker
                        ],
                        exports: [
                            DatePicker,
                            datepickerInput.DatePickerInputModule
                        ],
                        imports: [
                            common.CommonModule,
                            datepickerInput.DatePickerInputModule,
                            utils.UtilsModule,
                            i18n.I18nModule
                        ]
                    },] }
        ];
        return DatePickerModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DatePicker = DatePicker;
    exports.DatePickerModule = DatePickerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-datepicker.umd.js.map