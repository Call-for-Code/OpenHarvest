/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-content-switcher.umd.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('carbon-components-angular/common'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('carbon-components-angular/content-switcher', ['exports', 'carbon-components-angular/common', '@angular/core', '@angular/common'], factory) :
    (factory((global['carbon-components-angular'] = global['carbon-components-angular'] || {}, global['carbon-components-angular']['content-switcher'] = {}),global['carbon-components-angular'].common,global.ng.core,global.ng.common));
}(this, (function (exports,common,core,common$1) { 'use strict';

    var ContentSwitcherOption = /** @class */ (function () {
        function ContentSwitcherOption() {
            /**
             * Internal name for the option.
             * Should be something that identifies the option to the application.
             * Accessible from the `ContentSwitcher` `selected` emitter
             */
            this.name = "option";
            /**
             * Emits when the option is selected.
             */
            this.selected = new core.EventEmitter();
            this.onClick = new core.EventEmitter();
            this.onFocus = new core.EventEmitter();
            this.switcherClass = "bx--content-switcher-btn";
            this.selectedClass = false;
            this.role = "tab";
            this.ariaSelected = false;
            this.tabindex = "-1";
            this._active = false;
        }
        Object.defineProperty(ContentSwitcherOption.prototype, "active", {
            get: function () {
                return this._active;
            },
            /**
             * Used to activate the option. Only one option may be `active` at a time
             */
            set: function (value) {
                this._active = value;
                this.selectedClass = value;
                this.ariaSelected = value;
                this.tabindex = value ? "0" : "-1";
            },
            enumerable: true,
            configurable: true
        });
        ContentSwitcherOption.prototype.hostClick = function (event) {
            this.onClick.emit(event);
            // skip setting and emitting if the option is already active
            if (this.active) {
                return;
            }
            this.active = true;
            this.selected.emit(true);
        };
        ContentSwitcherOption.prototype.doFocus = function (event) {
            this.onFocus.emit(event);
            // skip setting and emitting if the option is already active
            if (this.active) {
                return;
            }
            this.active = true;
            this.selected.emit(true);
        };
        ContentSwitcherOption.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmContentOption]"
                    },] }
        ];
        ContentSwitcherOption.propDecorators = {
            active: [{ type: core.Input }],
            name: [{ type: core.Input }],
            selected: [{ type: core.Output }],
            onClick: [{ type: core.Output }],
            onFocus: [{ type: core.Output }],
            switcherClass: [{ type: core.HostBinding, args: ["class",] }],
            selectedClass: [{ type: core.HostBinding, args: ["class.bx--content-switcher--selected",] }],
            role: [{ type: core.HostBinding, args: ["attr.role",] }],
            ariaSelected: [{ type: core.HostBinding, args: ["attr.aria-selected",] }],
            tabindex: [{ type: core.HostBinding, args: ["attr.tabIndex",] }],
            hostClick: [{ type: core.HostListener, args: ["click", ["$event"],] }],
            doFocus: [{ type: core.HostListener, args: ["focus", ["$event"],] }]
        };
        return ContentSwitcherOption;
    }());

    /**
     * The content switcher can be used for toggling between distinct options.
     * Similar to tabs, but without an associated content panel
     *
     * [See demo](../../?path=/story/content-switcher--basic)
     *
     * ```html
     * <ibm-content-switcher (selected)="selected($event)">
     *		<button ibmContentOption>First section</button>
     *		<button ibmContentOption>Second section</button>
     *		<button ibmContentOption>Third section</button>
     *	</ibm-content-switcher>
     *	```
     *
     * <example-url>../../iframe.html?id=content-switcher--basic</example-url>
     */
    var ContentSwitcher = /** @class */ (function () {
        function ContentSwitcher(elementRef) {
            this.elementRef = elementRef;
            this.ariaLabel = "content switcher";
            /**
             * `light` or `dark` content switcher theme
             */
            this.theme = "dark";
            /**
             * Emits the activated `ContentSwitcherOption`
             */
            this.selected = new core.EventEmitter();
        }
        ContentSwitcher.prototype.ngAfterViewInit = function () {
            var _this = this;
            var firstActive = this.options.find(function (option) { return option.active; });
            // delay setting active until the DOM has settled
            if (!firstActive) {
                setTimeout(function () { return _this.options.first.active = true; });
            }
            // subscribe to each item, emit when one is selected, and reset the active states
            this.options.forEach(function (option) {
                option.selected.subscribe(function (_) {
                    var active = option;
                    _this.options.forEach(function (option) {
                        if (option !== active) {
                            option.active = false;
                        }
                    });
                    _this.selected.emit(active);
                });
            });
        };
        ContentSwitcher.prototype.hostkeys = function (event) {
            var buttonList = Array.from(this.elementRef.nativeElement.querySelectorAll("[ibmContentOption]"));
            switch (event.key) {
                case "Right": // IE specific value
                case "ArrowRight":
                    event.preventDefault();
                    if (!common.isFocusInLastItem(event, buttonList)) {
                        var index = buttonList.findIndex(function (item) { return item === event.target; });
                        buttonList[index + 1].focus();
                    }
                    else {
                        buttonList[0].focus();
                    }
                    break;
                case "Left": // IE specific value
                case "ArrowLeft":
                    event.preventDefault();
                    if (!common.isFocusInFirstItem(event, buttonList)) {
                        var index = buttonList.findIndex(function (item) { return item === event.target; });
                        buttonList[index - 1].focus();
                    }
                    else {
                        buttonList[buttonList.length - 1].focus();
                    }
                    break;
                case "Home":
                    event.preventDefault();
                    buttonList[0].focus();
                    break;
                case "End":
                    event.preventDefault();
                    buttonList[buttonList.length - 1].focus();
                    break;
            }
        };
        ContentSwitcher.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-content-switcher",
                        template: "\n\t\t<div\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"bx--content-switcher\"\n\t\t\t[class.bx--content-switcher--light]=\"theme === 'light'\"\n\t\t\trole=\"tablist\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t"
                    }] }
        ];
        /** @nocollapse */
        ContentSwitcher.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ContentSwitcher.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            selected: [{ type: core.Output }],
            options: [{ type: core.ContentChildren, args: [ContentSwitcherOption,] }],
            hostkeys: [{ type: core.HostListener, args: ["keydown", ["$event"],] }]
        };
        return ContentSwitcher;
    }());

    var ContentSwitcherModule = /** @class */ (function () {
        function ContentSwitcherModule() {
        }
        ContentSwitcherModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ContentSwitcher,
                            ContentSwitcherOption
                        ],
                        exports: [
                            ContentSwitcher,
                            ContentSwitcherOption
                        ],
                        imports: [common$1.CommonModule]
                    },] }
        ];
        return ContentSwitcherModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ContentSwitcher = ContentSwitcher;
    exports.ContentSwitcherOption = ContentSwitcherOption;
    exports.ContentSwitcherModule = ContentSwitcherModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=carbon-components-angular-content-switcher.umd.js.map