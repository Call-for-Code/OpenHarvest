/**
 *
 * carbon-angular v0.0.0 | button.directive.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { OnInit } from "@angular/core";
import { ButtonSize, ButtonType } from "./button.types";
/**
 * A convenience directive for applying styling to a button.
 *
 * [See demo](../../?path=/story/button--basic)
 *
 * Example:
 *
 * ```html
 * <button ibmButton>A button</button>
 * <button ibmButton="secondary">A secondary button</button>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.
 *
 * <example-url>../../iframe.html?id=button--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class Button implements OnInit {
    /**
     * sets the button type
     */
    ibmButton: ButtonType;
    /**
     * Specify the size of the button
     */
    size: ButtonSize;
    /**
     * If assistive text is used, this specifies the placement.
     * Possible placements are `top`, `bottom`, `left`, `right`.
     * If assistive text is not used, this can be left undefined.
     */
    assistiveTextPlacement: "top" | "bottom" | "left" | "right";
    /**
     * If assistive text is used, this specifies the alignment.
     * Possible alignments are `center`, `start`, `end`.
     * If assistive text is not used, this can be left undefined.
     */
    assistiveTextAlignment: "center" | "start" | "end";
    readonly baseClass: boolean;
    readonly primaryButton: boolean;
    readonly secondaryButton: boolean;
    readonly tertiaryButton: boolean;
    readonly ghostButton: boolean;
    readonly dangerButton: boolean;
    skeleton: boolean;
    readonly smallSize: boolean;
    readonly fieldSize: boolean;
    toolbarAction: boolean;
    overflowMenu: boolean;
    iconOnly: boolean;
    /**
     * `hasAssistiveText` input specifies whether the button contains assistive text or not.
     * Assistive text can be utilized as follows:
     * ```typescript
     *	<button
     *		ibmButton="tertiary"
     *		[iconOnly]="true"
     *		[hasAssistiveText]="true"
     *		assistiveTextPlacement="top"
     *		assistiveTextAlignment="center">
     *		<svg class="bx--btn__icon" ibmIconCopy size="20"></svg>
     *		<span class="bx--assistive-text">Icon description</span>
     *	</button>
     * ```
     */
    hasAssistiveText: boolean;
    readonly isAssistiveTextCenterAligned: boolean;
    readonly isAssistiveTextStartAligned: boolean;
    readonly isAssistiveTextEndAligned: boolean;
    readonly isAssistiveTextTopPositioned: boolean;
    readonly isAssistiveTextBottomPositioned: boolean;
    readonly isAssistiveTextLeftPositioned: boolean;
    readonly isAssistiveTextRightPositioned: boolean;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Button, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Button, "[ibmButton]", never, { "ibmButton": "ibmButton"; "assistiveTextPlacement": "assistiveTextPlacement"; "assistiveTextAlignment": "assistiveTextAlignment"; "skeleton": "skeleton"; "iconOnly": "iconOnly"; "hasAssistiveText": "hasAssistiveText"; "size": "size"; }, {}, never>;
}

//# sourceMappingURL=button.directive.d.ts.map