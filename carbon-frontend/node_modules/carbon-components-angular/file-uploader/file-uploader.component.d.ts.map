{"version":3,"file":"file-uploader.component.d.ts","sources":["file-uploader.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | file-uploader.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, TemplateRef } from \"@angular/core\";\nimport { I18n } from \"carbon-components-angular/i18n\";\nimport { FileItem } from \"./file-item.interface\";\n/**\n * [See demo](../../?path=/story/file-uploader--basic)\n *\n * <example-url>../../iframe.html?id=file-uploader--basic</example-url>\n */\nexport declare class FileUploader {\n    protected i18n: I18n;\n    /**\n     * Counter used to create unique ids for file-uploader components\n     */\n    static fileUploaderCount: number;\n    /**\n     * Accessible text for the button that opens the upload window.\n     *\n     * Defaults to the `FILE_UPLOADER.OPEN` value from the i18n service\n     */\n    buttonText: any;\n    /**\n     * Type set for button\n     */\n    buttonType: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\";\n    /**\n     * Text set to the title\n     */\n    title: string;\n    /**\n     * Text set to the description\n     */\n    description: string;\n    /**\n     * Specify the types of files that the input should be able to receive\n     */\n    accept: any[];\n    /**\n     * Set to `false` to tell the component to only accept a single file on upload.\n     *\n     * Defaults to `true`. Accepts multiple files.\n     */\n    multiple: boolean;\n    /**\n     * Set to `true` for a loading file uploader.\n     */\n    skeleton: boolean;\n    /**\n     * Sets the size of the button.\n     */\n    size: \"sm\" | \"normal\";\n    /**\n     * Set to `true` to enable drag and drop.\n     */\n    drop: boolean;\n    /**\n     * Sets the text shown in drag and drop box.\n     */\n    dropText: string | TemplateRef<any>;\n    /**\n     * Provides a unique id for the underlying <input> node\n     */\n    fileUploaderId: string;\n    /**\n     * Maintains a reference to the view DOM element of the underlying <input> node\n     */\n    fileInput: any;\n    /**\n     * The list of files that have been submitted to be uploaded\n     */\n    files: Set<FileItem>;\n    /**\n     * Set to `true` to disable upload button\n     */\n    disabled: boolean;\n    filesChange: EventEmitter<any>;\n    /**\n     * Controls the state of the drag and drop file container\n     */\n    dragOver: boolean;\n    protected onTouchedCallback: () => void;\n    protected onChangeCallback: (_: Set<FileItem>) => void;\n    constructor(i18n: I18n);\n    /**\n     * Specifies the property to be used as the return value to `ngModel`\n     */\n    value: Set<FileItem>;\n    onBlur(): void;\n    readonly fileList: {}[];\n    /**\n     * Propagates the injected `value`.\n     */\n    writeValue(value: Set<FileItem>): void;\n    createFileItem(file: any): FileItem;\n    onFilesAdded(): void;\n    onDragOver(event: any): void;\n    onDragLeave(event: any): void;\n    onDrop(event: any): void;\n    removeFile(fileItem: any): void;\n    isTemplate(value: any): boolean;\n    /**\n     * Registers the injected function to control the touch use of the `FileUploader`.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n    registerOnChange(fn: any): void;\n}\n"]}