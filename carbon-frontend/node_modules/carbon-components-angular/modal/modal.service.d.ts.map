{"version":3,"file":"modal.service.d.ts","sources":["modal.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | modal.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ComponentFactoryResolver, ComponentRef } from \"@angular/core\";\nimport { AlertModalData } from \"./alert-modal.interface\";\nimport { PlaceholderService } from \"carbon-components-angular/placeholder\";\n/**\n * Modal service handles instantiating and destroying modal instances.\n * Uses PlaceholderService to track open instances, and for it's placeholder view reference.\n */\nexport declare class ModalService {\n    resolver: ComponentFactoryResolver;\n    placeholderService: PlaceholderService;\n    protected static modalList: Array<ComponentRef<any>>;\n    /**\n     * Creates an instance of `ModalService`.\n     */\n    constructor(resolver: ComponentFactoryResolver, placeholderService: PlaceholderService);\n    /**\n     * Creates and renders the modal component that is passed in.\n     * `inputs` is an optional parameter of `data` that can be passed to the `Modal` component.\n     */\n    create<T>(data: {\n        component: any;\n        inputs?: any;\n    }): ComponentRef<any>;\n    /**\n     * Creates and renders a new alert modal component.\n     * @param data You can pass in:\n     * `type` - \"default\" | \"danger\" = \"default\",\n     * `label` - a label shown over the title,\n     * `title` - modal's title,\n     * `content` - modal's content, could include HTML tags.\n     * `buttons` is an array of objects\n     * `close` custom close function\n     * ```\n     * {\n     * \t\ttext: \"Button text\",\n     * \t\ttype: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\" | \"danger--primary\" = \"primary\",\n     * \t\tclick: clickFunction,\n     * }\n     * ```\n     */\n    show(data: AlertModalData): ComponentRef<any>;\n    /**\n     * Destroys the modal on the supplied index.\n     * When called without parameters it destroys the most recently created/top most modal.\n     */\n    destroy(index?: number): void;\n}\n"]}