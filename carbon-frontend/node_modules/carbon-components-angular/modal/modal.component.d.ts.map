{"version":3,"file":"modal.component.d.ts","sources":["modal.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | modal.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ModalService } from \"./modal.service\";\nimport { AfterViewInit, EventEmitter, ElementRef, SimpleChanges, OnChanges } from \"@angular/core\";\n/**\n * Component to create modals for presenting content.\n *\n * [See demo](../../?path=/story/modal--basic)\n *\n * Using a modal in your application requires `ibm-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n```html\n<ibm-placeholder></ibm-placeholder>\n```\n *\n * A more complete example for `Modal` is given as follows:\n *\n * Example modal definition:\n *\n```typescript\n@Component({\n    selector: \"app-sample-modal\",\n    template: `\n                <ibm-modal size=\"xl\" (overlaySelected)=\"closeModal()\">\n                    <ibm-modal-header (closeSelect)=\"closeModal()\">Header text</ibm-modal-header>\n                        <section class=\"modal-body\">\n                            <h1>Sample modal works.</h1>\n                            <button class=\"btn--icon-link\" nPopover=\"Hello there\" title=\"Popover title\" placement=\"right\" appendInline=\"true\">\n                                <svg ibmIcon=\"info\" size=\"sm\"></ibm-icon>\n                            </button>\n                            {{modalText}}\n                        </section>\n                    <ibm-modal-footer><button ibmButton=\"primary\" (click)=\"closeModal()\">Close</button></ibm-modal-footer>\n                </ibm-modal>`,\n    styleUrls: [\"./sample-modal.component.scss\"]\n})\nexport class SampleModal extends BaseModal {\n    modalText: string;\n    constructor(protected injector: Injector) {\n        super();\n        this.modalText = this.injector.get(\"modalText\");\n    }\n}\n```\n *\n * Example of opening the modal:\n *\n```typescript\n@Component({\n    selector: \"app-modal-demo\",\n    template: `\n                <button ibmButton=\"primary\" (click)=\"openModal('drill')\">Drill-down modal</button>\n                <ibm-placeholder></ibm-placeholder>`\n})\nexport class ModalDemo {\n    openModal() {\n        this.modalService.create({component: SampleModal, inputs: {modalText: \"Hello universe.\"}});\n    }\n}\n```\n *\n * <example-url>../../iframe.html?id=modal--basic</example-url>\n */\nexport declare class Modal implements AfterViewInit, OnChanges {\n    modalService: ModalService;\n    /**\n     * Size of the modal to display.\n     */\n    size: \"xs\" | \"sm\" | \"lg\";\n    /**\n     * Classification of the modal.\n     */\n    theme: \"default\" | \"danger\";\n    /**\n     * Label for the modal.\n     *\n     * @deprecated since v4\n     */\n    modalLabel: string;\n    ariaLabel: string;\n    /**\n     * Controls the visibility of the modal when used directly in a template\n     */\n    open: boolean;\n    /**\n     * The element that triggers the modal, which should receive focus when the modal closes\n     */\n    trigger: HTMLElement;\n    /**\n     * Specify whether the modal contains scrolling content. This property overrides the automatic\n     * detection of the existence of scrolling content. Set this property to `true` to force\n     * overflow indicator to show up or to `false` to force overflow indicator to disappear.\n     * It is set to `null` by default which indicates not to override automatic detection.\n     */\n    hasScrollingContent: boolean;\n    /**\n     * Emits event when click occurs within `n-overlay` element. This is to track click events occurring outside bounds of the `Modal` object.\n     */\n    overlaySelected: EventEmitter<{}>;\n    /**\n     * To emit the closing event of the modal window.\n     */\n    close: EventEmitter<{}>;\n    /**\n     * Maintains a reference to the view DOM element of the `Modal`.\n     */\n    modal: ElementRef;\n    /**\n     * An element should have 'modal-primary-focus' as an attribute to receive initial focus within the `Modal` component.\n     */\n    selectorPrimaryFocus: string;\n    /**\n     * Creates an instance of `Modal`.\n     */\n    constructor(modalService: ModalService);\n    ngOnChanges({ open }: SimpleChanges): void;\n    /**\n     * Set document focus to be on the modal component after it is initialized.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Handle keyboard events to close modal and tab through the content within the modal.\n     */\n    handleKeyboardEvent(event: KeyboardEvent): void;\n    /**\n     * This detects whether or not the modal contains scrolling content.\n     *\n     * To force trigger a detection (ie. on window resize), change or reset the value of the modal content.\n     *\n     * Use the `hasScrollingContent` input to manually override the overflow indicator.\n     */\n    readonly shouldShowScrollbar: boolean;\n    protected focusInitialElement(): void;\n}\n"]}