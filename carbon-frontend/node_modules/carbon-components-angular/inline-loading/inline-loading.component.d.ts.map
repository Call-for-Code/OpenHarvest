{"version":3,"file":"inline-loading.component.d.ts","sources":["inline-loading.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | inline-loading.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter } from \"@angular/core\";\nexport declare enum InlineLoadingState {\n    /** It hides the whole component. */\n    Hidden = \"hidden\",\n    /** It shows the `loadingText` but no loading animation. */\n    Inactive = \"inactive\",\n    /** It shows the `loadingText` with loading animation. */\n    Active = \"active\",\n    /** It shows the `successText` with a success state. */\n    Finished = \"finished\",\n    /** It shows the `errorText` with an error state. */\n    Error = \"error\"\n}\n/**\n * [See demo](../../?path=/story/inline-loading--basic)\n *\n * <example-url>../../iframe.html?id=inline-loading--basic</example-url>\n */\nexport declare class InlineLoading {\n    InlineLoadingState: typeof InlineLoadingState;\n    /**\n     * Specify the text description for the loading state.\n     */\n    state: InlineLoadingState | string;\n    /**\n     * Specify the text description for the loading state.\n     */\n    loadingText: string;\n    /**\n     * Specify the text description for the success state.\n     */\n    successText: string;\n    /**\n     * Provide a delay for the `setTimeout` for success.\n     */\n    successDelay: number;\n    /**\n     * Specify the text description for the error state.\n     */\n    errorText: string;\n    /**\n     * set to `false` to stop the loading animation\n     */\n    isActive: boolean;\n    /**\n     * Returns value `true` if the component is in the success state.\n     */\n    /**\n    * Set the component's state to match the parameter and emits onSuccess if it exits.\n    */\n    success: boolean;\n    /**\n     * Emits event after the success state is active\n     */\n    onSuccess: EventEmitter<any>;\n    loadingClass: boolean;\n}\n"]}