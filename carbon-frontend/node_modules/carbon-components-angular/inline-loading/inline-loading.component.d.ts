/**
 *
 * carbon-angular v0.0.0 | inline-loading.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare enum InlineLoadingState {
    /** It hides the whole component. */
    Hidden = "hidden",
    /** It shows the `loadingText` but no loading animation. */
    Inactive = "inactive",
    /** It shows the `loadingText` with loading animation. */
    Active = "active",
    /** It shows the `successText` with a success state. */
    Finished = "finished",
    /** It shows the `errorText` with an error state. */
    Error = "error"
}
/**
 * [See demo](../../?path=/story/inline-loading--basic)
 *
 * <example-url>../../iframe.html?id=inline-loading--basic</example-url>
 */
export declare class InlineLoading {
    InlineLoadingState: typeof InlineLoadingState;
    /**
     * Specify the text description for the loading state.
     */
    state: InlineLoadingState | string;
    /**
     * Specify the text description for the loading state.
     */
    loadingText: string;
    /**
     * Specify the text description for the success state.
     */
    successText: string;
    /**
     * Provide a delay for the `setTimeout` for success.
     */
    successDelay: number;
    /**
     * Specify the text description for the error state.
     */
    errorText: string;
    /**
     * set to `false` to stop the loading animation
     */
    isActive: boolean;
    /**
     * Returns value `true` if the component is in the success state.
     */
    /**
    * Set the component's state to match the parameter and emits onSuccess if it exits.
    */
    success: boolean;
    /**
     * Emits event after the success state is active
     */
    onSuccess: EventEmitter<any>;
    loadingClass: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InlineLoading, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InlineLoading, "ibm-inline-loading", never, { "state": "state"; "successDelay": "successDelay"; "isActive": "isActive"; "success": "success"; "loadingText": "loadingText"; "successText": "successText"; "errorText": "errorText"; }, { "onSuccess": "onSuccess"; }, never, never>;
}

//# sourceMappingURL=inline-loading.component.d.ts.map