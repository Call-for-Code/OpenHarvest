{"version":3,"file":"search.component.d.ts","sources":["search.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | search.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, ElementRef } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { I18n } from \"carbon-components-angular/i18n\";\n/**\n * [See demo](../../?path=/story/search--basic)\n *\n * <example-url>../../iframe.html?id=search--basic</example-url>\n */\nexport declare class Search implements ControlValueAccessor {\n    protected elementRef: ElementRef;\n    protected i18n: I18n;\n    /**\n     * Variable used for creating unique ids for search components.\n     */\n    static searchCount: number;\n    readonly containerClass: boolean;\n    /**\n     * `light` or `dark` search theme.\n     */\n    theme: \"light\" | \"dark\";\n    /**\n     * Size of the search field.\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Set to `true` for a disabled search input.\n     */\n    disabled: boolean;\n    /**\n     * Set to `true` for a toolbar search component.\n     */\n    toolbar: boolean;\n    /**\n     * Set to `true` for a loading search component.\n     */\n    skeleton: boolean;\n    /**\n     * Set to `true` to expand the toolbar search component.\n     */\n    active: boolean;\n    /**\n     * Specifies whether the search component is used in the table toolbar.\n     */\n    tableSearch: boolean;\n    /**\n     * Sets the name attribute on the `input` element.\n     */\n    name: string;\n    /**\n     * The unique id for the search component.\n     */\n    id: string;\n    /**\n     * Reflects the required attribute of the `input` element.\n     */\n    required: boolean;\n    /**\n     * Sets the value attribute on the `input` element.\n     */\n    value: string;\n    /**\n     * Sets the autocomplete attribute on the `input` element.\n     * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\n     */\n    autocomplete: string;\n    /**\n     * Sets the text inside the `label` tag.\n     */\n    label: any;\n    /**\n     * Sets the placeholder attribute on the `input` element.\n     */\n    placeholder: any;\n    /**\n     * Used to set the `title` attribute of the clear button.\n     */\n    clearButtonTitle: any;\n    /**\n     * Title for the search trigger\n     */\n    searchTitle: string;\n    /**\n     * Sets the aria label on the `div` element with the `search` role.\n     */\n    ariaLabel: string;\n    /**\n     * Emits an event when value is changed.\n     */\n    valueChange: EventEmitter<string>;\n    open: EventEmitter<boolean>;\n    /**\n     * Emits an event when the clear button is clicked.\n     */\n    clear: EventEmitter<{}>;\n    /**\n     * Emits an event on enter.\n     */\n    search: EventEmitter<string>;\n    inputRef: ElementRef;\n    protected _size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Creates an instance of `Search`.\n     * @param i18n The i18n translations.\n     */\n    constructor(elementRef: ElementRef, i18n: I18n);\n    /**\n     * This is the initial value set to the component\n     * @param value The input value.\n     */\n    writeValue(value: any): void;\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the search input is touched.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.\n     */\n    onTouched: () => any;\n    /**\n     * Method set in `registerOnChange` to propagate changes back to the form.\n     */\n    propagateChange: (_: any) => void;\n    /**\n     * Called when text is written in the input.\n     * @param search The input text.\n     */\n    onSearch(search: string): void;\n    /**\n     * Called on enter.\n     */\n    onEnter(): void;\n    /**\n     * Called when clear button is clicked.\n     */\n    clearSearch(): void;\n    doValueChange(): void;\n    openSearch(): void;\n    keyDown(event: KeyboardEvent): void;\n    focusOut(event: any): void;\n}\n"]}