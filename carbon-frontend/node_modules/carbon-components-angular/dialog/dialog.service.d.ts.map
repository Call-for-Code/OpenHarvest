{"version":3,"file":"dialog.service.d.ts","sources":["dialog.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | dialog.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Injector, ComponentRef, ComponentFactory, ComponentFactoryResolver, ViewContainerRef } from \"@angular/core\";\nimport { DialogConfig } from \"./dialog-config.interface\";\nimport { PlaceholderService } from \"carbon-components-angular/placeholder\";\nimport { Dialog } from \"./dialog.component\";\n/**\n * `Dialog` object to be injected into other components.\n */\nexport declare class DialogService {\n    protected componentFactoryResolver: ComponentFactoryResolver;\n    protected injector: Injector;\n    protected placeholderService: PlaceholderService;\n    /**\n     * Used in `singletonClickListen`, don't count on its existence and values.\n     */\n    protected static listeningForBodyClicks: boolean;\n    /**\n     * A set of all known dialog components\n     */\n    protected static dialogRefs: Set<ComponentRef<Dialog>>;\n    /**\n     * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct\n     */\n    static closeAll(): void;\n    /**\n     * The default component factory to use when creating dialogs\n     */\n    componentFactory: ComponentFactory<any>;\n    /**\n     * Creates an instance of `DialogService`.\n     */\n    constructor(componentFactoryResolver: ComponentFactoryResolver, injector: Injector, placeholderService: PlaceholderService);\n    /**\n     * Set the context for the service. For example, the `component` property can be used to set the\n     * default component that should be created by the service, for a given instance of the service.\n     * @param options `{ component: any }` where `component` is a component that extends `dialog.component`\n     */\n    setContext(options: {\n        component: any;\n    }): void;\n    /**\n     * If `dialogRef` is defined, the Dialog is already open. If\n     * `dialogRef` is undefined, we create the `Dialog` component and reference to it.\n     * A subscription is created to track if the `Dialog` should close.\n     *\n     * @param viewContainer a `ViewContainerRef` to instantiate the component against.\n     * May be `null` if an `ibm-placeholder` exists and `dialogConfig.appendInline` is false\n     * @param dialogConfig the `DialogConfig` for the component\n     */\n    open(viewContainer: ViewContainerRef, dialogConfig: DialogConfig, component?: any): ComponentRef<Dialog>;\n    /**\n     * On close of `Dialog` item, sets focus back to previous item, unsets\n     * the current `dialogRef` item. Unsubscribes to the event of `Dialog` close.\n     *\n     * @param dialogRef the dialogRef to close\n     */\n    close(dialogRef: ComponentRef<Dialog>): void;\n    /**\n     * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct\n     *\n     * @deprecated since v4. Use the static `DialogService.closeAll` instead\n     */\n    closeAll(): void;\n    /**\n     * Fix for safari hijacking clicks.\n     *\n     * Runs on `ngOnInit` of every dialog. Ensures we don't have multiple listeners\n     * because having many of them could degrade performance in certain cases (and is\n     * not necessary for our use case)\n     *\n     * This is an internally used function, can change at any point (even get removed)\n     * and changes to it won't be considered a breaking change. Use at your own risk.\n     */\n    singletonClickListen(): void;\n}\n"]}