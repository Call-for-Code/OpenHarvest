/**
 *
 * carbon-angular v0.0.0 | overflow-menu-option.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef, EventEmitter, AfterViewInit } from "@angular/core";
/**
 * Available HTML anchor targets
 */
export declare enum Target {
    self = "_self",
    blank = "_blank",
    parent = "_parent",
    top = "_top"
}
/**
 * `OverflowMenuOption` represents a single option in an overflow menu
 *
 * Presently it has three possible states - normal, disabled, and danger:
 * ```
 * <ibm-overflow-menu-option>Simple option</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option disabled="true">Disabled</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option type="danger">Danger option</ibm-overflow-menu-option>
 * ```
 *
 * For content that expands beyond the overflow menu `OverflowMenuOption` automatically adds a title attribute.
 */
export declare class OverflowMenuOption implements AfterViewInit {
    protected elementRef: ElementRef;
    optionClass: string;
    role: string;
    readonly isDanger: Boolean;
    readonly isDisabled: Boolean;
    /**
     * toggles between `normal` and `danger` states
     */
    type: "normal" | "danger";
    /**
     * disable/enable interactions
     */
    disabled: boolean;
    /**
     * If it's an anchor, this is its location
     */
    href: string;
    /**
     * Allows to add a target to the anchor
     */
    target: Target;
    /**
     * rel only returns its value if target is defined
     */
    readonly rel: string;
    selected: EventEmitter<any>;
    tabIndex: number;
    title: any;
    protected _target: Target;
    constructor(elementRef: ElementRef);
    onClick(): void;
    onFocus(): void;
    onBlur(): void;
    ngAfterViewInit(): void;
}
