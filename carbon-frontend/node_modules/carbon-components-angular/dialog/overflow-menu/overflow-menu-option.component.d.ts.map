{"version":3,"file":"overflow-menu-option.component.d.ts","sources":["overflow-menu-option.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | overflow-menu-option.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ElementRef, EventEmitter, AfterViewInit } from \"@angular/core\";\n/**\n * Available HTML anchor targets\n */\nexport declare enum Target {\n    self = \"_self\",\n    blank = \"_blank\",\n    parent = \"_parent\",\n    top = \"_top\"\n}\n/**\n * `OverflowMenuOption` represents a single option in an overflow menu\n *\n * Presently it has three possible states - normal, disabled, and danger:\n * ```\n * <ibm-overflow-menu-option>Simple option</ibm-overflow-menu-option>\n * <ibm-overflow-menu-option disabled=\"true\">Disabled</ibm-overflow-menu-option>\n * <ibm-overflow-menu-option type=\"danger\">Danger option</ibm-overflow-menu-option>\n * ```\n *\n * For content that expands beyond the overflow menu `OverflowMenuOption` automatically adds a title attribute.\n */\nexport declare class OverflowMenuOption implements AfterViewInit {\n    protected elementRef: ElementRef;\n    optionClass: string;\n    role: string;\n    readonly isDanger: Boolean;\n    readonly isDisabled: Boolean;\n    /**\n     * toggles between `normal` and `danger` states\n     */\n    type: \"normal\" | \"danger\";\n    /**\n     * disable/enable interactions\n     */\n    disabled: boolean;\n    /**\n     * If it's an anchor, this is its location\n     */\n    href: string;\n    /**\n     * Allows to add a target to the anchor\n     */\n    target: Target;\n    /**\n     * rel only returns its value if target is defined\n     */\n    readonly rel: string;\n    selected: EventEmitter<any>;\n    tabIndex: number;\n    title: any;\n    protected _target: Target;\n    constructor(elementRef: ElementRef);\n    onClick(): void;\n    onFocus(): void;\n    onBlur(): void;\n    ngAfterViewInit(): void;\n}\n"]}