{"version":3,"file":"dialog.component.d.ts","sources":["dialog.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | dialog.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, ElementRef, OnInit, AfterViewInit, OnDestroy } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { AbsolutePosition, Positions } from \"@carbon/utils-position\";\nimport { CloseMeta, DialogConfig } from \"./dialog-config.interface\";\nimport { AnimationFrameService, ElementService } from \"carbon-components-angular/utils\";\n/**\n * Implements a `Dialog` that can be positioned anywhere on the page.\n * Used to implement a popover or tooltip.\n */\nexport declare class Dialog implements OnInit, AfterViewInit, OnDestroy {\n    protected elementRef: ElementRef;\n    protected elementService: ElementService;\n    protected animationFrameService: AnimationFrameService;\n    /**\n     * Emits event that handles the closing of a `Dialog` object.\n     */\n    close: EventEmitter<CloseMeta>;\n    /**\n     * Receives `DialogConfig` interface object with properties of `Dialog`\n     * explicitly defined.\n     */\n    dialogConfig: DialogConfig;\n    /**\n     * Maintains a reference to the view DOM element of the `Dialog`.\n     */\n    dialog: ElementRef;\n    /**\n     * Stores the data received from `dialogConfig`.\n     */\n    data: {};\n    /**\n     * The placement of the `Dialog` is received from the `Position` service.\n     */\n    placement: string;\n    protected visibilitySubscription: Subscription;\n    protected animationFrameSubscription: Subscription;\n    /**\n     * Handles offsetting the `Dialog` item based on the defined position\n     * to not obscure the content beneath.\n     */\n    protected addGap: {\n        \"left\": (pos: any) => AbsolutePosition;\n        \"right\": (pos: any) => AbsolutePosition;\n        \"top\": (pos: any) => AbsolutePosition;\n        \"bottom\": (pos: any) => AbsolutePosition;\n        \"left-bottom\": (pos: any) => AbsolutePosition;\n        \"right-bottom\": (pos: any) => AbsolutePosition;\n    };\n    /**\n     * Extra placements. Child classes can add to this for use in `placeDialog`.\n     */\n    protected placements: Positions;\n    /**\n     * Creates an instance of `Dialog`.\n     * @param elementRef\n     * @param elementService\n     */\n    constructor(elementRef: ElementRef, elementService: ElementService, animationFrameService?: AnimationFrameService);\n    /**\n     * Initialize the `Dialog`, set the placement and gap, and add a `Subscription` to resize events.\n     */\n    ngOnInit(): void;\n    /**\n     * After the DOM is ready, focus is set and dialog is placed\n     * in respect to the parent element.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Empty method to be overridden by consuming classes to run any additional initialization code.\n     */\n    onDialogInit(): void;\n    /**\n     * Empty method to be overridden by consuming classes to run any additional initialization code after the view is available.\n     * NOTE: this does _not_ guarantee the dialog will be positioned, simply that it will exist in the DOM\n     */\n    afterDialogViewInit(): void;\n    /**\n     * Uses the position service to position the `Dialog` in screen space\n     */\n    placeDialog(): void;\n    /**\n     * Sets up a KeyboardEvent to close `Dialog` with Escape key.\n     * @param event\n     */\n    escapeClose(event: KeyboardEvent): void;\n    /**\n     * Sets up a event Listener to close `Dialog` if click event occurs outside\n     * `Dialog` object.\n     * @param event\n     */\n    clickClose(event: any): void;\n    /**\n     * Closes `Dialog` object by emitting the close event upwards to parents.\n     */\n    doClose(meta?: CloseMeta): void;\n    /**\n     * At destruction of component, `Dialog` unsubscribes from all the subscriptions.\n     */\n    ngOnDestroy(): void;\n}\n"]}