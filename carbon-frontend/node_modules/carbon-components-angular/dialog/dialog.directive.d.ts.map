{"version":3,"file":"dialog.directive.d.ts","sources":["dialog.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | dialog.directive.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, OnInit, OnDestroy, ElementRef, TemplateRef, ViewContainerRef, OnChanges, SimpleChanges, ComponentRef } from \"@angular/core\";\nimport { DialogService } from \"./dialog.service\";\nimport { CloseMeta, DialogConfig } from \"./dialog-config.interface\";\nimport { EventService } from \"carbon-components-angular/utils\";\nimport { Dialog } from \"./dialog.component\";\n/**\n * A generic directive that can be inherited from to create dialogs (for example, a tooltip or popover)\n *\n * This class contains the relevant initialization code, specific templates, options, and additional inputs\n * should be specified in the derived class.\n *\n * NOTE: All child classes should add `DialogService` as a provider, otherwise they will lose context that\n * the service relies on.\n */\nexport declare class DialogDirective implements OnInit, OnDestroy, OnChanges {\n    protected elementRef: ElementRef;\n    protected viewContainerRef: ViewContainerRef;\n    protected dialogService: DialogService;\n    protected eventService: EventService;\n    static dialogCounter: number;\n    /**\n     * Title for the dialog\n     */\n    title: string;\n    /**\n     * Dialog body content.\n     */\n    ibmDialog: string | TemplateRef<any>;\n    /**\n     * Defines how the Dialog is triggered.(Hover and click behave the same on mobile - both respond to a single tap).\n     * Do not add focusable elements if trigger is `hover` or `mouseenter`.\n     */\n    trigger: \"click\" | \"hover\" | \"mouseenter\";\n    /**\n     * Defines how the Dialog close event is triggered.\n     *\n     * [See here](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event)\n     * for more on the difference between `mouseleave` and `mouseout`.\n     *\n     * Defaults to `click` when `trigger` is set to `click`.\n     */\n    closeTrigger: \"mouseout\" | \"mouseleave\";\n    /**\n     * Placement of the dialog, usually relative to the element the directive is on.\n     */\n    placement: string;\n    /**\n     * This specifies any vertical and horizontal offset for the position of the dialog\n     */\n    offset: {\n        x: number;\n        y: number;\n    };\n    /**\n     * Classes to add to the dialog container\n     */\n    wrapperClass: string;\n    /**\n     * Spacing between the dialog and it's triggering element\n     */\n    gap: number;\n    /**\n     * Set to `true` to open the dialog next to the triggering component\n     */\n    appendInline: boolean;\n    /**\n     * Optional data for templates\n     */\n    data: {};\n    isOpen: boolean;\n    /**\n     * This prevents the dialog from being toggled\n     */\n    disabled: boolean;\n    /**\n     * This input allows explicit control over how the dialog should close\n     */\n    shouldClose: (meta: CloseMeta) => boolean;\n    /**\n     * Config object passed to the rendered component\n     */\n    dialogConfig: DialogConfig;\n    /**\n     * Emits an event when the dialog is closed\n     */\n    onClose: EventEmitter<any>;\n    /**\n     * Emits an event when the dialog is opened\n     */\n    onOpen: EventEmitter<any>;\n    /**\n     * Emits an event when the state of `isOpen` changes. Allows `isOpen` to be double bound\n     */\n    isOpenChange: EventEmitter<boolean>;\n    role: string;\n    hasPopup: boolean;\n    readonly ariaOwns: string;\n    /**\n     * Keeps a reference to the currently opened dialog\n     */\n    protected dialogRef: ComponentRef<Dialog>;\n    /**\n     * Creates an instance of DialogDirective.\n     * @param elementRef\n     * @param viewContainerRef\n     * @param dialogService\n     * @param eventService\n     */\n    constructor(elementRef: ElementRef, viewContainerRef: ViewContainerRef, dialogService: DialogService, eventService: EventService);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Sets the config object and binds events for hovering or clicking before\n     * running code from child class.\n     */\n    ngOnInit(): void;\n    /**\n     * When the host dies, kill the popover.\n     * - Useful for use in a modal or similar.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Helper method to call dialogService 'open'.\n     * - Enforce accessibility by updating an aria attr for nativeElement.\n     */\n    open(): ComponentRef<Dialog>;\n    /**\n     * Helper method to toggle the open state of the dialog\n     */\n    toggle(meta?: CloseMeta): void;\n    /**\n     * Helper method to close the dialogRef.\n     */\n    close(meta?: CloseMeta): void;\n    /**\n     * Empty method for child classes to override and specify additional init steps.\n     * Run after DialogDirective completes it's ngOnInit.\n     */\n    protected onDialogInit(): void;\n    /**\n     * Empty method for child to override and specify additional on changes steps.\n     * run after DialogDirective completes it's ngOnChanges.\n     */\n    protected onDialogChanges(_changes: SimpleChanges): void;\n    protected updateConfig(): void;\n}\n"]}