{"version":3,"file":"tab-headers.component.d.ts","sources":["tab-headers.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | tab-headers.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { QueryList, AfterContentInit, ElementRef, TemplateRef, OnChanges, SimpleChanges, OnInit, ChangeDetectorRef } from \"@angular/core\";\nimport { EventService } from \"carbon-components-angular/utils\";\nimport { Tab } from \"./tab.component\";\n/**\n * The `TabHeaders` component contains the `Tab` items and controls scroll functionality\n * if content has overflow.\n */\nexport declare class TabHeaders implements AfterContentInit, OnChanges, OnInit {\n    protected elementRef: ElementRef;\n    protected changeDetectorRef: ChangeDetectorRef;\n    protected eventService: EventService;\n    /**\n     * List of `Tab` components.\n     */\n    tabInput: QueryList<Tab>;\n    /**\n     * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.\n     * Duplicate from `n-tabs` to support standalone headers\n     */\n    cacheActive: boolean;\n    /**\n     * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.\n     */\n    followFocus: boolean;\n    /**\n     * Set to `true` to put tabs in a loading state.\n     */\n    skeleton: boolean;\n    /**\n     * Sets the aria label on the nav element.\n     */\n    ariaLabel: string;\n    /**\n     * Sets the aria labelledby on the nav element.\n     */\n    ariaLabelledby: string;\n    contentBefore: TemplateRef<any>;\n    contentAfter: TemplateRef<any>;\n    type: \"default\" | \"container\";\n    /**\n     * Gets the Unordered List element that holds the `Tab` headings from the view DOM.\n     */\n    headerContainer: any;\n    rightOverflowNavButton: any;\n    leftOverflowNavButton: any;\n    /**\n     * ContentChild of all the n-tabs\n     */\n    tabQuery: QueryList<Tab>;\n    /**\n     * set to tabQuery if tabInput is empty\n     */\n    tabs: QueryList<Tab>;\n    /**\n     * The index of the first visible tab.\n     */\n    firstVisibleTab: number;\n    /**\n     * The DOM element containing the `Tab` headings displayed.\n     */\n    allTabHeaders: QueryList<ElementRef>;\n    /**\n     * Controls the manual focusing done by tabbing through headings.\n     */\n    currentSelectedTab: number;\n    readonly hasHorizontalOverflow: boolean;\n    readonly leftOverflowNavButtonHidden: boolean;\n    readonly rightOverflowNavButtonHidden: boolean;\n    OVERFLOW_BUTTON_OFFSET: number;\n    private overflowNavInterval;\n    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, eventService: EventService);\n    /**\n     * Controls the keydown events used for tabbing through the headings.\n     */\n    keyboardInput(event: any): void;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Controls manually focusing tabs.\n     */\n    onTabFocus(ref: HTMLElement, index: number): void;\n    getSelectedTab(): any;\n    /**\n     * Selects `Tab` 'tab' and moves it into view on the view DOM if it is not already.\n     */\n    selectTab(ref: HTMLElement, tab: Tab, tabIndex: number): void;\n    handleScroll(): void;\n    handleOverflowNavClick(direction: number, multiplier?: number): void;\n    handleOverflowNavMouseDown(direction: number): void;\n    handleOverflowNavMouseUp(): void;\n    /**\n     * Determines which `Tab` is initially selected.\n     */\n    protected setFirstTab(): void;\n}\n"]}