{"version":3,"file":"tab-header-group.component.d.ts","sources":["tab-header-group.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | tab-header-group.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { QueryList, AfterContentInit, ElementRef, TemplateRef, OnChanges, SimpleChanges, ChangeDetectorRef, OnInit } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { EventService } from \"carbon-components-angular/utils\";\nimport { TabHeader } from \"./tab-header.component\";\nexport declare class TabHeaderGroup implements AfterContentInit, OnChanges, OnInit {\n    protected elementRef: ElementRef;\n    protected changeDetectorRef: ChangeDetectorRef;\n    protected eventService: EventService;\n    /**\n     * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.\n     */\n    followFocus: boolean;\n    /**\n     * Set to `true` to put tabs in a loading state.\n     */\n    skeleton: boolean;\n    /**\n     * Sets the aria label on the nav element.\n     */\n    ariaLabel: string;\n    /**\n     * Sets the aria labelledby on the nav element.\n     */\n    ariaLabelledby: string;\n    contentAfter: TemplateRef<any>;\n    contentBefore: TemplateRef<any>;\n    /**\n     * Set to 'true' to have all pane references associated with each tab header\n     * in the tab header group cached and not reloaded on tab switching.\n     */\n    cacheActive: boolean;\n    isNavigation: boolean;\n    type: \"default\" | \"container\";\n    /**\n     * ContentChildren of all the tabHeaders.\n     */\n    tabHeaderQuery: QueryList<TabHeader>;\n    headerContainer: any;\n    rightOverflowNavButton: any;\n    leftOverflowNavButton: any;\n    /**\n     * Keeps track of all the subscriptions to the tab header selection events.\n     */\n    selectedSubscriptionTracker: Subscription;\n    /**\n     * Controls the manual focusing done by tabbing through headings.\n     */\n    currentSelectedIndex: number;\n    readonly hasHorizontalOverflow: boolean;\n    readonly leftOverflowNavButtonHidden: boolean;\n    readonly rightOverflowNavButtonHidden: boolean;\n    OVERFLOW_BUTTON_OFFSET: number;\n    private _cacheActive;\n    private overflowNavInterval;\n    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, eventService: EventService);\n    /**\n     * Controls the keydown events used for tabbing through the headings.\n     */\n    keyboardInput(event: any): void;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    getSelectedTab(): any;\n    handleScroll(): void;\n    handleOverflowNavClick(direction: number, multiplier?: number): void;\n    handleOverflowNavMouseDown(direction: number): void;\n    handleOverflowNavMouseUp(): void;\n}\n"]}