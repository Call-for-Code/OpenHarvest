/**
 *
 * carbon-angular v0.0.0 | tab-headers.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit, ElementRef, TemplateRef, OnChanges, SimpleChanges, OnInit, ChangeDetectorRef } from "@angular/core";
import { EventService } from "carbon-components-angular/utils";
import { Tab } from "./tab.component";
/**
 * The `TabHeaders` component contains the `Tab` items and controls scroll functionality
 * if content has overflow.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TabHeaders implements AfterContentInit, OnChanges, OnInit {
    protected elementRef: ElementRef;
    protected changeDetectorRef: ChangeDetectorRef;
    protected eventService: EventService;
    /**
     * List of `Tab` components.
     */
    tabInput: QueryList<Tab>;
    /**
     * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
     * Duplicate from `n-tabs` to support standalone headers
     */
    cacheActive: boolean;
    /**
     * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.
     */
    followFocus: boolean;
    /**
     * Set to `true` to put tabs in a loading state.
     */
    skeleton: boolean;
    /**
     * Sets the aria label on the nav element.
     */
    ariaLabel: string;
    /**
     * Sets the aria labelledby on the nav element.
     */
    ariaLabelledby: string;
    contentBefore: TemplateRef<any>;
    contentAfter: TemplateRef<any>;
    type: "default" | "container";
    /**
     * Gets the Unordered List element that holds the `Tab` headings from the view DOM.
     */
    headerContainer: any;
    rightOverflowNavButton: any;
    leftOverflowNavButton: any;
    /**
     * ContentChild of all the n-tabs
     */
    tabQuery: QueryList<Tab>;
    /**
     * set to tabQuery if tabInput is empty
     */
    tabs: QueryList<Tab>;
    /**
     * The index of the first visible tab.
     */
    firstVisibleTab: number;
    /**
     * The DOM element containing the `Tab` headings displayed.
     */
    allTabHeaders: QueryList<ElementRef>;
    /**
     * Controls the manual focusing done by tabbing through headings.
     */
    currentSelectedTab: number;
    readonly hasHorizontalOverflow: boolean;
    readonly leftOverflowNavButtonHidden: boolean;
    readonly rightOverflowNavButtonHidden: boolean;
    OVERFLOW_BUTTON_OFFSET: number;
    private overflowNavInterval;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, eventService: EventService);
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    keyboardInput(event: any): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Controls manually focusing tabs.
     */
    onTabFocus(ref: HTMLElement, index: number): void;
    getSelectedTab(): any;
    /**
     * Selects `Tab` 'tab' and moves it into view on the view DOM if it is not already.
     */
    selectTab(ref: HTMLElement, tab: Tab, tabIndex: number): void;
    handleScroll(): void;
    handleOverflowNavClick(direction: number, multiplier?: number): void;
    handleOverflowNavMouseDown(direction: number): void;
    handleOverflowNavMouseUp(): void;
    /**
     * Determines which `Tab` is initially selected.
     */
    protected setFirstTab(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabHeaders, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabHeaders, "ibm-tab-headers", never, { "cacheActive": "cacheActive"; "skeleton": "skeleton"; "type": "type"; "tabInput": "tabs"; "followFocus": "followFocus"; "ariaLabel": "ariaLabel"; "ariaLabelledby": "ariaLabelledby"; "contentBefore": "contentBefore"; "contentAfter": "contentAfter"; }, {}, ["tabQuery"], never>;
}

//# sourceMappingURL=tab-headers.component.d.ts.map