/**
 *
 * carbon-angular v0.0.0 | expandable-tile.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ElementRef } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { merge } from "carbon-components-angular/utils";
var ExpandableTile = /** @class */ (function () {
    function ExpandableTile(i18n, elementRef) {
        this.i18n = i18n;
        this.elementRef = elementRef;
        this.expanded = false;
        this.tileMaxHeight = 0;
        this.currentExpandedHeight = 0;
        this.element = this.elementRef.nativeElement;
        this.expand = this.i18n.getOverridable("TILES.EXPAND");
        this.collapse = this.i18n.getOverridable("TILES.COLLAPSE");
    }
    Object.defineProperty(ExpandableTile.prototype, "translations", {
        /**
         * Expects an object that contains some or all of:
         * ```
         * {
         *		"EXPAND": "Expand",
         *		"COLLAPSE": "Collapse",
         * }
         * ```
         */
        set: function (value) {
            var valueWithDefaults = merge(this.i18n.getMultiple("TILES"), value);
            this.expand.override(valueWithDefaults.EXPAND);
            this.collapse.override(valueWithDefaults.COLLAPSE);
        },
        enumerable: true,
        configurable: true
    });
    ExpandableTile.prototype.ngAfterContentInit = function () {
        this.updateMaxHeight();
    };
    Object.defineProperty(ExpandableTile.prototype, "expandedHeight", {
        get: function () {
            var tile = this.element.querySelector(".bx--tile");
            var tilePadding = parseInt(getComputedStyle(tile).paddingBottom, 10) + parseInt(getComputedStyle(tile).paddingTop, 10);
            var expandedHeight = this.tileMaxHeight + tilePadding;
            if (!isNaN(expandedHeight)) {
                this.currentExpandedHeight = expandedHeight;
            }
            return this.currentExpandedHeight;
        },
        enumerable: true,
        configurable: true
    });
    ExpandableTile.prototype.updateMaxHeight = function () {
        if (this.expanded) {
            this.tileMaxHeight = this.element.querySelector(".bx--tile-content").getBoundingClientRect().height;
        }
        else {
            this.tileMaxHeight = this.element.querySelector(".bx--tile-content__above-the-fold").getBoundingClientRect().height;
        }
    };
    ExpandableTile.prototype.onClick = function () {
        this.expanded = !this.expanded;
        this.updateMaxHeight();
    };
    ExpandableTile.decorators = [
        { type: Component, args: [{
                    selector: "ibm-expandable-tile",
                    template: "\n\t\t<button\n\t\t\tclass=\"bx--tile bx--tile--expandable\"\n\t\t\t[ngClass]=\"{'bx--tile--is-expanded' : expanded}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\ttype=\"button\"\n\t\t\t(click)=\"onClick()\">\n\t\t\t<div class=\"bx--tile__chevron\">\n\t\t\t\t<svg *ngIf=\"!expanded\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" [attr.title]=\"expand.subject | async\" role=\"img\">\n\t\t\t\t\t<title>{{expand.subject | async}}</title>\n\t\t\t\t\t<path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"/>\n\t\t\t\t</svg>\n\t\t\t\t<svg *ngIf=\"expanded\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" [attr.title]=\"collapse.subject | async\" role=\"img\">\n\t\t\t\t\t<title>{{collapse.subject | async}}</title>\n\t\t\t\t\t<path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"bx--tile-content\">\n\t\t\t\t<ng-content select=\".bx--tile-content__above-the-fold\"></ng-content>\n\t\t\t\t<ng-content select=\".bx--tile-content__below-the-fold\"></ng-content>\n\t\t\t</div>\n\t\t</button>\n\t"
                }] }
    ];
    /** @nocollapse */
    ExpandableTile.ctorParameters = function () { return [
        { type: I18n },
        { type: ElementRef }
    ]; };
    ExpandableTile.propDecorators = {
        expanded: [{ type: Input }],
        translations: [{ type: Input }]
    };
    return ExpandableTile;
}());
export { ExpandableTile };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10aWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGlsZXMvIiwic291cmNlcyI6WyJleHBhbmRhYmxlLXRpbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUNMLFVBQVUsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsSUFBSSxFQUFlLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBT3hEO0lBbURDLHdCQUFzQixJQUFVLEVBQVksVUFBc0I7UUFBNUMsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFZLGVBQVUsR0FBVixVQUFVLENBQVk7UUF4QnpELGFBQVEsR0FBRyxLQUFLLENBQUM7UUFpQjFCLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLDBCQUFxQixHQUFHLENBQUMsQ0FBQztRQUMxQixZQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFFeEMsV0FBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELGFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWUsQ0FBQztJQWR0RSxzQkFDSSx3Q0FBWTtRQVZoQjs7Ozs7Ozs7V0FRRzthQUNILFVBQ2lCLEtBQWlDO1lBQ2pELElBQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBV0QsMkNBQWtCLEdBQWxCO1FBQ0MsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxzQkFBSSwwQ0FBYzthQUFsQjtZQUNDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JELElBQU0sV0FBVyxHQUNkLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4RyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQztZQUN4RCxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUMzQixJQUFJLENBQUMscUJBQXFCLEdBQUcsY0FBYyxDQUFDO2FBQzVDO1lBQ0QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFFRCx3Q0FBZSxHQUFmO1FBQ0MsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztTQUNwRzthQUFNO1lBQ04sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxDQUFDO1NBQ3BIO0lBQ0YsQ0FBQztJQUVELGdDQUFPLEdBQVA7UUFDQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Z0JBL0VELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsdW1DQXNCVDtpQkFDRDs7OztnQkFqQ1EsSUFBSTtnQkFIWixVQUFVOzs7MkJBc0NULEtBQUs7K0JBVUwsS0FBSzs7SUEyQ1AscUJBQUM7Q0FBQSxBQWhGRCxJQWdGQztTQXREWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0RWxlbWVudFJlZixcblx0QWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biwgT3ZlcnJpZGFibGUgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwYW5kYWJsZVRpbGVUcmFuc2xhdGlvbnMge1xuXHRFWFBBTkQ6IHN0cmluZztcblx0Q09MTEFQU0U6IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1leHBhbmRhYmxlLXRpbGVcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8YnV0dG9uXG5cdFx0XHRjbGFzcz1cImJ4LS10aWxlIGJ4LS10aWxlLS1leHBhbmRhYmxlXCJcblx0XHRcdFtuZ0NsYXNzXT1cInsnYngtLXRpbGUtLWlzLWV4cGFuZGVkJyA6IGV4cGFuZGVkfVwiXG5cdFx0XHRbbmdTdHlsZV09XCJ7J21heC1oZWlnaHQnOiBleHBhbmRlZEhlaWdodCArICdweCd9XCJcblx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soKVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImJ4LS10aWxlX19jaGV2cm9uXCI+XG5cdFx0XHRcdDxzdmcgKm5nSWY9XCIhZXhwYW5kZWRcIiB3aWR0aD1cIjEyXCIgaGVpZ2h0PVwiN1wiIHZpZXdCb3g9XCIwIDAgMTIgN1wiIFthdHRyLnRpdGxlXT1cImV4cGFuZC5zdWJqZWN0IHwgYXN5bmNcIiByb2xlPVwiaW1nXCI+XG5cdFx0XHRcdFx0PHRpdGxlPnt7ZXhwYW5kLnN1YmplY3QgfCBhc3luY319PC90aXRsZT5cblx0XHRcdFx0XHQ8cGF0aCBmaWxsLXJ1bGU9XCJub256ZXJvXCIgZD1cIk02LjAwMiA1LjU1TDExLjI3IDBsLjcyNi42ODVMNi4wMDMgNyAwIC42ODUuNzI2IDB6XCIvPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdFx0PHN2ZyAqbmdJZj1cImV4cGFuZGVkXCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjdcIiB2aWV3Qm94PVwiMCAwIDEyIDdcIiBbYXR0ci50aXRsZV09XCJjb2xsYXBzZS5zdWJqZWN0IHwgYXN5bmNcIiByb2xlPVwiaW1nXCI+XG5cdFx0XHRcdFx0PHRpdGxlPnt7Y29sbGFwc2Uuc3ViamVjdCB8IGFzeW5jfX08L3RpdGxlPlxuXHRcdFx0XHRcdDxwYXRoIGZpbGwtcnVsZT1cIm5vbnplcm9cIiBkPVwiTTYuMDAyIDUuNTVMMTEuMjcgMGwuNzI2LjY4NUw2LjAwMyA3IDAgLjY4NS43MjYgMHpcIi8+XG5cdFx0XHRcdDwvc3ZnPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiYngtLXRpbGUtY29udGVudFwiPlxuXHRcdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCIuYngtLXRpbGUtY29udGVudF9fYWJvdmUtdGhlLWZvbGRcIj48L25nLWNvbnRlbnQ+XG5cdFx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cIi5ieC0tdGlsZS1jb250ZW50X19iZWxvdy10aGUtZm9sZFwiPjwvbmctY29udGVudD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvYnV0dG9uPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIEV4cGFuZGFibGVUaWxlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cdEBJbnB1dCgpIGV4cGFuZGVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBFeHBlY3RzIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNvbWUgb3IgYWxsIG9mOlxuXHQgKiBgYGBcblx0ICoge1xuXHQgKlx0XHRcIkVYUEFORFwiOiBcIkV4cGFuZFwiLFxuXHQgKlx0XHRcIkNPTExBUFNFXCI6IFwiQ29sbGFwc2VcIixcblx0ICogfVxuXHQgKiBgYGBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHNldCB0cmFuc2xhdGlvbnModmFsdWU6IEV4cGFuZGFibGVUaWxlVHJhbnNsYXRpb25zKSB7XG5cdFx0Y29uc3QgdmFsdWVXaXRoRGVmYXVsdHMgPSBtZXJnZSh0aGlzLmkxOG4uZ2V0TXVsdGlwbGUoXCJUSUxFU1wiKSwgdmFsdWUpO1xuXHRcdHRoaXMuZXhwYW5kLm92ZXJyaWRlKHZhbHVlV2l0aERlZmF1bHRzLkVYUEFORCk7XG5cdFx0dGhpcy5jb2xsYXBzZS5vdmVycmlkZSh2YWx1ZVdpdGhEZWZhdWx0cy5DT0xMQVBTRSk7XG5cdH1cblxuXHR0aWxlTWF4SGVpZ2h0ID0gMDtcblx0Y3VycmVudEV4cGFuZGVkSGVpZ2h0ID0gMDtcblx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG5cdGV4cGFuZCA9IHRoaXMuaTE4bi5nZXRPdmVycmlkYWJsZShcIlRJTEVTLkVYUEFORFwiKTtcblx0Y29sbGFwc2UgPSB0aGlzLmkxOG4uZ2V0T3ZlcnJpZGFibGUoXCJUSUxFUy5DT0xMQVBTRVwiKTtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaTE4bjogSTE4biwgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCkge1xuXHRcdHRoaXMudXBkYXRlTWF4SGVpZ2h0KCk7XG5cdH1cblxuXHRnZXQgZXhwYW5kZWRIZWlnaHQoKSB7XG5cdFx0Y29uc3QgdGlsZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ4LS10aWxlXCIpO1xuXHRcdGNvbnN0IHRpbGVQYWRkaW5nXG5cdFx0XHQ9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUodGlsZSkucGFkZGluZ0JvdHRvbSwgMTApICsgcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0aWxlKS5wYWRkaW5nVG9wLCAxMCk7XG5cdFx0Y29uc3QgZXhwYW5kZWRIZWlnaHQgPSB0aGlzLnRpbGVNYXhIZWlnaHQgKyB0aWxlUGFkZGluZztcblx0XHRpZiAoIWlzTmFOKGV4cGFuZGVkSGVpZ2h0KSkge1xuXHRcdFx0dGhpcy5jdXJyZW50RXhwYW5kZWRIZWlnaHQgPSBleHBhbmRlZEhlaWdodDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudEV4cGFuZGVkSGVpZ2h0O1xuXHR9XG5cblx0dXBkYXRlTWF4SGVpZ2h0KCkge1xuXHRcdGlmICh0aGlzLmV4cGFuZGVkKSB7XG5cdFx0XHR0aGlzLnRpbGVNYXhIZWlnaHQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5ieC0tdGlsZS1jb250ZW50XCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50aWxlTWF4SGVpZ2h0ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYngtLXRpbGUtY29udGVudF9fYWJvdmUtdGhlLWZvbGRcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXHRcdH1cblx0fVxuXG5cdG9uQ2xpY2soKSB7XG5cdFx0dGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuXHRcdHRoaXMudXBkYXRlTWF4SGVpZ2h0KCk7XG5cdH1cbn1cbiJdfQ==