/**
 *
 * carbon-angular v0.0.0 | tile-group.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding, ContentChildren, QueryList } from "@angular/core";
import { SelectionTile } from "./selection-tile.component";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";
var TileGroup = /** @class */ (function () {
    function TileGroup() {
        /**
         * The tile group `name`
         */
        this.name = "tile-group-" + TileGroup.tileGroupCount;
        /**
         * Set to `true` to support multiple tile selection
         */
        this.multiple = false;
        /**
         * Emits an event when the tile selection changes.
         *
         * Emits an object that looks like:
         * ```javascript
         * {
         * 	value: "something",
         * 	selected: true,
         * 	name: "tile-group-1"
         * }
         * ```
         */
        this.selected = new EventEmitter();
        this.tileGroupClass = true;
        this.unsubscribe$ = new Subject();
        this.unsubscribeTiles$ = new Subject();
        this.onChange = function (_) { };
        this.onTouched = function () { };
        TileGroup.tileGroupCount++;
    }
    TileGroup.prototype.ngAfterContentInit = function () {
        var _this = this;
        var updateTiles = function () {
            // remove old subscriptions
            _this.unsubscribeTiles$.next();
            // react to changes
            // setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError
            setTimeout(function () {
                _this.selectionTiles.forEach(function (tile) {
                    tile.name = _this.name;
                    tile.change
                        .pipe(takeUntil(_this.unsubscribeTiles$))
                        .subscribe(function () {
                        _this.selected.emit({
                            value: tile.value,
                            selected: tile.selected,
                            name: _this.name
                        });
                        _this.onChange(tile.value);
                    });
                    tile.multiple = _this.multiple;
                });
            });
        };
        updateTiles();
        this.selectionTiles.changes
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(function (_) { return updateTiles(); });
    };
    TileGroup.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
        // takes care of tile subscriptions when tile-group dies
        this.unsubscribeTiles$.next();
        this.unsubscribeTiles$.complete();
    };
    TileGroup.prototype.writeValue = function (value) {
        if (!this.selectionTiles) {
            return;
        }
        this.selectionTiles.forEach(function (tile) {
            if (tile.value === value) {
                tile.selected = true;
            }
            else {
                tile.selected = false;
            }
        });
    };
    TileGroup.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TileGroup.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TileGroup.tileGroupCount = 0;
    TileGroup.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tile-group",
                    template: "<ng-content select=\"ibm-selection-tile\"></ng-content>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TileGroup,
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    TileGroup.ctorParameters = function () { return []; };
    TileGroup.propDecorators = {
        name: [{ type: Input }],
        multiple: [{ type: Input }],
        selected: [{ type: Output }],
        tileGroupClass: [{ type: HostBinding, args: ["class.bx--tile-group",] }],
        selectionTiles: [{ type: ContentChildren, args: [SelectionTile,] }]
    };
    return TileGroup;
}());
export { TileGroup };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3RpbGVzLyIsInNvdXJjZXMiOlsidGlsZS1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsZUFBZSxFQUNmLFNBQVMsRUFFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7SUEyQ0M7UUE5QkE7O1dBRUc7UUFDTSxTQUFJLEdBQUcsZ0JBQWMsU0FBUyxDQUFDLGNBQWdCLENBQUM7UUFDekQ7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRTFCOzs7Ozs7Ozs7OztXQVdHO1FBQ08sYUFBUSxHQUFnQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWhDLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBSWpELGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUNuQyxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBTWxELGFBQVEsR0FBRyxVQUFDLENBQU0sSUFBTyxDQUFDLENBQUM7UUFFM0IsY0FBUyxHQUFHLGNBQVEsQ0FBQyxDQUFDO1FBTHJCLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBTUQsc0NBQWtCLEdBQWxCO1FBQUEsaUJBNkJDO1FBNUJBLElBQU0sV0FBVyxHQUFHO1lBQ25CLDJCQUEyQjtZQUMzQixLQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFOUIsbUJBQW1CO1lBQ25CLGtFQUFrRTtZQUNsRSxVQUFVLENBQUM7Z0JBQ1YsS0FBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO29CQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxNQUFNO3lCQUNULElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7eUJBQ3ZDLFNBQVMsQ0FBQzt3QkFDVixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzs0QkFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLOzRCQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7NEJBQ3ZCLElBQUksRUFBRSxLQUFJLENBQUMsSUFBSTt5QkFDZixDQUFDLENBQUM7d0JBQ0gsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzNCLENBQUMsQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQztRQUNGLFdBQVcsRUFBRSxDQUFDO1FBRWQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPO2FBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ2xDLFNBQVMsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFdBQVcsRUFBRSxFQUFiLENBQWEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCwrQkFBVyxHQUFYO1FBQ0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTdCLHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCw4QkFBVSxHQUFWLFVBQVcsS0FBVTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUNyQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDL0IsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtnQkFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7YUFDckI7aUJBQU07Z0JBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7YUFDdEI7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxvQ0FBZ0IsR0FBaEIsVUFBaUIsRUFBTztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQscUNBQWlCLEdBQWpCLFVBQWtCLEVBQU87UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQWhHTSx3QkFBYyxHQUFHLENBQUMsQ0FBQzs7Z0JBWjFCLFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUUseURBQXVEO29CQUNqRSxTQUFTLEVBQUU7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFNBQVM7NEJBQ3RCLEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEO2lCQUNEOzs7Ozt1QkFNQyxLQUFLOzJCQUlMLEtBQUs7MkJBY0wsTUFBTTtpQ0FFTixXQUFXLFNBQUMsc0JBQXNCO2lDQUVsQyxlQUFlLFNBQUMsYUFBYTs7SUF1RS9CLGdCQUFDO0NBQUEsQUE3R0QsSUE2R0M7U0FsR1ksU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0QWZ0ZXJDb250ZW50SW5pdCxcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyLFxuXHRIb3N0QmluZGluZyxcblx0Q29udGVudENoaWxkcmVuLFxuXHRRdWVyeUxpc3QsXG5cdE9uRGVzdHJveVxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgU2VsZWN0aW9uVGlsZSB9IGZyb20gXCIuL3NlbGVjdGlvbi10aWxlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IFRpbGVTZWxlY3Rpb24gfSBmcm9tIFwiLi90aWxlLXNlbGVjdGlvbi5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdGlsZS1ncm91cFwiLFxuXHR0ZW1wbGF0ZTogYDxuZy1jb250ZW50IHNlbGVjdD1cImlibS1zZWxlY3Rpb24tdGlsZVwiPjwvbmctY29udGVudD5gLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcblx0XHRcdHVzZUV4aXN0aW5nOiBUaWxlR3JvdXAsXG5cdFx0XHRtdWx0aTogdHJ1ZVxuXHRcdH1cblx0XVxufSlcbmV4cG9ydCBjbGFzcyBUaWxlR3JvdXAgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuXHRzdGF0aWMgdGlsZUdyb3VwQ291bnQgPSAwO1xuXHQvKipcblx0ICogVGhlIHRpbGUgZ3JvdXAgYG5hbWVgXG5cdCAqL1xuXHRASW5wdXQoKSBuYW1lID0gYHRpbGUtZ3JvdXAtJHtUaWxlR3JvdXAudGlsZUdyb3VwQ291bnR9YDtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgdG8gc3VwcG9ydCBtdWx0aXBsZSB0aWxlIHNlbGVjdGlvblxuXHQgKi9cblx0QElucHV0KCkgbXVsdGlwbGUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogRW1pdHMgYW4gZXZlbnQgd2hlbiB0aGUgdGlsZSBzZWxlY3Rpb24gY2hhbmdlcy5cblx0ICpcblx0ICogRW1pdHMgYW4gb2JqZWN0IHRoYXQgbG9va3MgbGlrZTpcblx0ICogYGBgamF2YXNjcmlwdFxuXHQgKiB7XG5cdCAqIFx0dmFsdWU6IFwic29tZXRoaW5nXCIsXG5cdCAqIFx0c2VsZWN0ZWQ6IHRydWUsXG5cdCAqIFx0bmFtZTogXCJ0aWxlLWdyb3VwLTFcIlxuXHQgKiB9XG5cdCAqIGBgYFxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VGlsZVNlbGVjdGlvbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRpbGUtZ3JvdXBcIikgdGlsZUdyb3VwQ2xhc3MgPSB0cnVlO1xuXG5cdEBDb250ZW50Q2hpbGRyZW4oU2VsZWN0aW9uVGlsZSkgc2VsZWN0aW9uVGlsZXM6IFF1ZXJ5TGlzdDxTZWxlY3Rpb25UaWxlPjtcblxuXHRwcm90ZWN0ZWQgdW5zdWJzY3JpYmUkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblx0cHJvdGVjdGVkIHVuc3Vic2NyaWJlVGlsZXMkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRUaWxlR3JvdXAudGlsZUdyb3VwQ291bnQrKztcblx0fVxuXG5cdG9uQ2hhbmdlID0gKF86IGFueSkgPT4geyB9O1xuXG5cdG9uVG91Y2hlZCA9ICgpID0+IHsgfTtcblxuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0Y29uc3QgdXBkYXRlVGlsZXMgPSAoKSA9PiB7XG5cdFx0XHQvLyByZW1vdmUgb2xkIHN1YnNjcmlwdGlvbnNcblx0XHRcdHRoaXMudW5zdWJzY3JpYmVUaWxlcyQubmV4dCgpO1xuXG5cdFx0XHQvLyByZWFjdCB0byBjaGFuZ2VzXG5cdFx0XHQvLyBzZXRUaW1lb3V0IHRvIGF2b2lkIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3Jcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNlbGVjdGlvblRpbGVzLmZvckVhY2godGlsZSA9PiB7XG5cdFx0XHRcdFx0dGlsZS5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdFx0XHRcdHRpbGUuY2hhbmdlXG5cdFx0XHRcdFx0XHQucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZVRpbGVzJCkpXG5cdFx0XHRcdFx0XHQuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5zZWxlY3RlZC5lbWl0KHtcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogdGlsZS52YWx1ZSxcblx0XHRcdFx0XHRcdFx0XHRzZWxlY3RlZDogdGlsZS5zZWxlY3RlZCxcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiB0aGlzLm5hbWVcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMub25DaGFuZ2UodGlsZS52YWx1ZSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR0aWxlLm11bHRpcGxlID0gdGhpcy5tdWx0aXBsZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHRcdHVwZGF0ZVRpbGVzKCk7XG5cblx0XHR0aGlzLnNlbGVjdGlvblRpbGVzLmNoYW5nZXNcblx0XHRcdC5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCkpXG5cdFx0XHQuc3Vic2NyaWJlKF8gPT4gdXBkYXRlVGlsZXMoKSk7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpIHtcblx0XHR0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG5cdFx0dGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcblxuXHRcdC8vIHRha2VzIGNhcmUgb2YgdGlsZSBzdWJzY3JpcHRpb25zIHdoZW4gdGlsZS1ncm91cCBkaWVzXG5cdFx0dGhpcy51bnN1YnNjcmliZVRpbGVzJC5uZXh0KCk7XG5cdFx0dGhpcy51bnN1YnNjcmliZVRpbGVzJC5jb21wbGV0ZSgpO1xuXHR9XG5cblx0d3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG5cdFx0aWYgKCF0aGlzLnNlbGVjdGlvblRpbGVzKSB7IHJldHVybjsgfVxuXHRcdHRoaXMuc2VsZWN0aW9uVGlsZXMuZm9yRWFjaCh0aWxlID0+IHtcblx0XHRcdGlmICh0aWxlLnZhbHVlID09PSB2YWx1ZSkge1xuXHRcdFx0XHR0aWxlLnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRpbGUuc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuXHRcdHRoaXMub25DaGFuZ2UgPSBmbjtcblx0fVxuXG5cdHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpIHtcblx0XHR0aGlzLm9uVG91Y2hlZCA9IGZuO1xuXHR9XG59XG4iXX0=