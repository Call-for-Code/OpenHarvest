/**
 *
 * carbon-angular v0.0.0 | tab.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, TemplateRef, HostBinding } from "@angular/core";
var nextId = 0;
/**
* The `Tab` component is a child of the `Tabs` component.
* It represents one `Tab` item and its content within a panel of other `Tab` items.
*
*
* `Tab` takes a string or `TemplateRef` for the header, and any content for the body of the tab.
* Disabled states should be handled by the application (ie. switch to the tab, but display some
* indication as to _why_ the tab is disabled).
*
* When the tab is selected the `select` output will be triggered.
* The `select` output will also be triggered for the active tab when the tabs are loaded or updated.
*
*
* Tab with string header:
*
* ```html
* <ibm-tab heading='tab1'>
* 	tab 1 content
* </ibm-tab>
* ```
*
* Tab with custom header:
*
* ```html
* <ng-template #tabHeading>
* 	<svg ibmIcon="facebook"
* 		size="sm"
* 		style="margin-right: 7px;">
* 	</svg>
* 	Hello Tab 1
* </ng-template>
* <ibm-tabs>
* 	<ibm-tab [heading]="tabHeading">
* 		Tab 1 content <svg ibmIcon="alert" size="lg"></svg>
* 	</ibm-tab>
* 	<ibm-tab heading='Tab2'>
* 		Tab 2 content
* 	</ibm-tab>
* 	<ibm-tab heading='Tab3'>
* 		Tab 3 content
* 	</ibm-tab>
* </ibm-tabs>
* ```
*/
var Tab = /** @class */ (function () {
    function Tab() {
        /**
         * Boolean value reflects if the `Tab` is using a custom template for the heading.
         * Default value is false.
         */
        this.headingIsTemplate = false;
        /**
         * Indicates whether the `Tab` is active/selected.
         * Determines whether it's `TabPanel` is rendered.
         */
        this.active = false;
        /**
         * Indicates whether or not the `Tab` item is disabled.
         */
        this.disabled = false;
        this.tabIndex = 0;
        // do we need id's?
        /**
         * Sets the id of the `Tab`. Will be uniquely generated if not provided.
         */
        this.id = "n-tab-" + nextId++;
        /**
         * Value 'selected' to be emitted after a new `Tab` is selected.
         */
        this.selected = new EventEmitter();
        /**
         * Used to set the id property on the element.
         */
        this.attrClass = this.id;
        this._cacheActive = false;
    }
    Object.defineProperty(Tab.prototype, "cacheActive", {
        get: function () {
            return this._cacheActive;
        },
        /**
         * Set to true to have Tab items cached and not reloaded on tab switching.
         */
        set: function (shouldCache) {
            this._cacheActive = shouldCache;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks for custom heading template on initialization and updates the value
     * of the boolean 'headingIsTemplate'.
     */
    Tab.prototype.ngOnInit = function () {
        if (this.heading instanceof TemplateRef) {
            this.headingIsTemplate = true;
        }
    };
    /**
     * Emit the status of the `Tab`, specifically 'select' and 'selected' properties.
     */
    Tab.prototype.doSelect = function () {
        this.selected.emit();
    };
    /**
    * Returns value indicating whether this `Tab` should be rendered in a `TabPanel`.
    */
    Tab.prototype.shouldRender = function () {
        return this.active || this.cacheActive;
    };
    Tab.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tab",
                    template: "\n\t\t<div\n\t\t\t[attr.tabindex]=\"tabIndex\"\n\t\t\trole=\"tabpanel\"\n\t\t\t*ngIf=\"shouldRender()\"\n\t\t\tclass=\"bx--tab-content\"\n\t\t\t[ngStyle]=\"{'display': active ? null : 'none'}\"\n\t\t\t[attr.aria-labelledby]=\"id + '-header'\"\n\t\t\taria-live=\"polite\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t"
                }] }
    ];
    Tab.propDecorators = {
        heading: [{ type: Input }],
        title: [{ type: Input }],
        context: [{ type: Input }],
        active: [{ type: Input }],
        disabled: [{ type: Input }],
        tabIndex: [{ type: Input }],
        id: [{ type: Input }],
        cacheActive: [{ type: Input }],
        selected: [{ type: Output }],
        attrClass: [{ type: HostBinding, args: ["attr.id",] }]
    };
    return Tab;
}());
export { Tab };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFicy8iLCJzb3VyY2VzIjpbInRhYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFFWixXQUFXLEVBQ1gsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkNFO0FBQ0Y7SUFBQTtRQWdCQzs7O1dBR0c7UUFDSSxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFpQmpDOzs7V0FHRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDdEIsbUJBQW1CO1FBQ25COztXQUVHO1FBQ00sT0FBRSxHQUFHLFdBQVMsTUFBTSxFQUFJLENBQUM7UUFPbEM7O1dBRUc7UUFDTyxhQUFRLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFFbEU7O1dBRUc7UUFDcUIsY0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFNbEMsaUJBQVksR0FBRyxLQUFLLENBQUM7SUF5QmhDLENBQUM7SUExQ0Esc0JBQWEsNEJBQVc7YUFheEI7WUFDQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDMUIsQ0FBQztRQWxCRDs7V0FFRzthQUNILFVBQXlCLFdBQW9CO1lBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBaUJEOzs7T0FHRztJQUNILHNCQUFRLEdBQVI7UUFDQyxJQUFJLElBQUksQ0FBQyxPQUFPLFlBQVksV0FBVyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7U0FDOUI7SUFDRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxzQkFBUSxHQUFSO1FBQ0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7O01BRUU7SUFDRiwwQkFBWSxHQUFaO1FBQ0MsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7Z0JBakdELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsU0FBUztvQkFDbkIsUUFBUSxFQUFFLGtVQVdUO2lCQUNEOzs7MEJBV0MsS0FBSzt3QkFPTCxLQUFLOzBCQUlMLEtBQUs7eUJBS0wsS0FBSzsyQkFJTCxLQUFLOzJCQUVMLEtBQUs7cUJBS0wsS0FBSzs4QkFJTCxLQUFLOzJCQU1MLE1BQU07NEJBS04sV0FBVyxTQUFDLFNBQVM7O0lBK0J2QixVQUFDO0NBQUEsQUFsR0QsSUFrR0M7U0FuRlksR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0T25Jbml0LFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdENvbnRlbnRDaGlsZCxcblx0VGVtcGxhdGVSZWYsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cblxubGV0IG5leHRJZCA9IDA7XG5cbi8qKlxuKiBUaGUgYFRhYmAgY29tcG9uZW50IGlzIGEgY2hpbGQgb2YgdGhlIGBUYWJzYCBjb21wb25lbnQuXG4qIEl0IHJlcHJlc2VudHMgb25lIGBUYWJgIGl0ZW0gYW5kIGl0cyBjb250ZW50IHdpdGhpbiBhIHBhbmVsIG9mIG90aGVyIGBUYWJgIGl0ZW1zLlxuKlxuKlxuKiBgVGFiYCB0YWtlcyBhIHN0cmluZyBvciBgVGVtcGxhdGVSZWZgIGZvciB0aGUgaGVhZGVyLCBhbmQgYW55IGNvbnRlbnQgZm9yIHRoZSBib2R5IG9mIHRoZSB0YWIuXG4qIERpc2FibGVkIHN0YXRlcyBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgYXBwbGljYXRpb24gKGllLiBzd2l0Y2ggdG8gdGhlIHRhYiwgYnV0IGRpc3BsYXkgc29tZVxuKiBpbmRpY2F0aW9uIGFzIHRvIF93aHlfIHRoZSB0YWIgaXMgZGlzYWJsZWQpLlxuKlxuKiBXaGVuIHRoZSB0YWIgaXMgc2VsZWN0ZWQgdGhlIGBzZWxlY3RgIG91dHB1dCB3aWxsIGJlIHRyaWdnZXJlZC5cbiogVGhlIGBzZWxlY3RgIG91dHB1dCB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGZvciB0aGUgYWN0aXZlIHRhYiB3aGVuIHRoZSB0YWJzIGFyZSBsb2FkZWQgb3IgdXBkYXRlZC5cbipcbipcbiogVGFiIHdpdGggc3RyaW5nIGhlYWRlcjpcbipcbiogYGBgaHRtbFxuKiA8aWJtLXRhYiBoZWFkaW5nPSd0YWIxJz5cbiogXHR0YWIgMSBjb250ZW50XG4qIDwvaWJtLXRhYj5cbiogYGBgXG4qXG4qIFRhYiB3aXRoIGN1c3RvbSBoZWFkZXI6XG4qXG4qIGBgYGh0bWxcbiogPG5nLXRlbXBsYXRlICN0YWJIZWFkaW5nPlxuKiBcdDxzdmcgaWJtSWNvbj1cImZhY2Vib29rXCJcbiogXHRcdHNpemU9XCJzbVwiXG4qIFx0XHRzdHlsZT1cIm1hcmdpbi1yaWdodDogN3B4O1wiPlxuKiBcdDwvc3ZnPlxuKiBcdEhlbGxvIFRhYiAxXG4qIDwvbmctdGVtcGxhdGU+XG4qIDxpYm0tdGFicz5cbiogXHQ8aWJtLXRhYiBbaGVhZGluZ109XCJ0YWJIZWFkaW5nXCI+XG4qIFx0XHRUYWIgMSBjb250ZW50IDxzdmcgaWJtSWNvbj1cImFsZXJ0XCIgc2l6ZT1cImxnXCI+PC9zdmc+XG4qIFx0PC9pYm0tdGFiPlxuKiBcdDxpYm0tdGFiIGhlYWRpbmc9J1RhYjInPlxuKiBcdFx0VGFiIDIgY29udGVudFxuKiBcdDwvaWJtLXRhYj5cbiogXHQ8aWJtLXRhYiBoZWFkaW5nPSdUYWIzJz5cbiogXHRcdFRhYiAzIGNvbnRlbnRcbiogXHQ8L2libS10YWI+XG4qIDwvaWJtLXRhYnM+XG4qIGBgYFxuKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdGFiXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGRpdlxuXHRcdFx0W2F0dHIudGFiaW5kZXhdPVwidGFiSW5kZXhcIlxuXHRcdFx0cm9sZT1cInRhYnBhbmVsXCJcblx0XHRcdCpuZ0lmPVwic2hvdWxkUmVuZGVyKClcIlxuXHRcdFx0Y2xhc3M9XCJieC0tdGFiLWNvbnRlbnRcIlxuXHRcdFx0W25nU3R5bGVdPVwieydkaXNwbGF5JzogYWN0aXZlID8gbnVsbCA6ICdub25lJ31cIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cImlkICsgJy1oZWFkZXInXCJcblx0XHRcdGFyaWEtbGl2ZT1cInBvbGl0ZVwiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvZGl2PlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRhYiBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdC8qKlxuXHQgKiBCb29sZWFuIHZhbHVlIHJlZmxlY3RzIGlmIHRoZSBgVGFiYCBpcyB1c2luZyBhIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgdGhlIGhlYWRpbmcuXG5cdCAqIERlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG5cdCAqL1xuXHRwdWJsaWMgaGVhZGluZ0lzVGVtcGxhdGUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogVGhlIGBUYWJgJ3MgdGl0bGUgdG8gYmUgZGlzcGxheWVkIG9yIGN1c3RvbSB0ZW1hcGxhdGUgZm9yIHRoZSBgVGFiYCBoZWFkaW5nLlxuXHQgKi9cblx0QElucHV0KCkgaGVhZGluZzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pjtcblx0LyoqXG5cdCAqIE9wdGlvbmFsIG92ZXJyaWRlIGZvciB0aGUgYHRhYkl0ZW0nc2AncyB0aXRsZSBhdHRyaWJ1dGUgd2hpY2ggaXMgc2V0IGluIGBUYWJIZWFkZXJzYC5cblx0ICogYHRhYkl0ZW1gJ3MgdGl0bGUgYXR0cmlidXRlIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvIGBoZWFkaW5nYC5cblx0ICpcblx0ICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoaXMgaWYgeW91IHNldCBgaGVhZGluZ2AgdG8gYSBgVGVtcGxhdGVSZWZgLlxuXHQgKi9cblx0QElucHV0KCkgdGl0bGU6IHN0cmluZztcblx0LyoqXG5cdCAqIEFsbG93cyB0aGUgdXNlciB0byBwYXNzIGRhdGEgdG8gdGhlIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgdGhlIGBUYWJgIGhlYWRpbmcuXG5cdCAqL1xuXHRASW5wdXQoKSBjb250ZXh0OiBhbnk7XG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYFRhYmAgaXMgYWN0aXZlL3NlbGVjdGVkLlxuXHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgaXQncyBgVGFiUGFuZWxgIGlzIHJlbmRlcmVkLlxuXHQgKi9cblx0QElucHV0KCkgYWN0aXZlID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdGhlIGBUYWJgIGl0ZW0gaXMgZGlzYWJsZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIHRhYkluZGV4ID0gMDtcblx0Ly8gZG8gd2UgbmVlZCBpZCdzP1xuXHQvKipcblx0ICogU2V0cyB0aGUgaWQgb2YgdGhlIGBUYWJgLiBXaWxsIGJlIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZiBub3QgcHJvdmlkZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBpZCA9IGBuLXRhYi0ke25leHRJZCsrfWA7XG5cdC8qKlxuXHQgKiBTZXQgdG8gdHJ1ZSB0byBoYXZlIFRhYiBpdGVtcyBjYWNoZWQgYW5kIG5vdCByZWxvYWRlZCBvbiB0YWIgc3dpdGNoaW5nLlxuXHQgKi9cblx0QElucHV0KCkgc2V0IGNhY2hlQWN0aXZlKHNob3VsZENhY2hlOiBib29sZWFuKSB7XG5cdFx0dGhpcy5fY2FjaGVBY3RpdmUgPSBzaG91bGRDYWNoZTtcblx0fVxuXHQvKipcblx0ICogVmFsdWUgJ3NlbGVjdGVkJyB0byBiZSBlbWl0dGVkIGFmdGVyIGEgbmV3IGBUYWJgIGlzIHNlbGVjdGVkLlxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gc2V0IHRoZSBpZCBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudC5cblx0ICovXG5cdEBIb3N0QmluZGluZyhcImF0dHIuaWRcIikgYXR0ckNsYXNzID0gdGhpcy5pZDtcblxuXHRnZXQgY2FjaGVBY3RpdmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NhY2hlQWN0aXZlO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9jYWNoZUFjdGl2ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBDaGVja3MgZm9yIGN1c3RvbSBoZWFkaW5nIHRlbXBsYXRlIG9uIGluaXRpYWxpemF0aW9uIGFuZCB1cGRhdGVzIHRoZSB2YWx1ZVxuXHQgKiBvZiB0aGUgYm9vbGVhbiAnaGVhZGluZ0lzVGVtcGxhdGUnLlxuXHQgKi9cblx0bmdPbkluaXQoKSB7XG5cdFx0aWYgKHRoaXMuaGVhZGluZyBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG5cdFx0XHR0aGlzLmhlYWRpbmdJc1RlbXBsYXRlID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRW1pdCB0aGUgc3RhdHVzIG9mIHRoZSBgVGFiYCwgc3BlY2lmaWNhbGx5ICdzZWxlY3QnIGFuZCAnc2VsZWN0ZWQnIHByb3BlcnRpZXMuXG5cdCAqL1xuXHRkb1NlbGVjdCgpIHtcblx0XHR0aGlzLnNlbGVjdGVkLmVtaXQoKTtcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgYFRhYmAgc2hvdWxkIGJlIHJlbmRlcmVkIGluIGEgYFRhYlBhbmVsYC5cblx0Ki9cblx0c2hvdWxkUmVuZGVyKCkge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZSB8fCB0aGlzLmNhY2hlQWN0aXZlO1xuXHR9XG59XG4iXX0=