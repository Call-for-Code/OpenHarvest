/**
 *
 * carbon-angular v0.0.0 | tab-header-group.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, QueryList, Input, HostListener, ContentChildren, ElementRef, TemplateRef, ChangeDetectorRef, ViewChild } from "@angular/core";
import { Subscription } from "rxjs";
import { EventService } from "carbon-components-angular/utils";
import { TabHeader } from "./tab-header.component";
var TabHeaderGroup = /** @class */ (function () {
    function TabHeaderGroup(elementRef, changeDetectorRef, eventService) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.eventService = eventService;
        /**
         * Set to `true` to put tabs in a loading state.
         */
        this.skeleton = false;
        /**
         * Set to 'true' to have all pane references associated with each tab header
         * in the tab header group cached and not reloaded on tab switching.
         */
        this.cacheActive = false;
        this.isNavigation = false;
        this.type = "default";
        /**
         * Keeps track of all the subscriptions to the tab header selection events.
         */
        this.selectedSubscriptionTracker = new Subscription();
        /**
         * Controls the manual focusing done by tabbing through headings.
         */
        this.currentSelectedIndex = 0;
        // width of the overflow buttons
        this.OVERFLOW_BUTTON_OFFSET = 40;
        this._cacheActive = false;
    }
    Object.defineProperty(TabHeaderGroup.prototype, "hasHorizontalOverflow", {
        get: function () {
            var tabList = this.headerContainer.nativeElement;
            return tabList.scrollWidth > tabList.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabHeaderGroup.prototype, "leftOverflowNavButtonHidden", {
        get: function () {
            var tabList = this.headerContainer.nativeElement;
            return !this.hasHorizontalOverflow || !tabList.scrollLeft;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabHeaderGroup.prototype, "rightOverflowNavButtonHidden", {
        get: function () {
            var tabList = this.headerContainer.nativeElement;
            return !this.hasHorizontalOverflow ||
                (tabList.scrollLeft + tabList.clientWidth) === tabList.scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    // keyboard accessibility
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    TabHeaderGroup.prototype.keyboardInput = function (event) {
        var tabHeadersArray = Array.from(this.tabHeaderQuery);
        if (event.key === "Right" || event.key === "ArrowRight") {
            if (this.currentSelectedIndex < tabHeadersArray.length - 1) {
                event.preventDefault();
                if (this.followFocus && !tabHeadersArray[this.currentSelectedIndex + 1].disabled) {
                    tabHeadersArray[this.currentSelectedIndex + 1].selectTab();
                }
                else {
                    tabHeadersArray[this.currentSelectedIndex + 1].tabItem.nativeElement.focus();
                    this.currentSelectedIndex++;
                }
            }
            else {
                event.preventDefault();
                if (this.followFocus && !tabHeadersArray[0].disabled) {
                    tabHeadersArray[0].selectTab();
                }
                else {
                    tabHeadersArray[0].tabItem.nativeElement.focus();
                    this.currentSelectedIndex = 0;
                }
            }
        }
        if (event.key === "Left" || event.key === "ArrowLeft") {
            if (this.currentSelectedIndex > 0) {
                event.preventDefault();
                if (this.followFocus && !tabHeadersArray[this.currentSelectedIndex - 1].disabled) {
                    tabHeadersArray[this.currentSelectedIndex - 1].selectTab();
                }
                else {
                    tabHeadersArray[this.currentSelectedIndex - 1].tabItem.nativeElement.focus();
                    this.currentSelectedIndex--;
                }
            }
            else {
                event.preventDefault();
                if (this.followFocus && !tabHeadersArray[tabHeadersArray.length - 1].disabled) {
                    tabHeadersArray[tabHeadersArray.length - 1].selectTab();
                }
                else {
                    tabHeadersArray[tabHeadersArray.length - 1].tabItem.nativeElement.focus();
                    this.currentSelectedIndex = tabHeadersArray.length - 1;
                }
            }
        }
        if (event.key === "Home") {
            event.preventDefault();
            if (this.followFocus && !tabHeadersArray[0].disabled) {
                tabHeadersArray[0].selectTab();
            }
            else {
                tabHeadersArray[0].tabItem.nativeElement.focus();
                this.currentSelectedIndex = 0;
            }
        }
        if (event.key === "End") {
            event.preventDefault();
            if (this.followFocus && !tabHeadersArray[tabHeadersArray.length - 1].disabled) {
                tabHeadersArray[tabHeadersArray.length - 1].selectTab();
            }
            else {
                tabHeadersArray[tabHeadersArray.length - 1].tabItem.nativeElement.focus();
                this.currentSelectedIndex = tabHeadersArray.length - 1;
            }
        }
        // `"Spacebar"` is IE11 specific value
        if ((event.key === " " || event.key === "Spacebar") && !this.followFocus) {
            tabHeadersArray[this.currentSelectedIndex].selectTab();
        }
    };
    TabHeaderGroup.prototype.ngOnInit = function () {
        var _this = this;
        this.eventService.on(window, "resize", function () { return _this.handleScroll(); });
    };
    TabHeaderGroup.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.selectedSubscriptionTracker.unsubscribe();
        if (this.tabHeaderQuery) {
            this.tabHeaderQuery.toArray()
                .forEach(function (tabHeader) {
                tabHeader.cacheActive = _this.cacheActive;
                tabHeader.paneTabIndex = _this.isNavigation ? null : 0;
            });
        }
        var selectedSubscriptions = this.tabHeaderQuery.toArray().forEach(function (tabHeader) {
            tabHeader.selected.subscribe(function () {
                _this.currentSelectedIndex = _this.tabHeaderQuery.toArray().indexOf(tabHeader);
                // The Filter takes the current selected tab out, then all other headers are
                // deactivated and their associated pane references are also deactivated.
                _this.tabHeaderQuery.toArray().filter(function (header) { return header !== tabHeader; })
                    .forEach(function (filteredHeader) {
                    filteredHeader.active = false;
                    if (filteredHeader.paneReference) {
                        filteredHeader.paneReference.active = false;
                    }
                });
            });
        });
        this.selectedSubscriptionTracker.add(selectedSubscriptions);
        setTimeout(function () { return _this.tabHeaderQuery.toArray()[_this.currentSelectedIndex].selectTab(); });
    };
    TabHeaderGroup.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.tabHeaderQuery) {
            if (changes.cacheActive) {
                this.tabHeaderQuery.toArray().forEach(function (tabHeader) { return tabHeader.cacheActive = _this.cacheActive; });
            }
            if (changes.isNavigation) {
                this.tabHeaderQuery.toArray()
                    .forEach(function (tabHeader) { return tabHeader.paneTabIndex = _this.isNavigation ? null : 0; });
            }
        }
    };
    TabHeaderGroup.prototype.getSelectedTab = function () {
        var selected = this.tabHeaderQuery.toArray()[this.currentSelectedIndex];
        if (selected) {
            return selected;
        }
        return {
            headingIsTemplate: false,
            heading: ""
        };
    };
    TabHeaderGroup.prototype.handleScroll = function () {
        this.changeDetectorRef.markForCheck();
    };
    TabHeaderGroup.prototype.handleOverflowNavClick = function (direction, multiplier) {
        if (multiplier === void 0) { multiplier = 15; }
        var tabList = this.headerContainer.nativeElement;
        var clientWidth = tabList.clientWidth, scrollLeft = tabList.scrollLeft, scrollWidth = tabList.scrollWidth;
        if (direction === 1 && !scrollLeft) {
            tabList.scrollLeft += this.OVERFLOW_BUTTON_OFFSET;
        }
        tabList.scrollLeft += direction * multiplier;
        var leftEdgeReached = direction === -1 && scrollLeft < this.OVERFLOW_BUTTON_OFFSET;
        var rightEdgeReached = direction === 1 &&
            scrollLeft + clientWidth >= scrollWidth - this.OVERFLOW_BUTTON_OFFSET;
        if (leftEdgeReached) {
            this.rightOverflowNavButton.nativeElement.focus();
        }
        if (rightEdgeReached) {
            this.leftOverflowNavButton.nativeElement.focus();
        }
    };
    TabHeaderGroup.prototype.handleOverflowNavMouseDown = function (direction) {
        var _this = this;
        var tabList = this.headerContainer.nativeElement;
        this.overflowNavInterval = setInterval(function () {
            var clientWidth = tabList.clientWidth, scrollLeft = tabList.scrollLeft, scrollWidth = tabList.scrollWidth;
            // clear interval if scroll reaches left or right edge
            var leftEdgeReached = direction === -1 && scrollLeft < _this.OVERFLOW_BUTTON_OFFSET;
            var rightEdgeReached = direction === 1 &&
                scrollLeft + clientWidth >= scrollWidth - _this.OVERFLOW_BUTTON_OFFSET;
            if (leftEdgeReached || rightEdgeReached) {
                clearInterval(_this.overflowNavInterval);
            }
            // account for overflow button appearing and causing tablist width change
            _this.handleOverflowNavClick(direction);
        });
    };
    TabHeaderGroup.prototype.handleOverflowNavMouseUp = function () {
        clearInterval(this.overflowNavInterval);
    };
    TabHeaderGroup.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tab-header-group",
                    template: "\n\t<nav\n\t\tclass=\"bx--tabs bx--tabs--scrollable\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--skeleton': skeleton,\n\t\t\t'bx--tabs--container bx--tabs--scrollable--container': type === 'container'\n\t\t}\"\n\t\trole=\"navigation\"\n\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t[attr.aria-labelledby]=\"ariaLabelledby\">\n\t\t<button\n\t\t\t#leftOverflowNavButton\n\t\t\ttype=\"button\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--tab--overflow-nav-button': hasHorizontalOverflow,\n\t\t\t\t'bx--tab--overflow-nav-button--hidden': leftOverflowNavButtonHidden\n\t\t\t}\"\n\t\t\t(click)=\"handleOverflowNavClick(-1)\"\n\t\t\t(mousedown)=\"handleOverflowNavMouseDown(-1)\"\n\t\t\t(mouseup)=\"handleOverflowNavMouseUp()\">\n\t\t\t<svg\n\t\t\t\tfocusable=\"false\"\n\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\taria-hidden=\"true\">\n\t\t\t\t<path d=\"M5 8L10 3 10.7 3.7 6.4 8 10.7 12.3 10 13z\"></path>\n\t\t\t</svg>\n\t\t</button>\n\t\t<div *ngIf=\"!leftOverflowNavButtonHidden\" class=\"bx--tabs__overflow-indicator--left\"></div>\n\t\t<ul\n\t\t\t#tabList\n\t\t\tclass=\"bx--tabs--scrollable__nav\"\n\t\t\trole=\"tablist\"\n\t\t\t(scroll)=\"handleScroll()\">\n\t\t\t<li role=\"presentation\">\n\t\t\t\t<ng-container *ngIf=\"contentBefore\" [ngTemplateOutlet]=\"contentBefore\"></ng-container>\n\t\t\t</li>\n\t\t\t<ng-content></ng-content>\n\t\t\t<li role=\"presentation\">\n\t\t\t\t<ng-container *ngIf=\"contentAfter\" [ngTemplateOutlet]=\"contentAfter\"></ng-container>\n\t\t\t</li>\n\t\t</ul>\n\t\t<div *ngIf=\"!rightOverflowNavButtonHidden\" class=\"bx--tabs__overflow-indicator--right\"></div>\n\t\t<button\n\t\t\t#rightOverflowNavButton\n\t\t\ttype=\"button\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--tab--overflow-nav-button': hasHorizontalOverflow,\n\t\t\t\t'bx--tab--overflow-nav-button--hidden': rightOverflowNavButtonHidden\n\t\t\t}\"\n\t\t\t(click)=\"handleOverflowNavClick(1)\"\n\t\t\t(mousedown)=\"handleOverflowNavMouseDown(1)\"\n\t\t\t(mouseup)=\"handleOverflowNavMouseUp()\">\n\t\t\t<svg\n\t\t\t\tfocusable=\"false\"\n\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\taria-hidden=\"true\">\n\t\t\t\t<path d=\"M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z\"></path>\n\t\t\t</svg>\n\t\t</button>\n\t</nav>\n\t"
                }] }
    ];
    /** @nocollapse */
    TabHeaderGroup.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: EventService }
    ]; };
    TabHeaderGroup.propDecorators = {
        followFocus: [{ type: Input }],
        skeleton: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        contentAfter: [{ type: Input }],
        contentBefore: [{ type: Input }],
        cacheActive: [{ type: Input }],
        isNavigation: [{ type: Input }],
        type: [{ type: Input }],
        tabHeaderQuery: [{ type: ContentChildren, args: [TabHeader,] }],
        headerContainer: [{ type: ViewChild, args: ["tabList", { static: true },] }],
        rightOverflowNavButton: [{ type: ViewChild, args: ["rightOverflowNavButton", { static: true },] }],
        leftOverflowNavButton: [{ type: ViewChild, args: ["leftOverflowNavButton", { static: true },] }],
        keyboardInput: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return TabHeaderGroup;
}());
export { TabHeaderGroup };
//# sourceMappingURL=data:application/json;base64,