/**
 *
 * carbon-angular v0.0.0 | number.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, EventEmitter, Output, TemplateRef, HostListener } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { I18n } from "carbon-components-angular/i18n";
/**
 * Used to emit changes performed on number input components.
 */
var NumberChange = /** @class */ (function () {
    function NumberChange() {
    }
    return NumberChange;
}());
export { NumberChange };
/**
 * [See demo](../../?path=/story/number--basic)
 *
 * <example-url>../../iframe.html?id=number--basic</example-url>
 */
var NumberComponent = /** @class */ (function () {
    /**
     * Creates an instance of `Number`.
     */
    function NumberComponent(i18n) {
        this.i18n = i18n;
        this.containerClass = true;
        /**
         * `light` or `dark` number input theme.
         */
        this.theme = "dark";
        /**
         * Set to `true` for a disabled number input.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading number component.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid number component.
         */
        this.invalid = false;
        /**
         * The unique id for the number component.
         */
        this.id = "number-" + NumberComponent.numberCount;
        /**
         * Number input field render size
         */
        this.size = "md";
        /**
         * Sets the min attribute on the `input` element.
         */
        this.min = null;
        /**
         * Sets the max attribute on the `input` element.
         */
        this.max = null;
        /**
         * Sets the amount the number controls increment and decrement by.
         */
        this.step = 1;
        /**
         * Emits event notifying other classes when a change in state occurs in the input.
         */
        this.change = new EventEmitter();
        this._value = 0;
        this._decrementLabel = this.i18n.getOverridable("NUMBER.DECREMENT");
        this._incrementLabel = this.i18n.getOverridable("NUMBER.INCREMENT");
        /**
         * Called when number input is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = function () { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = function (_) { };
        NumberComponent.numberCount++;
    }
    Object.defineProperty(NumberComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Sets the value attribute on the `input` element.
         */
        set: function (v) {
            if (v === "" || v === null) {
                this._value = null;
                return;
            }
            this._value = Number(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberComponent.prototype, "decrementLabel", {
        get: function () {
            return this._decrementLabel.value;
        },
        set: function (value) {
            this._decrementLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberComponent.prototype, "incrementLabel", {
        get: function () {
            return this._incrementLabel.value;
        },
        set: function (value) {
            this._incrementLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This is the initial value set to the component
     * @param value The input value.
     */
    NumberComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    NumberComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the number input is touched.
     */
    NumberComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NumberComponent.prototype.focusOut = function () {
        this.onTouched();
    };
    /**
     * Sets the disabled state through the model
     */
    NumberComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * Adds `step` to the current `value`.
     */
    NumberComponent.prototype.onIncrement = function () {
        if (this.max === null || this.value + this.step <= this.max) {
            this.value += this.step;
            this.value = parseFloat(this.value.toPrecision(this.precision));
            this.emitChangeEvent();
        }
    };
    /**
     * Subtracts `step` to the current `value`.
     */
    NumberComponent.prototype.onDecrement = function () {
        if (this.min === null || this.value - this.step >= this.min) {
            this.value -= this.step;
            this.value = parseFloat(this.value.toPrecision(this.precision));
            this.emitChangeEvent();
        }
    };
    NumberComponent.prototype.getDecrementLabel = function () {
        return this._decrementLabel.subject;
    };
    NumberComponent.prototype.getIncrementLabel = function () {
        return this._incrementLabel.subject;
    };
    /**
     * Creates a class of `NumberChange` to emit the change in the `Number`.
     */
    NumberComponent.prototype.emitChangeEvent = function () {
        var event = new NumberChange();
        event.source = this;
        event.value = this.value;
        this.change.emit(event);
        this.propagateChange(this.value);
    };
    NumberComponent.prototype.onNumberInputChange = function (event) {
        this.value = event.target.value;
        this.emitChangeEvent();
    };
    NumberComponent.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * Variable used for creating unique ids for number input components.
     */
    NumberComponent.numberCount = 0;
    NumberComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-number",
                    template: "\n\t\t<label *ngIf=\"skeleton && label\" class=\"bx--label bx--skeleton\"></label>\n\t\t<label *ngIf=\"!skeleton && label\" [for]=\"id\" class=\"bx--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t</label>\n\t\t<div\n\t\t\tdata-numberinput\n\t\t\t[attr.data-invalid]=\"(invalid ? true : null)\"\n\t\t\tclass=\"bx--number\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--number--light': theme === 'light',\n\t\t\t\t'bx--number--nolabel': !label,\n\t\t\t\t'bx--number--helpertext': helperText,\n\t\t\t\t'bx--skeleton' : skeleton,\n\t\t\t\t'bx--number--sm': size === 'sm',\n\t\t\t\t'bx--number--xl': size === 'xl'\n\t\t\t}\">\n\t\t\t<div class=\"bx--number__input-wrapper\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t[id]=\"id\"\n\t\t\t\t\t[value]=\"value\"\n\t\t\t\t\t[attr.min]=\"min\"\n\t\t\t\t\t[attr.max]=\"max\"\n\t\t\t\t\t[attr.step]=\"step\"\n\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\t[required]=\"required\"\n\t\t\t\t\t(input)=\"onNumberInputChange($event)\"/>\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton && invalid\"\n\t\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\tclass=\"bx--number__invalid\">\n\t\t\t\t</svg>\n\t\t\t\t<div *ngIf=\"!skeleton\" class=\"bx--number__controls\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"bx--number__control-btn up-icon\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\taria-live=\"polite\"\n\t\t\t\t\t\taria-atomic=\"true\"\n\t\t\t\t\t\t[attr.aria-label]=\"getIncrementLabel() | async\"\n\t\t\t\t\t\t(click)=\"onIncrement()\">\n\t\t\t\t\t\t<svg ibmIcon=\"caret--up\" size=\"16\"></svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"bx--number__control-btn down-icon\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\taria-live=\"polite\"\n\t\t\t\t\t\taria-atomic=\"true\"\n\t\t\t\t\t\t[attr.aria-label]=\"getDecrementLabel() | async\"\n\t\t\t\t\t\t(click)=\"onDecrement()\">\n\t\t\t\t\t\t<svg ibmIcon=\"caret--down\" size=\"16\"></svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"helperText && !invalid\" class=\"bx--form__helper-text\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t\t</div>\n\t\t</div>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NumberComponent,
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    NumberComponent.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    NumberComponent.propDecorators = {
        containerClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
        theme: [{ type: Input }],
        disabled: [{ type: Input }],
        skeleton: [{ type: Input }],
        invalid: [{ type: Input }],
        id: [{ type: Input }],
        size: [{ type: Input }],
        required: [{ type: Input }],
        value: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        label: [{ type: Input }],
        helperText: [{ type: Input }],
        invalidText: [{ type: Input }],
        step: [{ type: Input }],
        precision: [{ type: Input }],
        change: [{ type: Output }],
        decrementLabel: [{ type: Input }],
        incrementLabel: [{ type: Input }],
        focusOut: [{ type: HostListener, args: ["focusout",] }]
    };
    return NumberComponent;
}());
export { NumberComponent };
export { NumberComponent as Number };
//# sourceMappingURL=data:application/json;base64,