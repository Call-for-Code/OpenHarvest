/**
 *
 * carbon-angular v0.0.0 | tag-filter.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, HostBinding, Input } from "@angular/core";
import { Tag } from "./tag.component";
var TagFilter = /** @class */ (function (_super) {
    tslib_1.__extends(TagFilter, _super);
    function TagFilter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.closeButtonLabel = "Clear Filter";
        /**
         * Function for close/delete the tag
         */
        _this.close = new EventEmitter();
        /**
         * We need to stop the immedate propagation of click on the close button
         * to prevent undesired effects when used within dialogs.
         *
         * We need to emit a click event on close to allow for clicks to be listened
         * to on the immediate close button element. `action` distinguishes between clicks on
         * the tag vs. clicks on the close button.
         */
        _this.click = new EventEmitter();
        return _this;
    }
    TagFilter.prototype.onClick = function (event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "click" });
    };
    TagFilter.prototype.onClose = function (event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "close" });
        this.close.emit();
    };
    Object.defineProperty(TagFilter.prototype, "attrClass", {
        get: function () {
            return "bx--tag bx--tag--filter bx--tag--" + this.type + " " + this.class;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagFilter.prototype, "attrAriaLabel", {
        get: function () {
            return ((this.title || "") + " " + this.closeButtonLabel).trim();
        },
        enumerable: true,
        configurable: true
    });
    TagFilter.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tag-filter",
                    template: "\n\t\t<span\n\t\t\tclass=\"bx--tag__label\"\n\t\t\t[attr.title]=\"title ? title : null\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</span>\n\t\t<button\n\t\t\tclass=\"bx--tag__close-icon\"\n\t\t\t(click)=\"onClose($event)\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[title]=\"closeButtonLabel\">\n\t\t\t<span class=\"bx--visually-hidden\">{{closeButtonLabel}}</span>\n\t\t\t<svg ibmIcon=\"close\" size=\"16\"></svg>\n\t\t</button>\n\t"
                }] }
    ];
    TagFilter.propDecorators = {
        closeButtonLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        title: [{ type: Input }],
        close: [{ type: Output }],
        click: [{ type: Output }],
        attrClass: [{ type: HostBinding, args: ["attr.class",] }],
        attrAriaLabel: [{ type: HostBinding, args: ["attr.aria-label",] }]
    };
    return TagFilter;
}(Tag));
export { TagFilter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3RhZy8iLCJzb3VyY2VzIjpbInRhZy1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULE1BQU0sRUFDTixZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFDTCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFdEM7SUFtQitCLHFDQUFHO0lBbkJsQztRQUFBLHFFQXlEQztRQXJDUyxzQkFBZ0IsR0FBRyxjQUFjLENBQUM7UUFJM0M7O1dBRUc7UUFDTyxXQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUUxQzs7Ozs7OztXQU9HO1FBQ08sV0FBSyxHQUFHLElBQUksWUFBWSxFQUFpQyxDQUFDOztJQW9CckUsQ0FBQztJQWxCQSwyQkFBTyxHQUFQLFVBQVEsS0FBVTtRQUNqQixLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCwyQkFBTyxHQUFQLFVBQVEsS0FBVTtRQUNqQixLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELHNCQUErQixnQ0FBUzthQUF4QztZQUNDLE9BQU8sc0NBQW9DLElBQUksQ0FBQyxJQUFJLFNBQUksSUFBSSxDQUFDLEtBQU8sQ0FBQztRQUN0RSxDQUFDOzs7T0FBQTtJQUVELHNCQUFvQyxvQ0FBYTthQUFqRDtZQUNDLE9BQU8sQ0FBQSxDQUFHLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxVQUFJLElBQUksQ0FBQyxnQkFBa0IsQ0FBQSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlELENBQUM7OztPQUFBOztnQkF4REQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxnZEFlVDtpQkFDRDs7O21DQUVDLEtBQUs7MkJBQ0wsS0FBSzt3QkFDTCxLQUFLO3dCQUtMLE1BQU07d0JBVU4sTUFBTTs0QkFhTixXQUFXLFNBQUMsWUFBWTtnQ0FJeEIsV0FBVyxTQUFDLGlCQUFpQjs7SUFHL0IsZ0JBQUM7Q0FBQSxBQXpERCxDQW1CK0IsR0FBRyxHQXNDakM7U0F0Q1ksU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgVGFnIH0gZnJvbSBcIi4vdGFnLmNvbXBvbmVudFwiO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXRhZy1maWx0ZXJcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8c3BhblxuXHRcdFx0Y2xhc3M9XCJieC0tdGFnX19sYWJlbFwiXG5cdFx0XHRbYXR0ci50aXRsZV09XCJ0aXRsZSA/IHRpdGxlIDogbnVsbFwiXG5cdFx0XHQoY2xpY2spPVwib25DbGljaygkZXZlbnQpXCI+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9zcGFuPlxuXHRcdDxidXR0b25cblx0XHRcdGNsYXNzPVwiYngtLXRhZ19fY2xvc2UtaWNvblwiXG5cdFx0XHQoY2xpY2spPVwib25DbG9zZSgkZXZlbnQpXCJcblx0XHRcdFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG5cdFx0XHRbdGl0bGVdPVwiY2xvc2VCdXR0b25MYWJlbFwiPlxuXHRcdFx0PHNwYW4gY2xhc3M9XCJieC0tdmlzdWFsbHktaGlkZGVuXCI+e3tjbG9zZUJ1dHRvbkxhYmVsfX08L3NwYW4+XG5cdFx0XHQ8c3ZnIGlibUljb249XCJjbG9zZVwiIHNpemU9XCIxNlwiPjwvc3ZnPlxuXHRcdDwvYnV0dG9uPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRhZ0ZpbHRlciBleHRlbmRzIFRhZyB7XG5cdEBJbnB1dCgpIGNsb3NlQnV0dG9uTGFiZWwgPSBcIkNsZWFyIEZpbHRlclwiO1xuXHRASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcblx0QElucHV0KCkgdGl0bGU6IHN0cmluZztcblxuXHQvKipcblx0ICogRnVuY3Rpb24gZm9yIGNsb3NlL2RlbGV0ZSB0aGUgdGFnXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuXHQvKipcblx0ICogV2UgbmVlZCB0byBzdG9wIHRoZSBpbW1lZGF0ZSBwcm9wYWdhdGlvbiBvZiBjbGljayBvbiB0aGUgY2xvc2UgYnV0dG9uXG5cdCAqIHRvIHByZXZlbnQgdW5kZXNpcmVkIGVmZmVjdHMgd2hlbiB1c2VkIHdpdGhpbiBkaWFsb2dzLlxuXHQgKlxuXHQgKiBXZSBuZWVkIHRvIGVtaXQgYSBjbGljayBldmVudCBvbiBjbG9zZSB0byBhbGxvdyBmb3IgY2xpY2tzIHRvIGJlIGxpc3RlbmVkXG5cdCAqIHRvIG9uIHRoZSBpbW1lZGlhdGUgY2xvc2UgYnV0dG9uIGVsZW1lbnQuIGBhY3Rpb25gIGRpc3Rpbmd1aXNoZXMgYmV0d2VlbiBjbGlja3Mgb25cblx0ICogdGhlIHRhZyB2cy4gY2xpY2tzIG9uIHRoZSBjbG9zZSBidXR0b24uXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHsgYWN0aW9uOiBcImNsaWNrXCIgfCBcImNsb3NlXCIgfT4oKTtcblxuXHRvbkNsaWNrKGV2ZW50OiBhbnkpIHtcblx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR0aGlzLmNsaWNrLmVtaXQoeyBhY3Rpb246IFwiY2xpY2tcIiB9KTtcblx0fVxuXG5cdG9uQ2xvc2UoZXZlbnQ6IGFueSkge1xuXHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMuY2xpY2suZW1pdCh7IGFjdGlvbjogXCJjbG9zZVwiIH0pO1xuXHRcdHRoaXMuY2xvc2UuZW1pdCgpO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5jbGFzc1wiKSBnZXQgYXR0ckNsYXNzKCkge1xuXHRcdHJldHVybiBgYngtLXRhZyBieC0tdGFnLS1maWx0ZXIgYngtLXRhZy0tJHt0aGlzLnR5cGV9ICR7dGhpcy5jbGFzc31gO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5hcmlhLWxhYmVsXCIpIGdldCBhdHRyQXJpYUxhYmVsKCkge1xuXHRcdHJldHVybiBgJHt0aGlzLnRpdGxlIHx8IFwiXCJ9ICR7dGhpcy5jbG9zZUJ1dHRvbkxhYmVsfWAudHJpbSgpO1xuXHR9XG59XG4iXX0=