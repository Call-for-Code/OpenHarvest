/**
 *
 * carbon-angular v0.0.0 | header.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
import { I18n } from "carbon-components-angular/i18n";
/**
 * A fixed header and navigation.
 * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
 * and global actions (generally in the form of `Panel`s).
 *
 * [See demo](../../?path=/story/ui-shell--header)
 *
 * <example-url>../../iframe.html?id=ui-shell--header</example-url>
 */
var Header = /** @class */ (function () {
    function Header(i18n, domSanitizer, router) {
        this.i18n = i18n;
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Top level branding. Defaults to "IBM"
         */
        this.brand = "IBM";
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    Object.defineProperty(Header.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        /**
         * Optional link for the header
         */
        set: function (v) {
            this._href = v;
        },
        enumerable: true,
        configurable: true
    });
    Header.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    Header.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
    };
    Header.decorators = [
        { type: Component, args: [{
                    selector: "ibm-header",
                    template: "\n\t\t<header\n\t\t\tclass=\"bx--header\"\n\t\t\t[attr.aria-label]=\"brand + ' ' + name\">\n\t\t\t<a\n\t\t\t\t*ngIf=\"skipTo\"\n\t\t\t\tclass=\"bx--skip-to-content\"\n\t\t\t\t[href]=\"skipTo\"\n\t\t\t\ttabindex=\"0\">\n\t\t\t\t{{ i18n.get(\"UI_SHELL.SKIP_TO\") | async }}\n\t\t\t</a>\n\t\t\t<ng-content select=\"ibm-hamburger\"></ng-content>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(brand)\"\n\t\t\t\t[ngTemplateOutlet]=\"brand\">\n\t\t\t</ng-template>\n\t\t\t<ng-container *ngIf=\"!isTemplate(brand)\" [ngSwitch]=\"useRouter\">\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"false\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[href]=\"href\"\n\t\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"true\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[routerLink]=\"route\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t\t<ng-content></ng-content>\n\t\t</header>\n\t"
                }] }
    ];
    /** @nocollapse */
    Header.ctorParameters = function () { return [
        { type: I18n },
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    Header.propDecorators = {
        skipTo: [{ type: Input }],
        name: [{ type: Input }],
        brand: [{ type: Input }],
        href: [{ type: Input }],
        route: [{ type: Input }],
        routeExtras: [{ type: Input }],
        useRouter: [{ type: Input }],
        navigation: [{ type: Output }]
    };
    return Header;
}());
export { Header };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJoZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEQ7Ozs7Ozs7O0dBUUc7QUFDSDtJQXVGQyxnQkFDUSxJQUFVLEVBQ1AsWUFBMEIsRUFDZCxNQUFjO1FBRjdCLFNBQUksR0FBSixJQUFJLENBQU07UUFDUCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNkLFdBQU0sR0FBTixNQUFNLENBQVE7UUExQ3JDOztXQUVHO1FBQ00sVUFBSyxHQUE4QixLQUFLLENBQUM7UUF3QmxEOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztRQUUzQjs7V0FFRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUVsRCxVQUFLLEdBQUcsb0JBQW9CLENBQUM7SUFLRSxDQUFDO0lBbkMxQyxzQkFBYSx3QkFBSTthQUlqQjtZQUNDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFXLENBQUM7UUFDdkUsQ0FBQztRQVREOztXQUVHO2FBQ0gsVUFBa0IsQ0FBUztZQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQW1DTSwyQkFBVSxHQUFqQixVQUFrQixLQUFLO1FBQ3RCLE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztJQUNyQyxDQUFDO0lBRUQseUJBQVEsR0FBUixVQUFTLEtBQUs7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM5QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBTSxRQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBTSxDQUFDLENBQUM7U0FDN0I7SUFDRixDQUFDOztnQkF0R0QsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsOGtDQW1DVDtpQkFDRDs7OztnQkFqRFEsSUFBSTtnQkFGSixZQUFZO2dCQUNaLE1BQU0sdUJBc0daLFFBQVE7Ozt5QkEvQ1QsS0FBSzt1QkFJTCxLQUFLO3dCQUlMLEtBQUs7dUJBSUwsS0FBSzt3QkFZTCxLQUFLOzhCQU1MLEtBQUs7NEJBS0wsS0FBSzs2QkFLTCxNQUFNOztJQW9CUixhQUFDO0NBQUEsQUF2R0QsSUF1R0M7U0FoRVksTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE9wdGlvbmFsLFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0VGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuXG4vKipcbiAqIEEgZml4ZWQgaGVhZGVyIGFuZCBuYXZpZ2F0aW9uLlxuICogSGVhZGVyIG1heSBjb250YWluIGEgSGFtYnVyZ2VyIG1lbnUgdG8gdG9nZ2xlIHRoZSBzaWRlIG5hdmlnYXRpb24sIG5hdmlnYXRpb24gYWN0aW9ucyxcbiAqIGFuZCBnbG9iYWwgYWN0aW9ucyAoZ2VuZXJhbGx5IGluIHRoZSBmb3JtIG9mIGBQYW5lbGBzKS5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS91aS1zaGVsbC0taGVhZGVyKVxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD11aS1zaGVsbC0taGVhZGVyPC9leGFtcGxlLXVybD5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1oZWFkZXJcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8aGVhZGVyXG5cdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJcIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJicmFuZCArICcgJyArIG5hbWVcIj5cblx0XHRcdDxhXG5cdFx0XHRcdCpuZ0lmPVwic2tpcFRvXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tc2tpcC10by1jb250ZW50XCJcblx0XHRcdFx0W2hyZWZdPVwic2tpcFRvXCJcblx0XHRcdFx0dGFiaW5kZXg9XCIwXCI+XG5cdFx0XHRcdHt7IGkxOG4uZ2V0KFwiVUlfU0hFTEwuU0tJUF9UT1wiKSB8IGFzeW5jIH19XG5cdFx0XHQ8L2E+XG5cdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJpYm0taGFtYnVyZ2VyXCI+PC9uZy1jb250ZW50PlxuXHRcdFx0PG5nLXRlbXBsYXRlXG5cdFx0XHRcdCpuZ0lmPVwiaXNUZW1wbGF0ZShicmFuZClcIlxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldF09XCJicmFuZFwiPlxuXHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXNUZW1wbGF0ZShicmFuZClcIiBbbmdTd2l0Y2hdPVwidXNlUm91dGVyXCI+XG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0Km5nU3dpdGNoQ2FzZT1cImZhbHNlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWVcIlxuXHRcdFx0XHRcdFtocmVmXT1cImhyZWZcIlxuXHRcdFx0XHRcdChjbGljayk9XCJuYXZpZ2F0ZSgkZXZlbnQpXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJieC0taGVhZGVyX19uYW1lLS1wcmVmaXhcIj57e2JyYW5kfX0mbmJzcDs8L3NwYW4+XG5cdFx0XHRcdFx0e3tuYW1lfX1cblx0XHRcdFx0PC9hPlxuXHRcdFx0XHQ8YVxuXHRcdFx0XHRcdCpuZ1N3aXRjaENhc2U9XCJ0cnVlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWVcIlxuXHRcdFx0XHRcdFtyb3V0ZXJMaW5rXT1cInJvdXRlXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJieC0taGVhZGVyX19uYW1lLS1wcmVmaXhcIj57e2JyYW5kfX0mbmJzcDs8L3NwYW4+XG5cdFx0XHRcdFx0e3tuYW1lfX1cblx0XHRcdFx0PC9hPlxuXHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9oZWFkZXI+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgSGVhZGVyIHtcblx0LyoqXG5cdCAqIElEIGluIHRoZSBtYWluIGJvZHkgY29udGVudCB0byBqdW1wIHRvLiBVc2VkIGJ5IGtleWJvYXJkIGFuZCBzY3JlZW4gcmVhZGVyIHVzZXJzIHRvIHNraXAgdGhlIGhlYWRlciBjb250ZW50LlxuXHQgKi9cblx0QElucHV0KCkgc2tpcFRvOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBMYWJlbCB0aGF0IHNob3dzIHRvIHRoZSByaWdodCBvZiB0aGUgYGJyYW5kYCB0ZXh0LiBHZW5lcmFsbHkgYSBwcm9kdWN0IG5hbWUuXG5cdCAqL1xuXHRASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBUb3AgbGV2ZWwgYnJhbmRpbmcuIERlZmF1bHRzIHRvIFwiSUJNXCJcblx0ICovXG5cdEBJbnB1dCgpIGJyYW5kOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gXCJJQk1cIjtcblx0LyoqXG5cdCAqIE9wdGlvbmFsIGxpbmsgZm9yIHRoZSBoZWFkZXJcblx0ICovXG5cdEBJbnB1dCgpIHNldCBocmVmKHY6IHN0cmluZykge1xuXHRcdHRoaXMuX2hyZWYgPSB2O1xuXHR9XG5cblx0Z2V0IGhyZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodGhpcy5faHJlZikgYXMgc3RyaW5nO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFycmF5IG9mIGNvbW1hbmRzIHRvIHNlbmQgdG8gdGhlIHJvdXRlciB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGU6IGFueVtdO1xuXG5cdC8qKlxuXHQgKiBSb3V0ZXIgb3B0aW9ucy4gVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGByb3V0ZWBcblx0ICogU2VlOiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXIjbmF2aWdhdGVcblx0ICovXG5cdEBJbnB1dCgpIHJvdXRlRXh0cmFzOiBhbnk7XG5cblx0LyoqXG5cdCAqIFVzZSB0aGUgcm91dGVyTGluayBhdHRyaWJ1dGUgb24gPGE+IHRhZyBmb3IgbmF2aWdhdGlvbiBpbnN0ZWFkIG9mIHVzaW5nIGV2ZW50IGhhbmRsZXJzXG5cdCAqL1xuXHRASW5wdXQoKSB1c2VSb3V0ZXIgPSBmYWxzZTtcblxuXHQvKipcblx0ICogRW1pdHMgdGhlIG5hdmlnYXRpb24gc3RhdHVzIHByb21pc2Ugd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICovXG5cdEBPdXRwdXQoKSBuYXZpZ2F0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxQcm9taXNlPGJvb2xlYW4+PigpO1xuXG5cdHByb3RlY3RlZCBfaHJlZiA9IFwiamF2YXNjcmlwdDp2b2lkKDApXCI7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIGkxOG46IEkxOG4sXG5cdFx0cHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLFxuXHRcdEBPcHRpb25hbCgpIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcikgeyB9XG5cblx0cHVibGljIGlzVGVtcGxhdGUodmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcblx0fVxuXG5cdG5hdmlnYXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucm91dGVyICYmIHRoaXMucm91dGUpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXMgPSB0aGlzLnJvdXRlci5uYXZpZ2F0ZSh0aGlzLnJvdXRlLCB0aGlzLnJvdXRlRXh0cmFzKTtcblx0XHRcdHRoaXMubmF2aWdhdGlvbi5lbWl0KHN0YXR1cyk7XG5cdFx0fVxuXHR9XG59XG4iXX0=