/**
 *
 * carbon-angular v0.0.0 | header-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, EventEmitter, Output } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 * Individual item in the header. May be used a direct child of `HeaderNavigation` or `HeaderMenu`
 */
var HeaderItem = /** @class */ (function () {
    function HeaderItem(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    Object.defineProperty(HeaderItem.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        set: function (v) {
            // Needed when component is created dynamically with a model.
            if (v === undefined) {
                return;
            }
            this._href = v;
        },
        enumerable: true,
        configurable: true
    });
    HeaderItem.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
    };
    HeaderItem.decorators = [
        { type: Component, args: [{
                    selector: "ibm-header-item",
                    template: "\n\t\t<li style=\"height: 100%\">\n\t\t\t<ng-container [ngSwitch]=\"useRouter\">\n\t\t\t\t<ng-template #content><ng-content></ng-content></ng-template>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"false\"\n\t\t\t\t\tclass=\"bx--header__menu-item\"\n\t\t\t\t\trole=\"menuitem\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t[ngClass]=\"{'bx--header__menu-item--current' : isCurrentPage}\"\n\t\t\t\t\t[href]=\"href\"\n\t\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"content\"></ng-container>\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"true\"\n\t\t\t\t\tclass=\"bx--header__menu-item\"\n\t\t\t\t\trole=\"menuitem\"\n\t\t\t\t\t[routerLinkActive]=\"['bx--header__menu-item--current']\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t[ngClass]=\"{'bx--header__menu-item--current' : isCurrentPage}\"\n\t\t\t\t\t[routerLink]=\"route\"\n\t\t\t\t\t[routerLinkActive]=\"activeLinkClass\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"content\"></ng-container>\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t</li>\n\t"
                }] }
    ];
    /** @nocollapse */
    HeaderItem.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    HeaderItem.propDecorators = {
        href: [{ type: Input }],
        useRouter: [{ type: Input }],
        activeLinkClass: [{ type: Input }],
        isCurrentPage: [{ type: Input }],
        route: [{ type: Input }],
        routeExtras: [{ type: Input }],
        navigation: [{ type: Output }]
    };
    return HeaderItem;
}());
export { HeaderItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91aS1zaGVsbC8iLCJzb3VyY2VzIjpbImhlYWRlci9oZWFkZXItaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsUUFBUSxFQUNSLFlBQVksRUFDWixNQUFNLEVBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6Qzs7R0FFRztBQUNIO0lBOEVDLG9CQUFzQixZQUEwQixFQUF3QixNQUFjO1FBQWhFLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQXdCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFsQ3RGOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztRQXdCM0I7O1dBRUc7UUFDTyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFFbEQsVUFBSyxHQUFHLG9CQUFvQixDQUFDO0lBRW1ELENBQUM7SUE5QzNGLHNCQUFhLDRCQUFJO2FBUWpCO1lBQ0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQztRQUN2RSxDQUFDO2FBVkQsVUFBa0IsQ0FBUztZQUMxQiw2REFBNkQ7WUFDN0QsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUNwQixPQUFPO2FBQ1A7WUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQTBDRCw2QkFBUSxHQUFSLFVBQVMsS0FBSztRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzlCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFNLFFBQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFNLENBQUMsQ0FBQztTQUM3QjtJQUNGLENBQUM7O2dCQXRGRCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLGdnQ0EyQlQ7aUJBQ0Q7Ozs7Z0JBcENRLFlBQVk7Z0JBQ1osTUFBTSx1QkFtRnFDLFFBQVE7Ozt1QkE5QzFELEtBQUs7NEJBZUwsS0FBSztrQ0FLTCxLQUFLO2dDQUtMLEtBQUs7d0JBTUwsS0FBSzs4QkFNTCxLQUFLOzZCQUtMLE1BQU07O0lBYVIsaUJBQUM7Q0FBQSxBQXZGRCxJQXVGQztTQXhEWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3B0aW9uYWwsXG5cdEV2ZW50RW1pdHRlcixcblx0T3V0cHV0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuXG4vKipcbiAqIEluZGl2aWR1YWwgaXRlbSBpbiB0aGUgaGVhZGVyLiBNYXkgYmUgdXNlZCBhIGRpcmVjdCBjaGlsZCBvZiBgSGVhZGVyTmF2aWdhdGlvbmAgb3IgYEhlYWRlck1lbnVgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0taGVhZGVyLWl0ZW1cIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bGkgc3R5bGU9XCJoZWlnaHQ6IDEwMCVcIj5cblx0XHRcdDxuZy1jb250YWluZXIgW25nU3dpdGNoXT1cInVzZVJvdXRlclwiPlxuXHRcdFx0XHQ8bmctdGVtcGxhdGUgI2NvbnRlbnQ+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbmctdGVtcGxhdGU+XG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0Km5nU3dpdGNoQ2FzZT1cImZhbHNlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX21lbnUtaXRlbVwiXG5cdFx0XHRcdFx0cm9sZT1cIm1lbnVpdGVtXCJcblx0XHRcdFx0XHR0YWJpbmRleD1cIjBcIlxuXHRcdFx0XHRcdFtuZ0NsYXNzXT1cInsnYngtLWhlYWRlcl9fbWVudS1pdGVtLS1jdXJyZW50JyA6IGlzQ3VycmVudFBhZ2V9XCJcblx0XHRcdFx0XHRbaHJlZl09XCJocmVmXCJcblx0XHRcdFx0XHQoY2xpY2spPVwibmF2aWdhdGUoJGV2ZW50KVwiPlxuXHRcdFx0XHRcdDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb250ZW50XCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdDwvYT5cblx0XHRcdFx0PGFcblx0XHRcdFx0XHQqbmdTd2l0Y2hDYXNlPVwidHJ1ZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJieC0taGVhZGVyX19tZW51LWl0ZW1cIlxuXHRcdFx0XHRcdHJvbGU9XCJtZW51aXRlbVwiXG5cdFx0XHRcdFx0W3JvdXRlckxpbmtBY3RpdmVdPVwiWydieC0taGVhZGVyX19tZW51LWl0ZW0tLWN1cnJlbnQnXVwiXG5cdFx0XHRcdFx0dGFiaW5kZXg9XCIwXCJcblx0XHRcdFx0XHRbbmdDbGFzc109XCJ7J2J4LS1oZWFkZXJfX21lbnUtaXRlbS0tY3VycmVudCcgOiBpc0N1cnJlbnRQYWdlfVwiXG5cdFx0XHRcdFx0W3JvdXRlckxpbmtdPVwicm91dGVcIlxuXHRcdFx0XHRcdFtyb3V0ZXJMaW5rQWN0aXZlXT1cImFjdGl2ZUxpbmtDbGFzc1wiPlxuXHRcdFx0XHRcdDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb250ZW50XCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdDwvYT5cblx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdDwvbGk+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgSGVhZGVySXRlbSB7XG5cdEBJbnB1dCgpIHNldCBocmVmKHY6IHN0cmluZykge1xuXHRcdC8vIE5lZWRlZCB3aGVuIGNvbXBvbmVudCBpcyBjcmVhdGVkIGR5bmFtaWNhbGx5IHdpdGggYSBtb2RlbC5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX2hyZWYgPSB2O1xuXHR9XG5cblx0Z2V0IGhyZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodGhpcy5faHJlZikgYXMgc3RyaW5nO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVzZSB0aGUgcm91dGVyTGluayBhdHRyaWJ1dGUgb24gPGE+IHRhZyBmb3IgbmF2aWdhdGlvbiBpbnN0ZWFkIG9mIHVzaW5nIGV2ZW50IGhhbmRsZXJzXG5cdCAqL1xuXHRASW5wdXQoKSB1c2VSb3V0ZXIgPSBmYWxzZTtcblxuXHQvKipcblx0ICogU3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZyBjbGFzcyBuYW1lcyB0byBhcHBseSB3aGVuIGFjdGl2ZVxuXHQgKi9cblx0QElucHV0KCkgYWN0aXZlTGlua0NsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuXHQvKipcblx0ICogQXBwbGllcyBzZWxlY3RlZCBzdHlsZXMgdG8gdGhlIGl0ZW0gaWYgYSB1c2VyIHNldHMgdGhpcyB0byB0cnVlLlxuXHQgKi9cblx0QElucHV0KCkgaXNDdXJyZW50UGFnZTogYm9vbGVhbjtcblxuXHQvKipcblx0ICogQXJyYXkgb2YgY29tbWFuZHMgdG8gc2VuZCB0byB0aGUgcm91dGVyIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZTogYW55W107XG5cblx0LyoqXG5cdCAqIFJvdXRlciBvcHRpb25zLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHJvdXRlYFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGVFeHRyYXM6IGFueTtcblxuXHQvKipcblx0ICogRW1pdHMgdGhlIG5hdmlnYXRpb24gc3RhdHVzIHByb21pc2Ugd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICovXG5cdEBPdXRwdXQoKSBuYXZpZ2F0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxQcm9taXNlPGJvb2xlYW4+PigpO1xuXG5cdHByb3RlY3RlZCBfaHJlZiA9IFwiamF2YXNjcmlwdDp2b2lkKDApXCI7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIpIHsgfVxuXG5cdG5hdmlnYXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucm91dGVyICYmIHRoaXMucm91dGUpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXMgPSB0aGlzLnJvdXRlci5uYXZpZ2F0ZSh0aGlzLnJvdXRlLCB0aGlzLnJvdXRlRXh0cmFzKTtcblx0XHRcdHRoaXMubmF2aWdhdGlvbi5lbWl0KHN0YXR1cyk7XG5cdFx0fVxuXHR9XG59XG4iXX0=