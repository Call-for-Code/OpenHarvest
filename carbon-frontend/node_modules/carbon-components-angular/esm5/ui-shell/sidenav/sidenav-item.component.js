/**
 *
 * carbon-angular v0.0.0 | sidenav-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 * `SideNavItem` can either be a child of `SideNav` or `SideNavMenu`
 */
var SideNavItem = /** @class */ (function () {
    function SideNavItem(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Toggles the active (current page) state for the link.
         */
        this.active = false;
        this.isSubMenu = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        /**
         * Emits when `active` input is changed. This is mainly used to indicate to any parent menu items that a
         * child sidenav item is active or not active.
         */
        this.selected = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    Object.defineProperty(SideNavItem.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        /**
         * Link for the item. NOTE: *do not* pass unsafe or untrusted values, this has the potential to open you up to XSS attacks
         */
        set: function (v) {
            // Needed when component is created dynamically with a model.
            if (v === undefined) {
                return;
            }
            this._href = v;
        },
        enumerable: true,
        configurable: true
    });
    SideNavItem.prototype.ngOnChanges = function (changes) {
        if (changes.active) {
            this.selected.emit(this.active);
        }
    };
    SideNavItem.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
    };
    SideNavItem.decorators = [
        { type: Component, args: [{
                    selector: "ibm-sidenav-item",
                    template: "\n\t\t<li [ngClass]=\"{\n\t\t\t'bx--side-nav__item': !isSubMenu,\n\t\t\t'bx--side-nav__menu-item': isSubMenu\n\t\t}\"\n\t\t[attr.role]=\"(isSubMenu ? 'listitem' : null)\">\n\t\t\t<a\n\t\t\t\tclass=\"bx--side-nav__link\"\n\t\t\t\t[href]=\"href\"\n\t\t\t\t[attr.role]=\"(isSubMenu ? 'menuitem' : null)\"\n\t\t\t\t[attr.aria-current]=\"(active ? 'page' : null)\"\n\t\t\t\t[title]=\"title\"\n\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t<div *ngIf=\"!isSubMenu\" class=\"bx--side-nav__icon\">\n\t\t\t\t\t<ng-content select=\"svg, [icon]\"></ng-content>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"bx--side-nav__link-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t</li>\n\t"
                }] }
    ];
    /** @nocollapse */
    SideNavItem.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    SideNavItem.propDecorators = {
        href: [{ type: Input }],
        active: [{ type: Input }],
        route: [{ type: Input }],
        isSubMenu: [{ type: Input }],
        routeExtras: [{ type: Input }],
        title: [{ type: Input }],
        navigation: [{ type: Output }],
        selected: [{ type: Output }]
    };
    return SideNavItem;
}());
export { SideNavItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJzaWRlbmF2L3NpZGVuYXYtaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsUUFBUSxFQUNSLE1BQU0sRUFDTixZQUFZLEVBRVosTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6Qzs7R0FFRztBQUNIO0lBOEVDLHFCQUFzQixZQUEwQixFQUF3QixNQUFjO1FBQWhFLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQXdCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFyQ3RGOztXQUVHO1FBQ00sV0FBTSxHQUFHLEtBQUssQ0FBQztRQVFmLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFhM0I7O1dBRUc7UUFDTyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFFNUQ7OztXQUdHO1FBQ08sYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFdkMsVUFBSyxHQUFHLG9CQUFvQixDQUFDO0lBRWtELENBQUM7SUFqRDFGLHNCQUFhLDZCQUFJO2FBUWpCO1lBQ0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQztRQUN2RSxDQUFDO1FBYkQ7O1dBRUc7YUFDSCxVQUFrQixDQUFTO1lBQzFCLDZEQUE2RDtZQUM3RCxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ3BCLE9BQU87YUFDUDtZQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBNkNELGlDQUFXLEdBQVgsVUFBWSxPQUFPO1FBQ2xCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEM7SUFDRixDQUFDO0lBRUQsOEJBQVEsR0FBUixVQUFTLEtBQUs7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM5QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBTSxRQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBTSxDQUFDLENBQUM7U0FDN0I7SUFDRixDQUFDOztnQkE1RkQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSwyckJBcUJUO2lCQUNEOzs7O2dCQTlCUSxZQUFZO2dCQUNaLE1BQU0sdUJBbUZxQyxRQUFROzs7dUJBakQxRCxLQUFLO3lCQWVMLEtBQUs7d0JBTUwsS0FBSzs0QkFFTCxLQUFLOzhCQU1MLEtBQUs7d0JBS0wsS0FBSzs2QkFLTCxNQUFNOzJCQU1OLE1BQU07O0lBbUJSLGtCQUFDO0NBQUEsQUE3RkQsSUE2RkM7U0FwRVksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE9wdGlvbmFsLFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0T25DaGFuZ2VzXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuXG4vKipcbiAqIGBTaWRlTmF2SXRlbWAgY2FuIGVpdGhlciBiZSBhIGNoaWxkIG9mIGBTaWRlTmF2YCBvciBgU2lkZU5hdk1lbnVgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tc2lkZW5hdi1pdGVtXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGxpIFtuZ0NsYXNzXT1cIntcblx0XHRcdCdieC0tc2lkZS1uYXZfX2l0ZW0nOiAhaXNTdWJNZW51LFxuXHRcdFx0J2J4LS1zaWRlLW5hdl9fbWVudS1pdGVtJzogaXNTdWJNZW51XG5cdFx0fVwiXG5cdFx0W2F0dHIucm9sZV09XCIoaXNTdWJNZW51ID8gJ2xpc3RpdGVtJyA6IG51bGwpXCI+XG5cdFx0XHQ8YVxuXHRcdFx0XHRjbGFzcz1cImJ4LS1zaWRlLW5hdl9fbGlua1wiXG5cdFx0XHRcdFtocmVmXT1cImhyZWZcIlxuXHRcdFx0XHRbYXR0ci5yb2xlXT1cIihpc1N1Yk1lbnUgPyAnbWVudWl0ZW0nIDogbnVsbClcIlxuXHRcdFx0XHRbYXR0ci5hcmlhLWN1cnJlbnRdPVwiKGFjdGl2ZSA/ICdwYWdlJyA6IG51bGwpXCJcblx0XHRcdFx0W3RpdGxlXT1cInRpdGxlXCJcblx0XHRcdFx0KGNsaWNrKT1cIm5hdmlnYXRlKCRldmVudClcIj5cblx0XHRcdFx0PGRpdiAqbmdJZj1cIiFpc1N1Yk1lbnVcIiBjbGFzcz1cImJ4LS1zaWRlLW5hdl9faWNvblwiPlxuXHRcdFx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cInN2ZywgW2ljb25dXCI+PC9uZy1jb250ZW50PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJieC0tc2lkZS1uYXZfX2xpbmstdGV4dFwiPlxuXHRcdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0PC9hPlxuXHRcdDwvbGk+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgU2lkZU5hdkl0ZW0gaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXHQvKipcblx0ICogTGluayBmb3IgdGhlIGl0ZW0uIE5PVEU6ICpkbyBub3QqIHBhc3MgdW5zYWZlIG9yIHVudHJ1c3RlZCB2YWx1ZXMsIHRoaXMgaGFzIHRoZSBwb3RlbnRpYWwgdG8gb3BlbiB5b3UgdXAgdG8gWFNTIGF0dGFja3Ncblx0ICovXG5cdEBJbnB1dCgpIHNldCBocmVmKHY6IHN0cmluZykge1xuXHRcdC8vIE5lZWRlZCB3aGVuIGNvbXBvbmVudCBpcyBjcmVhdGVkIGR5bmFtaWNhbGx5IHdpdGggYSBtb2RlbC5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX2hyZWYgPSB2O1xuXHR9XG5cblx0Z2V0IGhyZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodGhpcy5faHJlZikgYXMgc3RyaW5nO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRvZ2dsZXMgdGhlIGFjdGl2ZSAoY3VycmVudCBwYWdlKSBzdGF0ZSBmb3IgdGhlIGxpbmsuXG5cdCAqL1xuXHRASW5wdXQoKSBhY3RpdmUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogQXJyYXkgb2YgY29tbWFuZHMgdG8gc2VuZCB0byB0aGUgcm91dGVyIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZTogYW55W107XG5cblx0QElucHV0KCkgaXNTdWJNZW51ID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFJvdXRlciBvcHRpb25zLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHJvdXRlYFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGVFeHRyYXM6IGFueTtcblxuXHQvKipcblx0ICogVGl0bGUgYXR0cmlidXRlIG9mIHRoZSBhbmNob3IgZWxlbWVudC5cblx0ICovXG5cdEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEVtaXRzIHRoZSBuYXZpZ2F0aW9uIHN0YXR1cyBwcm9taXNlIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqL1xuXHRAT3V0cHV0KCkgbmF2aWdhdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8UHJvbWlzZTxib29sZWFuPj4oKTtcblxuXHQvKipcblx0ICogRW1pdHMgd2hlbiBgYWN0aXZlYCBpbnB1dCBpcyBjaGFuZ2VkLiBUaGlzIGlzIG1haW5seSB1c2VkIHRvIGluZGljYXRlIHRvIGFueSBwYXJlbnQgbWVudSBpdGVtcyB0aGF0IGFcblx0ICogY2hpbGQgc2lkZW5hdiBpdGVtIGlzIGFjdGl2ZSBvciBub3QgYWN0aXZlLlxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG5cdHByb3RlY3RlZCBfaHJlZiA9IFwiamF2YXNjcmlwdDp2b2lkKDApXCI7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIpIHt9XG5cblx0bmdPbkNoYW5nZXMoY2hhbmdlcykge1xuXHRcdGlmIChjaGFuZ2VzLmFjdGl2ZSkge1xuXHRcdFx0dGhpcy5zZWxlY3RlZC5lbWl0KHRoaXMuYWN0aXZlKTtcblx0XHR9XG5cdH1cblxuXHRuYXZpZ2F0ZShldmVudCkge1xuXHRcdGlmICh0aGlzLnJvdXRlciAmJiB0aGlzLnJvdXRlKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y29uc3Qgc3RhdHVzID0gdGhpcy5yb3V0ZXIubmF2aWdhdGUodGhpcy5yb3V0ZSwgdGhpcy5yb3V0ZUV4dHJhcyk7XG5cdFx0XHR0aGlzLm5hdmlnYXRpb24uZW1pdChzdGF0dXMpO1xuXHRcdH1cblx0fVxufVxuIl19