/**
 *
 * carbon-angular v0.0.0 | switcher-list-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, Optional, HostBinding } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 * Represents an item in a switcher list.
 */
var SwitcherListItem = /** @class */ (function () {
    function SwitcherListItem(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Enables the "active" state for an item. Commonly used to indicate the current page or selection.
         */
        this.active = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this.itemClass = true;
        this.itemRole = "listitem";
        this._href = "javascript:void(0)";
        this._target = "";
    }
    Object.defineProperty(SwitcherListItem.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        /**
         * Optional link for the underlying anchor.
         */
        set: function (value) {
            this._href = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitcherListItem.prototype, "target", {
        get: function () {
            return this._target;
        },
        /**
         * Optional target for the underlying anchor.
         */
        set: function (value) {
            this._target = value;
        },
        enumerable: true,
        configurable: true
    });
    SwitcherListItem.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
    };
    SwitcherListItem.decorators = [
        { type: Component, args: [{
                    selector: "ibm-switcher-list-item",
                    template: "\n\t\t<a\n\t\t\tclass=\"bx--switcher__item-link\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--switcher__item-link--selected': active\n\t\t\t}\"\n\t\t\t[href]=\"href\"\n\t\t\t[target]=\"target\"\n\t\t\t(click)=\"navigate($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</a>\n\t"
                }] }
    ];
    /** @nocollapse */
    SwitcherListItem.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    SwitcherListItem.propDecorators = {
        active: [{ type: Input }],
        route: [{ type: Input }],
        routeExtras: [{ type: Input }],
        href: [{ type: Input }],
        navigation: [{ type: Output }],
        target: [{ type: Input }],
        itemClass: [{ type: HostBinding, args: ["class.bx--switcher__item",] }],
        itemRole: [{ type: HostBinding, args: ["attr.role",] }]
    };
    return SwitcherListItem;
}());
export { SwitcherListItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoZXItbGlzdC1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJwYW5lbC9zd2l0Y2hlci1saXN0LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osUUFBUSxFQUNSLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFXLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDOztHQUVHO0FBQ0g7SUFtRUMsMEJBQXNCLFlBQTBCLEVBQXdCLE1BQWM7UUFBaEUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBd0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQW5EdEY7O1dBRUc7UUFDTSxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBcUJ4Qjs7V0FFRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQWlCbkIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUVoQyxhQUFRLEdBQUcsVUFBVSxDQUFDO1FBRXRDLFVBQUssR0FBRyxvQkFBb0IsQ0FBQztRQUM3QixZQUFPLEdBQUcsRUFBRSxDQUFDO0lBRW1FLENBQUM7SUEvQjNGLHNCQUFhLGtDQUFJO2FBU2pCO1lBQ0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQztRQUN2RSxDQUFDO1FBZEQ7O1dBRUc7YUFDSCxVQUFrQixLQUFhO1lBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLENBQUM7OztPQUFBO0lBY0Qsc0JBQWEsb0NBQU07YUFJbkI7WUFDQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDckIsQ0FBQztRQVREOztXQUVHO2FBQ0gsVUFBb0IsS0FBYTtZQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN0QixDQUFDOzs7T0FBQTtJQWVELG1DQUFRLEdBQVIsVUFBUyxLQUFLO1FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDOUIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQU0sUUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQU0sQ0FBQyxDQUFDO1NBQzdCO0lBQ0YsQ0FBQzs7Z0JBM0VELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUUsOFFBV1Q7aUJBQ0Q7Ozs7Z0JBcEJRLFlBQVk7Z0JBQ1osTUFBTSx1QkF3RXFDLFFBQVE7Ozt5QkFoRDFELEtBQUs7d0JBTUwsS0FBSzs4QkFNTCxLQUFLO3VCQUtMLEtBQUs7NkJBT0wsTUFBTTt5QkFTTixLQUFLOzRCQVFMLFdBQVcsU0FBQywwQkFBMEI7MkJBRXRDLFdBQVcsU0FBQyxXQUFXOztJQWN6Qix1QkFBQztDQUFBLEFBNUVELElBNEVDO1NBN0RZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyLFxuXHRPcHRpb25hbCxcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVVybCB9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBpdGVtIGluIGEgc3dpdGNoZXIgbGlzdC5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1zd2l0Y2hlci1saXN0LWl0ZW1cIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8YVxuXHRcdFx0Y2xhc3M9XCJieC0tc3dpdGNoZXJfX2l0ZW0tbGlua1wiXG5cdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdCdieC0tc3dpdGNoZXJfX2l0ZW0tbGluay0tc2VsZWN0ZWQnOiBhY3RpdmVcblx0XHRcdH1cIlxuXHRcdFx0W2hyZWZdPVwiaHJlZlwiXG5cdFx0XHRbdGFyZ2V0XT1cInRhcmdldFwiXG5cdFx0XHQoY2xpY2spPVwibmF2aWdhdGUoJGV2ZW50KVwiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvYT5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBTd2l0Y2hlckxpc3RJdGVtIHtcblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlIFwiYWN0aXZlXCIgc3RhdGUgZm9yIGFuIGl0ZW0uIENvbW1vbmx5IHVzZWQgdG8gaW5kaWNhdGUgdGhlIGN1cnJlbnQgcGFnZSBvciBzZWxlY3Rpb24uXG5cdCAqL1xuXHRASW5wdXQoKSBhY3RpdmUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogQXJyYXkgb2YgY29tbWFuZHMgdG8gc2VuZCB0byB0aGUgcm91dGVyIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZTogYW55W107XG5cblx0LyoqXG5cdCAqIFJvdXRlciBvcHRpb25zLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHJvdXRlYFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGVFeHRyYXM6IGFueTtcblxuXHQvKipcblx0ICogT3B0aW9uYWwgbGluayBmb3IgdGhlIHVuZGVybHlpbmcgYW5jaG9yLlxuXHQgKi9cblx0QElucHV0KCkgc2V0IGhyZWYodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX2hyZWYgPSB2YWx1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgbmF2aWdhdGlvbiBzdGF0dXMgcHJvbWlzZSB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKi9cblx0QE91dHB1dCgpIG5hdmlnYXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyPFByb21pc2U8Ym9vbGVhbj4+KCk7XG5cblx0Z2V0IGhyZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodGhpcy5faHJlZikgYXMgc3RyaW5nO1xuXHR9XG5cblx0LyoqXG5cdCAqIE9wdGlvbmFsIHRhcmdldCBmb3IgdGhlIHVuZGVybHlpbmcgYW5jaG9yLlxuXHQgKi9cblx0QElucHV0KCkgc2V0IHRhcmdldCh2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5fdGFyZ2V0ID0gdmFsdWU7XG5cdH1cblxuXHRnZXQgdGFyZ2V0KCkge1xuXHRcdHJldHVybiB0aGlzLl90YXJnZXQ7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tc3dpdGNoZXJfX2l0ZW1cIikgaXRlbUNsYXNzID0gdHJ1ZTtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLnJvbGVcIikgaXRlbVJvbGUgPSBcImxpc3RpdGVtXCI7XG5cblx0cHJvdGVjdGVkIF9ocmVmID0gXCJqYXZhc2NyaXB0OnZvaWQoMClcIjtcblx0cHJvdGVjdGVkIF90YXJnZXQgPSBcIlwiO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgQE9wdGlvbmFsKCkgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyKSB7IH1cblxuXHRuYXZpZ2F0ZShldmVudCkge1xuXHRcdGlmICh0aGlzLnJvdXRlciAmJiB0aGlzLnJvdXRlKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y29uc3Qgc3RhdHVzID0gdGhpcy5yb3V0ZXIubmF2aWdhdGUodGhpcy5yb3V0ZSwgdGhpcy5yb3V0ZUV4dHJhcyk7XG5cdFx0XHR0aGlzLm5hdmlnYXRpb24uZW1pdChzdGF0dXMpO1xuXHRcdH1cblx0fVxufVxuIl19