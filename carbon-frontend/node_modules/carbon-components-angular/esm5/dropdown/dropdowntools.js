/**
 *
 * carbon-angular v0.0.0 | dropdowntools.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { fromEvent } from "rxjs";
import { debounceTime, map, filter } from "rxjs/operators";
/**
 * returns an observable bound to keydown events that
 * filters to a single element where the first letter of
 * it's textContent matches the key pressed
 *
 * @param target element to watch
 * @param elements elements to search
 */
export function watchFocusJump(target, elements) {
    return fromEvent(target, "keydown")
        .pipe(debounceTime(150), map(function (ev) {
        var el = elements.find(function (itemEl) {
            return itemEl.textContent.trim().toLowerCase().startsWith(ev.key);
        });
        if (el) {
            return el;
        }
    }), filter(function (el) { return !!el; }));
}
/** bundle of functions to aid in manipulating tree structures */
export var treetools = {
    /** finds an item in a set of items and returns the item and path to the item as an array */
    find: function (items, itemToFind, path) {
        if (path === void 0) { path = []; }
        var e_1, _a;
        var found;
        try {
            for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var i = items_1_1.value;
                if (i === itemToFind) {
                    path.push(i);
                    found = i;
                }
                if (i.items && !found) {
                    path.push(i);
                    found = this.find(i.items, itemToFind, path).found;
                    if (!found) {
                        path = [];
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { found: found, path: path };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd250b29scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvZHJvcGRvd24vIiwic291cmNlcyI6WyJkcm9wZG93bnRvb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWMsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLE1BQW1CLEVBQUUsUUFBUTtJQUMzRCxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDO1NBQ2pDLElBQUksQ0FDSixZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLEdBQUcsQ0FBQyxVQUFDLEVBQWlCO1FBQ3JCLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNO1lBQzdCLE9BQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUExRCxDQUEwRCxDQUFDLENBQUM7UUFDN0QsSUFBSSxFQUFFLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFO0lBQ3ZCLENBQUMsQ0FBQyxFQUNGLE1BQU0sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEVBQUosQ0FBSSxDQUFDLENBQ2xCLENBQUM7QUFDSixDQUFDO0FBRUQsaUVBQWlFO0FBQ2pFLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRztJQUN4Qiw0RkFBNEY7SUFDNUYsSUFBSSxFQUFFLFVBQVMsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFTO1FBQVQscUJBQUEsRUFBQSxTQUFTOztRQUMxQyxJQUFJLEtBQUssQ0FBQzs7WUFDVixLQUFjLElBQUEsVUFBQSxpQkFBQSxLQUFLLENBQUEsNEJBQUEsK0NBQUU7Z0JBQWhCLElBQUksQ0FBQyxrQkFBQTtnQkFDVCxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7b0JBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDVjtnQkFDRCxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUNuRCxJQUFJLENBQUMsS0FBSyxFQUFFO3dCQUFFLElBQUksR0FBRyxFQUFFLENBQUM7cUJBQUU7aUJBQzFCO2FBQ0Q7Ozs7Ozs7OztRQUNELE9BQU8sRUFBQyxLQUFLLE9BQUEsRUFBRSxJQUFJLE1BQUEsRUFBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbUV2ZW50IH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgbWFwLCBmaWx0ZXIgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcblxuLyoqXG4gKiByZXR1cm5zIGFuIG9ic2VydmFibGUgYm91bmQgdG8ga2V5ZG93biBldmVudHMgdGhhdFxuICogZmlsdGVycyB0byBhIHNpbmdsZSBlbGVtZW50IHdoZXJlIHRoZSBmaXJzdCBsZXR0ZXIgb2ZcbiAqIGl0J3MgdGV4dENvbnRlbnQgbWF0Y2hlcyB0aGUga2V5IHByZXNzZWRcbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IGVsZW1lbnQgdG8gd2F0Y2hcbiAqIEBwYXJhbSBlbGVtZW50cyBlbGVtZW50cyB0byBzZWFyY2hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhdGNoRm9jdXNKdW1wKHRhcmdldDogSFRNTEVsZW1lbnQsIGVsZW1lbnRzKTogT2JzZXJ2YWJsZTxIVE1MRWxlbWVudD4ge1xuXHRyZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgXCJrZXlkb3duXCIpXG5cdFx0LnBpcGUoXG5cdFx0XHRkZWJvdW5jZVRpbWUoMTUwKSxcblx0XHRcdG1hcCgoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcblx0XHRcdFx0bGV0IGVsID0gZWxlbWVudHMuZmluZCgoaXRlbUVsKSA9PlxuXHRcdFx0XHRcdGl0ZW1FbC50ZXh0Q29udGVudC50cmltKCkudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGV2LmtleSkpO1xuXHRcdFx0XHRpZiAoZWwpIHsgcmV0dXJuIGVsOyB9XG5cdFx0XHR9KSxcblx0XHRcdGZpbHRlcihlbCA9PiAhIWVsKVxuXHRcdCk7XG59XG5cbi8qKiBidW5kbGUgb2YgZnVuY3Rpb25zIHRvIGFpZCBpbiBtYW5pcHVsYXRpbmcgdHJlZSBzdHJ1Y3R1cmVzICovXG5leHBvcnQgY29uc3QgdHJlZXRvb2xzID0ge1xuXHQvKiogZmluZHMgYW4gaXRlbSBpbiBhIHNldCBvZiBpdGVtcyBhbmQgcmV0dXJucyB0aGUgaXRlbSBhbmQgcGF0aCB0byB0aGUgaXRlbSBhcyBhbiBhcnJheSAqL1xuXHRmaW5kOiBmdW5jdGlvbihpdGVtcywgaXRlbVRvRmluZCwgcGF0aCA9IFtdKSB7XG5cdFx0bGV0IGZvdW5kO1xuXHRcdGZvciAobGV0IGkgb2YgaXRlbXMpIHtcblx0XHRcdGlmIChpID09PSBpdGVtVG9GaW5kKSB7XG5cdFx0XHRcdHBhdGgucHVzaChpKTtcblx0XHRcdFx0Zm91bmQgPSBpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGkuaXRlbXMgJiYgIWZvdW5kKSB7XG5cdFx0XHRcdHBhdGgucHVzaChpKTtcblx0XHRcdFx0Zm91bmQgPSB0aGlzLmZpbmQoaS5pdGVtcywgaXRlbVRvRmluZCwgcGF0aCkuZm91bmQ7XG5cdFx0XHRcdGlmICghZm91bmQpIHsgcGF0aCA9IFtdOyB9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7Zm91bmQsIHBhdGh9O1xuXHR9XG59O1xuIl19