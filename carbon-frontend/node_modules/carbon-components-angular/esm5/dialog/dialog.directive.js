/**
 *
 * carbon-angular v0.0.0 | dialog.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, Input, Output, EventEmitter, ElementRef, ViewContainerRef, HostBinding } from "@angular/core";
import { DialogService } from "./dialog.service";
import { CloseReasons } from "./dialog-config.interface";
import { EventService } from "carbon-components-angular/utils";
/**
 * A generic directive that can be inherited from to create dialogs (for example, a tooltip or popover)
 *
 * This class contains the relevant initialization code, specific templates, options, and additional inputs
 * should be specified in the derived class.
 *
 * NOTE: All child classes should add `DialogService` as a provider, otherwise they will lose context that
 * the service relies on.
 */
var DialogDirective = /** @class */ (function () {
    /**
     * Creates an instance of DialogDirective.
     * @param elementRef
     * @param viewContainerRef
     * @param dialogService
     * @param eventService
     */
    function DialogDirective(elementRef, viewContainerRef, dialogService, eventService) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.dialogService = dialogService;
        this.eventService = eventService;
        /**
         * Title for the dialog
         */
        this.title = "";
        /**
         * Defines how the Dialog is triggered.(Hover and click behave the same on mobile - both respond to a single tap).
         * Do not add focusable elements if trigger is `hover` or `mouseenter`.
         */
        this.trigger = "click";
        /**
         * Defines how the Dialog close event is triggered.
         *
         * [See here](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event)
         * for more on the difference between `mouseleave` and `mouseout`.
         *
         * Defaults to `click` when `trigger` is set to `click`.
         */
        this.closeTrigger = "mouseleave";
        /**
         * Placement of the dialog, usually relative to the element the directive is on.
         */
        this.placement = "left";
        /**
         * Spacing between the dialog and it's triggering element
         */
        this.gap = 0;
        /**
         * Set to `true` to open the dialog next to the triggering component
         */
        this.appendInline = false;
        /**
         * Optional data for templates
         */
        this.data = {};
        this.isOpen = false;
        /**
         * This prevents the dialog from being toggled
         */
        this.disabled = false;
        /**
         * Emits an event when the dialog is closed
         */
        this.onClose = new EventEmitter();
        /**
         * Emits an event when the dialog is opened
         */
        this.onOpen = new EventEmitter();
        /**
         * Emits an event when the state of `isOpen` changes. Allows `isOpen` to be double bound
         */
        this.isOpenChange = new EventEmitter();
        this.role = "button";
        this.hasPopup = true;
    }
    Object.defineProperty(DialogDirective.prototype, "ariaOwns", {
        get: function () {
            return this.isOpen ? this.dialogConfig.compID : null;
        },
        enumerable: true,
        configurable: true
    });
    DialogDirective.prototype.ngOnChanges = function (changes) {
        // set the config object (this can [and should!] be added to in child classes depending on what they need)
        this.dialogConfig = {
            title: this.title,
            content: this.ibmDialog,
            placement: this.placement,
            parentRef: this.elementRef,
            gap: this.gap,
            trigger: this.trigger,
            closeTrigger: this.closeTrigger,
            shouldClose: this.shouldClose || (function () { return true; }),
            appendInline: this.appendInline,
            wrapperClass: this.wrapperClass,
            data: this.data,
            offset: this.offset,
            disabled: this.disabled
        };
        if (changes.isOpen) {
            if (changes.isOpen.currentValue) {
                this.open();
            }
            else {
                this.close({
                    reason: CloseReasons.programmatic
                });
            }
        }
        // Run any code a child class may need.
        this.onDialogChanges(changes);
        this.updateConfig();
    };
    /**
     * Sets the config object and binds events for hovering or clicking before
     * running code from child class.
     */
    DialogDirective.prototype.ngOnInit = function () {
        var _this = this;
        // fix for safari hijacking clicks
        this.dialogService.singletonClickListen();
        var element = this.elementRef.nativeElement;
        this.eventService.on(element, "keydown", function (event) {
            // "Esc" is an IE specific value
            if (event.target === _this.dialogConfig.parentRef.nativeElement &&
                (event.key === "Tab" || event.key === "Tab" && event.shiftKey) ||
                event.key === "Escape" || event.key === "Esc") {
                _this.close({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            }
        });
        // bind events for hovering or clicking the host
        if (this.trigger === "hover" || this.trigger === "mouseenter") {
            this.eventService.on(element, "mouseenter", this.open.bind(this));
            this.eventService.on(element, this.closeTrigger, function (event) {
                _this.close({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            });
            this.eventService.on(element, "focus", this.open.bind(this));
            this.eventService.on(element, "blur", function (event) {
                _this.close({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            });
        }
        else {
            this.eventService.on(element, "click", function (event) {
                _this.toggle({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            });
            this.eventService.on(element, "keydown", function (event) {
                // "Spacebar" is an IE specific value
                if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
                    setTimeout(function () {
                        _this.open();
                    });
                }
            });
        }
        DialogDirective.dialogCounter++;
        this.dialogConfig.compID = "dialog-" + DialogDirective.dialogCounter;
        // run any code a child class may need
        this.onDialogInit();
        this.updateConfig();
    };
    /**
     * When the host dies, kill the popover.
     * - Useful for use in a modal or similar.
     */
    DialogDirective.prototype.ngOnDestroy = function () {
        this.close({
            reason: CloseReasons.destroyed
        });
    };
    /**
     * Helper method to call dialogService 'open'.
     * - Enforce accessibility by updating an aria attr for nativeElement.
     */
    DialogDirective.prototype.open = function () {
        var _this = this;
        // don't allow dialogs to be opened if they're already open
        if (this.dialogRef || this.disabled) {
            return;
        }
        // actually open the dialog, emit events, and set the open state
        this.dialogRef = this.dialogService.open(this.viewContainerRef, this.dialogConfig);
        this.isOpen = true;
        this.onOpen.emit();
        this.isOpenChange.emit(true);
        // Handles emitting all the close events to clean everything up
        // Also enforce accessibility on close by updating an aria attr on the nativeElement.
        this.dialogRef.instance.close.subscribe(function (meta) {
            if (!_this.dialogRef) {
                return;
            }
            if (_this.dialogConfig.shouldClose && _this.dialogConfig.shouldClose(meta)) {
                // close the dialog, emit events, and clear out the open states
                _this.dialogService.close(_this.dialogRef);
                _this.dialogRef = null;
                _this.isOpen = false;
                _this.onClose.emit();
                _this.isOpenChange.emit(false);
            }
        });
        return this.dialogRef;
    };
    /**
     * Helper method to toggle the open state of the dialog
     */
    DialogDirective.prototype.toggle = function (meta) {
        if (meta === void 0) { meta = { reason: CloseReasons.interaction }; }
        if (!this.isOpen) {
            this.open();
        }
        else {
            this.close(meta);
        }
    };
    /**
     * Helper method to close the dialogRef.
     */
    DialogDirective.prototype.close = function (meta) {
        var _this = this;
        if (meta === void 0) { meta = { reason: CloseReasons.interaction }; }
        if (this.dialogRef) {
            setTimeout(function () {
                _this.dialogRef.instance.doClose(meta);
            });
        }
    };
    /**
     * Empty method for child classes to override and specify additional init steps.
     * Run after DialogDirective completes it's ngOnInit.
     */
    DialogDirective.prototype.onDialogInit = function () { };
    /**
     * Empty method for child to override and specify additional on changes steps.
     * run after DialogDirective completes it's ngOnChanges.
     */
    DialogDirective.prototype.onDialogChanges = function (_changes) { };
    DialogDirective.prototype.updateConfig = function () { };
    DialogDirective.dialogCounter = 0;
    DialogDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmDialog]",
                    exportAs: "ibmDialog",
                    providers: [
                        DialogService
                    ]
                },] }
    ];
    /** @nocollapse */
    DialogDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: DialogService },
        { type: EventService }
    ]; };
    DialogDirective.propDecorators = {
        title: [{ type: Input }],
        ibmDialog: [{ type: Input }],
        trigger: [{ type: Input }],
        closeTrigger: [{ type: Input }],
        placement: [{ type: Input }],
        offset: [{ type: Input }],
        wrapperClass: [{ type: Input }],
        gap: [{ type: Input }],
        appendInline: [{ type: Input }],
        data: [{ type: Input }],
        isOpen: [{ type: Input }, { type: HostBinding, args: ["attr.aria-expanded",] }],
        disabled: [{ type: Input }],
        shouldClose: [{ type: Input }],
        onClose: [{ type: Output }],
        onOpen: [{ type: Output }],
        isOpenChange: [{ type: Output }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        hasPopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
        ariaOwns: [{ type: HostBinding, args: ["attr.aria-owns",] }]
    };
    return DialogDirective;
}());
export { DialogDirective };
//# sourceMappingURL=data:application/json;base64,