/**
 *
 * carbon-angular v0.0.0 | tooltip.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, ViewContainerRef, HostBinding } from "@angular/core";
import { DialogDirective } from "../dialog.directive";
import { Tooltip } from "./tooltip.component";
import { DialogService } from "../dialog.service";
import { EventService } from "carbon-components-angular/utils";
/**
 * Directive for extending `Dialog` to create tooltips.
 *
 * [See demo](../../?path=/story/tooltip--basic)
 *
 * class: TooltipDirective (extends PopoverDirective)
 *
 *
 * selector: `nTooltip`
 *
 *
 * ```html
 * <button nTooltip="I am a tooltip" placement="right" trigger="mouseenter" type="danger">Tooltip Right</button>
 * <button nTooltip="I am a tooltip" type="warning">Tooltip Top warning on click</button>
 * ```
 *
 * <example-url>../../iframe.html?id=tooltip--basic</example-url>
 */
var TooltipDirective = /** @class */ (function (_super) {
    tslib_1.__extends(TooltipDirective, _super);
    /**
     * Creates an instance of `TooltipDirective`.
     */
    function TooltipDirective(elementRef, viewContainerRef, dialogService, eventService) {
        var _this = _super.call(this, elementRef, viewContainerRef, dialogService, eventService) || this;
        _this.elementRef = elementRef;
        _this.viewContainerRef = viewContainerRef;
        _this.dialogService = dialogService;
        _this.eventService = eventService;
        /**
         * Set tooltip type to reflect 'warning' or 'error' styles.
         */
        // tslint:disable-next-line:no-input-rename
        _this.tooltipType = "";
        _this.tabIndex = 0;
        _this.className = true;
        dialogService.setContext({ component: Tooltip });
        return _this;
    }
    Object.defineProperty(TooltipDirective.prototype, "descriptorId", {
        get: function () {
            return this.isOpen ? this.dialogConfig.compID : null;
        },
        enumerable: true,
        configurable: true
    });
    TooltipDirective.prototype.updateConfig = function () {
        this.dialogConfig.content = this.ibmTooltip;
        this.dialogConfig.type = this.tooltipType;
        this.dialogConfig.offset = this.offset;
    };
    TooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmTooltip]",
                    exportAs: "ibmTooltip",
                    providers: [
                        DialogService
                    ]
                },] }
    ];
    /** @nocollapse */
    TooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: DialogService },
        { type: EventService }
    ]; };
    TooltipDirective.propDecorators = {
        ibmTooltip: [{ type: Input }],
        tooltipType: [{ type: Input, args: ["tooltip-type",] }],
        tabIndex: [{ type: HostBinding, args: ["tabindex",] }],
        className: [{ type: HostBinding, args: ["class.bx--tooltip__trigger",] }],
        descriptorId: [{ type: HostBinding, args: ["attr.aria-describedby",] }]
    };
    return TooltipDirective;
}(DialogDirective));
export { TooltipDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbInRvb2x0aXAvdG9vbHRpcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUVMLFVBQVUsRUFHVixnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUcvRDs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSDtJQU9zQyw0Q0FBZTtJQW1CcEQ7O09BRUc7SUFDSCwwQkFDVyxVQUFzQixFQUN0QixnQkFBa0MsRUFDbEMsYUFBNEIsRUFDNUIsWUFBMEI7UUFKckMsWUFNQyxrQkFBTSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxTQUVoRTtRQVBVLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsbUJBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsa0JBQVksR0FBWixZQUFZLENBQWM7UUFyQnJDOztXQUVHO1FBQ0gsMkNBQTJDO1FBQ3BCLGlCQUFXLEdBQTZCLEVBQUUsQ0FBQztRQUV6QyxjQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRUssZUFBUyxHQUFHLElBQUksQ0FBQztRQWdCM0QsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDOztJQUNsRCxDQUFDO0lBZkQsc0JBQTBDLDBDQUFZO2FBQXREO1lBQ0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RELENBQUM7OztPQUFBO0lBZUQsdUNBQVksR0FBWjtRQUNDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3hDLENBQUM7O2dCQTNDRCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSxZQUFZO29CQUN0QixTQUFTLEVBQUU7d0JBQ1YsYUFBYTtxQkFDYjtpQkFDRDs7OztnQkFwQ0EsVUFBVTtnQkFHVixnQkFBZ0I7Z0JBS1IsYUFBYTtnQkFDYixZQUFZOzs7NkJBZ0NuQixLQUFLOzhCQUtMLEtBQUssU0FBQyxjQUFjOzJCQUVwQixXQUFXLFNBQUMsVUFBVTs0QkFFdEIsV0FBVyxTQUFDLDRCQUE0QjsrQkFFeEMsV0FBVyxTQUFDLHVCQUF1Qjs7SUFzQnJDLHVCQUFDO0NBQUEsQUE1Q0QsQ0FPc0MsZUFBZSxHQXFDcEQ7U0FyQ1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGlyZWN0aXZlLFxuXHRJbnB1dCxcblx0VGVtcGxhdGVSZWYsXG5cdEVsZW1lbnRSZWYsXG5cdEluamVjdG9yLFxuXHRDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG5cdFZpZXdDb250YWluZXJSZWYsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEaWFsb2dEaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGlhbG9nLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gXCIuL3Rvb2x0aXAuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSBcIi4uL2RpYWxvZy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlsc1wiO1xuXG5cbi8qKlxuICogRGlyZWN0aXZlIGZvciBleHRlbmRpbmcgYERpYWxvZ2AgdG8gY3JlYXRlIHRvb2x0aXBzLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L3Rvb2x0aXAtLWJhc2ljKVxuICpcbiAqIGNsYXNzOiBUb29sdGlwRGlyZWN0aXZlIChleHRlbmRzIFBvcG92ZXJEaXJlY3RpdmUpXG4gKlxuICpcbiAqIHNlbGVjdG9yOiBgblRvb2x0aXBgXG4gKlxuICpcbiAqIGBgYGh0bWxcbiAqIDxidXR0b24gblRvb2x0aXA9XCJJIGFtIGEgdG9vbHRpcFwiIHBsYWNlbWVudD1cInJpZ2h0XCIgdHJpZ2dlcj1cIm1vdXNlZW50ZXJcIiB0eXBlPVwiZGFuZ2VyXCI+VG9vbHRpcCBSaWdodDwvYnV0dG9uPlxuICogPGJ1dHRvbiBuVG9vbHRpcD1cIkkgYW0gYSB0b29sdGlwXCIgdHlwZT1cIndhcm5pbmdcIj5Ub29sdGlwIFRvcCB3YXJuaW5nIG9uIGNsaWNrPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9dG9vbHRpcC0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6IFwiW2libVRvb2x0aXBdXCIsXG5cdGV4cG9ydEFzOiBcImlibVRvb2x0aXBcIixcblx0cHJvdmlkZXJzOiBbXG5cdFx0RGlhbG9nU2VydmljZVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBEaXJlY3RpdmUgZXh0ZW5kcyBEaWFsb2dEaXJlY3RpdmUge1xuXHQvKipcblx0ICogVGhlIHN0cmluZyBvciB0ZW1wbGF0ZSBjb250ZW50IHRvIGJlIGV4cG9zZWQgYnkgdGhlIHRvb2x0aXAuXG5cdCAqL1xuXHRASW5wdXQoKSBpYm1Ub29sdGlwOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXHQvKipcblx0ICogU2V0IHRvb2x0aXAgdHlwZSB0byByZWZsZWN0ICd3YXJuaW5nJyBvciAnZXJyb3InIHN0eWxlcy5cblx0ICovXG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcblx0QElucHV0KFwidG9vbHRpcC10eXBlXCIpIHRvb2x0aXBUeXBlOiBcIndhcm5pbmdcIiB8IFwiZXJyb3JcIiB8IFwiXCIgPSBcIlwiO1xuXG5cdEBIb3N0QmluZGluZyhcInRhYmluZGV4XCIpIHRhYkluZGV4ID0gMDtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9vbHRpcF9fdHJpZ2dlclwiKSBjbGFzc05hbWUgPSB0cnVlO1xuXG5cdEBIb3N0QmluZGluZyhcImF0dHIuYXJpYS1kZXNjcmliZWRieVwiKSBnZXQgZGVzY3JpcHRvcklkKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuaXNPcGVuID8gdGhpcy5kaWFsb2dDb25maWcuY29tcElEIDogbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBUb29sdGlwRGlyZWN0aXZlYC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuXHRcdHByb3RlY3RlZCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuXHRcdHByb3RlY3RlZCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlLFxuXHRcdHByb3RlY3RlZCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZVxuXHQpIHtcblx0XHRzdXBlcihlbGVtZW50UmVmLCB2aWV3Q29udGFpbmVyUmVmLCBkaWFsb2dTZXJ2aWNlLCBldmVudFNlcnZpY2UpO1xuXHRcdGRpYWxvZ1NlcnZpY2Uuc2V0Q29udGV4dCh7IGNvbXBvbmVudDogVG9vbHRpcCB9KTtcblx0fVxuXG5cdHVwZGF0ZUNvbmZpZygpIHtcblx0XHR0aGlzLmRpYWxvZ0NvbmZpZy5jb250ZW50ID0gdGhpcy5pYm1Ub29sdGlwO1xuXHRcdHRoaXMuZGlhbG9nQ29uZmlnLnR5cGUgPSB0aGlzLnRvb2x0aXBUeXBlO1xuXHRcdHRoaXMuZGlhbG9nQ29uZmlnLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xuXHR9XG59XG4iXX0=