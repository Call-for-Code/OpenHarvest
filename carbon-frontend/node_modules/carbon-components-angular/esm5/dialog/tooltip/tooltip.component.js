/**
 *
 * carbon-angular v0.0.0 | tooltip.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, TemplateRef, HostBinding, ElementRef, Optional } from "@angular/core";
import { getFocusElementList } from "carbon-components-angular/common";
import { Dialog } from "../dialog.component";
import { position } from "@carbon/utils-position";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { closestAttr } from "carbon-components-angular/utils";
/**
 * Extend the `Dialog` component to create a tooltip for exposing content.
 */
var Tooltip = /** @class */ (function (_super) {
    tslib_1.__extends(Tooltip, _super);
    function Tooltip(elementRef, elementService, animationFrameService) {
        if (animationFrameService === void 0) { animationFrameService = null; }
        var _this = _super.call(this, elementRef, elementService, animationFrameService) || this;
        _this.elementRef = elementRef;
        _this.elementService = elementService;
        _this.animationFrameService = animationFrameService;
        _this.style = "inline-block";
        /**
         * Value is set to `true` if the `Tooltip` is to display a `TemplateRef` instead of a string.
         */
        _this.hasContentTemplate = false;
        /**
         * Sets the role of the tooltip. If there's no focusable content we leave it as a `tooltip`,
         * if there _is_ focusable content we switch to the interactive `dialog` role.
         */
        _this.role = "tooltip";
        return _this;
    }
    /**
     * Check whether there is a template for the `Tooltip` content.
     */
    Tooltip.prototype.onDialogInit = function () {
        var _this = this;
        this.addGap["bottom"] = function (pos) {
            var adjustedOffset = _this.getAdjustOffset();
            return position.addOffset(pos, 3 + adjustedOffset.top, 0 + adjustedOffset.left);
        };
        this.addGap["top"] = function (pos) {
            var adjustedOffset = _this.getAdjustOffset();
            return position.addOffset(pos, -10 + adjustedOffset.top, 0 + adjustedOffset.left);
        };
        this.addGap["left"] = function (pos) {
            var adjustedOffset = _this.getAdjustOffset();
            return position.addOffset(pos, -3 + adjustedOffset.top, -6 + adjustedOffset.left);
        };
        this.addGap["right"] = function (pos) {
            var adjustedOffset = _this.getAdjustOffset();
            return position.addOffset(pos, -3 + adjustedOffset.top, 6 + adjustedOffset.left);
        };
        this.hasContentTemplate = this.dialogConfig.content instanceof TemplateRef;
    };
    Tooltip.prototype.getAdjustOffset = function () {
        var closestWithPos = closestAttr("position", ["relative", "fixed", "absolute"], this.elementRef.nativeElement.parentElement);
        var topPos = closestWithPos ? closestWithPos.getBoundingClientRect().top * -1 : 0;
        var leftPos = closestWithPos ? closestWithPos.getBoundingClientRect().left * -1 : 0;
        return { top: topPos, left: leftPos };
    };
    Tooltip.prototype.afterDialogViewInit = function () {
        var focusableElements = getFocusElementList(this.dialog.nativeElement);
        if (focusableElements.length > 0) {
            this.role = "dialog";
            focusableElements[0].focus();
        }
    };
    Tooltip.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tooltip",
                    template: "\n\t\t<div\n\t\t\t#dialog\n\t\t\t[id]=\"dialogConfig.compID\"\n\t\t\t[attr.role]=\"role\"\n\t\t\t[attr.data-floating-menu-direction]=\"placement\"\n\t\t\tclass=\"bx--tooltip bx--tooltip--shown\">\n\t\t\t<span class=\"bx--tooltip__caret\" aria-hidden=\"true\"></span>\n\t\t\t<ng-template\n\t\t\t\t\t*ngIf=\"hasContentTemplate\"\n\t\t\t\t\t[ngTemplateOutlet]=\"dialogConfig.content\"\n\t\t\t\t\t[ngTemplateOutletContext]=\"{tooltip: this}\">\n\t\t\t</ng-template>\n\t\t\t<p\n\t\t\t\t*ngIf=\"!hasContentTemplate\">\n\t\t\t\t{{dialogConfig.content}}\n\t\t\t</p>\n\t\t</div>\n\t\t"
                }] }
    ];
    /** @nocollapse */
    Tooltip.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ElementService },
        { type: AnimationFrameService, decorators: [{ type: Optional }] }
    ]; };
    Tooltip.propDecorators = {
        style: [{ type: HostBinding, args: ["style.display",] }]
    };
    return Tooltip;
}(Dialog));
export { Tooltip };
//# sourceMappingURL=data:application/json;base64,