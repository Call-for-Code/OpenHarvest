/**
 *
 * carbon-angular v0.0.0 | overflow-menu.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Directive, ElementRef, ViewContainerRef, Input, TemplateRef, HostListener } from "@angular/core";
import { DialogDirective } from "../dialog.directive";
import { DialogService } from "../dialog.service";
import { OverflowMenuPane } from "./overflow-menu-pane.component";
import { OverflowMenuCustomPane } from "./overflow-menu-custom-pane.component";
import { EventService } from "carbon-components-angular/utils";
/**
 * Directive for extending `Dialog` to create overflow menus.
 *
 * class: OverflowMenuDirective (extends DialogDirective)
 *
 *
 * selector: `ibmOverflowMenu`
 *
 *
 * ```html
 * <div [ibmOverflowMenu]="templateRef"></div>
 * <ng-template #templateRef>
 * 	<!-- overflow menu options here -->
 * </ng-template>
 * ```
 *
 * ```html
 * <div [ibmOverflowMenu]="templateRef" [customPane]="true"></div>
 * <ng-template #templateRef>
 *  <!-- custom content goes here -->
 * </ng-template>
 * ```
 */
var OverflowMenuDirective = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowMenuDirective, _super);
    /**
     * Creates an instance of `OverflowMenuDirective`.
     */
    function OverflowMenuDirective(elementRef, viewContainerRef, dialogService, eventService) {
        var _this = _super.call(this, elementRef, viewContainerRef, dialogService, eventService) || this;
        _this.elementRef = elementRef;
        _this.viewContainerRef = viewContainerRef;
        _this.dialogService = dialogService;
        _this.eventService = eventService;
        /**
         * Controls wether the overflow menu is flipped
         */
        _this.flip = false;
        /**
         * Classes to add to the dialog container
         */
        _this.wrapperClass = "";
        /**
         * Set to true to for custom content
         */
        _this.customPane = false;
        return _this;
    }
    OverflowMenuDirective.prototype.ngAfterContentInit = function () {
        this.dialogService.setContext({ component: this.customPane ? OverflowMenuCustomPane : OverflowMenuPane });
    };
    OverflowMenuDirective.prototype.updateConfig = function () {
        this.dialogConfig.content = this.ibmOverflowMenu;
        this.dialogConfig.flip = this.flip;
        this.dialogConfig.offset = this.offset;
        this.dialogConfig.wrapperClass = this.wrapperClass;
    };
    OverflowMenuDirective.prototype.hostkeys = function (event) {
        switch (event.key) {
            case "Enter":
            case " ":
                event.preventDefault();
                break;
        }
    };
    OverflowMenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmOverflowMenu]",
                    exportAs: "ibmOverflowMenu",
                    providers: [
                        DialogService
                    ]
                },] }
    ];
    /** @nocollapse */
    OverflowMenuDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: DialogService },
        { type: EventService }
    ]; };
    OverflowMenuDirective.propDecorators = {
        ibmOverflowMenu: [{ type: Input }],
        flip: [{ type: Input }],
        offset: [{ type: Input }],
        wrapperClass: [{ type: Input }],
        customPane: [{ type: Input }],
        hostkeys: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return OverflowMenuDirective;
}(DialogDirective));
export { OverflowMenuDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixLQUFLLEVBQ0wsV0FBVyxFQUNYLFlBQVksRUFFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUcvRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNIO0lBTzJDLGlEQUFlO0lBc0J6RDs7T0FFRztJQUNILCtCQUNXLFVBQXNCLEVBQ3RCLGdCQUFrQyxFQUNsQyxhQUE0QixFQUM1QixZQUEwQjtRQUpyQyxZQU1DLGtCQUFNLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLFNBQ2hFO1FBTlUsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxtQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixrQkFBWSxHQUFaLFlBQVksQ0FBYztRQXhCckM7O1dBRUc7UUFDTSxVQUFJLEdBQUcsS0FBSyxDQUFDO1FBS3RCOztXQUVHO1FBQ00sa0JBQVksR0FBRyxFQUFFLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxnQkFBVSxHQUFHLEtBQUssQ0FBQzs7SUFZNUIsQ0FBQztJQUVELGtEQUFrQixHQUFsQjtRQUNDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDM0csQ0FBQztJQUVELDRDQUFZLEdBQVo7UUFDQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ3BELENBQUM7SUFHRCx3Q0FBUSxHQURSLFVBQ1MsS0FBb0I7UUFDNUIsUUFBUSxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ2xCLEtBQUssT0FBTyxDQUFDO1lBQ2IsS0FBSyxHQUFHO2dCQUNQLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDdkIsTUFBTTtTQUNQO0lBQ0YsQ0FBQzs7Z0JBNURELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixTQUFTLEVBQUU7d0JBQ1YsYUFBYTtxQkFDYjtpQkFDRDs7OztnQkEzQ0EsVUFBVTtnQkFDVixnQkFBZ0I7Z0JBT1IsYUFBYTtnQkFHYixZQUFZOzs7a0NBcUNuQixLQUFLO3VCQUlMLEtBQUs7eUJBSUwsS0FBSzsrQkFJTCxLQUFLOzZCQUlMLEtBQUs7MkJBeUJMLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBU3BDLDRCQUFDO0NBQUEsQUE3REQsQ0FPMkMsZUFBZSxHQXNEekQ7U0F0RFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGlyZWN0aXZlLFxuXHRFbGVtZW50UmVmLFxuXHRWaWV3Q29udGFpbmVyUmVmLFxuXHRJbnB1dCxcblx0VGVtcGxhdGVSZWYsXG5cdEhvc3RMaXN0ZW5lcixcblx0QWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGlhbG9nRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpYWxvZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tIFwiLi4vZGlhbG9nLnNlcnZpY2VcIjtcbmltcG9ydCB7IE92ZXJmbG93TWVudVBhbmUgfSBmcm9tIFwiLi9vdmVyZmxvdy1tZW51LXBhbmUuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBPdmVyZmxvd01lbnVDdXN0b21QYW5lIH0gZnJvbSBcIi4vb3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5cblxuLyoqXG4gKiBEaXJlY3RpdmUgZm9yIGV4dGVuZGluZyBgRGlhbG9nYCB0byBjcmVhdGUgb3ZlcmZsb3cgbWVudXMuXG4gKlxuICogY2xhc3M6IE92ZXJmbG93TWVudURpcmVjdGl2ZSAoZXh0ZW5kcyBEaWFsb2dEaXJlY3RpdmUpXG4gKlxuICpcbiAqIHNlbGVjdG9yOiBgaWJtT3ZlcmZsb3dNZW51YFxuICpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IFtpYm1PdmVyZmxvd01lbnVdPVwidGVtcGxhdGVSZWZcIj48L2Rpdj5cbiAqIDxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVSZWY+XG4gKiBcdDwhLS0gb3ZlcmZsb3cgbWVudSBvcHRpb25zIGhlcmUgLS0+XG4gKiA8L25nLXRlbXBsYXRlPlxuICogYGBgXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBbaWJtT3ZlcmZsb3dNZW51XT1cInRlbXBsYXRlUmVmXCIgW2N1c3RvbVBhbmVdPVwidHJ1ZVwiPjwvZGl2PlxuICogPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZVJlZj5cbiAqICA8IS0tIGN1c3RvbSBjb250ZW50IGdvZXMgaGVyZSAtLT5cbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1PdmVyZmxvd01lbnVdXCIsXG5cdGV4cG9ydEFzOiBcImlibU92ZXJmbG93TWVudVwiLFxuXHRwcm92aWRlcnM6IFtcblx0XHREaWFsb2dTZXJ2aWNlXG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dNZW51RGlyZWN0aXZlIGV4dGVuZHMgRGlhbG9nRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cdC8qKlxuXHQgKiBUYWtlcyBhIHRlbXBsYXRlIHJlZiBvZiBgT3ZlcmZsb3dNZW51T3B0aW9uc2BzXG5cdCAqL1xuXHRASW5wdXQoKSBpYm1PdmVyZmxvd01lbnU6IFRlbXBsYXRlUmVmPGFueT47XG5cdC8qKlxuXHQgKiBDb250cm9scyB3ZXRoZXIgdGhlIG92ZXJmbG93IG1lbnUgaXMgZmxpcHBlZFxuXHQgKi9cblx0QElucHV0KCkgZmxpcCA9IGZhbHNlO1xuXHQvKipcblx0ICogVGhpcyBzcGVjaWZpZXMgYW55IHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIG9mZnNldCBmb3IgdGhlIHBvc2l0aW9uIG9mIHRoZSBkaWFsb2dcblx0ICovXG5cdEBJbnB1dCgpIG9mZnNldDogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuXHQvKipcblx0ICogQ2xhc3NlcyB0byBhZGQgdG8gdGhlIGRpYWxvZyBjb250YWluZXJcblx0ICovXG5cdEBJbnB1dCgpIHdyYXBwZXJDbGFzcyA9IFwiXCI7XG5cdC8qKlxuXHQgKiBTZXQgdG8gdHJ1ZSB0byBmb3IgY3VzdG9tIGNvbnRlbnRcblx0ICovXG5cdEBJbnB1dCgpIGN1c3RvbVBhbmUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgT3ZlcmZsb3dNZW51RGlyZWN0aXZlYC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuXHRcdHByb3RlY3RlZCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuXHRcdHByb3RlY3RlZCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlLFxuXHRcdHByb3RlY3RlZCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZVxuXHQpIHtcblx0XHRzdXBlcihlbGVtZW50UmVmLCB2aWV3Q29udGFpbmVyUmVmLCBkaWFsb2dTZXJ2aWNlLCBldmVudFNlcnZpY2UpO1xuXHR9XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCkge1xuXHRcdHRoaXMuZGlhbG9nU2VydmljZS5zZXRDb250ZXh0KHsgY29tcG9uZW50OiB0aGlzLmN1c3RvbVBhbmUgPyBPdmVyZmxvd01lbnVDdXN0b21QYW5lIDogT3ZlcmZsb3dNZW51UGFuZSB9KTtcblx0fVxuXG5cdHVwZGF0ZUNvbmZpZygpIHtcblx0XHR0aGlzLmRpYWxvZ0NvbmZpZy5jb250ZW50ID0gdGhpcy5pYm1PdmVyZmxvd01lbnU7XG5cdFx0dGhpcy5kaWFsb2dDb25maWcuZmxpcCA9IHRoaXMuZmxpcDtcblx0XHR0aGlzLmRpYWxvZ0NvbmZpZy5vZmZzZXQgPSB0aGlzLm9mZnNldDtcblx0XHR0aGlzLmRpYWxvZ0NvbmZpZy53cmFwcGVyQ2xhc3MgPSB0aGlzLndyYXBwZXJDbGFzcztcblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJrZXlkb3duXCIsIFtcIiRldmVudFwiXSlcblx0aG9zdGtleXMoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRzd2l0Y2ggKGV2ZW50LmtleSkge1xuXHRcdFx0Y2FzZSBcIkVudGVyXCI6XG5cdFx0XHRjYXNlIFwiIFwiOlxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cbn1cbiJdfQ==