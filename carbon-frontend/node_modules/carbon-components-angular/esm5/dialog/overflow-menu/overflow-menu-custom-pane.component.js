/**
 *
 * carbon-angular v0.0.0 | overflow-menu-custom-pane.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, ElementRef, Optional } from "@angular/core";
import { position } from "@carbon/utils-position";
import { I18n } from "carbon-components-angular/i18n";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { closestAttr } from "carbon-components-angular/utils";
import { Dialog } from "../dialog.component";
var OverflowMenuCustomPane = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowMenuCustomPane, _super);
    function OverflowMenuCustomPane(elementRef, i18n, animationFrameService, 
    // mark `elementService` as optional since making it mandatory would be a breaking change
    elementService) {
        if (animationFrameService === void 0) { animationFrameService = null; }
        if (elementService === void 0) { elementService = null; }
        var _this = _super.call(this, elementRef, elementService, animationFrameService) || this;
        _this.elementRef = elementRef;
        _this.i18n = i18n;
        _this.animationFrameService = animationFrameService;
        _this.elementService = elementService;
        return _this;
    }
    OverflowMenuCustomPane.prototype.onDialogInit = function () {
        var _this = this;
        var positionOverflowMenu = function (pos) {
            var offset;
            /*
            * 20 is half the width of the overflow menu trigger element.
            * we also move the element by half of it's own width, since
            * position service will try and center everything
            */
            var closestRel = closestAttr("position", ["relative", "fixed", "absolute"], _this.elementRef.nativeElement);
            var topFix = closestRel ? closestRel.getBoundingClientRect().top * -1 : 0;
            var leftFix = closestRel ? closestRel.getBoundingClientRect().left * -1 : 0;
            offset = Math.round(_this.dialog.nativeElement.offsetWidth / 2) - 20;
            if (_this.dialogConfig.flip) {
                return position.addOffset(pos, topFix, (-offset + leftFix));
            }
            return position.addOffset(pos, topFix, (offset + leftFix));
        };
        this.addGap["bottom"] = positionOverflowMenu;
        this.addGap["top"] = positionOverflowMenu;
        if (!this.dialogConfig.menuLabel) {
            this.dialogConfig.menuLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        }
    };
    OverflowMenuCustomPane.decorators = [
        { type: Component, args: [{
                    selector: "ibm-overflow-custom-menu-pane",
                    template: "\n\t\t<div\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\"\n\t\t\t[ngClass]=\"{'bx--overflow-menu--flip': dialogConfig.flip}\"\n\t\t\tclass=\"bx--overflow-menu-options bx--overflow-menu-options--open\"\n\t\t\trole=\"menu\"\n\t\t\t(click)=\"doClose()\"\n\t\t\t#dialog\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\">\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"dialogConfig.content\"\n\t\t\t\t[ngTemplateOutletContext]=\"{overflowMenu: this}\">\n\t\t\t</ng-template>\n\t\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    OverflowMenuCustomPane.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n },
        { type: AnimationFrameService, decorators: [{ type: Optional }] },
        { type: ElementService, decorators: [{ type: Optional }] }
    ]; };
    return OverflowMenuCustomPane;
}(Dialog));
export { OverflowMenuCustomPane };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QztJQWtCNEMsa0RBQU07SUFDakQsZ0NBQ1csVUFBc0IsRUFDdEIsSUFBVSxFQUNFLHFCQUFtRDtJQUN6RSx5RkFBeUY7SUFDbkUsY0FBcUM7UUFGckMsc0NBQUEsRUFBQSw0QkFBbUQ7UUFFbkQsK0JBQUEsRUFBQSxxQkFBcUM7UUFMNUQsWUFPQyxrQkFBTSxVQUFVLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixDQUFDLFNBQ3hEO1FBUFUsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsVUFBSSxHQUFKLElBQUksQ0FBTTtRQUNFLDJCQUFxQixHQUFyQixxQkFBcUIsQ0FBOEI7UUFFbkQsb0JBQWMsR0FBZCxjQUFjLENBQXVCOztJQUc1RCxDQUFDO0lBRUQsNkNBQVksR0FBWjtRQUFBLGlCQTBCQztRQXpCQSxJQUFNLG9CQUFvQixHQUFHLFVBQUEsR0FBRztZQUMvQixJQUFJLE1BQU0sQ0FBQztZQUNYOzs7O2NBSUU7WUFDRixJQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRSxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdHLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUUsSUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU5RSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3BFLElBQUksS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7Z0JBQzNCLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUM1RDtZQUNELE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztRQUU3QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLG9CQUFvQixDQUFDO1FBRTFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDckU7SUFDRixDQUFDOztnQkF2REQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSwrQkFBK0I7b0JBQ3pDLFFBQVEsRUFBRSxpZkFjVDtpQkFDRDs7OztnQkF4QmtDLFVBQVU7Z0JBRXBDLElBQUk7Z0JBQ0oscUJBQXFCLHVCQTBCM0IsUUFBUTtnQkExQnFCLGNBQWMsdUJBNEIzQyxRQUFROztJQWdDWCw2QkFBQztDQUFBLEFBeERELENBa0I0QyxNQUFNLEdBc0NqRDtTQXRDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9wdGlvbmFsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHBvc2l0aW9uIH0gZnJvbSBcIkBjYXJib24vdXRpbHMtcG9zaXRpb25cIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBBbmltYXRpb25GcmFtZVNlcnZpY2UsIEVsZW1lbnRTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcbmltcG9ydCB7IGNsb3Nlc3RBdHRyIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gXCIuLi9kaWFsb2cuY29tcG9uZW50XCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tb3ZlcmZsb3ctY3VzdG9tLW1lbnUtcGFuZVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXZcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiZGlhbG9nQ29uZmlnLm1lbnVMYWJlbFwiXG5cdFx0XHRbbmdDbGFzc109XCJ7J2J4LS1vdmVyZmxvdy1tZW51LS1mbGlwJzogZGlhbG9nQ29uZmlnLmZsaXB9XCJcblx0XHRcdGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnUtb3B0aW9ucyBieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zLS1vcGVuXCJcblx0XHRcdHJvbGU9XCJtZW51XCJcblx0XHRcdChjbGljayk9XCJkb0Nsb3NlKClcIlxuXHRcdFx0I2RpYWxvZ1xuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJkaWFsb2dDb25maWcubWVudUxhYmVsXCI+XG5cdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwiZGlhbG9nQ29uZmlnLmNvbnRlbnRcIlxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie292ZXJmbG93TWVudTogdGhpc31cIj5cblx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dNZW51Q3VzdG9tUGFuZSBleHRlbmRzIERpYWxvZyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgaTE4bjogSTE4bixcblx0XHRAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgYW5pbWF0aW9uRnJhbWVTZXJ2aWNlOiBBbmltYXRpb25GcmFtZVNlcnZpY2UgPSBudWxsLFxuXHRcdC8vIG1hcmsgYGVsZW1lbnRTZXJ2aWNlYCBhcyBvcHRpb25hbCBzaW5jZSBtYWtpbmcgaXQgbWFuZGF0b3J5IHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlXG5cdFx0QE9wdGlvbmFsKCkgcHJvdGVjdGVkIGVsZW1lbnRTZXJ2aWNlOiBFbGVtZW50U2VydmljZSA9IG51bGxcblx0KSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZiwgZWxlbWVudFNlcnZpY2UsIGFuaW1hdGlvbkZyYW1lU2VydmljZSk7XG5cdH1cblxuXHRvbkRpYWxvZ0luaXQoKSB7XG5cdFx0Y29uc3QgcG9zaXRpb25PdmVyZmxvd01lbnUgPSBwb3MgPT4ge1xuXHRcdFx0bGV0IG9mZnNldDtcblx0XHRcdC8qXG5cdFx0XHQqIDIwIGlzIGhhbGYgdGhlIHdpZHRoIG9mIHRoZSBvdmVyZmxvdyBtZW51IHRyaWdnZXIgZWxlbWVudC5cblx0XHRcdCogd2UgYWxzbyBtb3ZlIHRoZSBlbGVtZW50IGJ5IGhhbGYgb2YgaXQncyBvd24gd2lkdGgsIHNpbmNlXG5cdFx0XHQqIHBvc2l0aW9uIHNlcnZpY2Ugd2lsbCB0cnkgYW5kIGNlbnRlciBldmVyeXRoaW5nXG5cdFx0XHQqL1xuXHRcdFx0Y29uc3QgY2xvc2VzdFJlbCA9IGNsb3Nlc3RBdHRyKFwicG9zaXRpb25cIiwgW1wicmVsYXRpdmVcIiwgXCJmaXhlZFwiLCBcImFic29sdXRlXCJdLCB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG5cdFx0XHRjb25zdCB0b3BGaXggPSBjbG9zZXN0UmVsID8gY2xvc2VzdFJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKiAtMSA6IDA7XG5cdFx0XHRjb25zdCBsZWZ0Rml4ID0gY2xvc2VzdFJlbCA/IGNsb3Nlc3RSZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAqIC0xIDogMDtcblxuXHRcdFx0b2Zmc2V0ID0gTWF0aC5yb3VuZCh0aGlzLmRpYWxvZy5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIC8gMikgLSAyMDtcblx0XHRcdGlmICh0aGlzLmRpYWxvZ0NvbmZpZy5mbGlwKSB7XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvbi5hZGRPZmZzZXQocG9zLCB0b3BGaXgsICgtb2Zmc2V0ICsgbGVmdEZpeCkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBvc2l0aW9uLmFkZE9mZnNldChwb3MsIHRvcEZpeCwgKG9mZnNldCArIGxlZnRGaXgpKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5hZGRHYXBbXCJib3R0b21cIl0gPSBwb3NpdGlvbk92ZXJmbG93TWVudTtcblxuXHRcdHRoaXMuYWRkR2FwW1widG9wXCJdID0gcG9zaXRpb25PdmVyZmxvd01lbnU7XG5cblx0XHRpZiAoIXRoaXMuZGlhbG9nQ29uZmlnLm1lbnVMYWJlbCkge1xuXHRcdFx0dGhpcy5kaWFsb2dDb25maWcubWVudUxhYmVsID0gdGhpcy5pMThuLmdldCgpLk9WRVJGTE9XX01FTlUuT1ZFUkZMT1c7XG5cdFx0fVxuXHR9XG59XG4iXX0=