/**
 *
 * carbon-angular v0.0.0 | overflow-menu.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewEncapsulation } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { OverflowMenuDirective } from "./overflow-menu.directive";
/**
 * The OverFlow menu component encapsulates the OverFlowMenu directive, and the menu iconography into one convienent component
 *
 * [See demo](../../?path=/story/overflow-menu--basic)
 *
 * html:
 * ```
 * <ibm-overflow-menu>
 *	<ibm-overflow-menu-option>Option 1</ibm-overflow-menu-option>
 *	<ibm-overflow-menu-option>Option 2</ibm-overflow-menu-option>
 * </ibm-overflow-menu>
 * ```
 *
 * <example-url>../../iframe.html?id=overflow-menu--basic</example-url>
 */
var OverflowMenu = /** @class */ (function () {
    function OverflowMenu(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.buttonLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        this.flip = false;
        this.placement = "bottom";
        this.open = false;
        this.openChange = new EventEmitter();
        this.wrapperClass = "";
        /**
         * This appends additional classes to the overflow trigger/button.
         */
        this.triggerClass = "";
    }
    OverflowMenu.prototype.handleOpenChange = function (event) {
        this.open = event;
        this.openChange.emit(event);
    };
    OverflowMenu.decorators = [
        { type: Component, args: [{
                    selector: "ibm-overflow-menu",
                    template: "\n\t\t<button\n\t\t\t[ibmOverflowMenu]=\"options\"\n\t\t\t[ngClass]=\"{'bx--overflow-menu--open': open}\"\n\t\t\tclass=\"bx--overflow-menu {{triggerClass}}\"\n\t\t\t[attr.aria-label]=\"buttonLabel\"\n\t\t\t[flip]=\"flip\"\n\t\t\t[isOpen]=\"open\"\n\t\t\t(isOpenChange)=\"handleOpenChange($event)\"\n\t\t\t[offset]=\"offset\"\n\t\t\t[wrapperClass]=\"wrapperClass\"\n\t\t\taria-haspopup=\"true\"\n\t\t\tclass=\"bx--overflow-menu\"\n\t\t\ttype=\"button\"\n\t\t\t[placement]=\"placement\">\n\t\t\t<ng-template *ngIf=\"customTrigger; else defaultIcon\" [ngTemplateOutlet]=\"customTrigger\"></ng-template>\n\t\t</button>\n\t\t<ng-template #options>\n\t\t\t<ng-content></ng-content>\n\t\t</ng-template>\n\t\t<ng-template #defaultIcon>\n\t\t\t<svg ibmIcon=\"overflow-menu--vertical\" size=\"16\" class=\"bx--overflow-menu__icon\"></svg>\n\t\t</ng-template>\n\t",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n\t\t.bx--overflow-menu--open {\n\t\t\topacity: 1\n\t\t}\n\n\t\t/*\n\t\tRotate the overflow menu container as well as the icon, since\n\t\twe calculate our menu position based on the container, not the icon.\n\t\t*/\n\t\t.bx--data-table-v2 .bx--overflow-menu {\n\t\t\ttransform: rotate(90deg);\n\t\t}\n\n\t\t.bx--data-table-v2 .bx--overflow-menu__icon {\n\t\t\ttransform: rotate(180deg);\n\t\t}\n\t"]
                }] }
    ];
    /** @nocollapse */
    OverflowMenu.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n }
    ]; };
    OverflowMenu.propDecorators = {
        buttonLabel: [{ type: Input }],
        flip: [{ type: Input }],
        placement: [{ type: Input }],
        open: [{ type: Input }],
        openChange: [{ type: Output }],
        customTrigger: [{ type: Input }],
        offset: [{ type: Input }],
        wrapperClass: [{ type: Input }],
        triggerClass: [{ type: Input }],
        overflowMenuDirective: [{ type: ContentChild, args: [OverflowMenuDirective, { static: false },] }]
    };
    return OverflowMenu;
}());
export { OverflowMenu };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0g7SUEyRUMsc0JBQXNCLFVBQXNCLEVBQVksSUFBVTtRQUE1QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVksU0FBSSxHQUFKLElBQUksQ0FBTTtRQTdCekQsZ0JBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFFckQsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUViLGNBQVMsR0FBcUIsUUFBUSxDQUFDO1FBRXZDLFNBQUksR0FBRyxLQUFLLENBQUM7UUFFWixlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQVcxQyxpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUUzQjs7V0FFRztRQUNNLGlCQUFZLEdBQUcsRUFBRSxDQUFDO0lBSzBDLENBQUM7SUFFdEUsdUNBQWdCLEdBQWhCLFVBQWlCLEtBQWM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBaEZELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsczFCQXVCVDtvQkFrQkQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7NkJBakI1QixpWkFnQlI7aUJBRUQ7Ozs7Z0JBckVBLFVBQVU7Z0JBT0YsSUFBSTs7OzhCQWdFWCxLQUFLO3VCQUVMLEtBQUs7NEJBRUwsS0FBSzt1QkFFTCxLQUFLOzZCQUVMLE1BQU07Z0NBSU4sS0FBSzt5QkFLTCxLQUFLOytCQUVMLEtBQUs7K0JBS0wsS0FBSzt3Q0FHTCxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztJQVF2RCxtQkFBQztDQUFBLEFBakZELElBaUZDO1NBcENZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdENvbnRlbnRDaGlsZCxcblx0RWxlbWVudFJlZixcblx0RXZlbnRFbWl0dGVyLFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRUZW1wbGF0ZVJlZixcblx0Vmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBPdmVyZmxvd01lbnVEaXJlY3RpdmUgfSBmcm9tIFwiLi9vdmVyZmxvdy1tZW51LmRpcmVjdGl2ZVwiO1xuXG4vKipcbiAqIFRoZSBPdmVyRmxvdyBtZW51IGNvbXBvbmVudCBlbmNhcHN1bGF0ZXMgdGhlIE92ZXJGbG93TWVudSBkaXJlY3RpdmUsIGFuZCB0aGUgbWVudSBpY29ub2dyYXBoeSBpbnRvIG9uZSBjb252aWVuZW50IGNvbXBvbmVudFxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L292ZXJmbG93LW1lbnUtLWJhc2ljKVxuICpcbiAqIGh0bWw6XG4gKiBgYGBcbiAqIDxpYm0tb3ZlcmZsb3ctbWVudT5cbiAqXHQ8aWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPk9wdGlvbiAxPC9pYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24+XG4gKlx0PGlibS1vdmVyZmxvdy1tZW51LW9wdGlvbj5PcHRpb24gMjwvaWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPlxuICogPC9pYm0tb3ZlcmZsb3ctbWVudT5cbiAqIGBgYFxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1vdmVyZmxvdy1tZW51LS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tb3ZlcmZsb3ctbWVudVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxidXR0b25cblx0XHRcdFtpYm1PdmVyZmxvd01lbnVdPVwib3B0aW9uc1wiXG5cdFx0XHRbbmdDbGFzc109XCJ7J2J4LS1vdmVyZmxvdy1tZW51LS1vcGVuJzogb3Blbn1cIlxuXHRcdFx0Y2xhc3M9XCJieC0tb3ZlcmZsb3ctbWVudSB7e3RyaWdnZXJDbGFzc319XCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYnV0dG9uTGFiZWxcIlxuXHRcdFx0W2ZsaXBdPVwiZmxpcFwiXG5cdFx0XHRbaXNPcGVuXT1cIm9wZW5cIlxuXHRcdFx0KGlzT3BlbkNoYW5nZSk9XCJoYW5kbGVPcGVuQ2hhbmdlKCRldmVudClcIlxuXHRcdFx0W29mZnNldF09XCJvZmZzZXRcIlxuXHRcdFx0W3dyYXBwZXJDbGFzc109XCJ3cmFwcGVyQ2xhc3NcIlxuXHRcdFx0YXJpYS1oYXNwb3B1cD1cInRydWVcIlxuXHRcdFx0Y2xhc3M9XCJieC0tb3ZlcmZsb3ctbWVudVwiXG5cdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFtwbGFjZW1lbnRdPVwicGxhY2VtZW50XCI+XG5cdFx0XHQ8bmctdGVtcGxhdGUgKm5nSWY9XCJjdXN0b21UcmlnZ2VyOyBlbHNlIGRlZmF1bHRJY29uXCIgW25nVGVtcGxhdGVPdXRsZXRdPVwiY3VzdG9tVHJpZ2dlclwiPjwvbmctdGVtcGxhdGU+XG5cdFx0PC9idXR0b24+XG5cdFx0PG5nLXRlbXBsYXRlICNvcHRpb25zPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0PG5nLXRlbXBsYXRlICNkZWZhdWx0SWNvbj5cblx0XHRcdDxzdmcgaWJtSWNvbj1cIm92ZXJmbG93LW1lbnUtLXZlcnRpY2FsXCIgc2l6ZT1cIjE2XCIgY2xhc3M9XCJieC0tb3ZlcmZsb3ctbWVudV9faWNvblwiPjwvc3ZnPlxuXHRcdDwvbmctdGVtcGxhdGU+XG5cdGAsXG5cdHN0eWxlczogW2Bcblx0XHQuYngtLW92ZXJmbG93LW1lbnUtLW9wZW4ge1xuXHRcdFx0b3BhY2l0eTogMVxuXHRcdH1cblxuXHRcdC8qXG5cdFx0Um90YXRlIHRoZSBvdmVyZmxvdyBtZW51IGNvbnRhaW5lciBhcyB3ZWxsIGFzIHRoZSBpY29uLCBzaW5jZVxuXHRcdHdlIGNhbGN1bGF0ZSBvdXIgbWVudSBwb3NpdGlvbiBiYXNlZCBvbiB0aGUgY29udGFpbmVyLCBub3QgdGhlIGljb24uXG5cdFx0Ki9cblx0XHQuYngtLWRhdGEtdGFibGUtdjIgLmJ4LS1vdmVyZmxvdy1tZW51IHtcblx0XHRcdHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcblx0XHR9XG5cblx0XHQuYngtLWRhdGEtdGFibGUtdjIgLmJ4LS1vdmVyZmxvdy1tZW51X19pY29uIHtcblx0XHRcdHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XG5cdFx0fVxuXHRgXSxcblx0ZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBPdmVyZmxvd01lbnUge1xuXHRASW5wdXQoKSBidXR0b25MYWJlbCA9IHRoaXMuaTE4bi5nZXQoKS5PVkVSRkxPV19NRU5VLk9WRVJGTE9XO1xuXG5cdEBJbnB1dCgpIGZsaXAgPSBmYWxzZTtcblxuXHRASW5wdXQoKSBwbGFjZW1lbnQ6IFwiYm90dG9tXCIgfCBcInRvcFwiID0gXCJib3R0b21cIjtcblxuXHRASW5wdXQoKSBvcGVuID0gZmFsc2U7XG5cblx0QE91dHB1dCgpIG9wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjdXN0b20gb3ZlcmZsb3cgbWVudSB0cmlnZ2VyXG5cdCAqL1xuXHRASW5wdXQoKSBjdXN0b21UcmlnZ2VyOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdC8qKlxuXHQgKiBUaGlzIHNwZWNpZmllcyBhbnkgdmVydGljYWwgYW5kIGhvcml6b250YWwgb2Zmc2V0IGZvciB0aGUgcG9zaXRpb24gb2YgdGhlIGRpYWxvZ1xuXHQgKi9cblx0QElucHV0KCkgb2Zmc2V0OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH07XG5cblx0QElucHV0KCkgd3JhcHBlckNsYXNzID0gXCJcIjtcblxuXHQvKipcblx0ICogVGhpcyBhcHBlbmRzIGFkZGl0aW9uYWwgY2xhc3NlcyB0byB0aGUgb3ZlcmZsb3cgdHJpZ2dlci9idXR0b24uXG5cdCAqL1xuXHRASW5wdXQoKSB0cmlnZ2VyQ2xhc3MgPSBcIlwiO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0QENvbnRlbnRDaGlsZChPdmVyZmxvd01lbnVEaXJlY3RpdmUsIHsgc3RhdGljOiBmYWxzZSB9KSBvdmVyZmxvd01lbnVEaXJlY3RpdmU6IE92ZXJmbG93TWVudURpcmVjdGl2ZTtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIGkxOG46IEkxOG4pIHt9XG5cblx0aGFuZGxlT3BlbkNoYW5nZShldmVudDogYm9vbGVhbikge1xuXHRcdHRoaXMub3BlbiA9IGV2ZW50O1xuXHRcdHRoaXMub3BlbkNoYW5nZS5lbWl0KGV2ZW50KTtcblx0fVxufVxuIl19