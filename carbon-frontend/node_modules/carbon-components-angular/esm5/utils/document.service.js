/**
 *
 * carbon-angular v0.0.0 | document.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
import { Observable, Subscription } from "rxjs";
import { getEventObservable } from "./event-observable";
var DocumentService = /** @class */ (function () {
    function DocumentService() {
        this.globalEvents = new Map();
        this.documentRef = document;
        this.subscriptions = new Subscription();
    }
    DocumentService.prototype.handleEvent = function (eventType, callback) {
        if (!this.globalEvents.has(eventType)) {
            if (this.documentRef) {
                this.globalEvents.set(eventType, getEventObservable(this.documentRef, eventType));
            }
            else {
                this.globalEvents.set(eventType, new Observable());
            }
        }
        var observable = this.globalEvents.get(eventType);
        this.subscriptions.add(observable.subscribe(callback));
    };
    DocumentService.prototype.handleClick = function (callback) {
        this.handleEvent("click", callback);
    };
    DocumentService.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
        this.globalEvents = null;
    };
    DocumentService.decorators = [
        { type: Injectable }
    ];
    return DocumentService;
}());
export { DocumentService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHMvIiwic291cmNlcyI6WyJkb2N1bWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFeEQ7SUFBQTtRQUVXLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7UUFFcEQsZ0JBQVcsR0FBRyxRQUFRLENBQUM7UUFFdkIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBc0I5QyxDQUFDO0lBcEJBLHFDQUFXLEdBQVgsVUFBWSxTQUFpQixFQUFFLFFBQXNCO1FBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBa0IsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3pGO2lCQUFNO2dCQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUM7YUFDbkQ7U0FDRDtRQUNELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQscUNBQVcsR0FBWCxVQUFZLFFBQXNCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxxQ0FBVyxHQUFYO1FBQ0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDOztnQkEzQkQsVUFBVTs7SUE0Qlgsc0JBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTNCWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgZ2V0RXZlbnRPYnNlcnZhYmxlIH0gZnJvbSBcIi4vZXZlbnQtb2JzZXJ2YWJsZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblx0cHJvdGVjdGVkIGdsb2JhbEV2ZW50cyA9IG5ldyBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPEV2ZW50Pj4oKTtcblxuXHRwcm90ZWN0ZWQgZG9jdW1lbnRSZWYgPSBkb2N1bWVudDtcblxuXHRwcm90ZWN0ZWQgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuXHRoYW5kbGVFdmVudChldmVudFR5cGU6IHN0cmluZywgY2FsbGJhY2s6IEV2ZW50SGFuZGxlcikge1xuXHRcdGlmICghdGhpcy5nbG9iYWxFdmVudHMuaGFzKGV2ZW50VHlwZSkpIHtcblx0XHRcdGlmICh0aGlzLmRvY3VtZW50UmVmKSB7XG5cdFx0XHRcdHRoaXMuZ2xvYmFsRXZlbnRzLnNldChldmVudFR5cGUsIGdldEV2ZW50T2JzZXJ2YWJsZSh0aGlzLmRvY3VtZW50UmVmIGFzIGFueSwgZXZlbnRUeXBlKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmdsb2JhbEV2ZW50cy5zZXQoZXZlbnRUeXBlLCBuZXcgT2JzZXJ2YWJsZSgpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMuZ2xvYmFsRXZlbnRzLmdldChldmVudFR5cGUpO1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQob2JzZXJ2YWJsZS5zdWJzY3JpYmUoY2FsbGJhY2spKTtcblx0fVxuXG5cdGhhbmRsZUNsaWNrKGNhbGxiYWNrOiBFdmVudEhhbmRsZXIpIHtcblx0XHR0aGlzLmhhbmRsZUV2ZW50KFwiY2xpY2tcIiwgY2FsbGJhY2spO1xuXHR9XG5cblx0bmdPbkRlc3Ryb3koKSB7XG5cdFx0dGhpcy5zdWJzY3JpcHRpb25zLnVuc3Vic2NyaWJlKCk7XG5cdFx0dGhpcy5nbG9iYWxFdmVudHMgPSBudWxsO1xuXHR9XG59XG4iXX0=