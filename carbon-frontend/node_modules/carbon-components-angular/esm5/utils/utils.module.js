/**
 *
 * carbon-angular v0.0.0 | utils.module.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NgModule, Optional, SkipSelf, NgZone } from "@angular/core";
import { AnimationFrameService, AnimationFrameServiceSingleton } from "./animation-frame.service";
import { ElementService } from "./element.service";
import { EventService } from "./event.service";
import { DocumentService } from "./document.service";
// either provides a new instance of DocumentService, or returns the parent
export function DOCUMENT_SERVICE_PROVIDER_FACTORY(parentService) {
    return parentService || new DocumentService();
}
// DocumentService *must* be a singleton to ensure that we handle events and other document level settings once (and only once)
export var DOCUMENT_SERVICE_PROVIDER = {
    provide: DocumentService,
    deps: [[new Optional(), new SkipSelf(), DocumentService]],
    useFactory: DOCUMENT_SERVICE_PROVIDER_FACTORY
};
// either provides a new instance of AnimationFrameServiceSingleton, or returns the parent
export function ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER_FACTORY(parentService, ngZone) {
    return parentService || new AnimationFrameServiceSingleton(ngZone);
}
// AnimationFrameServiceSingleton is a singleton so we don't have a ton of duplicate RAFs firing (better for scheduling)
export var ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER = {
    provide: AnimationFrameServiceSingleton,
    deps: [[new Optional(), new SkipSelf(), AnimationFrameServiceSingleton], NgZone],
    useFactory: ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER_FACTORY
};
var UtilsModule = /** @class */ (function () {
    function UtilsModule() {
    }
    UtilsModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        DOCUMENT_SERVICE_PROVIDER,
                        ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER,
                        AnimationFrameServiceSingleton,
                        DocumentService,
                        AnimationFrameService,
                        ElementService,
                        EventService
                    ]
                },] }
    ];
    return UtilsModule;
}());
export { UtilsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlscy8iLCJzb3VyY2VzIjpbInV0aWxzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFDTixxQkFBcUIsRUFDckIsOEJBQThCLEVBQzlCLE1BQU0sMkJBQTJCLENBQUM7QUFDbkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckQsMkVBQTJFO0FBQzNFLE1BQU0sVUFBVSxpQ0FBaUMsQ0FBQyxhQUE4QjtJQUMvRSxPQUFPLGFBQWEsSUFBSSxJQUFJLGVBQWUsRUFBRSxDQUFDO0FBQy9DLENBQUM7QUFFRCwrSEFBK0g7QUFDL0gsTUFBTSxDQUFDLElBQU0seUJBQXlCLEdBQUc7SUFDeEMsT0FBTyxFQUFFLGVBQWU7SUFDeEIsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDekQsVUFBVSxFQUFFLGlDQUFpQztDQUM3QyxDQUFDO0FBRUYsMEZBQTBGO0FBQzFGLE1BQU0sVUFBVSxrREFBa0QsQ0FBQyxhQUE2QyxFQUFFLE1BQWM7SUFDL0gsT0FBTyxhQUFhLElBQUksSUFBSSw4QkFBOEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBRUQsd0hBQXdIO0FBQ3hILE1BQU0sQ0FBQyxJQUFNLDBDQUEwQyxHQUFHO0lBQ3pELE9BQU8sRUFBRSw4QkFBOEI7SUFDdkMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsOEJBQThCLENBQUMsRUFBRSxNQUFNLENBQUM7SUFDaEYsVUFBVSxFQUFFLGtEQUFrRDtDQUM5RCxDQUFDO0FBRUY7SUFBQTtJQVcyQixDQUFDOztnQkFYM0IsUUFBUSxTQUFDO29CQUNULFNBQVMsRUFBRTt3QkFDVix5QkFBeUI7d0JBQ3pCLDBDQUEwQzt3QkFDMUMsOEJBQThCO3dCQUM5QixlQUFlO3dCQUNmLHFCQUFxQjt3QkFDckIsY0FBYzt3QkFDZCxZQUFZO3FCQUNaO2lCQUNEOztJQUMwQixrQkFBQztDQUFBLEFBWDVCLElBVzRCO1NBQWYsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGYsIE5nWm9uZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1xuXHRBbmltYXRpb25GcmFtZVNlcnZpY2UsXG5cdEFuaW1hdGlvbkZyYW1lU2VydmljZVNpbmdsZXRvblxufSBmcm9tIFwiLi9hbmltYXRpb24tZnJhbWUuc2VydmljZVwiO1xuaW1wb3J0IHsgRWxlbWVudFNlcnZpY2UgfSBmcm9tIFwiLi9lbGVtZW50LnNlcnZpY2VcIjtcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gXCIuL2V2ZW50LnNlcnZpY2VcIjtcbmltcG9ydCB7IERvY3VtZW50U2VydmljZSB9IGZyb20gXCIuL2RvY3VtZW50LnNlcnZpY2VcIjtcblxuLy8gZWl0aGVyIHByb3ZpZGVzIGEgbmV3IGluc3RhbmNlIG9mIERvY3VtZW50U2VydmljZSwgb3IgcmV0dXJucyB0aGUgcGFyZW50XG5leHBvcnQgZnVuY3Rpb24gRE9DVU1FTlRfU0VSVklDRV9QUk9WSURFUl9GQUNUT1JZKHBhcmVudFNlcnZpY2U6IERvY3VtZW50U2VydmljZSkge1xuXHRyZXR1cm4gcGFyZW50U2VydmljZSB8fCBuZXcgRG9jdW1lbnRTZXJ2aWNlKCk7XG59XG5cbi8vIERvY3VtZW50U2VydmljZSAqbXVzdCogYmUgYSBzaW5nbGV0b24gdG8gZW5zdXJlIHRoYXQgd2UgaGFuZGxlIGV2ZW50cyBhbmQgb3RoZXIgZG9jdW1lbnQgbGV2ZWwgc2V0dGluZ3Mgb25jZSAoYW5kIG9ubHkgb25jZSlcbmV4cG9ydCBjb25zdCBET0NVTUVOVF9TRVJWSUNFX1BST1ZJREVSID0ge1xuXHRwcm92aWRlOiBEb2N1bWVudFNlcnZpY2UsXG5cdGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBEb2N1bWVudFNlcnZpY2VdXSxcblx0dXNlRmFjdG9yeTogRE9DVU1FTlRfU0VSVklDRV9QUk9WSURFUl9GQUNUT1JZXG59O1xuXG4vLyBlaXRoZXIgcHJvdmlkZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQW5pbWF0aW9uRnJhbWVTZXJ2aWNlU2luZ2xldG9uLCBvciByZXR1cm5zIHRoZSBwYXJlbnRcbmV4cG9ydCBmdW5jdGlvbiBBTklNQVRJT05fRlJBTUVfU0VSVklDRV9TSU5HTEVUT05fUFJPVklERVJfRkFDVE9SWShwYXJlbnRTZXJ2aWNlOiBBbmltYXRpb25GcmFtZVNlcnZpY2VTaW5nbGV0b24sIG5nWm9uZTogTmdab25lKSB7XG5cdHJldHVybiBwYXJlbnRTZXJ2aWNlIHx8IG5ldyBBbmltYXRpb25GcmFtZVNlcnZpY2VTaW5nbGV0b24obmdab25lKTtcbn1cblxuLy8gQW5pbWF0aW9uRnJhbWVTZXJ2aWNlU2luZ2xldG9uIGlzIGEgc2luZ2xldG9uIHNvIHdlIGRvbid0IGhhdmUgYSB0b24gb2YgZHVwbGljYXRlIFJBRnMgZmlyaW5nIChiZXR0ZXIgZm9yIHNjaGVkdWxpbmcpXG5leHBvcnQgY29uc3QgQU5JTUFUSU9OX0ZSQU1FX1NFUlZJQ0VfU0lOR0xFVE9OX1BST1ZJREVSID0ge1xuXHRwcm92aWRlOiBBbmltYXRpb25GcmFtZVNlcnZpY2VTaW5nbGV0b24sXG5cdGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBBbmltYXRpb25GcmFtZVNlcnZpY2VTaW5nbGV0b25dLCBOZ1pvbmVdLFxuXHR1c2VGYWN0b3J5OiBBTklNQVRJT05fRlJBTUVfU0VSVklDRV9TSU5HTEVUT05fUFJPVklERVJfRkFDVE9SWVxufTtcblxuQE5nTW9kdWxlKHtcblx0cHJvdmlkZXJzOiBbXG5cdFx0RE9DVU1FTlRfU0VSVklDRV9QUk9WSURFUixcblx0XHRBTklNQVRJT05fRlJBTUVfU0VSVklDRV9TSU5HTEVUT05fUFJPVklERVIsXG5cdFx0QW5pbWF0aW9uRnJhbWVTZXJ2aWNlU2luZ2xldG9uLFxuXHRcdERvY3VtZW50U2VydmljZSxcblx0XHRBbmltYXRpb25GcmFtZVNlcnZpY2UsXG5cdFx0RWxlbWVudFNlcnZpY2UsXG5cdFx0RXZlbnRTZXJ2aWNlXG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgVXRpbHNNb2R1bGUgeyB9XG4iXX0=