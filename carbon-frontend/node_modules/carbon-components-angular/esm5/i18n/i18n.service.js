/**
 *
 * carbon-angular v0.0.0 | i18n.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { BehaviorSubject, isObservable, iif } from "rxjs";
import { map } from "rxjs/operators";
import { merge } from "carbon-components-angular/utils";
import EN from "./en";
/**
 * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.
 *
 * The keys specify the variable name in the string.
 *
 * Example:
 * ```typescript
 * service.set({ "TEST": "{{foo}} {{bar}}" });
 *
 * service.replace(service.get("TEST"), { foo: "test", bar: "asdf" })
 * ```
 *
 * Produces: `"test asdf"`
 *
 * @param subject the translation to replace variables on
 * @param variables object of variables to replace
 */
export var replace = function (subject, variables) { return subject.pipe(map(function (str) {
    var e_1, _a;
    var keys = Object.keys(variables);
    try {
        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            var value = variables[key];
            str = str.replace(new RegExp("{{\\s*" + key + "\\s*}}", "g"), value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return str;
})); };
/**
 * Represents an "overridable" translation value.
 *
 * Largely an internal usecase. There are situations where we want an `Observable` that
 * can emit events from a centralized source **OR** an `Observable` that will emit events
 * from a component local source. The key example being on/off text in a `Toggle` - In some cases
 * we want the `Toggle` to use `I18n`s global translations, but in others we'd prefer to use a local
 * override. We don't ever need to return to a non-overridden state, but we do need the ability to
 * switch _to_ an overridden sate.
 */
var Overridable = /** @class */ (function () {
    function Overridable(path, i18n) {
        this.path = path;
        this.i18n = i18n;
        /**
         * Our base non-overridden translation.
         */
        this.baseTranslation = this.i18n.get(this.path);
        /**
         * A boolean to flip between overridden and non-overridden states.
         */
        this.isOverridden = false;
        /**
         * ensure `$override` is initialized with the correct default value
         * in some cases `_value` can get changed for an `Observable` before `$override` is created
         */
        var value = this.i18n.getValueFromPath(this.path);
        this.$override = new BehaviorSubject(value);
        this._value = value;
    }
    Object.defineProperty(Overridable.prototype, "value", {
        /**
         * The raw value of the translation. Defaults to the string value, but will return the value passed to `override`
         *
         * @readonly
         */
        get: function () {
            return this._value;
        },
        set: function (v) {
            this.override(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Overridable.prototype, "subject", {
        /**
         * The translation subject. Returns either a stream of overridden values, or our base translation values.
         *
         * @readonly
         */
        get: function () {
            var _this = this;
            /**
             * since inputs are bound on template instantiation (and thusly will always have _some_ value)
             * We can use a simple boolean and the `iif` function to determine which subject to return on subscription
             */
            return iif(function () { return _this.isOverridden; }, this.$override, this.baseTranslation);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Takes a string or an `Observable` that emits strings.
     * Overrides the value provided by the `I18n` service.
     */
    Overridable.prototype.override = function (value) {
        var _this = this;
        this.isOverridden = true;
        // To ensure that there are not multiple subscriptions created for the same observable, we
        // unsubscribe if a subscription already exists for an observable before creating a new one.
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
        this._value = value;
        if (isObservable(value)) {
            this.subscription = value.subscribe(function (v) {
                _this.$override.next(v);
            });
        }
        else {
            this.$override.next(value);
        }
    };
    return Overridable;
}());
export { Overridable };
/**
 * The I18n service is a minimal internal singleton service used to supply our components with translated strings.
 *
 * All the components that support I18n also support directly passed strings.
 * Usage of I18n is optional, and it is not recommended for application use (libraries like ngx-translate
 * are a better choice)
 *
 */
var I18n = /** @class */ (function () {
    function I18n() {
        this.translationStrings = EN;
        this.translations = new Map();
        this.locale = new BehaviorSubject("en");
    }
    /**
     * Sets the locale and optionally the translation strings. Locale is used by components that
     * are already locale aware (datepicker for example) while the translation strings are used
     * for components that are not.
     *
     * Locales set here will override locales/languages set in components
     * @param language an ISO 639-1 language code - https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
     * @param strings an object of strings, optional
     */
    I18n.prototype.setLocale = function (language, strings) {
        this.locale.next(language);
        if (strings) {
            this.set(strings);
        }
    };
    /**
     * Returns the current locale
     */
    I18n.prototype.getLocale = function () {
        return this.locale.value;
    };
    /**
     * Returns an observable that resolves to the current locale, and will update when changed
     */
    I18n.prototype.getLocaleObservable = function () {
        return this.locale.asObservable();
    };
    /**
     * Set/update the translations from an object. Also notifies all participating components of the update.
     *
     * @param strings an object of strings, should follow the same format as src/i18n/en.json
     */
    I18n.prototype.set = function (strings) {
        var e_2, _a;
        this.translationStrings = merge({}, EN, strings);
        // iterate over all our tracked translations and update each observable
        var translations = Array.from(this.translations);
        try {
            for (var translations_1 = tslib_1.__values(translations), translations_1_1 = translations_1.next(); !translations_1_1.done; translations_1_1 = translations_1.next()) {
                var _b = tslib_1.__read(translations_1_1.value, 2), path = _b[0], subject = _b[1];
                subject.next(this.getValueFromPath(path));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (translations_1_1 && !translations_1_1.done && (_a = translations_1.return)) _a.call(translations_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * When a path is specified returns an observable that will resolve to the translation string value.
     *
     * Returns the full translations object if path is not specified.
     *
     * @param path optional, looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.get = function (path) {
        if (!path) {
            return this.translationStrings;
        }
        return this.getSubject(path);
    };
    /**
     * Returns all descendents of some path fragment as an object.
     *
     * @param partialPath a path fragment, for example `"NOTIFICATION"`
     */
    I18n.prototype.getMultiple = function (partialPath) {
        var e_3, _a;
        var values = this.getValueFromPath(partialPath);
        var subjects = {};
        try {
            for (var _b = tslib_1.__values(Object.keys(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (values[key] === Object(values[key])) {
                    subjects[key] = this.getMultiple(partialPath + "." + key);
                }
                else {
                    subjects[key] = this.getSubject(partialPath + "." + key);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return subjects;
    };
    /**
     * Returns an instance of `Overridable` that can be used to optionally override the value provided by `I18n`
     * @param path looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.getOverridable = function (path) {
        return new Overridable(path, this);
    };
    /**
     * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.
     *
     * The keys specify the variable name in the string.
     *
     * Example:
     * ```
     * service.set({ "TEST": "{{foo}} {{bar}}" });
     *
     * service.replace(service.get("TEST"), { foo: "test", bar: "asdf" })
     * ```
     *
     * Produces: `"test asdf"`
     *
     * @param subject the translation to replace variables on
     * @param variables object of variables to replace
     */
    I18n.prototype.replace = function (subject, variables) {
        return replace(subject, variables);
    };
    /**
     * Trys to resolve a value from the provided path.
     *
     * @param path looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.getValueFromPath = function (path) {
        var e_4, _a;
        var value = this.translationStrings;
        try {
            for (var _b = tslib_1.__values(path.split(".")), _c = _b.next(); !_c.done; _c = _b.next()) {
                var segment = _c.value;
                if (value[segment] !== undefined && value[segment] !== null) {
                    value = value[segment];
                }
                else {
                    throw new Error("no key " + segment + " at " + path);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return value;
    };
    /**
     * Helper method that returns an observable from the internal cache based on the path
     *
     * @param path looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.getSubject = function (path) {
        try {
            // we run this here to validate the path exists before adding it to the translation map
            var value = this.getValueFromPath(path);
            if (this.translations.has(path)) {
                return this.translations.get(path);
            }
            var translation = new BehaviorSubject(value);
            this.translations.set(path, translation);
            return translation;
        }
        catch (error) {
            console.error(error);
        }
    };
    I18n.decorators = [
        { type: Injectable }
    ];
    return I18n;
}());
export { I18n };
//# sourceMappingURL=data:application/json;base64,