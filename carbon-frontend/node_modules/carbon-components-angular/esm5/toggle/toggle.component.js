/**
 *
 * carbon-angular v0.0.0 | toggle.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Checkbox } from "carbon-components-angular/checkbox";
import { ChangeDetectorRef, Component, Input, Output, EventEmitter, TemplateRef } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { I18n } from "carbon-components-angular/i18n";
/**
 * Defines the set of states for a toggle component.
 */
export var ToggleState;
(function (ToggleState) {
    ToggleState[ToggleState["Init"] = 0] = "Init";
    ToggleState[ToggleState["Indeterminate"] = 1] = "Indeterminate";
    ToggleState[ToggleState["Checked"] = 2] = "Checked";
    ToggleState[ToggleState["Unchecked"] = 3] = "Unchecked";
})(ToggleState || (ToggleState = {}));
/**
 * Used to emit changes performed on toggle components.
 *
 * @deprecated since v4
 */
var ToggleChange = /** @class */ (function () {
    function ToggleChange() {
    }
    return ToggleChange;
}());
export { ToggleChange };
/**
 * [See demo](../../?path=/story/toggle--basic)
 *
 * ```html
 * <ibm-toggle [(ngModel)]="toggleState">Toggle</ibm-toggle>
 * ```
 *
 * <example-url>../../iframe.html?id=toggle--basic</example-url>
 */
var Toggle = /** @class */ (function (_super) {
    tslib_1.__extends(Toggle, _super);
    /**
     * Creates an instance of Toggle.
     */
    function Toggle(changeDetectorRef, i18n) {
        var _this = _super.call(this, changeDetectorRef) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.i18n = i18n;
        /**
         * Size of the toggle component.
         */
        _this.size = "md";
        /**
         * Set to `true` for a loading toggle.
         */
        _this.skeleton = false;
        /**
         * The unique id allocated to the `Toggle`.
         */
        _this.id = "toggle-" + Toggle.toggleCount;
        /**
         * Emits event notifying other classes when a change in state occurs on a toggle after a
         * click.
         *
         * @deprecated since v4
         */
        _this.change = new EventEmitter();
        _this._offValues = _this.i18n.getOverridable("TOGGLE.OFF");
        _this._onValues = _this.i18n.getOverridable("TOGGLE.ON");
        Toggle.toggleCount++;
        return _this;
    }
    Object.defineProperty(Toggle.prototype, "offText", {
        get: function () {
            return this._offValues.value;
        },
        /**
         * Text that is set on the left side of the toggle.
         */
        set: function (value) {
            this._offValues.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toggle.prototype, "onText", {
        get: function () {
            return this._onValues.value;
        },
        /**
         * Text that is set on the right side of the toggle.
         */
        set: function (value) {
            this._onValues.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Toggle.prototype.getOffText = function () {
        return this._offValues.subject;
    };
    Toggle.prototype.getOnText = function () {
        return this._onValues.subject;
    };
    /**
     * Creates instance of `ToggleChange` used to propagate the change event.
     */
    Toggle.prototype.emitChangeEvent = function () {
        /* begin deprecation */
        var event = new ToggleChange();
        event.source = this;
        event.checked = this.checked;
        this.change.emit(event);
        /* end deprecation */
        this.checkedChange.emit(this.checked);
        this.propagateChange(this.checked);
    };
    Toggle.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * Variable used for creating unique ids for toggle components.
     */
    Toggle.toggleCount = 0;
    Toggle.decorators = [
        { type: Component, args: [{
                    selector: "ibm-toggle",
                    template: "\n\t\t<label *ngIf=\"label\" [id]=\"ariaLabelledby\" class=\"bx--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t</label>\n\t\t<input\n\t\t\tclass=\"bx--toggle-input\"\n\t\t\ttype=\"checkbox\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--toggle-input--small': size === 'sm',\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\"\n\t\t\t[id]=\"id\"\n\t\t\t[value]=\"value\"\n\t\t\t[name]=\"name\"\n\t\t\t[required]=\"required\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t[attr.aria-checked]=\"checked\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<label\n\t\t\tclass=\"bx--toggle-input__label\"\n\t\t\t[for]=\"id\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<span class=\"bx--toggle__switch\">\n\t\t\t\t<span class=\"bx--toggle__text--off\">{{(!skeleton ? getOffText() : null) | async }}</span>\n\t\t\t\t<span class=\"bx--toggle__text--on\">{{(!skeleton ? getOnText() : null) | async}}</span>\n\t\t\t</span>\n\t\t</label>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: Toggle,
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    Toggle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: I18n }
    ]; };
    Toggle.propDecorators = {
        offText: [{ type: Input }],
        onText: [{ type: Input }],
        label: [{ type: Input }],
        size: [{ type: Input }],
        skeleton: [{ type: Input }],
        change: [{ type: Output }]
    };
    return Toggle;
}(Checkbox));
export { Toggle };
//# sourceMappingURL=data:application/json;base64,