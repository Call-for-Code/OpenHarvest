/**
 *
 * carbon-angular v0.0.0 | content-switcher-option.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input, HostListener, Output, EventEmitter } from "@angular/core";
var ContentSwitcherOption = /** @class */ (function () {
    function ContentSwitcherOption() {
        /**
         * Internal name for the option.
         * Should be something that identifies the option to the application.
         * Accessible from the `ContentSwitcher` `selected` emitter
         */
        this.name = "option";
        /**
         * Emits when the option is selected.
         */
        this.selected = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.switcherClass = "bx--content-switcher-btn";
        this.selectedClass = false;
        this.role = "tab";
        this.ariaSelected = false;
        this.tabindex = "-1";
        this._active = false;
    }
    Object.defineProperty(ContentSwitcherOption.prototype, "active", {
        get: function () {
            return this._active;
        },
        /**
         * Used to activate the option. Only one option may be `active` at a time
         */
        set: function (value) {
            this._active = value;
            this.selectedClass = value;
            this.ariaSelected = value;
            this.tabindex = value ? "0" : "-1";
        },
        enumerable: true,
        configurable: true
    });
    ContentSwitcherOption.prototype.hostClick = function (event) {
        this.onClick.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    };
    ContentSwitcherOption.prototype.doFocus = function (event) {
        this.onFocus.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    };
    ContentSwitcherOption.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmContentOption]"
                },] }
    ];
    ContentSwitcherOption.propDecorators = {
        active: [{ type: Input }],
        name: [{ type: Input }],
        selected: [{ type: Output }],
        onClick: [{ type: Output }],
        onFocus: [{ type: Output }],
        switcherClass: [{ type: HostBinding, args: ["class",] }],
        selectedClass: [{ type: HostBinding, args: ["class.bx--content-switcher--selected",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        ariaSelected: [{ type: HostBinding, args: ["attr.aria-selected",] }],
        tabindex: [{ type: HostBinding, args: ["attr.tabIndex",] }],
        hostClick: [{ type: HostListener, args: ["click", ["$event"],] }],
        doFocus: [{ type: HostListener, args: ["focus", ["$event"],] }]
    };
    return ContentSwitcherOption;
}());
export { ContentSwitcherOption };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jb250ZW50LXN3aXRjaGVyLyIsInNvdXJjZXMiOlsiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQUFBO1FBa0JDOzs7O1dBSUc7UUFDTSxTQUFJLEdBQUcsUUFBUSxDQUFDO1FBRXpCOztXQUVHO1FBQ08sYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFdkMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFekMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFN0Isa0JBQWEsR0FBRywwQkFBMEIsQ0FBQztRQUNaLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2pELFNBQUksR0FBRyxLQUFLLENBQUM7UUFDSixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXBDLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFtQjNCLENBQUM7SUFwREEsc0JBQWEseUNBQU07YUFPbkI7WUFDQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDckIsQ0FBQztRQVpEOztXQUVHO2FBQ0gsVUFBcUIsS0FBYztZQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDcEMsQ0FBQzs7O09BQUE7SUErQkQseUNBQVMsR0FEVCxVQUNVLEtBQWlCO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLDREQUE0RDtRQUM1RCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUdELHVDQUFPLEdBRFAsVUFDUSxLQUFpQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6Qiw0REFBNEQ7UUFDNUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7O2dCQTFERCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLG9CQUFvQjtpQkFDOUI7Ozt5QkFLQyxLQUFLO3VCQWdCTCxLQUFLOzJCQUtMLE1BQU07MEJBRU4sTUFBTTswQkFFTixNQUFNO2dDQUVOLFdBQVcsU0FBQyxPQUFPO2dDQUNuQixXQUFXLFNBQUMsc0NBQXNDO3VCQUNsRCxXQUFXLFNBQUMsV0FBVzsrQkFDdkIsV0FBVyxTQUFDLG9CQUFvQjsyQkFDaEMsV0FBVyxTQUFDLGVBQWU7NEJBSTNCLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7MEJBU2hDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBUWxDLDRCQUFDO0NBQUEsQUEzREQsSUEyREM7U0F4RFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGlyZWN0aXZlLFxuXHRIb3N0QmluZGluZyxcblx0SW5wdXQsXG5cdEhvc3RMaXN0ZW5lcixcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1Db250ZW50T3B0aW9uXVwiXG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnRTd2l0Y2hlck9wdGlvbiB7XG5cdC8qKlxuXHQgKiBVc2VkIHRvIGFjdGl2YXRlIHRoZSBvcHRpb24uIE9ubHkgb25lIG9wdGlvbiBtYXkgYmUgYGFjdGl2ZWAgYXQgYSB0aW1lXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgYWN0aXZlICh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xuXHRcdHRoaXMuc2VsZWN0ZWRDbGFzcyA9IHZhbHVlO1xuXHRcdHRoaXMuYXJpYVNlbGVjdGVkID0gdmFsdWU7XG5cdFx0dGhpcy50YWJpbmRleCA9IHZhbHVlID8gXCIwXCIgOiBcIi0xXCI7XG5cdH1cblxuXHRnZXQgYWN0aXZlKCkge1xuXHRcdHJldHVybiB0aGlzLl9hY3RpdmU7XG5cdH1cblxuXHQvKipcblx0ICogSW50ZXJuYWwgbmFtZSBmb3IgdGhlIG9wdGlvbi5cblx0ICogU2hvdWxkIGJlIHNvbWV0aGluZyB0aGF0IGlkZW50aWZpZXMgdGhlIG9wdGlvbiB0byB0aGUgYXBwbGljYXRpb24uXG5cdCAqIEFjY2Vzc2libGUgZnJvbSB0aGUgYENvbnRlbnRTd2l0Y2hlcmAgYHNlbGVjdGVkYCBlbWl0dGVyXG5cdCAqL1xuXHRASW5wdXQoKSBuYW1lID0gXCJvcHRpb25cIjtcblxuXHQvKipcblx0ICogRW1pdHMgd2hlbiB0aGUgb3B0aW9uIGlzIHNlbGVjdGVkLlxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG5cdEBPdXRwdXQoKSBvbkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PigpO1xuXG5cdEBPdXRwdXQoKSBvbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjxGb2N1c0V2ZW50PigpO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzXCIpIHN3aXRjaGVyQ2xhc3MgPSBcImJ4LS1jb250ZW50LXN3aXRjaGVyLWJ0blwiO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tY29udGVudC1zd2l0Y2hlci0tc2VsZWN0ZWRcIikgc2VsZWN0ZWRDbGFzcyA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLnJvbGVcIikgcm9sZSA9IFwidGFiXCI7XG5cdEBIb3N0QmluZGluZyhcImF0dHIuYXJpYS1zZWxlY3RlZFwiKSBhcmlhU2VsZWN0ZWQgPSBmYWxzZTtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci50YWJJbmRleFwiKSB0YWJpbmRleCA9IFwiLTFcIjtcblxuXHRwcm90ZWN0ZWQgX2FjdGl2ZSA9IGZhbHNlO1xuXG5cdEBIb3N0TGlzdGVuZXIoXCJjbGlja1wiLCBbXCIkZXZlbnRcIl0pXG5cdGhvc3RDbGljayhldmVudDogTW91c2VFdmVudCkge1xuXHRcdHRoaXMub25DbGljay5lbWl0KGV2ZW50KTtcblx0XHQvLyBza2lwIHNldHRpbmcgYW5kIGVtaXR0aW5nIGlmIHRoZSBvcHRpb24gaXMgYWxyZWFkeSBhY3RpdmVcblx0XHRpZiAodGhpcy5hY3RpdmUpIHsgcmV0dXJuOyB9XG5cdFx0dGhpcy5hY3RpdmUgPSB0cnVlO1xuXHRcdHRoaXMuc2VsZWN0ZWQuZW1pdCh0cnVlKTtcblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJmb2N1c1wiLCBbXCIkZXZlbnRcIl0pXG5cdGRvRm9jdXMoZXZlbnQ6IEZvY3VzRXZlbnQpIHtcblx0XHR0aGlzLm9uRm9jdXMuZW1pdChldmVudCk7XG5cdFx0Ly8gc2tpcCBzZXR0aW5nIGFuZCBlbWl0dGluZyBpZiB0aGUgb3B0aW9uIGlzIGFscmVhZHkgYWN0aXZlXG5cdFx0aWYgKHRoaXMuYWN0aXZlKSB7IHJldHVybjsgfVxuXHRcdHRoaXMuYWN0aXZlID0gdHJ1ZTtcblx0XHR0aGlzLnNlbGVjdGVkLmVtaXQodHJ1ZSk7XG5cdH1cbn1cbiJdfQ==