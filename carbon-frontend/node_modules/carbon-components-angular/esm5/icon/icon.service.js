/**
 *
 * carbon-angular v0.0.0 | icon.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { toString } from "@carbon/icon-helpers";
/**
 * Abstract class that represent a cache of icons.
 *
 * The actual caching mechanism will be implementation specific,
 * but it's likely a good idea to key by the icons name and/or size.
 * Icon name and size will always be strings, and they will be the two consistent
 * identifiers of an icon. For the purposes of storage additonal descriptor properties may
 * be used, but the name and size are the only ones guarenteed to be passed for lookup purposes.
 */
var IconCache = /** @class */ (function () {
    function IconCache() {
    }
    return IconCache;
}());
export { IconCache };
/**
 * Custom error for when a name can't be found
 */
var IconNameNotFoundError = /** @class */ (function (_super) {
    tslib_1.__extends(IconNameNotFoundError, _super);
    function IconNameNotFoundError(name) {
        return _super.call(this, "Icon " + name + " not found") || this;
    }
    return IconNameNotFoundError;
}(Error));
export { IconNameNotFoundError };
/**
 * Custom error for when a specific size can't be found
 */
var IconSizeNotFoundError = /** @class */ (function (_super) {
    tslib_1.__extends(IconSizeNotFoundError, _super);
    function IconSizeNotFoundError(size, name) {
        return _super.call(this, "Size ${size} for ${name} not found") || this;
    }
    return IconSizeNotFoundError;
}(Error));
export { IconSizeNotFoundError };
/**
 * Concrete implementation of `IconCache` as a simple in memory cache
 */
var IconMemoryCache = /** @class */ (function (_super) {
    tslib_1.__extends(IconMemoryCache, _super);
    function IconMemoryCache() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.iconMap = new Map();
        return _this;
    }
    IconMemoryCache.prototype.get = function (name, size) {
        if (!this.iconMap.has(name)) {
            throw new IconNameNotFoundError(name);
        }
        var sizeMap = this.iconMap.get(name);
        if (!sizeMap.has(size)) {
            throw new IconSizeNotFoundError(size, name);
        }
        return sizeMap.get(size);
    };
    IconMemoryCache.prototype.set = function (name, size, descriptor) {
        if (!this.iconMap.has(name)) {
            this.iconMap.set(name, new Map());
        }
        var sizeMap = this.iconMap.get(name);
        sizeMap.set(size, descriptor);
    };
    return IconMemoryCache;
}(IconCache));
export { IconMemoryCache };
/**
 * The icon service is a singleton service responsible for registering and retriving icons from `@carbon/icons`.
 *
 * It's important to register icons before use. It's reccommended to register your icons early, likely in your app.component.
 *
 * To allow for improved tree shaking _do not_ import all the icons from `@carbon/icons` and register them.
 * Instead register only the icons in use by your application. If your application makes use of lazy loaded
 * modules you may also lazy load the icons used in that module by registering them early on in that module.
 *
 * `ngOnInit` should be sufficiantly early to register icons.
 *
 * Example:
 * ```
 * import { Accessibility16 } from "@carbon/icons";
 *
 * // ...
 *
 * class MyComponent implements OnInit {
 * 	constructor(protected iconService: IconService) {}
 *
 * 	// ...
 *
 * 	ngOnInit() {
 * 		this.iconService.register(Accessibility16);
 * 	}
 *
 * 	// ...
 * }
 * ```
 *
 * If needed it is possible to register an icon under a different name, via `registerAs`.
 */
var IconService = /** @class */ (function () {
    function IconService() {
        this.iconCache = new IconMemoryCache();
    }
    /**
     * Registers an array of icons based on the metadata provided by `@carbon/cions`
     */
    IconService.prototype.registerAll = function (descriptors) {
        var _this = this;
        descriptors.forEach(function (icon) { return _this.register(icon); });
    };
    /**
     * Registers an icon based on the metadata provided by `@carbon/icons`
     */
    IconService.prototype.register = function (descriptor) {
        var name = descriptor.name;
        this.registerAs(name, descriptor);
    };
    /**
     * Registers an icon based on a uniqe name and metadata provided by `@carbon/icons`
     */
    IconService.prototype.registerAs = function (name, descriptor) {
        var size = descriptor.size;
        this.iconCache.set(name, size.toString(), descriptor);
    };
    /**
     * Gets an icon, converts it to a string, and caches the result
     */
    IconService.prototype.get = function (name, size) {
        try {
            var icon = this.iconCache.get(name, size.toString());
            if (!icon.svg) {
                icon.svg = toString(icon);
            }
            return icon;
        }
        catch (e) {
            throw e;
        }
    };
    /**
     * Configure various service settings (caching strategy ...)
     */
    IconService.prototype.configure = function (options) {
        this.iconCache = options.cache;
    };
    IconService.decorators = [
        { type: Injectable }
    ];
    return IconService;
}());
export { IconService };
//# sourceMappingURL=data:application/json;base64,