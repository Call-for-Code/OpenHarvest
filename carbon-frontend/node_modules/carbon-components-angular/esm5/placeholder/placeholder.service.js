/**
 *
 * carbon-angular v0.0.0 | placeholder.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
/**
 * Singleton service used to register the container for out-of-flow components to insert into.
 * Also used to insert/remove components from that view.
 */
var PlaceholderService = /** @class */ (function () {
    function PlaceholderService() {
        /**
         * Main `ViewContainerRef` to insert components into
         */
        this.viewContainerRef = null;
        /**
         * Map of id's to secondary `ViewContainerRef`s
         */
        this.viewContainerMap = new Map();
    }
    /**
     * Used by `Placeholder` to register view-container reference.
     */
    PlaceholderService.prototype.registerViewContainerRef = function (vcRef, id) {
        if (id) {
            this.viewContainerMap.set(id, vcRef);
        }
        else {
            this.viewContainerRef = vcRef;
        }
    };
    /**
     * Creates and returns component in the view.
     */
    PlaceholderService.prototype.createComponent = function (componentFactory, injector, id) {
        if (id) {
            if (!this.viewContainerMap.has(id)) {
                console.error("No view container with id " + id + " found");
                return;
            }
            return this.viewContainerMap.get(id).createComponent(componentFactory, null, injector);
        }
        if (!this.viewContainerRef) {
            console.error("No view container defined! Likely due to a missing `ibm-placeholder`");
            return;
        }
        return this.viewContainerRef.createComponent(componentFactory, null, injector);
    };
    PlaceholderService.prototype.destroyComponent = function (component) {
        component.destroy();
    };
    PlaceholderService.prototype.hasComponentRef = function (component, id) {
        if (id) {
            return !(this.viewContainerMap.get(id).indexOf(component.hostView) < 0);
        }
        return !(this.viewContainerRef.indexOf(component.hostView) < 0);
    };
    PlaceholderService.prototype.hasPlaceholderRef = function (id) {
        if (id) {
            return this.viewContainerMap.has(id);
        }
        return !!this.viewContainerRef;
    };
    PlaceholderService.prototype.appendElement = function (element, id) {
        if (id) {
            return this.viewContainerMap.get(id).element.nativeElement.appendChild(element);
        }
        return this.viewContainerRef.element.nativeElement.appendChild(element);
    };
    PlaceholderService.prototype.removeElement = function (element, id) {
        if (id) {
            return this.viewContainerMap.get(id).element.nativeElement.removeChild(element);
        }
        return this.viewContainerRef.element.nativeElement.removeChild(element);
    };
    PlaceholderService.prototype.hasElement = function (element, id) {
        if (id) {
            return this.viewContainerMap.get(id).element.nativeElement.contains(element);
        }
        return this.viewContainerRef.element.nativeElement.contains(element);
    };
    PlaceholderService.decorators = [
        { type: Injectable }
    ];
    return PlaceholderService;
}());
export { PlaceholderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvcGxhY2Vob2xkZXIvIiwic291cmNlcyI6WyJwbGFjZWhvbGRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7OztHQUdHO0FBQ0g7SUFBQTtRQUVDOztXQUVHO1FBQ08scUJBQWdCLEdBQXFCLElBQUksQ0FBQztRQUNwRDs7V0FFRztRQUNPLHFCQUFnQixHQUErQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBcUVwRSxDQUFDO0lBcEVBOztPQUVHO0lBQ0gscURBQXdCLEdBQXhCLFVBQXlCLEtBQXVCLEVBQUUsRUFBUTtRQUN6RCxJQUFJLEVBQUUsRUFBRTtZQUNQLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO2FBQU07WUFDTixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1NBQzlCO0lBQ0YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNENBQWUsR0FBZixVQUFnQixnQkFBdUMsRUFBRSxRQUFrQixFQUFFLEVBQVE7UUFDcEYsSUFBSSxFQUFFLEVBQUU7WUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBNkIsRUFBRSxXQUFRLENBQUMsQ0FBQztnQkFDdkQsT0FBTzthQUNQO1lBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDdkY7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztZQUN0RixPQUFPO1NBQ1A7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCw2Q0FBZ0IsR0FBaEIsVUFBaUIsU0FBNEI7UUFDNUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCw0Q0FBZSxHQUFmLFVBQWdCLFNBQTRCLEVBQUUsRUFBUTtRQUNyRCxJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN4RTtRQUVELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCw4Q0FBaUIsR0FBakIsVUFBa0IsRUFBUTtRQUN6QixJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyQztRQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNoQyxDQUFDO0lBRUQsMENBQWEsR0FBYixVQUFjLE9BQW9CLEVBQUUsRUFBUTtRQUMzQyxJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoRjtRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCwwQ0FBYSxHQUFiLFVBQWMsT0FBb0IsRUFBRSxFQUFRO1FBQzNDLElBQUksRUFBRSxFQUFFO1lBQ1AsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELHVDQUFVLEdBQVYsVUFBVyxPQUFvQixFQUFFLEVBQVE7UUFDeEMsSUFBSSxFQUFFLEVBQUU7WUFDUCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0U7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RSxDQUFDOztnQkE3RUQsVUFBVTs7SUE4RVgseUJBQUM7Q0FBQSxBQTlFRCxJQThFQztTQTdFWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnRSZWYsXG5cdFZpZXdDb250YWluZXJSZWYsXG5cdENvbXBvbmVudEZhY3RvcnksXG5cdEluamVjdG9yXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuLyoqXG4gKiBTaW5nbGV0b24gc2VydmljZSB1c2VkIHRvIHJlZ2lzdGVyIHRoZSBjb250YWluZXIgZm9yIG91dC1vZi1mbG93IGNvbXBvbmVudHMgdG8gaW5zZXJ0IGludG8uXG4gKiBBbHNvIHVzZWQgdG8gaW5zZXJ0L3JlbW92ZSBjb21wb25lbnRzIGZyb20gdGhhdCB2aWV3LlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGxhY2Vob2xkZXJTZXJ2aWNlIHtcblx0LyoqXG5cdCAqIE1haW4gYFZpZXdDb250YWluZXJSZWZgIHRvIGluc2VydCBjb21wb25lbnRzIGludG9cblx0ICovXG5cdHByb3RlY3RlZCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmID0gbnVsbDtcblx0LyoqXG5cdCAqIE1hcCBvZiBpZCdzIHRvIHNlY29uZGFyeSBgVmlld0NvbnRhaW5lclJlZmBzXG5cdCAqL1xuXHRwcm90ZWN0ZWQgdmlld0NvbnRhaW5lck1hcDogTWFwPGFueSwgVmlld0NvbnRhaW5lclJlZj4gPSBuZXcgTWFwKCk7XG5cdC8qKlxuXHQgKiBVc2VkIGJ5IGBQbGFjZWhvbGRlcmAgdG8gcmVnaXN0ZXIgdmlldy1jb250YWluZXIgcmVmZXJlbmNlLlxuXHQgKi9cblx0cmVnaXN0ZXJWaWV3Q29udGFpbmVyUmVmKHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpZD86IGFueSk6IHZvaWQge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy52aWV3Q29udGFpbmVyTWFwLnNldChpZCwgdmNSZWYpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnZpZXdDb250YWluZXJSZWYgPSB2Y1JlZjtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbmQgcmV0dXJucyBjb21wb25lbnQgaW4gdGhlIHZpZXcuXG5cdCAqL1xuXHRjcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxhbnk+LCBpbmplY3RvcjogSW5qZWN0b3IsIGlkPzogYW55KTogQ29tcG9uZW50UmVmPGFueT4ge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0aWYgKCF0aGlzLnZpZXdDb250YWluZXJNYXAuaGFzKGlkKSkge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBObyB2aWV3IGNvbnRhaW5lciB3aXRoIGlkICR7aWR9IGZvdW5kYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnZpZXdDb250YWluZXJNYXAuZ2V0KGlkKS5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSwgbnVsbCwgaW5qZWN0b3IpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMudmlld0NvbnRhaW5lclJlZikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIk5vIHZpZXcgY29udGFpbmVyIGRlZmluZWQhIExpa2VseSBkdWUgdG8gYSBtaXNzaW5nIGBpYm0tcGxhY2Vob2xkZXJgXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5LCBudWxsLCBpbmplY3Rvcik7XG5cdH1cblxuXHRkZXN0cm95Q29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4pIHtcblx0XHRjb21wb25lbnQuZGVzdHJveSgpO1xuXHR9XG5cblx0aGFzQ29tcG9uZW50UmVmKGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4sIGlkPzogYW55KSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRyZXR1cm4gISh0aGlzLnZpZXdDb250YWluZXJNYXAuZ2V0KGlkKS5pbmRleE9mKGNvbXBvbmVudC5ob3N0VmlldykgPCAwKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gISh0aGlzLnZpZXdDb250YWluZXJSZWYuaW5kZXhPZihjb21wb25lbnQuaG9zdFZpZXcpIDwgMCk7XG5cdH1cblxuXHRoYXNQbGFjZWhvbGRlclJlZihpZD86IGFueSkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudmlld0NvbnRhaW5lck1hcC5oYXMoaWQpO1xuXHRcdH1cblx0XHRyZXR1cm4gISF0aGlzLnZpZXdDb250YWluZXJSZWY7XG5cdH1cblxuXHRhcHBlbmRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBpZD86IGFueSk6IEhUTUxFbGVtZW50IHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnZpZXdDb250YWluZXJNYXAuZ2V0KGlkKS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXHR9XG5cblx0cmVtb3ZlRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCwgaWQ/OiBhbnkpOiBIVE1MRWxlbWVudCB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyTWFwLmdldChpZCkuZWxlbWVudC5uYXRpdmVFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0fVxuXG5cdGhhc0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGlkPzogYW55KTogYm9vbGVhbiB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyTWFwLmdldChpZCkuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGVsZW1lbnQpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jb250YWlucyhlbGVtZW50KTtcblx0fVxufVxuIl19