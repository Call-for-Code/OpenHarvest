/**
 *
 * carbon-angular v0.0.0 | placeholder.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ViewContainerRef, ViewChild, Input } from "@angular/core";
import { PlaceholderService } from "./placeholder.service";
/**
 * Using a modal, dialog (Tooltip, OverflowMenu), or any other component that draws out of the normal page flow
 * in your application *requires* this component (`ibm-placeholder`).
 * It would generally be placed near the end of your root app component template
 * (app.component.ts or app.component.html) as:
 *
 * ```
 * <ibm-placeholder></ibm-placeholder>
 * ```
 */
var Placeholder = /** @class */ (function () {
    /**
     * Creates an instance of `Placeholder`.
     */
    function Placeholder(placeholderService) {
        this.placeholderService = placeholderService;
    }
    /**
     * Registers the components view with `PlaceholderService`
     */
    Placeholder.prototype.ngOnInit = function () {
        // TODO use `id` to register with the placeholderService
        this.placeholderService.registerViewContainerRef(this.viewContainerRef);
    };
    Placeholder.decorators = [
        { type: Component, args: [{
                    selector: "ibm-placeholder",
                    template: "<div #placeholder></div>"
                }] }
    ];
    /** @nocollapse */
    Placeholder.ctorParameters = function () { return [
        { type: PlaceholderService }
    ]; };
    Placeholder.propDecorators = {
        id: [{ type: Input }],
        viewContainerRef: [{ type: ViewChild, args: ["placeholder", { read: ViewContainerRef, static: true },] }]
    };
    return Placeholder;
}());
export { Placeholder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9wbGFjZWhvbGRlci8iLCJzb3VyY2VzIjpbInBsYWNlaG9sZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUVULGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTNEOzs7Ozs7Ozs7R0FTRztBQUNIO0lBWUM7O09BRUc7SUFDSCxxQkFBbUIsa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBSSxDQUFDO0lBRTlEOztPQUVHO0lBQ0gsOEJBQVEsR0FBUjtRQUNDLHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsa0JBQWtCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDekUsQ0FBQzs7Z0JBdkJELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixRQUFRLEVBQUUsMEJBQTBCO2lCQUNwQzs7OztnQkFmUSxrQkFBa0I7OztxQkFpQnpCLEtBQUs7bUNBS0wsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOztJQWNuRSxrQkFBQztDQUFBLEFBeEJELElBd0JDO1NBcEJZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdE9uSW5pdCxcblx0Vmlld0NvbnRhaW5lclJlZixcblx0Vmlld0NoaWxkLFxuXHRJbnB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUGxhY2Vob2xkZXJTZXJ2aWNlIH0gZnJvbSBcIi4vcGxhY2Vob2xkZXIuc2VydmljZVwiO1xuXG4vKipcbiAqIFVzaW5nIGEgbW9kYWwsIGRpYWxvZyAoVG9vbHRpcCwgT3ZlcmZsb3dNZW51KSwgb3IgYW55IG90aGVyIGNvbXBvbmVudCB0aGF0IGRyYXdzIG91dCBvZiB0aGUgbm9ybWFsIHBhZ2UgZmxvd1xuICogaW4geW91ciBhcHBsaWNhdGlvbiAqcmVxdWlyZXMqIHRoaXMgY29tcG9uZW50IChgaWJtLXBsYWNlaG9sZGVyYCkuXG4gKiBJdCB3b3VsZCBnZW5lcmFsbHkgYmUgcGxhY2VkIG5lYXIgdGhlIGVuZCBvZiB5b3VyIHJvb3QgYXBwIGNvbXBvbmVudCB0ZW1wbGF0ZVxuICogKGFwcC5jb21wb25lbnQudHMgb3IgYXBwLmNvbXBvbmVudC5odG1sKSBhczpcbiAqXG4gKiBgYGBcbiAqIDxpYm0tcGxhY2Vob2xkZXI+PC9pYm0tcGxhY2Vob2xkZXI+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1wbGFjZWhvbGRlclwiLFxuXHR0ZW1wbGF0ZTogYDxkaXYgI3BsYWNlaG9sZGVyPjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgUGxhY2Vob2xkZXIgaW1wbGVtZW50cyBPbkluaXQge1xuXHRASW5wdXQoKSBpZDogYW55O1xuXHQvKipcblx0ICogTWFpbnRhaW5zIGEgcmVmZXJlbmNlIHRvIHRoZSB2aWV3IERPTSBlbGVtZW50IG9mIHRoZSBgUGxhY2Vob2xkZXJgLlxuXHQgKi9cblx0Ly8gQHRzLWlnbm9yZVxuXHRAVmlld0NoaWxkKFwicGxhY2Vob2xkZXJcIiwgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmLCBzdGF0aWM6IHRydWUgfSkgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgUGxhY2Vob2xkZXJgLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocHVibGljIHBsYWNlaG9sZGVyU2VydmljZTogUGxhY2Vob2xkZXJTZXJ2aWNlKSB7IH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIHRoZSBjb21wb25lbnRzIHZpZXcgd2l0aCBgUGxhY2Vob2xkZXJTZXJ2aWNlYFxuXHQgKi9cblx0bmdPbkluaXQoKSB7XG5cdFx0Ly8gVE9ETyB1c2UgYGlkYCB0byByZWdpc3RlciB3aXRoIHRoZSBwbGFjZWhvbGRlclNlcnZpY2Vcblx0XHR0aGlzLnBsYWNlaG9sZGVyU2VydmljZS5yZWdpc3RlclZpZXdDb250YWluZXJSZWYodGhpcy52aWV3Q29udGFpbmVyUmVmKTtcblx0fVxufVxuIl19