/**
 *
 * carbon-angular v0.0.0 | radio.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, EventEmitter } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { RadioChange } from "./radio-change.class";
/**
 * class: Radio (extends Checkbox)
 *
 * selector: `n-radio`
 *
 * source: `src/forms/radio.component.ts`
 *
 * ```html
 * <ibm-radio [(ngModel)]="radioState">Radio</ibm-radio>
 * ```
 *
 * Also see: [`RadioGroup`](#ibm-radio-group)
 */
var Radio = /** @class */ (function () {
    function Radio() {
        this.checked = false;
        this.name = "";
        this.disabled = false;
        this.labelPlacement = "right";
        /**
         * Used to set the `aria-label` attribute on the input label.
         */
        this.ariaLabel = "";
        /**
         * Sets the HTML required attribute
         */
        this.required = false;
        /**
         * The value of the `Radio`.
         */
        this.value = "";
        /**
         * Set to `true` for a loading table.
         */
        this.skeleton = false;
        /**
         * The id for the `Radio`.
         */
        this.id = "radio-" + Radio.radioCount++;
        /**
         * emits when the state of the radio changes
         */
        this.change = new EventEmitter();
        this.hostClass = true;
        this._labelledby = "";
        /**
         * Handler provided by the `RadioGroup` to bubble events up
         */
        this.radioChangeHandler = function (event) { };
    }
    Object.defineProperty(Radio.prototype, "ariaLabelledby", {
        get: function () {
            if (this._labelledby) {
                return this._labelledby;
            }
            return "label-" + this.id;
        },
        set: function (value) {
            this._labelledby = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Radio.prototype, "labelLeft", {
        get: function () {
            return this.labelPlacement === "left";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.
     * Emits the changes of both the `RadioGroup` and `Radio`.
     */
    Radio.prototype.onChange = function (event) {
        event.stopPropagation();
    };
    Radio.prototype.onClick = function (event) {
        this.checked = event.target.checked;
        var radioEvent = new RadioChange(this, this.value);
        this.change.emit(radioEvent);
        this.radioChangeHandler(radioEvent);
    };
    /**
     * Method called by `RadioGroup` with a callback function to bubble `RadioChange` events
     * @param fn callback that expects a `RadioChange` as an argument
     */
    Radio.prototype.registerRadioChangeHandler = function (fn) {
        this.radioChangeHandler = fn;
    };
    /**
     * Used to dynamically create unique ids for the `Radio`.
     */
    Radio.radioCount = 0;
    Radio.decorators = [
        { type: Component, args: [{
                    selector: "ibm-radio",
                    template: "\n\t\t<input\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tclass=\"bx--radio-button\"\n\t\t\ttype=\"radio\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[name]=\"name\"\n\t\t\t[id]=\"id\"\n\t\t\t[required]=\"required\"\n\t\t\t[value]=\"value\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<div *ngIf=\"skeleton\" class=\"bx--radio-button bx--skeleton\"></div>\n\t\t<label\n\t\t\tclass=\"bx--radio-button__label\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\"\n\t\t\t[for]=\"id\"\n\t\t\tid=\"label-{{id}}\">\n\t\t\t<span class=\"bx--radio-button__appearance\"></span>\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: Radio,
                            multi: true
                        }
                    ]
                }] }
    ];
    Radio.propDecorators = {
        checked: [{ type: Input }],
        name: [{ type: Input }],
        disabled: [{ type: Input }],
        labelPlacement: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        required: [{ type: Input }],
        value: [{ type: Input }],
        skeleton: [{ type: Input }],
        id: [{ type: Input }],
        change: [{ type: Output }],
        hostClass: [{ type: HostBinding, args: ["class.bx--radio-button-wrapper",] }],
        labelLeft: [{ type: HostBinding, args: ["class.bx--radio-button-wrapper--label-left",] }]
    };
    return Radio;
}());
export { Radio };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9yYWRpby8iLCJzb3VyY2VzIjpbInJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0g7SUFBQTtRQTJDVSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFFVixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLG1CQUFjLEdBQXNCLE9BQU8sQ0FBQztRQWFyRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFFeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ00sVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNwQjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxPQUFFLEdBQUcsV0FBUyxLQUFLLENBQUMsVUFBVSxFQUFJLENBQUM7UUFDNUM7O1dBRUc7UUFDTyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQWUsQ0FBQztRQUVKLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFNdEQsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFM0I7O1dBRUc7UUFDSCx1QkFBa0IsR0FBRyxVQUFDLEtBQWtCLElBQU0sQ0FBQyxDQUFDO0lBd0JqRCxDQUFDO0lBeEVBLHNCQUFhLGlDQUFjO2FBSTNCO1lBQ0MsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNyQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDeEI7WUFDRCxPQUFPLFdBQVMsSUFBSSxDQUFDLEVBQUksQ0FBQztRQUMzQixDQUFDO2FBVEQsVUFBNEIsS0FBYTtZQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMxQixDQUFDOzs7T0FBQTtJQXFDRCxzQkFBK0QsNEJBQVM7YUFBeEU7WUFDQyxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssTUFBTSxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBU0Q7OztPQUdHO0lBQ0gsd0JBQVEsR0FBUixVQUFTLEtBQVk7UUFDcEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCx1QkFBTyxHQUFQLFVBQVEsS0FBWTtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFJLEtBQUssQ0FBQyxNQUEyQixDQUFDLE9BQU8sQ0FBQztRQUMxRCxJQUFNLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMENBQTBCLEdBQTFCLFVBQTJCLEVBQWdDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQXBGRDs7T0FFRztJQUNJLGdCQUFVLEdBQUcsQ0FBQyxDQUFDOztnQkF6Q3RCLFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLGt3QkEwQlQ7b0JBQ0QsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxLQUFLOzRCQUNsQixLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDtpQkFDRDs7OzBCQU9DLEtBQUs7dUJBRUwsS0FBSzsyQkFFTCxLQUFLO2lDQUVMLEtBQUs7aUNBRUwsS0FBSzs0QkFjTCxLQUFLOzJCQUtMLEtBQUs7d0JBSUwsS0FBSzsyQkFJTCxLQUFLO3FCQUlMLEtBQUs7eUJBSUwsTUFBTTs0QkFFTixXQUFXLFNBQUMsZ0NBQWdDOzRCQUU1QyxXQUFXLFNBQUMsNENBQTRDOztJQWlDMUQsWUFBQztDQUFBLEFBM0hELElBMkhDO1NBdEZZLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRIb3N0QmluZGluZyxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBSYWRpb0NoYW5nZSB9IGZyb20gXCIuL3JhZGlvLWNoYW5nZS5jbGFzc1wiO1xuXG4vKipcbiAqIGNsYXNzOiBSYWRpbyAoZXh0ZW5kcyBDaGVja2JveClcbiAqXG4gKiBzZWxlY3RvcjogYG4tcmFkaW9gXG4gKlxuICogc291cmNlOiBgc3JjL2Zvcm1zL3JhZGlvLmNvbXBvbmVudC50c2BcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLXJhZGlvIFsobmdNb2RlbCldPVwicmFkaW9TdGF0ZVwiPlJhZGlvPC9pYm0tcmFkaW8+XG4gKiBgYGBcbiAqXG4gKiBBbHNvIHNlZTogW2BSYWRpb0dyb3VwYF0oI2libS1yYWRpby1ncm91cClcbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1yYWRpb1wiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxpbnB1dFxuXHRcdFx0Km5nSWY9XCIhc2tlbGV0b25cIlxuXHRcdFx0Y2xhc3M9XCJieC0tcmFkaW8tYnV0dG9uXCJcblx0XHRcdHR5cGU9XCJyYWRpb1wiXG5cdFx0XHRbY2hlY2tlZF09XCJjaGVja2VkXCJcblx0XHRcdFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG5cdFx0XHRbbmFtZV09XCJuYW1lXCJcblx0XHRcdFtpZF09XCJpZFwiXG5cdFx0XHRbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuXHRcdFx0W3ZhbHVlXT1cInZhbHVlXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG5cdFx0XHQoY2hhbmdlKT1cIm9uQ2hhbmdlKCRldmVudClcIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiPlxuXHRcdDxkaXYgKm5nSWY9XCJza2VsZXRvblwiIGNsYXNzPVwiYngtLXJhZGlvLWJ1dHRvbiBieC0tc2tlbGV0b25cIj48L2Rpdj5cblx0XHQ8bGFiZWxcblx0XHRcdGNsYXNzPVwiYngtLXJhZGlvLWJ1dHRvbl9fbGFiZWxcIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuXHRcdFx0W25nQ2xhc3NdPVwie1xuXHRcdFx0XHQnYngtLXNrZWxldG9uJzogc2tlbGV0b25cblx0XHRcdH1cIlxuXHRcdFx0W2Zvcl09XCJpZFwiXG5cdFx0XHRpZD1cImxhYmVsLXt7aWR9fVwiPlxuXHRcdFx0PHNwYW4gY2xhc3M9XCJieC0tcmFkaW8tYnV0dG9uX19hcHBlYXJhbmNlXCI+PC9zcGFuPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvbGFiZWw+XG5cdGAsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IFJhZGlvLFxuXHRcdFx0bXVsdGk6IHRydWVcblx0XHR9XG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgUmFkaW8ge1xuXHQvKipcblx0ICogVXNlZCB0byBkeW5hbWljYWxseSBjcmVhdGUgdW5pcXVlIGlkcyBmb3IgdGhlIGBSYWRpb2AuXG5cdCAqL1xuXHRzdGF0aWMgcmFkaW9Db3VudCA9IDA7XG5cblx0QElucHV0KCkgY2hlY2tlZCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIG5hbWUgPSBcIlwiO1xuXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cblx0QElucHV0KCkgbGFiZWxQbGFjZW1lbnQ6IFwicmlnaHRcIiB8IFwibGVmdFwiID0gIFwicmlnaHRcIjtcblxuXHRASW5wdXQoKSBzZXQgYXJpYUxhYmVsbGVkYnkodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX2xhYmVsbGVkYnkgPSB2YWx1ZTtcblx0fVxuXG5cdGdldCBhcmlhTGFiZWxsZWRieSgpIHtcblx0XHRpZiAodGhpcy5fbGFiZWxsZWRieSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2xhYmVsbGVkYnk7XG5cdFx0fVxuXHRcdHJldHVybiBgbGFiZWwtJHt0aGlzLmlkfWA7XG5cdH1cblxuXHQvKipcblx0ICogVXNlZCB0byBzZXQgdGhlIGBhcmlhLWxhYmVsYCBhdHRyaWJ1dGUgb24gdGhlIGlucHV0IGxhYmVsLlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsID0gXCJcIjtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgSFRNTCByZXF1aXJlZCBhdHRyaWJ1dGVcblx0ICovXG5cdEBJbnB1dCgpIHJlcXVpcmVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBUaGUgdmFsdWUgb2YgdGhlIGBSYWRpb2AuXG5cdCAqL1xuXHRASW5wdXQoKSB2YWx1ZSA9IFwiXCI7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIGZvciBhIGxvYWRpbmcgdGFibGUuXG5cdCAqL1xuXHRASW5wdXQoKSBza2VsZXRvbiA9IGZhbHNlO1xuXHQvKipcblx0ICogVGhlIGlkIGZvciB0aGUgYFJhZGlvYC5cblx0ICovXG5cdEBJbnB1dCgpIGlkID0gYHJhZGlvLSR7UmFkaW8ucmFkaW9Db3VudCsrfWA7XG5cdC8qKlxuXHQgKiBlbWl0cyB3aGVuIHRoZSBzdGF0ZSBvZiB0aGUgcmFkaW8gY2hhbmdlc1xuXHQgKi9cblx0QE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UmFkaW9DaGFuZ2U+KCk7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXJhZGlvLWJ1dHRvbi13cmFwcGVyXCIpIGhvc3RDbGFzcyA9IHRydWU7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXJhZGlvLWJ1dHRvbi13cmFwcGVyLS1sYWJlbC1sZWZ0XCIpIGdldCBsYWJlbExlZnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMubGFiZWxQbGFjZW1lbnQgPT09IFwibGVmdFwiO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9sYWJlbGxlZGJ5ID0gXCJcIjtcblxuXHQvKipcblx0ICogSGFuZGxlciBwcm92aWRlZCBieSB0aGUgYFJhZGlvR3JvdXBgIHRvIGJ1YmJsZSBldmVudHMgdXBcblx0ICovXG5cdHJhZGlvQ2hhbmdlSGFuZGxlciA9IChldmVudDogUmFkaW9DaGFuZ2UpID0+IHt9O1xuXG5cdC8qKlxuXHQgKiBTeW5jaHJvbml6ZXMgd2l0aCB0aGUgYFJhZGlvR3JvdXBgIGluIHRoZSBldmVudCBvZiBhIGNoYW5nZWQgYFJhZGlvYC5cblx0ICogRW1pdHMgdGhlIGNoYW5nZXMgb2YgYm90aCB0aGUgYFJhZGlvR3JvdXBgIGFuZCBgUmFkaW9gLlxuXHQgKi9cblx0b25DaGFuZ2UoZXZlbnQ6IEV2ZW50KSB7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cblxuXHRvbkNsaWNrKGV2ZW50OiBFdmVudCkge1xuXHRcdHRoaXMuY2hlY2tlZCA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZDtcblx0XHRjb25zdCByYWRpb0V2ZW50ID0gbmV3IFJhZGlvQ2hhbmdlKHRoaXMsIHRoaXMudmFsdWUpO1xuXHRcdHRoaXMuY2hhbmdlLmVtaXQocmFkaW9FdmVudCk7XG5cdFx0dGhpcy5yYWRpb0NoYW5nZUhhbmRsZXIocmFkaW9FdmVudCk7XG5cdH1cblxuXHQvKipcblx0ICogTWV0aG9kIGNhbGxlZCBieSBgUmFkaW9Hcm91cGAgd2l0aCBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJ1YmJsZSBgUmFkaW9DaGFuZ2VgIGV2ZW50c1xuXHQgKiBAcGFyYW0gZm4gY2FsbGJhY2sgdGhhdCBleHBlY3RzIGEgYFJhZGlvQ2hhbmdlYCBhcyBhbiBhcmd1bWVudFxuXHQgKi9cblx0cmVnaXN0ZXJSYWRpb0NoYW5nZUhhbmRsZXIoZm46IChldmVudDogUmFkaW9DaGFuZ2UpID0+IHZvaWQpIHtcblx0XHR0aGlzLnJhZGlvQ2hhbmdlSGFuZGxlciA9IGZuO1xuXHR9XG59XG4iXX0=