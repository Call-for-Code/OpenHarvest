/**
 *
 * carbon-angular v0.0.0 | radio-group.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ContentChildren, Component, EventEmitter, forwardRef, Input, Output, QueryList, HostBinding } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { Radio } from "./radio.component";
/**
 * [See demo](../../?path=/story/radio--basic)
 *
 * class: RadioGroup
 *
 * selector: `ibm-radio-group`
 *
 * source: `src/forms/radio.component.ts`
 *
 *
 * Ex:
 * ```html
 * <ibm-radio-group [(ngModel)]="radio">
 * 	<ibm-radio *ngFor="let one of manyRadios" [value]="one">
 *		Radio {{one}}
 * 	</ibm-radio>
 * </ibm-radio-group>
 *
 * Radio selected: {{radio}}
 * ```
 *
 * ```typescript
 * manyRadios = ["one", "two", "three", "four", "five", "six"];
 * ```
 *
 * Also see: [`Radio`](#ibm-radio)
 *
 * <example-url>../../iframe.html?id=radio--basic</example-url>
 */
var RadioGroup = /** @class */ (function () {
    function RadioGroup() {
        this.orientation = "horizontal";
        this.labelPlacement = "right";
        /**
         * Emits event notifying other classes of a change using a `RadioChange` class.
         */
        this.change = new EventEmitter();
        /**
         * Set to true to disable the whole radio group
         */
        this.disabled = false;
        /**
         * Binds 'bx--form-item' value to the class for `RadioGroup`.
         */
        this.radioButtonGroupClass = true;
        /**
         * To track whether the `RadioGroup` has been initialized.
         */
        this.isInitialized = false;
        /**
         * Reflects whether or not the input is disabled and cannot be selected.
         */
        this._disabled = false;
        /**
         * Reflects whether or not the dropdown is loading.
         */
        this._skeleton = false;
        /**
         * The value of the selected option within the `RadioGroup`.
         */
        this._value = null;
        /**
         * The `Radio` within the `RadioGroup` that is selected.
         */
        this._selected = null;
        /**
         * The name attribute associated with the `RadioGroup`.
         */
        this._name = "radio-group-" + RadioGroup.radioGroupCount++;
        /**
         * Needed to properly implement ControlValueAccessor.
         */
        this.onTouched = function () { };
        /**
         * Method set in registerOnChange to propagate changes back to the form.
         */
        this.propagateChange = function (_) { };
    }
    Object.defineProperty(RadioGroup.prototype, "selected", {
        /**
         * Returns the `Radio` that is selected within the `RadioGroup`.
         */
        get: function () {
            return this._selected;
        },
        /**
         * Sets the passed in `Radio` item as the selected input within the `RadioGroup`.
         */
        set: function (selected) {
            this._selected = selected;
            this.value = selected ? selected.value : null;
            this.checkSelectedRadio();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroup.prototype, "value", {
        /**
         * Returns the value/state of the selected `Radio` within the `RadioGroup`.
         */
        get: function () {
            return this._value;
        },
        /**
         * Sets the value/state of the selected `Radio` within the `RadioGroup` to the passed in value.
         */
        set: function (newValue) {
            if (this._value !== newValue) {
                this._value = newValue;
                this.updateSelectedRadioFromValue();
                this.checkSelectedRadio();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroup.prototype, "name", {
        /**
         * Returns the associated name of the `RadioGroup`.
         */
        get: function () {
            return this._name;
        },
        /**
         * Replaces the name associated with the `RadioGroup` with the provided parameter.
         */
        set: function (name) {
            this._name = name;
            this.updateRadios();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioGroup.prototype, "skeleton", {
        /**
         * Returns the skeleton value in the `RadioGroup` if there is one.
         */
        get: function () {
            return this._skeleton;
        },
        /**
         * Sets the skeleton value for all `Radio` to the skeleton value of `RadioGroup`.
         */
        set: function (value) {
            this._skeleton = value;
            this.updateChildren();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates the selected `Radio` to be checked (selected).
     */
    RadioGroup.prototype.checkSelectedRadio = function () {
        if (this.selected && !this._selected.checked) {
            this.selected.checked = true;
        }
    };
    /**
     * Use the value of the `RadioGroup` to update the selected radio to the right state (selected state).
     */
    RadioGroup.prototype.updateSelectedRadioFromValue = function () {
        var _this = this;
        var alreadySelected = this._selected != null && this._selected.value === this._value;
        if (this.radios && !alreadySelected) {
            this._selected = null;
            this.radios.forEach(function (radio) {
                if (radio.checked || radio.value === _this._value) {
                    _this._selected = radio;
                }
            });
        }
    };
    /**
     * Creates a class of `RadioChange` to emit the change in the `RadioGroup`.
     */
    RadioGroup.prototype.emitChangeEvent = function (event) {
        this.change.emit(event);
        this.propagateChange(event.value);
        this.onTouched();
    };
    /**
     * Synchronizes radio properties.
     */
    RadioGroup.prototype.updateRadios = function () {
        var _this = this;
        if (this.radios) {
            setTimeout(function () {
                _this.radios.forEach(function (radio) { return radio.name = _this.name; });
                if (_this.labelPlacement === "left") {
                    _this.radios.forEach(function (radio) { return radio.labelPlacement = "left"; });
                }
            });
        }
    };
    /**
     * Updates the value of the `RadioGroup` using the provided parameter.
     */
    RadioGroup.prototype.writeValue = function (value) {
        var _this = this;
        this.value = value;
        setTimeout(function () {
            _this.updateSelectedRadioFromValue();
            _this.checkSelectedRadio();
        });
    };
    RadioGroup.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.radios.changes.subscribe(function () {
            _this.updateRadios();
            _this.updateRadioChangeHandler();
        });
        this.updateChildren();
        this.updateRadioChangeHandler();
    };
    RadioGroup.prototype.ngAfterViewInit = function () {
        this.updateRadios();
    };
    /**
     * Used to set method to propagate changes back to the form.
     */
    RadioGroup.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the checkbox is touched.
     */
    RadioGroup.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    RadioGroup.prototype.updateChildren = function () {
        var _this = this;
        if (this.radios) {
            this.radios.forEach(function (child) { return child.skeleton = _this.skeleton; });
        }
    };
    RadioGroup.prototype.updateRadioChangeHandler = function () {
        var _this = this;
        this.radios.forEach(function (radio) {
            radio.registerRadioChangeHandler(function (event) {
                // update selected and value from the event
                _this._selected = event.source;
                _this._value = event.value;
                // bubble the event
                _this.emitChangeEvent(event);
            });
        });
    };
    /**
     * Used for creating the `RadioGroup` 'name' property dynamically.
     */
    RadioGroup.radioGroupCount = 0;
    RadioGroup.decorators = [
        { type: Component, args: [{
                    selector: "ibm-radio-group",
                    template: "\n\t\t<div\n\t\t\tclass=\"bx--radio-button-group\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--radio-button-group--vertical': orientation === 'vertical',\n\t\t\t\t'bx--radio-button-group--label-left': orientation === 'vertical' && labelPlacement === 'left'\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RadioGroup,
                            multi: true
                        }
                    ]
                }] }
    ];
    RadioGroup.propDecorators = {
        orientation: [{ type: Input }],
        labelPlacement: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        change: [{ type: Output }],
        radios: [{ type: ContentChildren, args: [forwardRef(function () { return Radio; }),] }],
        selected: [{ type: Input }],
        value: [{ type: Input }],
        name: [{ type: Input }],
        disabled: [{ type: Input }],
        skeleton: [{ type: Input }],
        radioButtonGroupClass: [{ type: HostBinding, args: ["class.bx--form-item",] }]
    };
    return RadioGroup;
}());
export { RadioGroup };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9yYWRpby8iLCJzb3VyY2VzIjpbInJhZGlvLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRU4sZUFBZSxFQUNmLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFFWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNEJHO0FBQ0g7SUFBQTtRQTRCVSxnQkFBVyxHQUE4QixZQUFZLENBQUM7UUFFdEQsbUJBQWMsR0FBc0IsT0FBTyxDQUFDO1FBYXJEOztXQUVHO1FBQ08sV0FBTSxHQUE4QixJQUFJLFlBQVksRUFBZSxDQUFDO1FBNEQ5RTs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFrQjFCOztXQUVHO1FBQ2lDLDBCQUFxQixHQUFHLElBQUksQ0FBQztRQUVqRTs7V0FFRztRQUNPLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2hDOztXQUVHO1FBQ08sY0FBUyxHQUFHLEtBQUssQ0FBQztRQUM1Qjs7V0FFRztRQUNPLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDNUI7O1dBRUc7UUFDTyxXQUFNLEdBQVEsSUFBSSxDQUFDO1FBQzdCOztXQUVHO1FBQ08sY0FBUyxHQUFVLElBQUksQ0FBQztRQUNsQzs7V0FFRztRQUNPLFVBQUssR0FBRyxpQkFBZSxVQUFVLENBQUMsZUFBZSxFQUFJLENBQUM7UUF5RmhFOztXQUVHO1FBQ0gsY0FBUyxHQUFjLGNBQU8sQ0FBQyxDQUFDO1FBRWhDOztXQUVHO1FBQ0gsb0JB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QUFDOzJCQUt2QyxLQUFLO3dCQWlCTCxLQUFLO3VCQW9CTCxLQUFLOzJCQWVMLEtBQUs7MkJBS0wsS0FBSzt3Q0FnQkwsV0FBVyxTQUFDLHFCQUFxQjs7SUE2SW5DLGlCQUFDO0NBQUEsQUEvUUQsSUErUUM7U0F6UFksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEFmdGVyQ29udGVudEluaXQsXG5cdENvbnRlbnRDaGlsZHJlbixcblx0Q29tcG9uZW50LFxuXHRFdmVudEVtaXR0ZXIsXG5cdGZvcndhcmRSZWYsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdFF1ZXJ5TGlzdCxcblx0SG9zdEJpbmRpbmcsXG5cdEFmdGVyVmlld0luaXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgUmFkaW8gfSBmcm9tIFwiLi9yYWRpby5jb21wb25lbnRcIjtcbmltcG9ydCB7IFJhZGlvQ2hhbmdlIH0gZnJvbSBcIi4vcmFkaW8tY2hhbmdlLmNsYXNzXCI7XG5cbi8qKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvcmFkaW8tLWJhc2ljKVxuICpcbiAqIGNsYXNzOiBSYWRpb0dyb3VwXG4gKlxuICogc2VsZWN0b3I6IGBpYm0tcmFkaW8tZ3JvdXBgXG4gKlxuICogc291cmNlOiBgc3JjL2Zvcm1zL3JhZGlvLmNvbXBvbmVudC50c2BcbiAqXG4gKlxuICogRXg6XG4gKiBgYGBodG1sXG4gKiA8aWJtLXJhZGlvLWdyb3VwIFsobmdNb2RlbCldPVwicmFkaW9cIj5cbiAqIFx0PGlibS1yYWRpbyAqbmdGb3I9XCJsZXQgb25lIG9mIG1hbnlSYWRpb3NcIiBbdmFsdWVdPVwib25lXCI+XG4gKlx0XHRSYWRpbyB7e29uZX19XG4gKiBcdDwvaWJtLXJhZGlvPlxuICogPC9pYm0tcmFkaW8tZ3JvdXA+XG4gKlxuICogUmFkaW8gc2VsZWN0ZWQ6IHt7cmFkaW99fVxuICogYGBgXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogbWFueVJhZGlvcyA9IFtcIm9uZVwiLCBcInR3b1wiLCBcInRocmVlXCIsIFwiZm91clwiLCBcImZpdmVcIiwgXCJzaXhcIl07XG4gKiBgYGBcbiAqXG4gKiBBbHNvIHNlZTogW2BSYWRpb2BdKCNpYm0tcmFkaW8pXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPXJhZGlvLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tcmFkaW8tZ3JvdXBcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8ZGl2XG5cdFx0XHRjbGFzcz1cImJ4LS1yYWRpby1idXR0b24tZ3JvdXBcIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cImFyaWFMYWJlbGxlZGJ5XCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2J4LS1yYWRpby1idXR0b24tZ3JvdXAtLXZlcnRpY2FsJzogb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcsXG5cdFx0XHRcdCdieC0tcmFkaW8tYnV0dG9uLWdyb3VwLS1sYWJlbC1sZWZ0Jzogb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgbGFiZWxQbGFjZW1lbnQgPT09ICdsZWZ0J1xuXHRcdFx0fVwiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvZGl2PlxuXHRgLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcblx0XHRcdHVzZUV4aXN0aW5nOiBSYWRpb0dyb3VwLFxuXHRcdFx0bXVsdGk6IHRydWVcblx0XHR9XG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcblx0LyoqXG5cdCAqIFVzZWQgZm9yIGNyZWF0aW5nIHRoZSBgUmFkaW9Hcm91cGAgJ25hbWUnIHByb3BlcnR5IGR5bmFtaWNhbGx5LlxuXHQgKi9cblx0c3RhdGljIHJhZGlvR3JvdXBDb3VudCA9IDA7XG5cblx0QElucHV0KCkgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiID0gXCJob3Jpem9udGFsXCI7XG5cblx0QElucHV0KCkgbGFiZWxQbGFjZW1lbnQ6IFwicmlnaHRcIiB8IFwibGVmdFwiID0gIFwicmlnaHRcIjtcblxuXHQvKipcblx0ICogVXNlZCB0byBzZXQgdGhlIGBhcmlhLWxhYmVsYCBhdHRyaWJ1dGUgb24gdGhlIHJhZGlvIGdyb3VwIGVsZW1lbnQuXG5cdCAqL1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG5cdEBJbnB1dCgpIGFyaWFMYWJlbDogc3RyaW5nO1xuXHQvKipcblx0ICogVXNlZCB0byBzZXQgdGhlIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZSBvbiB0aGUgcmFkaW8gZ3JvdXAgZWxlbWVudC5cblx0ICovXG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcblx0QElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcblxuXHQvKipcblx0ICogRW1pdHMgZXZlbnQgbm90aWZ5aW5nIG90aGVyIGNsYXNzZXMgb2YgYSBjaGFuZ2UgdXNpbmcgYSBgUmFkaW9DaGFuZ2VgIGNsYXNzLlxuXHQgKi9cblx0QE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPFJhZGlvQ2hhbmdlPiA9IG5ldyBFdmVudEVtaXR0ZXI8UmFkaW9DaGFuZ2U+KCk7XG5cblx0LyoqXG5cdCAqIFRoZSBgUmFkaW9gIGlucHV0IGl0ZW1zIGluIHRoZSBgUmFkaW9Hcm91cGAuXG5cdCAqL1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcblx0QENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFJhZGlvKSkgcmFkaW9zOiBRdWVyeUxpc3Q8UmFkaW8+O1xuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwYXNzZWQgaW4gYFJhZGlvYCBpdGVtIGFzIHRoZSBzZWxlY3RlZCBpbnB1dCB3aXRoaW4gdGhlIGBSYWRpb0dyb3VwYC5cblx0ICovXG5cdEBJbnB1dCgpXG5cdHNldCBzZWxlY3RlZChzZWxlY3RlZDogUmFkaW8gfCBudWxsKSB7XG5cdFx0dGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3RlZDtcblx0XHR0aGlzLnZhbHVlID0gc2VsZWN0ZWQgPyBzZWxlY3RlZC52YWx1ZSA6IG51bGw7XG5cdFx0dGhpcy5jaGVja1NlbGVjdGVkUmFkaW8oKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBgUmFkaW9gIHRoYXQgaXMgc2VsZWN0ZWQgd2l0aGluIHRoZSBgUmFkaW9Hcm91cGAuXG5cdCAqL1xuXHRnZXQgc2VsZWN0ZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZhbHVlL3N0YXRlIG9mIHRoZSBzZWxlY3RlZCBgUmFkaW9gIHdpdGhpbiB0aGUgYFJhZGlvR3JvdXBgIHRvIHRoZSBwYXNzZWQgaW4gdmFsdWUuXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRzZXQgdmFsdWUobmV3VmFsdWU6IGFueSkge1xuXHRcdGlmICh0aGlzLl92YWx1ZSAhPT0gbmV3VmFsdWUpIHtcblx0XHRcdHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG5cblx0XHRcdHRoaXMudXBkYXRlU2VsZWN0ZWRSYWRpb0Zyb21WYWx1ZSgpO1xuXHRcdFx0dGhpcy5jaGVja1NlbGVjdGVkUmFkaW8oKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmFsdWUvc3RhdGUgb2YgdGhlIHNlbGVjdGVkIGBSYWRpb2Agd2l0aGluIHRoZSBgUmFkaW9Hcm91cGAuXG5cdCAqL1xuXHRnZXQgdmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbHVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlcGxhY2VzIHRoZSBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgYFJhZGlvR3JvdXBgIHdpdGggdGhlIHByb3ZpZGVkIHBhcmFtZXRlci5cblx0ICovXG5cdEBJbnB1dCgpXG5cdHNldCBuYW1lKG5hbWU6IHN0cmluZykge1xuXHRcdHRoaXMuX25hbWUgPSBuYW1lO1xuXHRcdHRoaXMudXBkYXRlUmFkaW9zKCk7XG5cdH1cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFzc29jaWF0ZWQgbmFtZSBvZiB0aGUgYFJhZGlvR3JvdXBgLlxuXHQgKi9cblx0Z2V0IG5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX25hbWU7XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRvIHRydWUgdG8gZGlzYWJsZSB0aGUgd2hvbGUgcmFkaW8gZ3JvdXBcblx0ICovXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNrZWxldG9uIHZhbHVlIGluIHRoZSBgUmFkaW9Hcm91cGAgaWYgdGhlcmUgaXMgb25lLlxuXHQgKi9cblx0QElucHV0KClcblx0Z2V0IHNrZWxldG9uKCk6IGFueSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NrZWxldG9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHNrZWxldG9uIHZhbHVlIGZvciBhbGwgYFJhZGlvYCB0byB0aGUgc2tlbGV0b24gdmFsdWUgb2YgYFJhZGlvR3JvdXBgLlxuXHQgKi9cblx0c2V0IHNrZWxldG9uKHZhbHVlOiBhbnkpIHtcblx0XHR0aGlzLl9za2VsZXRvbiA9IHZhbHVlO1xuXHRcdHRoaXMudXBkYXRlQ2hpbGRyZW4oKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaW5kcyAnYngtLWZvcm0taXRlbScgdmFsdWUgdG8gdGhlIGNsYXNzIGZvciBgUmFkaW9Hcm91cGAuXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tZm9ybS1pdGVtXCIpIHJhZGlvQnV0dG9uR3JvdXBDbGFzcyA9IHRydWU7XG5cblx0LyoqXG5cdCAqIFRvIHRyYWNrIHdoZXRoZXIgdGhlIGBSYWRpb0dyb3VwYCBoYXMgYmVlbiBpbml0aWFsaXplZC5cblx0ICovXG5cdHByb3RlY3RlZCBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBSZWZsZWN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgaXMgZGlzYWJsZWQgYW5kIGNhbm5vdCBiZSBzZWxlY3RlZC5cblx0ICovXG5cdHByb3RlY3RlZCBfZGlzYWJsZWQgPSBmYWxzZTtcblx0LyoqXG5cdCAqIFJlZmxlY3RzIHdoZXRoZXIgb3Igbm90IHRoZSBkcm9wZG93biBpcyBsb2FkaW5nLlxuXHQgKi9cblx0cHJvdGVjdGVkIF9za2VsZXRvbiA9IGZhbHNlO1xuXHQvKipcblx0ICogVGhlIHZhbHVlIG9mIHRoZSBzZWxlY3RlZCBvcHRpb24gd2l0aGluIHRoZSBgUmFkaW9Hcm91cGAuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX3ZhbHVlOiBhbnkgPSBudWxsO1xuXHQvKipcblx0ICogVGhlIGBSYWRpb2Agd2l0aGluIHRoZSBgUmFkaW9Hcm91cGAgdGhhdCBpcyBzZWxlY3RlZC5cblx0ICovXG5cdHByb3RlY3RlZCBfc2VsZWN0ZWQ6IFJhZGlvID0gbnVsbDtcblx0LyoqXG5cdCAqIFRoZSBuYW1lIGF0dHJpYnV0ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGBSYWRpb0dyb3VwYC5cblx0ICovXG5cdHByb3RlY3RlZCBfbmFtZSA9IGByYWRpby1ncm91cC0ke1JhZGlvR3JvdXAucmFkaW9Hcm91cENvdW50Kyt9YDtcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgc2VsZWN0ZWQgYFJhZGlvYCB0byBiZSBjaGVja2VkIChzZWxlY3RlZCkuXG5cdCAqL1xuXHRjaGVja1NlbGVjdGVkUmFkaW8oKSB7XG5cdFx0aWYgKHRoaXMuc2VsZWN0ZWQgJiYgIXRoaXMuX3NlbGVjdGVkLmNoZWNrZWQpIHtcblx0XHRcdHRoaXMuc2VsZWN0ZWQuY2hlY2tlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFVzZSB0aGUgdmFsdWUgb2YgdGhlIGBSYWRpb0dyb3VwYCB0byB1cGRhdGUgdGhlIHNlbGVjdGVkIHJhZGlvIHRvIHRoZSByaWdodCBzdGF0ZSAoc2VsZWN0ZWQgc3RhdGUpLlxuXHQgKi9cblx0dXBkYXRlU2VsZWN0ZWRSYWRpb0Zyb21WYWx1ZSgpIHtcblx0XHRsZXQgYWxyZWFkeVNlbGVjdGVkID0gdGhpcy5fc2VsZWN0ZWQgIT0gbnVsbCAmJiB0aGlzLl9zZWxlY3RlZC52YWx1ZSA9PT0gdGhpcy5fdmFsdWU7XG5cdFx0aWYgKHRoaXMucmFkaW9zICYmICFhbHJlYWR5U2VsZWN0ZWQpIHtcblx0XHRcdHRoaXMuX3NlbGVjdGVkID0gbnVsbDtcblx0XHRcdHRoaXMucmFkaW9zLmZvckVhY2gocmFkaW8gPT4ge1xuXHRcdFx0XHRpZiAocmFkaW8uY2hlY2tlZCB8fCByYWRpby52YWx1ZSA9PT0gdGhpcy5fdmFsdWUpIHtcblx0XHRcdFx0XHR0aGlzLl9zZWxlY3RlZCA9IHJhZGlvO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGNsYXNzIG9mIGBSYWRpb0NoYW5nZWAgdG8gZW1pdCB0aGUgY2hhbmdlIGluIHRoZSBgUmFkaW9Hcm91cGAuXG5cdCAqL1xuXHRlbWl0Q2hhbmdlRXZlbnQoZXZlbnQ6IFJhZGlvQ2hhbmdlKSB7XG5cdFx0dGhpcy5jaGFuZ2UuZW1pdChldmVudCk7XG5cdFx0dGhpcy5wcm9wYWdhdGVDaGFuZ2UoZXZlbnQudmFsdWUpO1xuXHRcdHRoaXMub25Ub3VjaGVkKCk7XG5cdH1cblxuXHQvKipcblx0ICogU3luY2hyb25pemVzIHJhZGlvIHByb3BlcnRpZXMuXG5cdCAqL1xuXHR1cGRhdGVSYWRpb3MoKSB7XG5cdFx0aWYgKHRoaXMucmFkaW9zKSB7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy5yYWRpb3MuZm9yRWFjaChyYWRpbyA9PiByYWRpby5uYW1lID0gdGhpcy5uYW1lKTtcblx0XHRcdFx0aWYgKHRoaXMubGFiZWxQbGFjZW1lbnQgPT09IFwibGVmdFwiKSB7XG5cdFx0XHRcdFx0dGhpcy5yYWRpb3MuZm9yRWFjaChyYWRpbyA9PiByYWRpby5sYWJlbFBsYWNlbWVudCA9IFwibGVmdFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSBgUmFkaW9Hcm91cGAgdXNpbmcgdGhlIHByb3ZpZGVkIHBhcmFtZXRlci5cblx0ICovXG5cdHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlU2VsZWN0ZWRSYWRpb0Zyb21WYWx1ZSgpO1xuXHRcdFx0dGhpcy5jaGVja1NlbGVjdGVkUmFkaW8oKTtcblx0XHR9KTtcblx0fVxuXG5cdG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblx0XHR0aGlzLnJhZGlvcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0XHR0aGlzLnVwZGF0ZVJhZGlvcygpO1xuXHRcdFx0dGhpcy51cGRhdGVSYWRpb0NoYW5nZUhhbmRsZXIoKTtcblx0XHR9KTtcblxuXHRcdHRoaXMudXBkYXRlQ2hpbGRyZW4oKTtcblx0XHR0aGlzLnVwZGF0ZVJhZGlvQ2hhbmdlSGFuZGxlcigpO1xuXHR9XG5cblx0bmdBZnRlclZpZXdJbml0KCkge1xuXHRcdHRoaXMudXBkYXRlUmFkaW9zKCk7XG5cdH1cblxuXHQvKipcblx0ICogVXNlZCB0byBzZXQgbWV0aG9kIHRvIHByb3BhZ2F0ZSBjaGFuZ2VzIGJhY2sgdG8gdGhlIGZvcm0uXG5cdCAqL1xuXHRwdWJsaWMgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XG5cdFx0dGhpcy5wcm9wYWdhdGVDaGFuZ2UgPSBmbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiB0b3VjaGVkLlxuXHQgKiBAcGFyYW0gZm4gQ2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHRvdWNoZWQuXG5cdCAqL1xuXHRwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuXHRcdHRoaXMub25Ub3VjaGVkID0gZm47XG5cdH1cblxuXHQvKipcblx0ICogTmVlZGVkIHRvIHByb3Blcmx5IGltcGxlbWVudCBDb250cm9sVmFsdWVBY2Nlc3Nvci5cblx0ICovXG5cdG9uVG91Y2hlZDogKCkgPT4gYW55ID0gKCkgPT4ge307XG5cblx0LyoqXG5cdCAqIE1ldGhvZCBzZXQgaW4gcmVnaXN0ZXJPbkNoYW5nZSB0byBwcm9wYWdhdGUgY2hhbmdlcyBiYWNrIHRvIHRoZSBmb3JtLlxuXHQgKi9cblx0cHJvcGFnYXRlQ2hhbmdlID0gKF86IGFueSkgPT4ge307XG5cblx0cHJvdGVjdGVkIHVwZGF0ZUNoaWxkcmVuKCkge1xuXHRcdGlmICh0aGlzLnJhZGlvcykge1xuXHRcdFx0dGhpcy5yYWRpb3MuZm9yRWFjaChjaGlsZCA9PiBjaGlsZC5za2VsZXRvbiA9IHRoaXMuc2tlbGV0b24pO1xuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCB1cGRhdGVSYWRpb0NoYW5nZUhhbmRsZXIoKSB7XG5cdFx0dGhpcy5yYWRpb3MuZm9yRWFjaChyYWRpbyA9PiB7XG5cdFx0XHRyYWRpby5yZWdpc3RlclJhZGlvQ2hhbmdlSGFuZGxlcigoZXZlbnQ6IFJhZGlvQ2hhbmdlKSA9PiB7XG5cdFx0XHRcdC8vIHVwZGF0ZSBzZWxlY3RlZCBhbmQgdmFsdWUgZnJvbSB0aGUgZXZlbnRcblx0XHRcdFx0dGhpcy5fc2VsZWN0ZWQgPSBldmVudC5zb3VyY2U7XG5cdFx0XHRcdHRoaXMuX3ZhbHVlID0gZXZlbnQudmFsdWU7XG5cdFx0XHRcdC8vIGJ1YmJsZSB0aGUgZXZlbnRcblx0XHRcdFx0dGhpcy5lbWl0Q2hhbmdlRXZlbnQoZXZlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==