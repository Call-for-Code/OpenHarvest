/**
 *
 * carbon-angular v0.0.0 | carbon-flatpickr-month-select.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This is from carbon-components.
 * We need it to format the month select according to specs.
 * Carbon currently doesn't expose this as a seperate package,
 * and we don't import the carbon-components js (on purpose)
 * so some copy pasta is required
 *
 * ref: https://github.com/carbon-design-system/carbon/blob/
 * 	f06f38f0c2ef624e409a3d5711e897a79f4c88fc/packages/components/src/components/date-picker/date-picker.js#L52-L123
 */
import * as tslib_1 from "tslib";
var monthToStr = function (monthNumber, shorthand, locale) {
    return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
};
var ɵ0 = monthToStr;
var config = {
    selectorInit: "[data-date-picker]",
    selectorDatePickerInput: "[data-date-picker-input]",
    selectorDatePickerInputFrom: "[data-date-picker-input-from]",
    selectorDatePickerInputTo: "[data-date-picker-input-to]",
    selectorDatePickerIcon: "[data-date-picker-icon]",
    selectorFlatpickrMonthYearContainer: ".flatpickr-current-month",
    selectorFlatpickrYearContainer: ".numInputWrapper",
    selectorFlatpickrCurrentMonth: ".cur-month",
    classCalendarContainer: "bx--date-picker__calendar",
    classMonth: "bx--date-picker__month",
    classWeekdays: "bx--date-picker__weekdays",
    classDays: "bx--date-picker__days",
    classWeekday: "bx--date-picker__weekday",
    classDay: "bx--date-picker__day",
    classFocused: "bx--focused",
    classVisuallyHidden: "bx--visually-hidden",
    classFlatpickrCurrentMonth: "cur-month",
    attribType: "data-date-picker-type",
    dateFormat: "m/d/Y",
    shorthand: false
};
export var carbonFlatpickrMonthSelectPlugin = function (fp) {
    var setupElements = function () {
        var _a;
        if (!fp.monthElements || !fp.yearElements) {
            return;
        }
        fp.monthElements.forEach(function (elem) {
            if (!elem.parentNode) {
                return;
            }
            elem.parentNode.removeChild(elem);
        });
        (_a = fp.monthElements).splice.apply(_a, tslib_1.__spread([0,
            fp.monthElements.length], fp.monthElements.map(function () {
            // eslint-disable-next-line no-underscore-dangle
            var monthElement = fp._createElement("span", config.classFlatpickrCurrentMonth);
            monthElement.textContent = monthToStr(fp.currentMonth, config.shorthand === true, fp.l10n);
            fp.yearElements[0]
                .closest(config.selectorFlatpickrMonthYearContainer)
                .insertBefore(monthElement, fp.yearElements[0].closest(config.selectorFlatpickrYearContainer));
            return monthElement;
        })));
    };
    var updateCurrentMonth = function () {
        if (!fp.yearElements) {
            return;
        }
        var monthStr = monthToStr(fp.currentMonth, config.shorthand === true, fp.l10n);
        fp.yearElements.forEach(function (elem) {
            var currentMonthContainer = elem.closest(config.selectorFlatpickrMonthYearContainer);
            Array.prototype.forEach.call(currentMonthContainer.querySelectorAll(".cur-month"), function (monthElement) {
                monthElement.textContent = monthStr;
            });
        });
    };
    var register = function () {
        fp.loadedPlugins.push("carbonFlatpickrMonthSelectPlugin");
    };
    return {
        onMonthChange: updateCurrentMonth,
        onValueUpdate: updateCurrentMonth,
        onOpen: updateCurrentMonth,
        onReady: [setupElements, updateCurrentMonth, register]
    };
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyYm9uLWZsYXRwaWNrci1tb250aC1zZWxlY3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RhdGVwaWNrZXIvIiwic291cmNlcyI6WyJjYXJib24tZmxhdHBpY2tyLW1vbnRoLXNlbGVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0dBU0c7O0FBRUgsSUFBTSxVQUFVLEdBQUcsVUFBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU07SUFDakQsT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFBaEUsQ0FBZ0UsQ0FBQzs7QUFFbEUsSUFBTSxNQUFNLEdBQUc7SUFDZCxZQUFZLEVBQUUsb0JBQW9CO0lBQ2xDLHVCQUF1QixFQUFFLDBCQUEwQjtJQUNuRCwyQkFBMkIsRUFBRSwrQkFBK0I7SUFDNUQseUJBQXlCLEVBQUUsNkJBQTZCO0lBQ3hELHNCQUFzQixFQUFFLHlCQUF5QjtJQUNqRCxtQ0FBbUMsRUFBRSwwQkFBMEI7SUFDL0QsOEJBQThCLEVBQUUsa0JBQWtCO0lBQ2xELDZCQUE2QixFQUFFLFlBQVk7SUFDM0Msc0JBQXNCLEVBQUUsMkJBQTJCO0lBQ25ELFVBQVUsRUFBRSx3QkFBd0I7SUFDcEMsYUFBYSxFQUFFLDJCQUEyQjtJQUMxQyxTQUFTLEVBQUUsdUJBQXVCO0lBQ2xDLFlBQVksRUFBRSwwQkFBMEI7SUFDeEMsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxZQUFZLEVBQUUsYUFBYTtJQUMzQixtQkFBbUIsRUFBRSxxQkFBcUI7SUFDMUMsMEJBQTBCLEVBQUUsV0FBVztJQUN2QyxVQUFVLEVBQUUsdUJBQXVCO0lBQ25DLFVBQVUsRUFBRSxPQUFPO0lBQ25CLFNBQVMsRUFBRSxLQUFLO0NBQ2hCLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxnQ0FBZ0MsR0FBRyxVQUFBLEVBQUU7SUFDakQsSUFBTSxhQUFhLEdBQUc7O1FBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUMxQyxPQUFPO1NBQ1A7UUFDRCxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1lBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBQ0gsQ0FBQSxLQUFBLEVBQUUsQ0FBQyxhQUFhLENBQUEsQ0FBQyxNQUFNLDZCQUN0QixDQUFDO1lBQ0QsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQ3BCLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1lBQ3ZCLGdEQUFnRDtZQUNoRCxJQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsY0FBYyxDQUNyQyxNQUFNLEVBQ04sTUFBTSxDQUFDLDBCQUEwQixDQUNqQyxDQUFDO1lBQ0YsWUFBWSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQ3BDLEVBQUUsQ0FBQyxZQUFZLEVBQ2YsTUFBTSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQ3pCLEVBQUUsQ0FBQyxJQUFJLENBQ1AsQ0FBQztZQUNGLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2lCQUNoQixPQUFPLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxDQUFDO2lCQUNuRCxZQUFZLENBQ1osWUFBWSxFQUNaLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxDQUNqRSxDQUFDO1lBQ0gsT0FBTyxZQUFZLENBQUM7UUFDckIsQ0FBQyxDQUFDLEdBQ0Q7SUFDSCxDQUFDLENBQUM7SUFDRixJQUFNLGtCQUFrQixHQUFHO1FBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE9BQU87U0FDUDtRQUNELElBQU0sUUFBUSxHQUFHLFVBQVUsQ0FDMUIsRUFBRSxDQUFDLFlBQVksRUFDZixNQUFNLENBQUMsU0FBUyxLQUFLLElBQUksRUFDekIsRUFBRSxDQUFDLElBQUksQ0FDUCxDQUFDO1FBQ0YsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1lBQzNCLElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDekMsTUFBTSxDQUFDLG1DQUFtQyxDQUMxQyxDQUFDO1lBQ0YsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUMzQixxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsRUFDcEQsVUFBQSxZQUFZO2dCQUNYLFlBQVksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO1lBQ3JDLENBQUMsQ0FDRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRixJQUFNLFFBQVEsR0FBRztRQUNoQixFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTixhQUFhLEVBQUUsa0JBQWtCO1FBQ2pDLGFBQWEsRUFBRSxrQkFBa0I7UUFDakMsTUFBTSxFQUFFLGtCQUFrQjtRQUMxQixPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxDQUFDO0tBQ3RELENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgaXMgZnJvbSBjYXJib24tY29tcG9uZW50cy5cbiAqIFdlIG5lZWQgaXQgdG8gZm9ybWF0IHRoZSBtb250aCBzZWxlY3QgYWNjb3JkaW5nIHRvIHNwZWNzLlxuICogQ2FyYm9uIGN1cnJlbnRseSBkb2Vzbid0IGV4cG9zZSB0aGlzIGFzIGEgc2VwZXJhdGUgcGFja2FnZSxcbiAqIGFuZCB3ZSBkb24ndCBpbXBvcnQgdGhlIGNhcmJvbi1jb21wb25lbnRzIGpzIChvbiBwdXJwb3NlKVxuICogc28gc29tZSBjb3B5IHBhc3RhIGlzIHJlcXVpcmVkXG4gKlxuICogcmVmOiBodHRwczovL2dpdGh1Yi5jb20vY2FyYm9uLWRlc2lnbi1zeXN0ZW0vY2FyYm9uL2Jsb2IvXG4gKiBcdGYwNmYzOGYwYzJlZjYyNGU0MDlhM2Q1NzExZTg5N2E3OWY0Yzg4ZmMvcGFja2FnZXMvY29tcG9uZW50cy9zcmMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci5qcyNMNTItTDEyM1xuICovXG5cbmNvbnN0IG1vbnRoVG9TdHIgPSAobW9udGhOdW1iZXIsIHNob3J0aGFuZCwgbG9jYWxlKSA9PlxuXHRsb2NhbGUubW9udGhzW3Nob3J0aGFuZCA/IFwic2hvcnRoYW5kXCIgOiBcImxvbmdoYW5kXCJdW21vbnRoTnVtYmVyXTtcblxuY29uc3QgY29uZmlnID0ge1xuXHRzZWxlY3RvckluaXQ6IFwiW2RhdGEtZGF0ZS1waWNrZXJdXCIsXG5cdHNlbGVjdG9yRGF0ZVBpY2tlcklucHV0OiBcIltkYXRhLWRhdGUtcGlja2VyLWlucHV0XVwiLFxuXHRzZWxlY3RvckRhdGVQaWNrZXJJbnB1dEZyb206IFwiW2RhdGEtZGF0ZS1waWNrZXItaW5wdXQtZnJvbV1cIixcblx0c2VsZWN0b3JEYXRlUGlja2VySW5wdXRUbzogXCJbZGF0YS1kYXRlLXBpY2tlci1pbnB1dC10b11cIixcblx0c2VsZWN0b3JEYXRlUGlja2VySWNvbjogXCJbZGF0YS1kYXRlLXBpY2tlci1pY29uXVwiLFxuXHRzZWxlY3RvckZsYXRwaWNrck1vbnRoWWVhckNvbnRhaW5lcjogXCIuZmxhdHBpY2tyLWN1cnJlbnQtbW9udGhcIixcblx0c2VsZWN0b3JGbGF0cGlja3JZZWFyQ29udGFpbmVyOiBcIi5udW1JbnB1dFdyYXBwZXJcIixcblx0c2VsZWN0b3JGbGF0cGlja3JDdXJyZW50TW9udGg6IFwiLmN1ci1tb250aFwiLFxuXHRjbGFzc0NhbGVuZGFyQ29udGFpbmVyOiBgYngtLWRhdGUtcGlja2VyX19jYWxlbmRhcmAsXG5cdGNsYXNzTW9udGg6IGBieC0tZGF0ZS1waWNrZXJfX21vbnRoYCxcblx0Y2xhc3NXZWVrZGF5czogYGJ4LS1kYXRlLXBpY2tlcl9fd2Vla2RheXNgLFxuXHRjbGFzc0RheXM6IGBieC0tZGF0ZS1waWNrZXJfX2RheXNgLFxuXHRjbGFzc1dlZWtkYXk6IGBieC0tZGF0ZS1waWNrZXJfX3dlZWtkYXlgLFxuXHRjbGFzc0RheTogYGJ4LS1kYXRlLXBpY2tlcl9fZGF5YCxcblx0Y2xhc3NGb2N1c2VkOiBgYngtLWZvY3VzZWRgLFxuXHRjbGFzc1Zpc3VhbGx5SGlkZGVuOiBgYngtLXZpc3VhbGx5LWhpZGRlbmAsXG5cdGNsYXNzRmxhdHBpY2tyQ3VycmVudE1vbnRoOiBcImN1ci1tb250aFwiLFxuXHRhdHRyaWJUeXBlOiBcImRhdGEtZGF0ZS1waWNrZXItdHlwZVwiLFxuXHRkYXRlRm9ybWF0OiBcIm0vZC9ZXCIsXG5cdHNob3J0aGFuZDogZmFsc2Vcbn07XG5cbmV4cG9ydCBjb25zdCBjYXJib25GbGF0cGlja3JNb250aFNlbGVjdFBsdWdpbiA9IGZwID0+IHtcblx0Y29uc3Qgc2V0dXBFbGVtZW50cyA9ICgpID0+IHtcblx0XHRpZiAoIWZwLm1vbnRoRWxlbWVudHMgfHwgIWZwLnllYXJFbGVtZW50cykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmcC5tb250aEVsZW1lbnRzLmZvckVhY2goZWxlbSA9PiB7XG5cdFx0XHRpZiAoIWVsZW0ucGFyZW50Tm9kZSkgeyByZXR1cm47IH1cblx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcblx0XHR9KTtcblx0XHRmcC5tb250aEVsZW1lbnRzLnNwbGljZShcblx0XHRcdDAsXG5cdFx0XHRmcC5tb250aEVsZW1lbnRzLmxlbmd0aCxcblx0XHRcdC4uLmZwLm1vbnRoRWxlbWVudHMubWFwKCgpID0+IHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG5cdFx0XHRcdGNvbnN0IG1vbnRoRWxlbWVudCA9IGZwLl9jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFwic3BhblwiLFxuXHRcdFx0XHRcdGNvbmZpZy5jbGFzc0ZsYXRwaWNrckN1cnJlbnRNb250aFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRtb250aEVsZW1lbnQudGV4dENvbnRlbnQgPSBtb250aFRvU3RyKFxuXHRcdFx0XHRcdGZwLmN1cnJlbnRNb250aCxcblx0XHRcdFx0XHRjb25maWcuc2hvcnRoYW5kID09PSB0cnVlLFxuXHRcdFx0XHRcdGZwLmwxMG5cblx0XHRcdFx0KTtcblx0XHRcdFx0ZnAueWVhckVsZW1lbnRzWzBdXG5cdFx0XHRcdFx0LmNsb3Nlc3QoY29uZmlnLnNlbGVjdG9yRmxhdHBpY2tyTW9udGhZZWFyQ29udGFpbmVyKVxuXHRcdFx0XHRcdC5pbnNlcnRCZWZvcmUoXG5cdFx0XHRcdFx0XHRtb250aEVsZW1lbnQsXG5cdFx0XHRcdFx0XHRmcC55ZWFyRWxlbWVudHNbMF0uY2xvc2VzdChjb25maWcuc2VsZWN0b3JGbGF0cGlja3JZZWFyQ29udGFpbmVyKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiBtb250aEVsZW1lbnQ7XG5cdFx0XHR9KVxuXHRcdCk7XG5cdH07XG5cdGNvbnN0IHVwZGF0ZUN1cnJlbnRNb250aCA9ICgpID0+IHtcblx0XHRpZiAoIWZwLnllYXJFbGVtZW50cykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBtb250aFN0ciA9IG1vbnRoVG9TdHIoXG5cdFx0XHRmcC5jdXJyZW50TW9udGgsXG5cdFx0XHRjb25maWcuc2hvcnRoYW5kID09PSB0cnVlLFxuXHRcdFx0ZnAubDEwblxuXHRcdCk7XG5cdFx0ZnAueWVhckVsZW1lbnRzLmZvckVhY2goZWxlbSA9PiB7XG5cdFx0XHRjb25zdCBjdXJyZW50TW9udGhDb250YWluZXIgPSBlbGVtLmNsb3Nlc3QoXG5cdFx0XHRcdGNvbmZpZy5zZWxlY3RvckZsYXRwaWNrck1vbnRoWWVhckNvbnRhaW5lclxuXHRcdFx0KTtcblx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoXG5cdFx0XHRcdGN1cnJlbnRNb250aENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmN1ci1tb250aFwiKSxcblx0XHRcdFx0bW9udGhFbGVtZW50ID0+IHtcblx0XHRcdFx0XHRtb250aEVsZW1lbnQudGV4dENvbnRlbnQgPSBtb250aFN0cjtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9KTtcblx0fTtcblxuXHRjb25zdCByZWdpc3RlciA9ICgpID0+IHtcblx0XHRmcC5sb2FkZWRQbHVnaW5zLnB1c2goXCJjYXJib25GbGF0cGlja3JNb250aFNlbGVjdFBsdWdpblwiKTtcblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdG9uTW9udGhDaGFuZ2U6IHVwZGF0ZUN1cnJlbnRNb250aCxcblx0XHRvblZhbHVlVXBkYXRlOiB1cGRhdGVDdXJyZW50TW9udGgsXG5cdFx0b25PcGVuOiB1cGRhdGVDdXJyZW50TW9udGgsXG5cdFx0b25SZWFkeTogW3NldHVwRWxlbWVudHMsIHVwZGF0ZUN1cnJlbnRNb250aCwgcmVnaXN0ZXJdXG5cdH07XG59O1xuIl19