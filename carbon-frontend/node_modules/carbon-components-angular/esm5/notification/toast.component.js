/**
 *
 * carbon-angular v0.0.0 | toast.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, Input, HostBinding } from "@angular/core";
import { Notification } from "./notification.component";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { NotificationDisplayService } from "./notification-display.service";
import { I18n } from "carbon-components-angular/i18n";
/**
 * Toast messages are displayed toward the top of the UI and do not interrupt userâ€™s work.
 *
 * [See demo](../../?path=/story/notification--toast)
 *
 * <example-url>../../iframe.html?id=notification--toast</example-url>
 */
var Toast = /** @class */ (function (_super) {
    tslib_1.__extends(Toast, _super);
    function Toast(notificationDisplayService, i18n, experimental) {
        var _this = _super.call(this, notificationDisplayService, i18n) || this;
        _this.notificationDisplayService = notificationDisplayService;
        _this.i18n = i18n;
        _this.experimental = experimental;
        _this.toastID = "toast-" + Toast.toastCount++;
        _this.toastClass = true;
        _this.role = "alert";
        // disable inline notification styles
        _this.notificationClass = false;
        return _this;
    }
    Object.defineProperty(Toast.prototype, "isError", {
        get: function () { return this.notificationObj["type"] === "error"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isInfo", {
        get: function () { return this.notificationObj["type"] === "info"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isSuccess", {
        get: function () { return this.notificationObj["type"] === "success"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isWarning", {
        get: function () { return this.notificationObj["type"] === "warning"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isLowContrast", {
        get: function () { return this.notificationObj.lowContrast; },
        enumerable: true,
        configurable: true
    });
    Toast.prototype.ngOnInit = function () {
        if (!this.notificationObj.closeLabel) {
            this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;
        }
    };
    Toast.toastCount = 0;
    Toast.decorators = [
        { type: Component, args: [{
                    selector: "ibm-toast",
                    template: "\n\t\t<svg\n\t\t\tibmIcon=\"error--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'error'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"warning--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'warning'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'success'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"information--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'info'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<div class=\"bx--toast-notification__details\">\n\t\t\t<h3 *ngIf=\"!notificationObj.template\" ibmToastTitle [innerHTML]=\"notificationObj.title\"></h3>\n\t\t\t<div *ngIf=\"!notificationObj.template\" ibmToastSubtitle>\n\t\t\t\t<span [innerHTML]=\"notificationObj.subtitle\"></span>\n\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t<a ibmLink [href]=\"link.href\"> {{link.text}}</a>\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\t\t\t<p *ngIf=\"!notificationObj.template\" ibmToastCaption [innerHTML]=\"notificationObj.caption\"></p>\n\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\tclass=\"bx--toast-notification__close-button\"\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel\"\n\t\t\t(click)=\"onClose()\">\n\t\t\t<svg ibmIcon=\"close\" size=\"16\" class=\"bx--toast-notification__close-icon\"></svg>\n\t\t</button>\n\t"
                }] }
    ];
    /** @nocollapse */
    Toast.ctorParameters = function () { return [
        { type: NotificationDisplayService },
        { type: I18n },
        { type: ExperimentalService }
    ]; };
    Toast.propDecorators = {
        notificationObj: [{ type: Input }],
        toastID: [{ type: HostBinding, args: ["attr.id",] }],
        toastClass: [{ type: HostBinding, args: ["class.bx--toast-notification",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        isError: [{ type: HostBinding, args: ["class.bx--toast-notification--error",] }],
        isInfo: [{ type: HostBinding, args: ["class.bx--toast-notification--info",] }],
        isSuccess: [{ type: HostBinding, args: ["class.bx--toast-notification--success",] }],
        isWarning: [{ type: HostBinding, args: ["class.bx--toast-notification--warning",] }],
        isLowContrast: [{ type: HostBinding, args: ["class.bx--toast-notification--low-contrast",] }]
    };
    return Toast;
}(Notification));
export { Toast };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9ub3RpZmljYXRpb24vIiwic291cmNlcyI6WyJ0b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUVMLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXREOzs7Ozs7R0FNRztBQUNIO0lBZ0QyQixpQ0FBWTtJQW1CdEMsZUFDVywwQkFBc0QsRUFDdEQsSUFBVSxFQUNWLFlBQWlDO1FBSDVDLFlBSUMsa0JBQU0sMEJBQTBCLEVBQUUsSUFBSSxDQUFDLFNBR3ZDO1FBTlUsZ0NBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUN0RCxVQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1Ysa0JBQVksR0FBWixZQUFZLENBQXFCO1FBYnBCLGFBQU8sR0FBRyxXQUFTLEtBQUssQ0FBQyxVQUFVLEVBQUksQ0FBQztRQUNuQixnQkFBVSxHQUFHLElBQUksQ0FBQztRQUNyQyxVQUFJLEdBQUcsT0FBTyxDQUFDO1FBYXhDLHFDQUFxQztRQUNyQyxLQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDOztJQUNoQyxDQUFDO0lBYkQsc0JBQXdELDBCQUFPO2FBQS9ELGNBQW9FLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUN0SCxzQkFBdUQseUJBQU07YUFBN0QsY0FBa0UsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQ25ILHNCQUEwRCw0QkFBUzthQUFuRSxjQUF3RSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFDNUgsc0JBQTBELDRCQUFTO2FBQW5FLGNBQXdFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUM1SCxzQkFBK0QsZ0NBQWE7YUFBNUUsY0FBaUYsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBVzNILHdCQUFRLEdBQVI7UUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUU7WUFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1NBQzVFO0lBQ0YsQ0FBQztJQS9CYyxnQkFBVSxHQUFHLENBQUMsQ0FBQzs7Z0JBakQ5QixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSwyckRBNENUO2lCQUNEOzs7O2dCQXpEUSwwQkFBMEI7Z0JBQzFCLElBQUk7Z0JBRkosbUJBQW1COzs7a0NBa0UxQixLQUFLOzBCQUVMLFdBQVcsU0FBQyxTQUFTOzZCQUNyQixXQUFXLFNBQUMsOEJBQThCO3VCQUMxQyxXQUFXLFNBQUMsV0FBVzswQkFFdkIsV0FBVyxTQUFDLHFDQUFxQzt5QkFDakQsV0FBVyxTQUFDLG9DQUFvQzs0QkFDaEQsV0FBVyxTQUFDLHVDQUF1Qzs0QkFDbkQsV0FBVyxTQUFDLHVDQUF1QztnQ0FDbkQsV0FBVyxTQUFDLDRDQUE0Qzs7SUFnQjFELFlBQUM7Q0FBQSxBQWpGRCxDQWdEMkIsWUFBWSxHQWlDdEM7U0FqQ1ksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE9uSW5pdCxcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgVG9hc3RDb250ZW50IH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uLWNvbnRlbnQuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi9ub3RpZmljYXRpb24uY29tcG9uZW50XCI7XG5pbXBvcnQgeyBFeHBlcmltZW50YWxTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvZXhwZXJpbWVudGFsXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25EaXNwbGF5U2VydmljZSB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1kaXNwbGF5LnNlcnZpY2VcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5cbi8qKlxuICogVG9hc3QgbWVzc2FnZXMgYXJlIGRpc3BsYXllZCB0b3dhcmQgdGhlIHRvcCBvZiB0aGUgVUkgYW5kIGRvIG5vdCBpbnRlcnJ1cHQgdXNlcuKAmXMgd29yay5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9ub3RpZmljYXRpb24tLXRvYXN0KVxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1ub3RpZmljYXRpb24tLXRvYXN0PC9leGFtcGxlLXVybD5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS10b2FzdFwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxzdmdcblx0XHRcdGlibUljb249XCJlcnJvci0tZmlsbGVkXCJcblx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHQqbmdJZj1cIm5vdGlmaWNhdGlvbk9iai50eXBlID09PSAnZXJyb3InXCJcblx0XHRcdGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9faWNvblwiPlxuXHRcdDwvc3ZnPlxuXHRcdDxzdmdcblx0XHRcdGlibUljb249XCJ3YXJuaW5nLS1maWxsZWRcIlxuXHRcdFx0c2l6ZT1cIjE2XCJcblx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGUgPT09ICd3YXJuaW5nJ1wiXG5cdFx0XHRjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2ljb25cIj5cblx0XHQ8L3N2Zz5cblx0XHQ8c3ZnXG5cdFx0XHRpYm1JY29uPVwiY2hlY2ttYXJrLS1maWxsZWRcIlxuXHRcdFx0c2l6ZT1cIjE2XCJcblx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGUgPT09ICdzdWNjZXNzJ1wiXG5cdFx0XHRjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2ljb25cIj5cblx0XHQ8L3N2Zz5cblx0XHQ8c3ZnXG5cdFx0XHRpYm1JY29uPVwiaW5mb3JtYXRpb24tLWZpbGxlZFwiXG5cdFx0XHRzaXplPVwiMTZcIlxuXHRcdFx0Km5nSWY9XCJub3RpZmljYXRpb25PYmoudHlwZSA9PT0gJ2luZm8nXCJcblx0XHRcdGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9faWNvblwiPlxuXHRcdDwvc3ZnPlxuXHRcdDxkaXYgY2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19kZXRhaWxzXCI+XG5cdFx0XHQ8aDMgKm5nSWY9XCIhbm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlXCIgaWJtVG9hc3RUaXRsZSBbaW5uZXJIVE1MXT1cIm5vdGlmaWNhdGlvbk9iai50aXRsZVwiPjwvaDM+XG5cdFx0XHQ8ZGl2ICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGlibVRvYXN0U3VidGl0bGU+XG5cdFx0XHRcdDxzcGFuIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLnN1YnRpdGxlXCI+PC9zcGFuPlxuXHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBsaW5rIG9mIG5vdGlmaWNhdGlvbk9iai5saW5rc1wiPlxuXHRcdFx0XHRcdDxhIGlibUxpbmsgW2hyZWZdPVwibGluay5ocmVmXCI+IHt7bGluay50ZXh0fX08L2E+XG5cdFx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8cCAqbmdJZj1cIiFub3RpZmljYXRpb25PYmoudGVtcGxhdGVcIiBpYm1Ub2FzdENhcHRpb24gW2lubmVySFRNTF09XCJub3RpZmljYXRpb25PYmouY2FwdGlvblwiPjwvcD5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJub3RpZmljYXRpb25PYmoudGVtcGxhdGU7IGNvbnRleHQ6IHsgJGltcGxpY2l0OiBub3RpZmljYXRpb25PYmp9XCI+PC9uZy1jb250YWluZXI+XG5cdFx0PC9kaXY+XG5cdFx0PGJ1dHRvblxuXHRcdFx0Km5nSWY9XCIhaXNDbG9zZUhpZGRlblwiXG5cdFx0XHRjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2Nsb3NlLWJ1dHRvblwiXG5cdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwibm90aWZpY2F0aW9uT2JqLmNsb3NlTGFiZWxcIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xvc2UoKVwiPlxuXHRcdFx0PHN2ZyBpYm1JY29uPVwiY2xvc2VcIiBzaXplPVwiMTZcIiBjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2Nsb3NlLWljb25cIj48L3N2Zz5cblx0XHQ8L2J1dHRvbj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBUb2FzdCBleHRlbmRzIE5vdGlmaWNhdGlvbiBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdHByaXZhdGUgc3RhdGljIHRvYXN0Q291bnQgPSAwO1xuXHQvKipcblx0ICogQ2FuIGhhdmUgYHR5cGVgLCBgdGl0bGVgLCBgc3VidGl0bGVgLCBhbmQgYGNhcHRpb25gIG1lbWJlcnMuXG5cdCAqXG5cdCAqIGB0eXBlYCBjYW4gYmUgb25lIG9mIGBcImVycm9yXCJgLCBgXCJpbmZvXCJgLCBgXCJ3YXJuaW5nXCJgLCBvciBgXCJzdWNjZXNzXCJgXG5cdCAqL1xuXHRASW5wdXQoKSBub3RpZmljYXRpb25PYmo6IFRvYXN0Q29udGVudDtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmlkXCIpIHRvYXN0SUQgPSBgdG9hc3QtJHtUb2FzdC50b2FzdENvdW50Kyt9YDtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvYXN0LW5vdGlmaWNhdGlvblwiKSB0b2FzdENsYXNzID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5yb2xlXCIpIHJvbGUgPSBcImFsZXJ0XCI7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvYXN0LW5vdGlmaWNhdGlvbi0tZXJyb3JcIikgZ2V0IGlzRXJyb3IoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9ialtcInR5cGVcIl0gPT09IFwiZXJyb3JcIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9hc3Qtbm90aWZpY2F0aW9uLS1pbmZvXCIpIGdldCBpc0luZm8oKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9ialtcInR5cGVcIl0gPT09IFwiaW5mb1wiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b2FzdC1ub3RpZmljYXRpb24tLXN1Y2Nlc3NcIikgZ2V0IGlzU3VjY2VzcygpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqW1widHlwZVwiXSA9PT0gXCJzdWNjZXNzXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvYXN0LW5vdGlmaWNhdGlvbi0td2FybmluZ1wiKSBnZXQgaXNXYXJuaW5nKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmpbXCJ0eXBlXCJdID09PSBcIndhcm5pbmdcIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9hc3Qtbm90aWZpY2F0aW9uLS1sb3ctY29udHJhc3RcIikgZ2V0IGlzTG93Q29udHJhc3QoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai5sb3dDb250cmFzdDsgfVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByb3RlY3RlZCBub3RpZmljYXRpb25EaXNwbGF5U2VydmljZTogTm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UsXG5cdFx0cHJvdGVjdGVkIGkxOG46IEkxOG4sXG5cdFx0cHJvdGVjdGVkIGV4cGVyaW1lbnRhbDogRXhwZXJpbWVudGFsU2VydmljZSkge1xuXHRcdHN1cGVyKG5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlLCBpMThuKTtcblx0XHQvLyBkaXNhYmxlIGlubGluZSBub3RpZmljYXRpb24gc3R5bGVzXG5cdFx0dGhpcy5ub3RpZmljYXRpb25DbGFzcyA9IGZhbHNlO1xuXHR9XG5cblx0bmdPbkluaXQoKSB7XG5cdFx0aWYgKCF0aGlzLm5vdGlmaWNhdGlvbk9iai5jbG9zZUxhYmVsKSB7XG5cdFx0XHR0aGlzLm5vdGlmaWNhdGlvbk9iai5jbG9zZUxhYmVsID0gdGhpcy5pMThuLmdldCgpLk5PVElGSUNBVElPTi5DTE9TRV9CVVRUT047XG5cdFx0fVxuXHR9XG59XG4iXX0=