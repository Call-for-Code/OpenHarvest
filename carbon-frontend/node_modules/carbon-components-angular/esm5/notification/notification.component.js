/**
 *
 * carbon-angular v0.0.0 | notification.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, ViewChild, HostBinding } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { NotificationDisplayService } from "./notification-display.service";
import { of, isObservable } from "rxjs";
/**
 * Notification messages are displayed toward the top of the UI and do not interrupt userâ€™s work.
 *
 * [See demo](../../?path=/story/notification--basic)
 *
 * <example-url>../../iframe.html?id=notification--basic</example-url>
 */
var Notification = /** @class */ (function () {
    function Notification(notificationDisplayService, i18n) {
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        /**
         * Emits on close.
         */
        this.close = new EventEmitter();
        this.notificationID = "notification-" + Notification.notificationCount++;
        this.notificationClass = true;
        this.role = "alert";
        this.defaultNotificationObj = {
            title: "",
            message: "",
            type: "info",
            showClose: true,
            closeLabel: this.i18n.get("NOTIFICATION.CLOSE_BUTTON")
        };
        this._notificationObj = Object.assign({}, this.defaultNotificationObj);
    }
    Object.defineProperty(Notification.prototype, "notificationObj", {
        /**
         * Can have `type`, `title`, and `message` members.
         *
         * `type` can be one of `"info"`, `"warning"`, `"error"`, `"success"`
         *
         * `message` is the message to display
         */
        get: function () {
            return this._notificationObj;
        },
        set: function (obj) {
            if (obj.closeLabel) {
                obj.closeLabel = of(obj.closeLabel);
            }
            this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "isError", {
        get: function () { return this.notificationObj.type === "error"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "isInfo", {
        get: function () { return this.notificationObj.type === "info"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "isSuccess", {
        get: function () { return this.notificationObj.type === "success"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "isWarning", {
        get: function () { return this.notificationObj.type === "warning"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "isLowContrast", {
        get: function () { return this.notificationObj.lowContrast; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "isCloseHidden", {
        get: function () { return !this._notificationObj.showClose; },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits close event.
     */
    Notification.prototype.onClose = function () {
        this.close.emit();
    };
    Notification.prototype.onClick = function (action, event) {
        if (!action.click) {
            return;
        }
        if (isObservable(action.click)) {
            action.click.next({ event: event, action: action });
        }
        else {
            action.click({ event: event, action: action });
        }
    };
    Notification.prototype.destroy = function () {
        this.notificationDisplayService.close(this);
    };
    Notification.notificationCount = 0;
    Notification.decorators = [
        { type: Component, args: [{
                    selector: "ibm-notification",
                    template: "\n\t\t<div class=\"bx--inline-notification__details\">\n\t\t\t<svg\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'error'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'warning'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'success'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"information--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'info'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<div class=\"bx--inline-notification__text-wrapper\">\n\t\t\t\t<p *ngIf=\"!notificationObj.template\" ibmNotificationTitle [innerHTML]=\"notificationObj.title\"></p>\n\t\t\t\t<div *ngIf=\"!notificationObj.template\" ibmNotificationSubtitle>\n\t\t\t\t\t<span [innerHTML]=\"notificationObj.message\"></span>\n\t\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t\t<a ibmLink [href]=\"link.href\"> {{link.text}}</a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</div>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t\t</div>\n\t\t</div>\n\t\t<div *ngFor=\"let action of notificationObj.actions\">\n\t\t\t<button\n\t\t\t\t(click)=\"onClick(action, $event)\"\n\t\t\t\tibmButton=\"ghost\"\n\t\t\t\tsize=\"sm\"\n\t\t\t\tclass=\"bx--inline-notification__action-button\"\n\t\t\t\ttype=\"button\">\n\t\t\t\t{{action.text}}\n\t\t\t</button>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\t(click)=\"onClose()\"\n\t\t\tclass=\"bx--inline-notification__close-button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\ttype=\"button\">\n\t\t\t<svg ibmIcon=\"close\" size=\"16\" class=\"bx--inline-notification__close-icon\"></svg>\n\t\t</button>\n\t"
                }] }
    ];
    /** @nocollapse */
    Notification.ctorParameters = function () { return [
        { type: NotificationDisplayService },
        { type: I18n }
    ]; };
    Notification.propDecorators = {
        notificationObj: [{ type: Input }],
        close: [{ type: Output }],
        notification: [{ type: ViewChild, args: ["notification", { static: false },] }],
        notificationID: [{ type: HostBinding, args: ["attr.id",] }],
        notificationClass: [{ type: HostBinding, args: ["class.bx--inline-notification",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        isError: [{ type: HostBinding, args: ["class.bx--inline-notification--error",] }],
        isInfo: [{ type: HostBinding, args: ["class.bx--inline-notification--info",] }],
        isSuccess: [{ type: HostBinding, args: ["class.bx--inline-notification--success",] }],
        isWarning: [{ type: HostBinding, args: ["class.bx--inline-notification--warning",] }],
        isLowContrast: [{ type: HostBinding, args: ["class.bx--inline-notification--low-contrast",] }],
        isCloseHidden: [{ type: HostBinding, args: ["class.bx--inline-notification--hide-close-button",] }]
    };
    return Notification;
}());
export { Notification };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvbm90aWZpY2F0aW9uLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUVaLFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFXLE1BQU0sTUFBTSxDQUFDO0FBRWpEOzs7Ozs7R0FNRztBQUNIO0lBNEdDLHNCQUFzQiwwQkFBc0QsRUFBWSxJQUFVO1FBQTVFLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFNO1FBOUJsRzs7V0FFRztRQUNPLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQU9oQyxtQkFBYyxHQUFHLGtCQUFnQixZQUFZLENBQUMsaUJBQWlCLEVBQUksQ0FBQztRQUM5QyxzQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDN0MsU0FBSSxHQUFHLE9BQU8sQ0FBQztRQVMvQiwyQkFBc0IsR0FBRztZQUNsQyxLQUFLLEVBQUUsRUFBRTtZQUNULE9BQU8sRUFBRSxFQUFFO1lBQ1gsSUFBSSxFQUFFLE1BQU07WUFDWixTQUFTLEVBQUUsSUFBSTtZQUNmLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztTQUN0RCxDQUFDO1FBQ1EscUJBQWdCLEdBQXdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxD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LCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0Q29tcG9uZW50UmVmLFxuXHRWaWV3Q2hpbGQsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbnRlbnQgfSBmcm9tIFwiLi9ub3RpZmljYXRpb24tY29udGVudC5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25EaXNwbGF5U2VydmljZSB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1kaXNwbGF5LnNlcnZpY2VcIjtcbmltcG9ydCB7IG9mLCBpc09ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuXG4vKipcbiAqIE5vdGlmaWNhdGlvbiBtZXNzYWdlcyBhcmUgZGlzcGxheWVkIHRvd2FyZCB0aGUgdG9wIG9mIHRoZSBVSSBhbmQgZG8gbm90IGludGVycnVwdCB1c2Vy4oCZcyB3b3JrLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L25vdGlmaWNhdGlvbi0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPW5vdGlmaWNhdGlvbi0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLW5vdGlmaWNhdGlvblwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXYgY2xhc3M9XCJieC0taW5saW5lLW5vdGlmaWNhdGlvbl9fZGV0YWlsc1wiPlxuXHRcdFx0PHN2Z1xuXHRcdFx0XHRpYm1JY29uPVwiZXJyb3ItLWZpbGxlZFwiXG5cdFx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGUgPT09ICdlcnJvcidcIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1pbmxpbmUtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0XHQ8L3N2Zz5cblx0XHRcdDxzdmdcblx0XHRcdFx0aWJtSWNvbj1cIndhcm5pbmctLWZpbGxlZFwiXG5cdFx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGUgPT09ICd3YXJuaW5nJ1wiXG5cdFx0XHRcdGNsYXNzPVwiYngtLWlubGluZS1ub3RpZmljYXRpb25fX2ljb25cIj5cblx0XHRcdDwvc3ZnPlxuXHRcdFx0PHN2Z1xuXHRcdFx0XHRpYm1JY29uPVwiY2hlY2ttYXJrLS1maWxsZWRcIlxuXHRcdFx0XHRzaXplPVwiMTZcIlxuXHRcdFx0XHQqbmdJZj1cIm5vdGlmaWNhdGlvbk9iai50eXBlID09PSAnc3VjY2VzcydcIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1pbmxpbmUtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0XHQ8L3N2Zz5cblx0XHRcdDxzdmdcblx0XHRcdFx0aWJtSWNvbj1cImluZm9ybWF0aW9uLS1maWxsZWRcIlxuXHRcdFx0XHRzaXplPVwiMTZcIlxuXHRcdFx0XHQqbmdJZj1cIm5vdGlmaWNhdGlvbk9iai50eXBlID09PSAnaW5mbydcIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1pbmxpbmUtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0XHQ8L3N2Zz5cblx0XHRcdDxkaXYgY2xhc3M9XCJieC0taW5saW5lLW5vdGlmaWNhdGlvbl9fdGV4dC13cmFwcGVyXCI+XG5cdFx0XHRcdDxwICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGlibU5vdGlmaWNhdGlvblRpdGxlIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLnRpdGxlXCI+PC9wPlxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGlibU5vdGlmaWNhdGlvblN1YnRpdGxlPlxuXHRcdFx0XHRcdDxzcGFuIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLm1lc3NhZ2VcIj48L3NwYW4+XG5cdFx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgbGluayBvZiBub3RpZmljYXRpb25PYmoubGlua3NcIj5cblx0XHRcdFx0XHRcdDxhIGlibUxpbmsgW2hyZWZdPVwibGluay5ocmVmXCI+IHt7bGluay50ZXh0fX08L2E+XG5cdFx0XHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwibm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogbm90aWZpY2F0aW9uT2JqfVwiPjwvbmctY29udGFpbmVyPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiAqbmdGb3I9XCJsZXQgYWN0aW9uIG9mIG5vdGlmaWNhdGlvbk9iai5hY3Rpb25zXCI+XG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdChjbGljayk9XCJvbkNsaWNrKGFjdGlvbiwgJGV2ZW50KVwiXG5cdFx0XHRcdGlibUJ1dHRvbj1cImdob3N0XCJcblx0XHRcdFx0c2l6ZT1cInNtXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0taW5saW5lLW5vdGlmaWNhdGlvbl9fYWN0aW9uLWJ1dHRvblwiXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIj5cblx0XHRcdFx0e3thY3Rpb24udGV4dH19XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQ8L2Rpdj5cblx0XHQ8YnV0dG9uXG5cdFx0XHQqbmdJZj1cIiFpc0Nsb3NlSGlkZGVuXCJcblx0XHRcdChjbGljayk9XCJvbkNsb3NlKClcIlxuXHRcdFx0Y2xhc3M9XCJieC0taW5saW5lLW5vdGlmaWNhdGlvbl9fY2xvc2UtYnV0dG9uXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwibm90aWZpY2F0aW9uT2JqLmNsb3NlTGFiZWwgfCBhc3luY1wiXG5cdFx0XHR0eXBlPVwiYnV0dG9uXCI+XG5cdFx0XHQ8c3ZnIGlibUljb249XCJjbG9zZVwiIHNpemU9XCIxNlwiIGNsYXNzPVwiYngtLWlubGluZS1ub3RpZmljYXRpb25fX2Nsb3NlLWljb25cIj48L3N2Zz5cblx0XHQ8L2J1dHRvbj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb24ge1xuXHRwcml2YXRlIHN0YXRpYyBub3RpZmljYXRpb25Db3VudCA9IDA7XG5cdC8qKlxuXHQgKiBDYW4gaGF2ZSBgdHlwZWAsIGB0aXRsZWAsIGFuZCBgbWVzc2FnZWAgbWVtYmVycy5cblx0ICpcblx0ICogYHR5cGVgIGNhbiBiZSBvbmUgb2YgYFwiaW5mb1wiYCwgYFwid2FybmluZ1wiYCwgYFwiZXJyb3JcImAsIGBcInN1Y2Nlc3NcImBcblx0ICpcblx0ICogYG1lc3NhZ2VgIGlzIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcblx0ICovXG5cdEBJbnB1dCgpIGdldCBub3RpZmljYXRpb25PYmooKTogTm90aWZpY2F0aW9uQ29udGVudCB7XG5cdFx0cmV0dXJuIHRoaXMuX25vdGlmaWNhdGlvbk9iajtcblx0fVxuXHRzZXQgbm90aWZpY2F0aW9uT2JqKG9iajogTm90aWZpY2F0aW9uQ29udGVudCkge1xuXHRcdGlmIChvYmouY2xvc2VMYWJlbCkge1xuXHRcdFx0b2JqLmNsb3NlTGFiZWwgPSBvZihvYmouY2xvc2VMYWJlbCk7XG5cdFx0fVxuXHRcdHRoaXMuX25vdGlmaWNhdGlvbk9iaiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdE5vdGlmaWNhdGlvbk9iaiwgb2JqKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0cyBvbiBjbG9zZS5cblx0ICovXG5cdEBPdXRwdXQoKSBjbG9zZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblx0Y29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8Tm90aWZpY2F0aW9uPjtcblxuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJub3RpZmljYXRpb25cIiwgeyBzdGF0aWM6IGZhbHNlIH0pIG5vdGlmaWNhdGlvbjtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmlkXCIpIG5vdGlmaWNhdGlvbklEID0gYG5vdGlmaWNhdGlvbi0ke05vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25Db3VudCsrfWA7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1pbmxpbmUtbm90aWZpY2F0aW9uXCIpIG5vdGlmaWNhdGlvbkNsYXNzID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5yb2xlXCIpIHJvbGUgPSBcImFsZXJ0XCI7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWlubGluZS1ub3RpZmljYXRpb24tLWVycm9yXCIpIGdldCBpc0Vycm9yKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJlcnJvclwiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1pbmxpbmUtbm90aWZpY2F0aW9uLS1pbmZvXCIpIGdldCBpc0luZm8oKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai50eXBlID09PSBcImluZm9cIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0taW5saW5lLW5vdGlmaWNhdGlvbi0tc3VjY2Vzc1wiKSBnZXQgaXNTdWNjZXNzKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJzdWNjZXNzXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWlubGluZS1ub3RpZmljYXRpb24tLXdhcm5pbmdcIikgZ2V0IGlzV2FybmluZygpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqLnR5cGUgPT09IFwid2FybmluZ1wiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1pbmxpbmUtbm90aWZpY2F0aW9uLS1sb3ctY29udHJhc3RcIikgZ2V0IGlzTG93Q29udHJhc3QoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai5sb3dDb250cmFzdDsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0taW5saW5lLW5vdGlmaWNhdGlvbi0taGlkZS1jbG9zZS1idXR0b25cIikgZ2V0IGlzQ2xvc2VIaWRkZW4oKSB7IHJldHVybiAhdGhpcy5fbm90aWZpY2F0aW9uT2JqLnNob3dDbG9zZTsgfVxuXG5cdHByb3RlY3RlZCBkZWZhdWx0Tm90aWZpY2F0aW9uT2JqID0ge1xuXHRcdHRpdGxlOiBcIlwiLFxuXHRcdG1lc3NhZ2U6IFwiXCIsXG5cdFx0dHlwZTogXCJpbmZvXCIsXG5cdFx0c2hvd0Nsb3NlOiB0cnVlLFxuXHRcdGNsb3NlTGFiZWw6IHRoaXMuaTE4bi5nZXQoXCJOT1RJRklDQVRJT04uQ0xPU0VfQlVUVE9OXCIpXG5cdH07XG5cdHByb3RlY3RlZCBfbm90aWZpY2F0aW9uT2JqOiBOb3RpZmljYXRpb25Db250ZW50ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZhdWx0Tm90aWZpY2F0aW9uT2JqKTtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2U6IE5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlLCBwcm90ZWN0ZWQgaTE4bjogSTE4bikge31cblxuXHQvKipcblx0ICogRW1pdHMgY2xvc2UgZXZlbnQuXG5cdCAqL1xuXHRvbkNsb3NlKCkge1xuXHRcdHRoaXMuY2xvc2UuZW1pdCgpO1xuXHR9XG5cblx0b25DbGljayhhY3Rpb24sIGV2ZW50KSB7XG5cdFx0aWYgKCFhY3Rpb24uY2xpY2spIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGlzT2JzZXJ2YWJsZShhY3Rpb24uY2xpY2spKSB7XG5cdFx0XHQoYWN0aW9uLmNsaWNrIGFzIFN1YmplY3Q8e2V2ZW50OiBFdmVudCwgYWN0aW9uOiBhbnl9PikubmV4dCh7ZXZlbnQsIGFjdGlvbn0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhY3Rpb24uY2xpY2soe2V2ZW50LCBhY3Rpb259KTtcblx0XHR9XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMubm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UuY2xvc2UodGhpcyk7XG5cdH1cbn1cbiJdfQ==