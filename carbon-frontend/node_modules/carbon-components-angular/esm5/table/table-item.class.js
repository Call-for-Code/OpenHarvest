/**
 *
 * carbon-angular v0.0.0 | table-item.class.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
var TableItem = /** @class */ (function () {
    /**
     * Creates an instance of TableItem.
     */
    function TableItem(rawData) {
        var e_1, _a;
        /**
         * The number of rows to span
         */
        this.rowSpan = 1;
        /**
         * The number of columns to span
         */
        this.colSpan = 1;
        // defaults so we dont leave things empty
        var defaults = {
            data: ""
        };
        // fill our object with provided props, and fallback to defaults
        var data = Object.assign({}, defaults, rawData);
        try {
            for (var _b = tslib_1.__values(Object.getOwnPropertyNames(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                if (data.hasOwnProperty(property)) {
                    this[property] = data[property];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(TableItem.prototype, "title", {
        get: function () {
            if (this._title) {
                return this._title;
            }
            if (!this.data) {
                return "";
            }
            if (typeof this.data === "string") {
                return this.data;
            }
            if (this.data.toString &&
                this.data.constructor !== ({}).constructor) {
                return this.data.toString();
            }
            // data canâ€™t be reasonably converted to an end user readable string
            return "";
        },
        set: function (title) {
            this._title = title;
        },
        enumerable: true,
        configurable: true
    });
    return TableItem;
}());
export { TableItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaXRlbS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS1pdGVtLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQTtJQXNJQzs7T0FFRztJQUNILG1CQUFZLE9BQWE7O1FBM0N6Qjs7V0FFRztRQUNILFlBQU8sR0FBRyxDQUFDLENBQUM7UUFFWjs7V0FFRztRQUNILFlBQU8sR0FBRyxDQUFDLENBQUM7UUFvQ1gseUNBQXlDO1FBQ3pDLElBQU0sUUFBUSxHQUFHO1lBQ2hCLElBQUksRUFBRSxFQUFFO1NBQ1IsQ0FBQztRQUNGLGdFQUFnRTtRQUNoRSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7O1lBQ2xELEtBQXVCLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQXBELElBQU0sUUFBUSxXQUFBO2dCQUNsQixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2hDO2FBQ0Q7Ozs7Ozs7OztJQUNGLENBQUM7SUE3Q0Qsc0JBQUksNEJBQUs7YUFBVDtZQUNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ25CO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2YsT0FBTyxFQUFFLENBQUM7YUFDVjtZQUVELElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ2pCO1lBRUQsSUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUN6QztnQkFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDNUI7WUFFRCxvRUFBb0U7WUFDcEUsT0FBTyxFQUFFLENBQUM7UUFDWCxDQUFDO2FBRUQsVUFBVSxLQUFLO1lBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDckIsQ0FBQzs7O09BSkE7SUF3QkYsZ0JBQUM7QUFBRCxDQUFDLEFBdEpELElBc0pDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0VGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuZXhwb3J0IGNsYXNzIFRhYmxlSXRlbSB7XG5cdC8qKlxuXHQgKiBEYXRhIGZvciB0aGUgdGFibGUgaXRlbS5cblx0ICovXG5cdGRhdGE6IGFueTtcblxuXHQvKipcblx0ICogRGF0YSBmb3IgdGhlIGV4cGFuZGVkIHBhcnQgb2YgdGhlIHJvdy5cblx0ICpcblx0ICogWW91IG9ubHkgbmVlZCB0byBzZXQgaXQgZm9yIHRoZSBmaXJzdCBpdGVtIGluIHRoZSByb3cuXG5cdCAqXG5cdCAqIFNlZSBgZXhwYW5kQXNUYWJsZWAgZG9jdW1lbnRhdGlvbiBpZiB5b3UgbmVlZCB0byB0aGUgdGFibGUgdG8gZXhwYW5kIHRvIGFkZGl0aW9uYWxcblx0ICogdGFibGUgcm93cy5cblx0ICovXG5cdGV4cGFuZGVkRGF0YTogYW55O1xuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGRpc3BsYXkgZGF0YSBpbiBhIGRlc2lyZWQgd2F5LlxuXHQgKlxuXHQgKiBJZiBub3QgcHJvdmlkZWQsIGRpc3BsYXlzIGRhdGEgYXMgYSBzaW1wbGUgc3RyaW5nLlxuXHQgKlxuXHQgKiBVc2FnZTpcblx0ICpcblx0ICogSW4gYSBjb21wb25lbnQgd2hlcmUgeW91J3JlIHVzaW5nIHRoZSB0YWJsZSBjcmVhdGUgYSB0ZW1wbGF0ZSBsaWtlOlxuXHQgKlxuXHQgKiBgYGBodG1sXG5cdCAqIDxuZy10ZW1wbGF0ZSAjY3VzdG9tSXRlbVRlbXBsYXRlIGxldC1kYXRhPVwiZGF0YVwiPlxuXHQgKiBcdDxpPjxhIFtyb3V0ZXJMaW5rXT1cImRhdGEubGlua1wiPnt7ZGF0YS5uYW1lfX08L2E+PC9pPlxuXHQgKiA8L25nLXRlbXBsYXRlPlxuXHQgKiBgYGBcblx0ICogd2hlcmUgd2UgYXNzdW1lIHlvdXIgZGF0YSBjb250YWlucyBgbGlua2AgYW5kIGBuYW1lYC4gYGxldC1kYXRhPVwiZGF0YVwiYCBpc1xuXHQgKiBuZWNlc3NhcnkgZm9yIHlvdSB0byBiZSBhYmxlIHRvIGFjY2VzcyBpdGVtJ3MgZGF0YSBpbiB0aGUgdGVtcGxhdGUuXG5cdCAqXG5cdCAqIENyZWF0ZSBgVmlld0NoaWxkYCBwcm9wZXJ0eSB3aXRoOlxuXHQgKlxuXHQgKiBgYGB0eXBlc2NyaXB0XG5cdCAqIChhdClWaWV3Q2hpbGQoXCJjdXN0b21JdGVtVGVtcGxhdGVcIilcblx0ICogcHJvdGVjdGVkIGN1c3RvbUl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pjtcblx0ICogYGBgXG5cdCAqXG5cdCAqIFNldCB0aGUgdGVtcGxhdGUgdG8gdGhlIHRhYmxlIGl0ZW0sIGZvciBleGFtcGxlOlxuXHQgKlxuXHQgKiBgYGB0eXBlc2NyaXB0XG5cdCAqIHRoaXMubW9kZWwuZGF0YSA9IFtcblx0ICogXHRbbmV3IFRhYmxlSXRlbSh7ZGF0YToge25hbWU6IFwiQ3VzdG9tIGl0ZW1cIiwgbGluazogXCIvdGFibGVcIn0sIHRlbXBsYXRlOiB0aGlzLmN1c3RvbUl0ZW1UZW1wbGF0ZX0pXVxuXHQgKiBdO1xuXHQgKiBgYGBcblx0ICovXG5cdHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdC8qKlxuXHQgKiBUZW1wbGF0ZSBmb3IgcmVuZGVyaW5nIGBleHBhbmRlZERhdGFgXG5cdCAqXG5cdCAqIFlvdSBvbmx5IG5lZWQgdG8gc2V0IGl0IGZvciB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgcm93LlxuXHQgKlxuXHQgKi9cblx0ZXhwYW5kZWRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuXHQvKipcblx0ICogU2V0dGluZyB0aGlzIHRvIGB0cnVlYCBtYWtlcyB0YWJsZSBpbnRlcnByZXQgYGV4cGFuZGVkRGF0YWAgYXMgYWRkaXRpb25hbCByb3dzIHRvIGluc2VydCBpbiBwbGFjZVxuXHQgKiBmb3IgZXhwYW5kZWQgZGF0YS4gYGV4cGFuZGVkVGVtcGxhdGVgIGlzIHRoZW4gaWdub3JlZC5cblx0ICpcblx0ICogWW91IGNhbiBhcHBseSB0aGUgdGVtcGxhdGUgZm9yIGluZGl2aWR1YWwgY2VsbHMgYXMgdXN1YWwuXG5cdCAqXG5cdCAqIEV4YW1wbGUgbW9kZWwgZGF0YTpcblx0ICpcblx0ICogYGBgdHlwZXNjcmlwdFxuXHQgKiB0aGlzLm1vZGVsLmRhdGEgPSBbXG5cdCAqIFx0W25ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcIk5hbWUgNFwiIH0pLCBuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJ0d2VyXCIgfSldLCAvLyByZWd1bGFyIHJvd1xuXHQgKiBcdFtcblx0ICogXHRcdG5ldyBUYWJsZUl0ZW0oe1xuXHQgKiBcdFx0XHRkYXRhOiBcIk5hbWUgMy4xXCIsXG5cdCAqIFx0XHRcdC8vIGBleHBhbmRlZERhdGFgIG1pbWljcyB0aGUgZm9ybWF0IG9mIHRoZSByZXN0IG9mIHRoZSB0YWJsZVxuXHQgKiBcdFx0XHRleHBhbmRlZERhdGE6IFtcblx0ICogXHRcdFx0XHRbXG5cdCAqIFx0XHRcdFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJNb3JlIG5hbWVzXCIsIGV4cGFuZGVkRGF0YTogXCJObyB0ZW1wbGF0ZVwiIH0pLFxuXHQgKiBcdFx0XHRcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IHsgbmFtZTogXCJNb3JleVwiLCBsaW5rOiBcIiNcIiB9LCB0ZW1wbGF0ZTogdGhpcy5jdXN0b21UYWJsZUl0ZW1UZW1wbGF0ZSB9KVxuXHQgKiBcdFx0XHRcdF0sXG5cdCAqIFx0XHRcdFx0W1xuXHQgKiBcdFx0XHRcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwiQ29yZSBuYW1lc1wiLCBleHBhbmRlZERhdGE6IFwiTm8gdGVtcGxhdGVcIiB9KSxcblx0ICogXHRcdFx0XHRcdG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiB7IG5hbWU6IFwiQ29yZXlcIiwgbGluazogXCIjXCIgfSwgdGVtcGxhdGU6IHRoaXMuY3VzdG9tVGFibGVJdGVtVGVtcGxhdGUgfSlcblx0ICogXHRcdFx0XHRdXG5cdCAqIFx0XHRcdF0sXG5cdCAqIFx0XHRcdC8vIGBleHBhbmRBc1RhYmxlYCB0ZWxscyB0aGUgdGFibGUgdG8gaW50ZXJwcmV0IGBleHBhbmRlZERhdGFgIGFzIHRhYmxlIGRhdGFcblx0ICogXHRcdFx0ZXhwYW5kQXNUYWJsZTogdHJ1ZVxuXHQgKiBcdFx0fSksXG5cdCAqIFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJzd2VyXCIgfSlcblx0ICogXHRdLFxuXHQgKiBcdFtuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJOYW1lIDdcIiB9KSwgbmV3IFRhYmxlSXRlbSh7ZGF0YTogXCJ0d2VyXCJ9KV0gLy8gcmVndWxhciByb3dcblx0ICogXTtcblx0ICogYGBgXG5cdCAqL1xuXHRleHBhbmRBc1RhYmxlOiBmYWxzZTtcblxuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiByb3dzIHRvIHNwYW5cblx0ICovXG5cdHJvd1NwYW4gPSAxO1xuXG5cdC8qKlxuXHQgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gc3BhblxuXHQgKi9cblx0Y29sU3BhbiA9IDE7XG5cblx0Z2V0IHRpdGxlKCkge1xuXHRcdGlmICh0aGlzLl90aXRsZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3RpdGxlO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5kYXRhKSB7XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHRoaXMuZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHR0aGlzLmRhdGEudG9TdHJpbmcgJiZcblx0XHRcdHRoaXMuZGF0YS5jb25zdHJ1Y3RvciAhPT0gKHt9KS5jb25zdHJ1Y3RvclxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdC8vIGRhdGEgY2Fu4oCZdCBiZSByZWFzb25hYmx5IGNvbnZlcnRlZCB0byBhbiBlbmQgdXNlciByZWFkYWJsZSBzdHJpbmdcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdHNldCB0aXRsZSh0aXRsZSkge1xuXHRcdHRoaXMuX3RpdGxlID0gdGl0bGU7XG5cdH1cblxuXHRwcml2YXRlIF90aXRsZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFRhYmxlSXRlbS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJhd0RhdGE/OiBhbnkpIHtcblx0XHQvLyBkZWZhdWx0cyBzbyB3ZSBkb250IGxlYXZlIHRoaW5ncyBlbXB0eVxuXHRcdGNvbnN0IGRlZmF1bHRzID0ge1xuXHRcdFx0ZGF0YTogXCJcIlxuXHRcdH07XG5cdFx0Ly8gZmlsbCBvdXIgb2JqZWN0IHdpdGggcHJvdmlkZWQgcHJvcHMsIGFuZCBmYWxsYmFjayB0byBkZWZhdWx0c1xuXHRcdGNvbnN0IGRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgcmF3RGF0YSk7XG5cdFx0Zm9yIChjb25zdCBwcm9wZXJ0eSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkYXRhKSkge1xuXHRcdFx0aWYgKGRhdGEuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG5cdFx0XHRcdHRoaXNbcHJvcGVydHldID0gZGF0YVtwcm9wZXJ0eV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iXX0=