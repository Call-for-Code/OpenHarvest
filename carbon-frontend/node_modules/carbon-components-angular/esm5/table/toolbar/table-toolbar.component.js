/**
 *
 * carbon-angular v0.0.0 | table-toolbar.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { TableModel } from "../table-model.class";
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
/**
 * The table toolbar is reserved for global table actions such as table settings, complex filter, export, or editing table data.
 *
 * ## Basic usage
 *
 * ```html
 * <ibm-table-toolbar [model]="model">
 *		<ibm-table-toolbar-actions>
 *			<button ibmButton="primary">
 *				Delete
 *				<svg ibmIcon="delete" size="16" class="bx--btn__icon"></svg>
 *			</button>
 *			<button ibmButton="primary">
 *				Save
 *				<svg ibmIcon="save" size="16" class="bx--btn__icon"></svg>
 *			</button>
 *			<button ibmButton="primary">
 *				Download
 *				<svg ibmIcon="download" size="16" class="bx--btn__icon"></svg>
 *			</button>
 *		</ibm-table-toolbar-actions>
 *			<ibm-table-toolbar-content>
 *			<ibm-table-toolbar-search [expandable]="true"></ibm-table-toolbar-search>
 *			<button ibmButton="toolbar-action">
 *				<svg ibmIcon="settings" size="16" class="bx--toolbar-action__icon"></ibm-icon-settings>
 *			</button>
 *			<button ibmButton="primary" size="sm">
 *				Primary Button
 *				<svg ibmIcon="add" size="20" class="bx--btn__icon"></svg>
 *			</button>
 *		</ibm-table-toolbar-content>
 *	</ibm-table-toolbar>
 * ```
 *
 */
var TableToolbar = /** @class */ (function () {
    function TableToolbar(i18n) {
        this.i18n = i18n;
        this.size = "md";
        this.cancel = new EventEmitter();
        this.actionBarLabel = this.i18n.getOverridable("TABLE_TOOLBAR.ACTION_BAR");
        this._cancelText = this.i18n.getOverridable("TABLE_TOOLBAR.CANCEL");
        this._batchTextLegacy = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT");
        this._batchTextSingle = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT_SINGLE");
        this._batchTextMultiple = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT_MULTIPLE");
    }
    Object.defineProperty(TableToolbar.prototype, "batchText", {
        set: function (value) {
            if (typeof value === "object") {
                this._batchTextSingle.override(value.SINGLE);
                this._batchTextMultiple.override(value.MULTIPLE);
            }
            else {
                // For compatibility with old code
                this._batchTextLegacy.override(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableToolbar.prototype, "ariaLabel", {
        set: function (value) {
            this.actionBarLabel.override(value.ACTION_BAR);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableToolbar.prototype, "cancelText", {
        get: function () {
            return { CANCEL: this._cancelText.value };
        },
        set: function (value) {
            this._cancelText.override(value.CANCEL);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableToolbar.prototype, "count", {
        get: function () {
            return this.model.totalDataLength > 0 ? this.model.rowsSelected.reduce(function (previous, current) { return previous + (current ? 1 : 0); }, 0) : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableToolbar.prototype, "selected", {
        get: function () {
            return this.model.totalDataLength > 0 ? this.model.rowsSelected.some(function (item) { return item; }) : false;
        },
        enumerable: true,
        configurable: true
    });
    TableToolbar.prototype.onCancel = function () {
        this.model.selectAll(false);
        this.cancel.emit();
    };
    TableToolbar.decorators = [
        { type: Component, args: [{
                    selector: "ibm-table-toolbar",
                    template: "\n\t<section\n\t\tclass=\"bx--table-toolbar\"\n\t\t[ngClass]=\"{'bx--table-toolbar--small' : size === 'sm'}\">\n\t\t<div\n\t\t\t*ngIf=\"model\"\n\t\t\tclass=\"bx--batch-actions\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--batch-actions--active': selected\n\t\t\t}\"\n\t\t\t[attr.aria-label]=\"actionBarLabel.subject | async\">\n\t\t\t<div class=\"bx--action-list\">\n\t\t\t\t<ng-content select=\"ibm-table-toolbar-actions\"></ng-content>\n\t\t\t\t<button\n\t\t\t\t\tibmButton=\"primary\"\n\t\t\t\t\tclass=\"bx--batch-summary__cancel\"\n\t\t\t\t\t[tabindex]=\"selected ? 0 : -1\"\n\t\t\t\t\t(click)=\"onCancel()\">\n\t\t\t\t\t{{_cancelText.subject | async}}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class=\"bx--batch-summary\">\n\t\t\t\t<p class=\"bx--batch-summary__para\" *ngIf=\"count as n\">\n\t\t\t\t\t<ng-container *ngIf=\"_batchTextLegacy.subject | async as legacyText; else batchTextBlock\">\n\t\t\t\t\t\t<span>{{n}}</span> {{legacyText}}\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template #batchTextBlock>\n\t\t\t\t\t\t<span *ngIf=\"n === 1\">{{_batchTextSingle.subject | async}}</span>\n\t\t\t\t\t\t<span *ngIf=\"n !== 1\">{{_batchTextMultiple.subject | i18nReplace: {count: n} | async}}</span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<ng-content></ng-content>\n\t</section>\n\t"
                }] }
    ];
    /** @nocollapse */
    TableToolbar.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    TableToolbar.propDecorators = {
        model: [{ type: Input }],
        batchText: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        cancelText: [{ type: Input }],
        size: [{ type: Input }],
        cancel: [{ type: Output }]
    };
    return TableToolbar;
}());
export { TableToolbar };
//# sourceMappingURL=data:application/json;base64,