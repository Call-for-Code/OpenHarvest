/**
 *
 * carbon-angular v0.0.0 | table-head-cell.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { map } from "rxjs/operators";
import { TableHeaderItem } from "../table-header-item.class";
var TableHeadCell = /** @class */ (function () {
    function TableHeadCell(i18n) {
        this.i18n = i18n;
        this.skeleton = false;
        this.sortable = true;
        /**
         * Notifies that the column should be sorted
         */
        this.sort = new EventEmitter();
        this.theadAction = false;
        this._sortDescendingLabel = this.i18n.getOverridable("TABLE.SORT_DESCENDING");
        this._sortAscendingLabel = this.i18n.getOverridable("TABLE.SORT_ASCENDING");
        this._filterTitle = this.i18n.getOverridable("TABLE.FILTER");
    }
    Object.defineProperty(TableHeadCell.prototype, "sortDescendingLabel", {
        get: function () {
            return this._sortDescendingLabel.value;
        },
        set: function (value) {
            this._sortDescendingLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableHeadCell.prototype, "sortAscendingLabel", {
        get: function () {
            return this._sortAscendingLabel.value;
        },
        set: function (value) {
            this._sortAscendingLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableHeadCell.prototype, "filterTitle", {
        get: function () {
            return this._filterTitle.value;
        },
        set: function (value) {
            this._filterTitle.override(value);
        },
        enumerable: true,
        configurable: true
    });
    TableHeadCell.prototype.ngOnChanges = function () {
        // Since it's not an input, and it touches the view, we're using `ngOnChanges`
        // `get`ters have caused issues in the past with the view updating outside of change detection
        this.theadAction = !!this.column.filterTemplate || this.sort.observers.length > 0;
    };
    TableHeadCell.prototype.getSortDescendingLabel = function () {
        return this._sortDescendingLabel.subject.pipe(this.sortLabelMap());
    };
    TableHeadCell.prototype.getSortAscendingLabel = function () {
        return this._sortAscendingLabel.subject.pipe(this.sortLabelMap());
    };
    TableHeadCell.prototype.getFilterTitle = function () {
        return this._filterTitle.subject;
    };
    TableHeadCell.prototype.onClick = function () {
        if (!this.skeleton) {
            this.sort.emit();
        }
    };
    TableHeadCell.prototype.sortLabelMap = function () {
        var _this = this;
        return map(function (str) {
            if (_this.column.ariaSortLabel) {
                return _this.column.ariaSortLabel;
            }
            if (_this.column.formatSortLabel) {
                return _this.column.formatSortLabel(str, _this.column.ariaSortLabel);
            }
            return _this.column.data + " - " + str;
        });
    };
    TableHeadCell.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[ibmTableHeadCell]",
                    template: "\n\t\t<button\n\t\t\tclass=\"bx--table-sort\"\n\t\t\t*ngIf=\"sortable && this.sort.observers.length > 0 && column.sortable\"\n\t\t\t[attr.aria-label]=\"(column.sorted && column.ascending ? getSortDescendingLabel() : getSortAscendingLabel()) | async\"\n\t\t\taria-live=\"polite\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--table-sort--active': column.sorted,\n\t\t\t\t'bx--table-sort--ascending': column.ascending\n\t\t\t}\"\n\t\t\t(click)=\"onClick()\">\n\t\t\t<span\n\t\t\t\tclass=\"bx--table-sort__flex\"\n\t\t\t\t[title]=\"column.data\"\n\t\t\t\ttabindex=\"-1\">\n\t\t\t\t<div *ngIf=\"!skeleton && !column.template\" ibmTableHeadCellLabel>\n\t\t\t\t\t{{column.data}}\n\t\t\t\t</div>\n\t\t\t\t<ng-template\n\t\t\t\t\t*ngIf=\"!skeleton && column.template\"\n\t\t\t\t\t[ngTemplateOutlet]=\"column.template\"\n\t\t\t\t\t[ngTemplateOutletContext]=\"{data: column.data}\">\n\t\t\t\t</ng-template>\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"bx--table-sort__icon\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M12.3 9.3l-3.8 3.8V1h-1v12.1L3.7 9.3 3 10l5 5 5-5z\"></path>\n\t\t\t\t</svg>\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"bx--table-sort__icon-unsorted\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M13.8 10.3L12 12.1V2h-1v10.1l-1.8-1.8-.7.7 3 3 3-3zM4.5 2l-3 3 .7.7L4 3.9V14h1V3.9l1.8 1.8.7-.7z\"></path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t</button>\n\t\t<div\n\t\t\tclass=\"bx--table-header-label\"\n\t\t\t*ngIf=\"!skeleton && this.sort.observers.length === 0 || (this.sort.observers.length > 0 && !column.sortable) || !sortable\">\n\t\t\t<span *ngIf=\"!column.template\" [title]=\"column.data\">{{column.data}}</span>\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"column.template\" [ngTemplateOutletContext]=\"{data: column.data}\">\n\t\t\t</ng-template>\n\t\t</div>\n\t\t<button\n\t\t\t[ngClass]=\"{'active': column.filterCount > 0}\"\n\t\t\t*ngIf=\"column.filterTemplate\"\n\t\t\ttype=\"button\"\n\t\t\taria-expanded=\"false\"\n\t\t\taria-haspopup=\"true\"\n\t\t\t[ibmTooltip]=\"column.filterTemplate\"\n\t\t\ttrigger=\"click\"\n\t\t\t[title]=\"getFilterTitle() | async\"\n\t\t\tplacement=\"bottom,top\"\n\t\t\t[data]=\"column.filterData\">\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"icon--sm\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\tviewBox=\"0 0 16 16\">\n\t\t\t\t<path d=\"M0 0v3l6 8v5h4v-5l6-8V0H0zm9 10.7V15H7v-4.3L1.3 3h13.5L9 10.7z\"/>\n\t\t\t</svg>\n\t\t\t<span *ngIf=\"column.filterCount > 0\">\n\t\t\t\t{{column.filterCount}}\n\t\t\t</span>\n\t\t</button>\n\t"
                }] }
    ];
    /** @nocollapse */
    TableHeadCell.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    TableHeadCell.propDecorators = {
        column: [{ type: Input }],
        skeleton: [{ type: Input }],
        sortable: [{ type: Input }],
        sortDescendingLabel: [{ type: Input }],
        sortAscendingLabel: [{ type: Input }],
        filterTitle: [{ type: Input }],
        sort: [{ type: Output }],
        theadAction: [{ type: HostBinding, args: ["class.thead_action",] }]
    };
    return TableHeadCell;
}());
export { TableHeadCell };
//# sourceMappingURL=data:application/json;base64,