/**
 *
 * carbon-angular v0.0.0 | table-row.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding, HostListener } from "@angular/core";
import { TableModel } from "../table-model.class";
import { I18n } from "carbon-components-angular/i18n";
var TableRowComponent = /** @class */ (function () {
    function TableRowComponent(i18n) {
        this.i18n = i18n;
        this.expanded = false;
        this.expandable = false;
        this.selected = false;
        /**
         * Size of the table rows.
         */
        this.size = "md";
        /**
         * Controls whether to enable multiple or single row selection.
         */
        this.enableSingleSelect = false;
        /**
         * Controls whether to show the selection checkboxes column or not.
         */
        this.showSelectionColumn = true;
        /**
         * Shows or hide the checkbox in the selection column when `showSelectionColumn`
         * is set to true
         */
        this.showSelectionColumnCheckbox = true;
        this.skeleton = false;
        /**
         * Emits when the row is selected.
         */
        this.selectRow = new EventEmitter();
        /**
         * Emits when the row is deselected.
         */
        this.deselectRow = new EventEmitter();
        /**
         * Emits when the row is expanded
         */
        this.expandRow = new EventEmitter();
        /**
         * Emits when a row is clicked regardless of `enableSingleSelect` or `showSelectionColumn`.
         * Should only get emitted when a row item is selected excluding expand buttons,
         * checkboxes, or radios.
         */
        this.rowClick = new EventEmitter();
        this._checkboxLabel = this.i18n.getOverridable("TABLE.CHECKBOX_ROW");
        this._expandButtonAriaLabel = this.i18n.getOverridable("TABLE.EXPAND_BUTTON");
    }
    Object.defineProperty(TableRowComponent.prototype, "expandButtonAriaLabel", {
        get: function () {
            return this._expandButtonAriaLabel.value;
        },
        set: function (value) {
            this._expandButtonAriaLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "checkboxLabel", {
        get: function () {
            return this._checkboxLabel.value;
        },
        set: function (value) {
            this._checkboxLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "selectedClass", {
        get: function () {
            return this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "parentRowClass", {
        get: function () {
            return this.expandable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "expandableRowClass", {
        get: function () {
            return this.expanded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "selectableClass", {
        get: function () {
            return false; // this.singleSelect
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "isParentRow", {
        get: function () {
            return this.expandable ? true : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRowComponent.prototype, "isAccessible", {
        get: function () {
            return this.enableSingleSelect && !this.showSelectionColumn ? 0 : null;
        },
        enumerable: true,
        configurable: true
    });
    TableRowComponent.prototype.onHostClick = function () {
        if (this.enableSingleSelect && !this.showSelectionColumn) {
            this.onSelectionChange();
        }
    };
    TableRowComponent.prototype.onRowClick = function () {
        this.rowClick.emit();
    };
    TableRowComponent.prototype.onSelectionChange = function () {
        if (this.selected) {
            this.deselectRow.emit();
        }
        else {
            this.selectRow.emit();
        }
    };
    TableRowComponent.prototype.getCheckboxLabel = function () {
        return this._checkboxLabel.subject;
    };
    TableRowComponent.prototype.getExpandButtonAriaLabel = function () {
        return this._expandButtonAriaLabel.subject;
    };
    TableRowComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[ibmTableRow]",
                    template: "\n\t\t<ng-container *ngIf=\"model\">\n\t\t\t<td\n\t\t\t\t*ngIf=\"model.hasExpandableRows()\"\n\t\t\t\tibmTableExpandButton\n\t\t\t\tclass=\"bx--table-expand-v2\"\n\t\t\t\t[expanded]=\"expanded\"\n\t\t\t\t[expandable]=\"expandable\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[ariaLabel]=\"getExpandButtonAriaLabel()\"\n\t\t\t\t[headers]=\"model.getHeaderId('expand')\"\n\t\t\t\t(expandRow)=\"expandRow.emit()\">\n\t\t\t</td>\n\t\t\t<ng-container *ngIf=\"!skeleton && showSelectionColumn && !enableSingleSelect\">\n\t\t\t\t<td\n\t\t\t\t\t*ngIf=\"!showSelectionColumnCheckbox; else tableCheckboxTemplate\">\n\t\t\t\t</td>\n\t\t\t\t<ng-template #tableCheckboxTemplate>\n\t\t\t\t\t<td\n\t\t\t\t\t\tibmTableCheckbox\n\t\t\t\t\t\tclass=\"bx--table-column-checkbox\"\n\t\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t\t[selected]=\"selected\"\n\t\t\t\t\t\t[label]=\"getCheckboxLabel()\"\n\t\t\t\t\t\t[row]=\"row\"\n\t\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t\t[headers]=\"model.getHeaderId('select')\"\n\t\t\t\t\t\t(change)=\"onSelectionChange()\">\n\t\t\t\t\t</td>\n\t\t\t\t</ng-template>\n\t\t\t</ng-container>\n\t\t\t<td\n\t\t\t\t*ngIf=\"!skeleton && showSelectionColumn && enableSingleSelect\"\n\t\t\t\tibmTableRadio\n\t\t\t\t[selected]=\"selected\"\n\t\t\t\t[label]=\"getCheckboxLabel()\"\n\t\t\t\t[row]=\"row\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[headers]=\"model.getHeaderId('select')\"\n\t\t\t\t(change)=\"onSelectionChange()\">\n\t\t\t</td>\n\t\t\t<ng-container *ngFor=\"let item of row; let j = index\">\n\t\t\t\t<td\n\t\t\t\t\t*ngIf=\"item && model.getHeader(j) && model.getHeader(j).visible\"\n\t\t\t\t\tibmTableData\n\t\t\t\t\t[headers]=\"model.getHeaderId(j, item.colSpan)\"\n\t\t\t\t\t[item]=\"item\"\n\t\t\t\t\t[title]=\"item.title\"\n\t\t\t\t\t[class]=\"model.getHeader(j).className\"\n\t\t\t\t\t[ngStyle]=\"model.getHeader(j).style\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t[attr.colspan]=\"item.colSpan\"\n\t\t\t\t\t[attr.rowspan]=\"item.rowSpan\"\n\t\t\t\t\t(click)=\"onRowClick()\"\n\t\t\t\t\t(keydown.enter)=\"onRowClick()\">\n\t\t\t\t</td>\n\t\t\t\t<td\n\t\t\t\t\t*ngIf=\"item && model.getHeader(j) == null\"\n\t\t\t\t\tibmTableData\n\t\t\t\t\t[headers]=\"model.getHeaderId(j, item.colSpan)\"\n\t\t\t\t\t[item]=\"item\"\n\t\t\t\t\t[title]=\"item.title\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t[attr.colspan]=\"item.colSpan\"\n\t\t\t\t\t[attr.rowspan]=\"item.rowSpan\"\n\t\t\t\t\t(click)=\"onRowClick()\"\n\t\t\t\t\t(keydown.enter)=\"onRowClick()\">\n\t\t\t\t</td>\n\t\t\t</ng-container>\n\t\t</ng-container>\n\t\t<ng-content></ng-content>\n\t"
                }] }
    ];
    /** @nocollapse */
    TableRowComponent.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    TableRowComponent.propDecorators = {
        model: [{ type: Input }],
        row: [{ type: Input }],
        expanded: [{ type: Input }],
        expandable: [{ type: Input }],
        selected: [{ type: Input }],
        size: [{ type: Input }],
        enableSingleSelect: [{ type: Input }],
        expandButtonAriaLabel: [{ type: Input }],
        checkboxLabel: [{ type: Input }],
        showSelectionColumn: [{ type: Input }],
        showSelectionColumnCheckbox: [{ type: Input }],
        selectionLabelColumn: [{ type: Input }],
        skeleton: [{ type: Input }],
        selectRow: [{ type: Output }],
        deselectRow: [{ type: Output }],
        expandRow: [{ type: Output }],
        rowClick: [{ type: Output }],
        selectedClass: [{ type: HostBinding, args: ["class.bx--data-table--selected",] }],
        parentRowClass: [{ type: HostBinding, args: ["class.bx--parent-row",] }],
        expandableRowClass: [{ type: HostBinding, args: ["class.bx--expandable-row",] }],
        selectableClass: [{ type: HostBinding, args: ["class.tbody_row--selectable",] }],
        isParentRow: [{ type: HostBinding, args: ["attr.data-parent-row",] }],
        isAccessible: [{ type: HostBinding, args: ["attr.tabindex",] }],
        onHostClick: [{ type: HostListener, args: ["click",] }]
    };
    return TableRowComponent;
}());
export { TableRowComponent };
//# sourceMappingURL=data:application/json;base64,