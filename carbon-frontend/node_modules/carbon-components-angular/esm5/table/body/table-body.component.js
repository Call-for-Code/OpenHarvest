/**
 *
 * carbon-angular v0.0.0 | table-body.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, EventEmitter, Output } from "@angular/core";
import { TableModel } from "../table-model.class";
import { I18n } from "carbon-components-angular/i18n";
var TableBody = /** @class */ (function () {
    function TableBody(i18n) {
        this.i18n = i18n;
        /**
         * Controls whether to enable multiple or single row selection.
         */
        this.enableSingleSelect = false;
        /**
         * Controls whether to show the selection checkboxes column or not.
         */
        this.showSelectionColumn = true;
        /**
         * Size of the table rows.
         */
        this.size = "md";
        this.skeleton = false;
        /**
         * Emits if a single row is selected.
         *
         * @param ({model: this.model, selectedRowIndex: index})
         */
        this.selectRow = new EventEmitter();
        /**
         * Emits if a single row is deselected.
         *
         * @param ({model: this.model, deselectedRowIndex: index})
         */
        this.deselectRow = new EventEmitter();
        /**
         * Emits if a row item excluding expandButtons, checkboxes, or radios is clicked.
         */
        this.rowClick = new EventEmitter();
        this._checkboxRowLabel = this.i18n.getOverridable("TABLE.CHECKBOX_ROW");
        this._expandButtonAriaLabel = this.i18n.getOverridable("TABLE.EXPAND_BUTTON");
    }
    Object.defineProperty(TableBody.prototype, "expandButtonAriaLabel", {
        get: function () {
            return this._expandButtonAriaLabel.value;
        },
        set: function (value) {
            this._expandButtonAriaLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableBody.prototype, "checkboxRowLabel", {
        get: function () {
            return this._checkboxRowLabel.value;
        },
        set: function (value) {
            this._checkboxRowLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Triggered when a single row is clicked.
     * Updates the header checkbox state.
     * Emits the `selectRow` or `deselectRow` event.
     */
    TableBody.prototype.onRowCheckboxChange = function (index) {
        if (this.model.isRowSelected(index)) {
            this.deselectRow.emit({ model: this.model, deselectedRowIndex: index });
        }
        else {
            this.selectRow.emit({ model: this.model, selectedRowIndex: index });
        }
    };
    TableBody.prototype.onRowClick = function (index) {
        this.rowClick.emit(index);
    };
    TableBody.prototype.getCheckboxRowLabel = function () {
        return this._checkboxRowLabel.subject;
    };
    TableBody.prototype.getExpandButtonAriaLabel = function () {
        return this._expandButtonAriaLabel.subject;
    };
    TableBody.prototype.firstExpandedDataInRow = function (row) {
        var found = row.find(function (d) { return d.expandedData; });
        if (found) {
            return found.expandedData;
        }
        return found;
    };
    TableBody.prototype.shouldExpandAsTable = function (row) {
        return row.some(function (d) { return d.expandAsTable; });
    };
    TableBody.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[ibmTableBody]",
                    template: "\n\t\t<ng-container *ngIf=\"model\">\n\t\t\t<ng-container *ngFor=\"let row of model.data; let i = index\">\n\t\t\t\t<tr\n\t\t\t\t\tibmTableRow\n\t\t\t\t\t[model]=\"model\"\n\t\t\t\t\t[row]=\"row\"\n\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t[selected]=\"model.isRowSelected(i)\"\n\t\t\t\t\t[expandable]=\"model.isRowExpandable(i)\"\n\t\t\t\t\t[expanded]=\"model.isRowExpanded(i)\"\n\t\t\t\t\t[checkboxLabel]=\"getCheckboxRowLabel()\"\n\t\t\t\t\t[expandButtonAriaLabel]=\"getExpandButtonAriaLabel()\"\n\t\t\t\t\t[showSelectionColumn]=\"showSelectionColumn\"\n\t\t\t\t\t[enableSingleSelect]=\"enableSingleSelect\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t(selectRow)=\"onRowCheckboxChange(i)\"\n\t\t\t\t\t(deselectRow)=\"onRowCheckboxChange(i)\"\n\t\t\t\t\t(expandRow)=\"model.expandRow(i, !model.isRowExpanded(i))\"\n\t\t\t\t\t(rowClick)=\"onRowClick(i)\"\n\t\t\t\t\t*ngIf=\"!model.isRowFiltered(i)\"\n\t\t\t\t\t[class]=\"(model.rowsClass[i] ? model.rowsClass[i] : null)\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'tbody_row--success': !model.isRowSelected(i) && model.getRowContext(i) === 'success',\n\t\t\t\t\t\t'tbody_row--warning': !model.isRowSelected(i) && model.getRowContext(i) === 'warning',\n\t\t\t\t\t\t'tbody_row--info': !model.isRowSelected(i) && model.getRowContext(i) === 'info',\n\t\t\t\t\t\t'tbody_row--error': !model.isRowSelected(i) && model.getRowContext(i) === 'error'\n\t\t\t\t\t}\">\n\t\t\t\t</tr>\n\t\t\t\t<ng-container *ngIf=\"model.isRowExpanded(i) && !model.isRowFiltered(i)\">\n\t\t\t\t\t<tr\n\t\t\t\t\t\t*ngIf=\"!shouldExpandAsTable(row); else expandAsTableTemplate\"\n\t\t\t\t\t\tibmTableExpandedRow\n\t\t\t\t\t\tibmExpandedRowHover\n\t\t\t\t\t\t[row]=\"row\"\n\t\t\t\t\t\t[expanded]=\"model.isRowExpanded(i)\"\n\t\t\t\t\t\t[skeleton]=\"skeleton\">\n\t\t\t\t\t</tr>\n\t\t\t\t\t<ng-template #expandAsTableTemplate>\n\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t*ngFor=\"let expandedDataRow of firstExpandedDataInRow(row)\"\n\t\t\t\t\t\t\tibmTableRow\n\t\t\t\t\t\t\t[model]=\"model\"\n\t\t\t\t\t\t\t[showSelectionColumnCheckbox]=\"false\"\n\t\t\t\t\t\t\t[showSelectionColumn]=\"showSelectionColumn\"\n\t\t\t\t\t\t\t[row]=\"expandedDataRow\"\n\t\t\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t\t\t[skeleton]=\"skeleton\">\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ng-container>\n\t\t\t</ng-container>\n\t\t</ng-container>\n\t\t<ng-content></ng-content>\n\t"
                }] }
    ];
    /** @nocollapse */
    TableBody.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    TableBody.propDecorators = {
        model: [{ type: Input }],
        enableSingleSelect: [{ type: Input }],
        expandButtonAriaLabel: [{ type: Input }],
        checkboxRowLabel: [{ type: Input }],
        showSelectionColumn: [{ type: Input }],
        size: [{ type: Input }],
        selectionLabelColumn: [{ type: Input }],
        skeleton: [{ type: Input }],
        selectRow: [{ type: Output }],
        deselectRow: [{ type: Output }],
        rowClick: [{ type: Output }]
    };
    return TableBody;
}());
export { TableBody };
//# sourceMappingURL=data:application/json;base64,