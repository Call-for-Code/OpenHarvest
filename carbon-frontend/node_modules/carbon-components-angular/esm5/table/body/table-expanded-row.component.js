/**
 *
 * carbon-angular v0.0.0 | table-expanded-row.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input } from "@angular/core";
var TableExpandedRow = /** @class */ (function () {
    function TableExpandedRow() {
        this.skeleton = false;
        this.expandableRowClass = true;
        this.expanded = false;
    }
    TableExpandedRow.prototype.firstExpandedTemplateInRow = function (row) {
        var found = row.find(function (d) { return d.expandedTemplate; });
        if (found) {
            return found.expandedTemplate;
        }
        return found;
    };
    TableExpandedRow.prototype.firstExpandedDataInRow = function (row) {
        var found = row.find(function (d) { return d.expandedData; });
        if (found) {
            return found.expandedData;
        }
        return found;
    };
    TableExpandedRow.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[ibmTableExpandedRow]",
                    template: "\n\t\t<td [attr.colspan]=\"row.length + 2\">\n\t\t\t<ng-container *ngIf=\"!firstExpandedTemplateInRow(row)\">\n\t\t\t\t{{firstExpandedDataInRow(row)}}\n\t\t\t</ng-container>\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"firstExpandedTemplateInRow(row)\"\n\t\t\t\t[ngTemplateOutletContext]=\"{data: firstExpandedDataInRow(row)}\">\n\t\t\t</ng-template>\n\t\t</td>\n\t"
                }] }
    ];
    TableExpandedRow.propDecorators = {
        row: [{ type: Input }],
        skeleton: [{ type: Input }],
        expandableRowClass: [{ type: HostBinding, args: ["class.bx--expandable-row",] }],
        expanded: [{ type: HostBinding, args: ["attr.data-child-row",] }, { type: Input }]
    };
    return TableExpandedRow;
}());
export { TableExpandedRow };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZXhwYW5kZWQtcm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFibGUvIiwic291cmNlcyI6WyJib2R5L3RhYmxlLWV4cGFuZGVkLXJvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBRXZCO0lBQUE7UUFrQlUsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVlLHVCQUFrQixHQUFHLElBQUksQ0FBQztRQUV0QixhQUFRLEdBQUcsS0FBSyxDQUFDO0lBaUIvRCxDQUFDO0lBZkEscURBQTBCLEdBQTFCLFVBQTJCLEdBQUc7UUFDN0IsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxnQkFBZ0IsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDO1FBQ2hELElBQUksS0FBSyxFQUFFO1lBQ1YsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7U0FDOUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxpREFBc0IsR0FBdEIsVUFBdUIsR0FBRztRQUN6QixJQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFlBQVksRUFBZCxDQUFjLENBQUMsQ0FBQztRQUM1QyxJQUFJLEtBQUssRUFBRTtZQUNWLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQztTQUMxQjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQzs7Z0JBdENELFNBQVMsU0FBQztvQkFDViwrQ0FBK0M7b0JBQy9DLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSxvWEFVVDtpQkFDRDs7O3NCQUVDLEtBQUs7MkJBRUwsS0FBSztxQ0FFTCxXQUFXLFNBQUMsMEJBQTBCOzJCQUV0QyxXQUFXLFNBQUMscUJBQXFCLGNBQUcsS0FBSzs7SUFpQjNDLHVCQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0F4QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRIb3N0QmluZGluZyxcblx0SW5wdXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXG5cdHNlbGVjdG9yOiBcIltpYm1UYWJsZUV4cGFuZGVkUm93XVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDx0ZCBbYXR0ci5jb2xzcGFuXT1cInJvdy5sZW5ndGggKyAyXCI+XG5cdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIWZpcnN0RXhwYW5kZWRUZW1wbGF0ZUluUm93KHJvdylcIj5cblx0XHRcdFx0e3tmaXJzdEV4cGFuZGVkRGF0YUluUm93KHJvdyl9fVxuXHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwiZmlyc3RFeHBhbmRlZFRlbXBsYXRlSW5Sb3cocm93KVwiXG5cdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7ZGF0YTogZmlyc3RFeHBhbmRlZERhdGFJblJvdyhyb3cpfVwiPlxuXHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHQ8L3RkPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRhYmxlRXhwYW5kZWRSb3cge1xuXHRASW5wdXQoKSByb3c6IGFueVtdO1xuXG5cdEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWV4cGFuZGFibGUtcm93XCIpIGV4cGFuZGFibGVSb3dDbGFzcyA9IHRydWU7XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5kYXRhLWNoaWxkLXJvd1wiKSBASW5wdXQoKSBleHBhbmRlZCA9IGZhbHNlO1xuXG5cdGZpcnN0RXhwYW5kZWRUZW1wbGF0ZUluUm93KHJvdykge1xuXHRcdGNvbnN0IGZvdW5kID0gcm93LmZpbmQoZCA9PiBkLmV4cGFuZGVkVGVtcGxhdGUpO1xuXHRcdGlmIChmb3VuZCkge1xuXHRcdFx0cmV0dXJuIGZvdW5kLmV4cGFuZGVkVGVtcGxhdGU7XG5cdFx0fVxuXHRcdHJldHVybiBmb3VuZDtcblx0fVxuXG5cdGZpcnN0RXhwYW5kZWREYXRhSW5Sb3cocm93KSB7XG5cdFx0Y29uc3QgZm91bmQgPSByb3cuZmluZChkID0+IGQuZXhwYW5kZWREYXRhKTtcblx0XHRpZiAoZm91bmQpIHtcblx0XHRcdHJldHVybiBmb3VuZC5leHBhbmRlZERhdGE7XG5cdFx0fVxuXHRcdHJldHVybiBmb3VuZDtcblx0fVxufVxuIl19