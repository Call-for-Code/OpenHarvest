/**
 *
 * carbon-angular v0.0.0 | label.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ElementRef, HostBinding, TemplateRef, ViewChild, ContentChild } from "@angular/core";
import { TextArea } from "./text-area.directive";
/**
 * [See demo](../../?path=/story/input--label)
 *
 * ```html
 * <ibm-label labelState="success">
 * 	<label label>Field with success</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="warning">
 * 	<label label>Field with warning</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="error">
 * 	<label label>Field with error</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 * ```
 *
 * <example-url>../../iframe.html?id=input--label</example-url>
 */
var Label = /** @class */ (function () {
    /**
     * Creates an instance of Label.
     */
    function Label() {
        /**
         * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with
         * its input counterpart through the 'for' attribute.
         */
        this.labelInputID = "ibm-label-" + Label.labelCounter;
        /**
         * The class of the wrapper
         */
        this.wrapperClass = "bx--text-input__field-wrapper";
        /**
         * State of the `Label` will determine the styles applied.
         */
        this.labelState = "";
        /**
         * Set to `true` for a loading label.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid label component.
         */
        this.invalid = false;
        this.labelClass = true;
        Label.labelCounter++;
    }
    /**
     * Update wrapper class if a textarea is hosted.
     */
    Label.prototype.ngAfterContentInit = function () {
        if (this.textArea) {
            this.wrapperClass = "bx--text-area__wrapper";
        }
    };
    /**
     * Sets the id on the input item associated with the `Label`.
     */
    Label.prototype.ngAfterViewInit = function () {
        if (this.wrapper) {
            var inputElement = this.wrapper.nativeElement.querySelector("input,textarea,div");
            if (inputElement) {
                inputElement.setAttribute("id", this.labelInputID);
            }
        }
    };
    Label.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * Used to build the id of the input item associated with the `Label`.
     */
    Label.labelCounter = 0;
    Label.decorators = [
        { type: Component, args: [{
                    selector: "ibm-label",
                    template: "\n\t\t<label\n\t\t\t[for]=\"labelInputID\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"bx--label\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t\t<div [class]=\"wrapperClass\" [attr.data-invalid]=\"(invalid ? true : null)\" #wrapper>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"invalid\"\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--text-input__invalid-icon bx--text-area__invalid-icon\">\n\t\t\t</svg>\n\t\t\t<ng-content select=\"input,textarea,div\"></ng-content>\n\t\t</div>\n\t\t<div *ngIf=\"!skeleton && helperText && !invalid\" class=\"bx--form__helper-text\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    Label.ctorParameters = function () { return []; };
    Label.propDecorators = {
        labelState: [{ type: Input }],
        skeleton: [{ type: Input }],
        helperText: [{ type: Input }],
        invalidText: [{ type: Input }],
        invalid: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        wrapper: [{ type: ViewChild, args: ["wrapper", { static: false },] }],
        textArea: [{ type: ContentChild, args: [TextArea, { static: false },] }],
        labelClass: [{ type: HostBinding, args: ["class.bx--form-item",] }]
    };
    return Label;
}());
export { Label };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pbnB1dC8iLCJzb3VyY2VzIjpbImxhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFFTCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEVBQ1QsWUFBWSxFQUVaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0g7SUErRUM7O09BRUc7SUFDSDtRQTlDQTs7O1dBR0c7UUFDSCxpQkFBWSxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ2pEOztXQUVHO1FBQ0gsaUJBQVksR0FBRywrQkFBK0IsQ0FBQztRQUUvQzs7V0FFRztRQUNNLGVBQVUsR0FBeUMsRUFBRSxDQUFDO1FBQy9EOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQVMxQjs7V0FFRztRQUNNLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFZVyxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBTXJELEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQ0FBa0IsR0FBbEI7UUFDQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyx3QkFBd0IsQ0FBQztTQUM3QztJQUNGLENBQUM7SUFFRDs7T0FFRztJQUNILCtCQUFlLEdBQWY7UUFDQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDcEYsSUFBSSxZQUFZLEVBQUU7Z0JBQ2pCLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuRDtTQUNEO0lBQ0YsQ0FBQztJQUVNLDBCQUFVLEdBQWpCLFVBQWtCLEtBQUs7UUFDdEIsT0FBTyxLQUFLLFlBQVksV0FBVyxDQUFDO0lBQ3JDLENBQUM7SUE3RUQ7O09BRUc7SUFDSSxrQkFBWSxHQUFHLENBQUMsQ0FBQzs7Z0JBbkN4QixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSwrbUNBMkJUO2lCQUNEOzs7Ozs2QkFtQkMsS0FBSzsyQkFJTCxLQUFLOzZCQUlMLEtBQUs7OEJBSUwsS0FBSzswQkFJTCxLQUFLOzRCQUlMLEtBQUs7MEJBR0wsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7MkJBR3RDLFlBQVksU0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzZCQUV4QyxXQUFXLFNBQUMscUJBQXFCOztJQWlDbkMsWUFBQztDQUFBLEFBOUdELElBOEdDO1NBL0VZLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRBZnRlclZpZXdJbml0LFxuXHRFbGVtZW50UmVmLFxuXHRIb3N0QmluZGluZyxcblx0VGVtcGxhdGVSZWYsXG5cdFZpZXdDaGlsZCxcblx0Q29udGVudENoaWxkLFxuXHRBZnRlckNvbnRlbnRJbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IFRleHRBcmVhIH0gZnJvbSBcIi4vdGV4dC1hcmVhLmRpcmVjdGl2ZVwiO1xuXG4vKipcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2lucHV0LS1sYWJlbClcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLWxhYmVsIGxhYmVsU3RhdGU9XCJzdWNjZXNzXCI+XG4gKiBcdDxsYWJlbCBsYWJlbD5GaWVsZCB3aXRoIHN1Y2Nlc3M8L2xhYmVsPlxuICogXHQ8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LWZpZWxkXCI+XG4gKiA8L2libS1sYWJlbD5cbiAqXG4gKiA8aWJtLWxhYmVsIGxhYmVsU3RhdGU9XCJ3YXJuaW5nXCI+XG4gKiBcdDxsYWJlbCBsYWJlbD5GaWVsZCB3aXRoIHdhcm5pbmc8L2xhYmVsPlxuICogXHQ8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LWZpZWxkXCI+XG4gKiA8L2libS1sYWJlbD5cbiAqXG4gKiA8aWJtLWxhYmVsIGxhYmVsU3RhdGU9XCJlcnJvclwiPlxuICogXHQ8bGFiZWwgbGFiZWw+RmllbGQgd2l0aCBlcnJvcjwvbGFiZWw+XG4gKiBcdDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiaW5wdXQtZmllbGRcIj5cbiAqIDwvaWJtLWxhYmVsPlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWlucHV0LS1sYWJlbDwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tbGFiZWxcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bGFiZWxcblx0XHRcdFtmb3JdPVwibGFiZWxJbnB1dElEXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdGNsYXNzPVwiYngtLWxhYmVsXCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2J4LS1za2VsZXRvbic6IHNrZWxldG9uXG5cdFx0XHR9XCI+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9sYWJlbD5cblx0XHQ8ZGl2IFtjbGFzc109XCJ3cmFwcGVyQ2xhc3NcIiBbYXR0ci5kYXRhLWludmFsaWRdPVwiKGludmFsaWQgPyB0cnVlIDogbnVsbClcIiAjd3JhcHBlcj5cblx0XHRcdDxzdmdcblx0XHRcdFx0Km5nSWY9XCJpbnZhbGlkXCJcblx0XHRcdFx0aWJtSWNvbj1cIndhcm5pbmctLWZpbGxlZFwiXG5cdFx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHRcdGNsYXNzPVwiYngtLXRleHQtaW5wdXRfX2ludmFsaWQtaWNvbiBieC0tdGV4dC1hcmVhX19pbnZhbGlkLWljb25cIj5cblx0XHRcdDwvc3ZnPlxuXHRcdFx0PG5nLWNvbnRlbnQgc2VsZWN0PVwiaW5wdXQsdGV4dGFyZWEsZGl2XCI+PC9uZy1jb250ZW50PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgKm5nSWY9XCIhc2tlbGV0b24gJiYgaGVscGVyVGV4dCAmJiAhaW52YWxpZFwiIGNsYXNzPVwiYngtLWZvcm1fX2hlbHBlci10ZXh0XCI+XG5cdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzVGVtcGxhdGUoaGVscGVyVGV4dClcIj57e2hlbHBlclRleHR9fTwvbmctY29udGFpbmVyPlxuXHRcdFx0PG5nLXRlbXBsYXRlICpuZ0lmPVwiaXNUZW1wbGF0ZShoZWxwZXJUZXh0KVwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImhlbHBlclRleHRcIj48L25nLXRlbXBsYXRlPlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgKm5nSWY9XCJpbnZhbGlkXCIgY2xhc3M9XCJieC0tZm9ybS1yZXF1aXJlbWVudFwiPlxuXHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc1RlbXBsYXRlKGludmFsaWRUZXh0KVwiPnt7aW52YWxpZFRleHR9fTwvbmctY29udGFpbmVyPlxuXHRcdFx0PG5nLXRlbXBsYXRlICpuZ0lmPVwiaXNUZW1wbGF0ZShpbnZhbGlkVGV4dClcIiBbbmdUZW1wbGF0ZU91dGxldF09XCJpbnZhbGlkVGV4dFwiPjwvbmctdGVtcGxhdGU+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgTGFiZWwgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0IHtcblx0LyoqXG5cdCAqIFVzZWQgdG8gYnVpbGQgdGhlIGlkIG9mIHRoZSBpbnB1dCBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgYExhYmVsYC5cblx0ICovXG5cdHN0YXRpYyBsYWJlbENvdW50ZXIgPSAwO1xuXHQvKipcblx0ICogVGhlIGlkIG9mIHRoZSBpbnB1dCBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgYExhYmVsYC4gVGhpcyB2YWx1ZSBpcyBhbHNvIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBgTGFiZWxgIHdpdGhcblx0ICogaXRzIGlucHV0IGNvdW50ZXJwYXJ0IHRocm91Z2ggdGhlICdmb3InIGF0dHJpYnV0ZS5cblx0ICovXG5cdGxhYmVsSW5wdXRJRCA9IFwiaWJtLWxhYmVsLVwiICsgTGFiZWwubGFiZWxDb3VudGVyO1xuXHQvKipcblx0ICogVGhlIGNsYXNzIG9mIHRoZSB3cmFwcGVyXG5cdCAqL1xuXHR3cmFwcGVyQ2xhc3MgPSBcImJ4LS10ZXh0LWlucHV0X19maWVsZC13cmFwcGVyXCI7XG5cblx0LyoqXG5cdCAqIFN0YXRlIG9mIHRoZSBgTGFiZWxgIHdpbGwgZGV0ZXJtaW5lIHRoZSBzdHlsZXMgYXBwbGllZC5cblx0ICovXG5cdEBJbnB1dCgpIGxhYmVsU3RhdGU6IFwic3VjY2Vzc1wiIHwgXCJ3YXJuaW5nXCIgfCBcImVycm9yXCIgfCBcIlwiID0gXCJcIjtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgZm9yIGEgbG9hZGluZyBsYWJlbC5cblx0ICovXG5cdEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBPcHRpb25hbCBoZWxwZXIgdGV4dCB0aGF0IGFwcGVhcnMgdW5kZXIgdGhlIGxhYmVsLlxuXHQgKi9cblx0QElucHV0KCkgaGVscGVyVGV4dDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pjtcblx0LyoqXG5cdCAqIFNldHMgdGhlIGludmFsaWQgdGV4dC5cblx0ICovXG5cdEBJbnB1dCgpIGludmFsaWRUZXh0OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCBmb3IgYW4gaW52YWxpZCBsYWJlbCBjb21wb25lbnQuXG5cdCAqL1xuXHRASW5wdXQoKSBpbnZhbGlkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdGhlIGFyaWFsYWJlbCBmb3IgbGFiZWxcblx0ICovXG5cdEBJbnB1dCgpIGFyaWFMYWJlbDogc3RyaW5nO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0QFZpZXdDaGlsZChcIndyYXBwZXJcIiwgeyBzdGF0aWM6IGZhbHNlIH0pIHdyYXBwZXI6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0QENvbnRlbnRDaGlsZChUZXh0QXJlYSwgeyBzdGF0aWM6IGZhbHNlIH0pIHRleHRBcmVhOiBUZXh0QXJlYTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tZm9ybS1pdGVtXCIpIGxhYmVsQ2xhc3MgPSB0cnVlO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIExhYmVsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0TGFiZWwubGFiZWxDb3VudGVyKys7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlIHdyYXBwZXIgY2xhc3MgaWYgYSB0ZXh0YXJlYSBpcyBob3N0ZWQuXG5cdCAqL1xuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0aWYgKHRoaXMudGV4dEFyZWEpIHtcblx0XHRcdHRoaXMud3JhcHBlckNsYXNzID0gXCJieC0tdGV4dC1hcmVhX193cmFwcGVyXCI7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGlkIG9uIHRoZSBpbnB1dCBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgYExhYmVsYC5cblx0ICovXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHRpZiAodGhpcy53cmFwcGVyKSB7XG5cdFx0XHRjb25zdCBpbnB1dEVsZW1lbnQgPSB0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQsdGV4dGFyZWEsZGl2XCIpO1xuXHRcdFx0aWYgKGlucHV0RWxlbWVudCkge1xuXHRcdFx0XHRpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgdGhpcy5sYWJlbElucHV0SUQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBpc1RlbXBsYXRlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG5cdH1cbn1cbiJdfQ==