{"version":3,"file":"number.component.d.ts","sources":["number.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | number.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, TemplateRef } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { Observable } from \"rxjs\";\n/**\n * Used to emit changes performed on number input components.\n */\nexport declare class NumberChange {\n    /**\n     * Contains the `Number` that has been changed.\n     */\n    source: NumberComponent;\n    /**\n     * The value of the `Number` field encompassed in the `NumberChange` class.\n     */\n    value: number;\n}\n/**\n * [See demo](../../?path=/story/number--basic)\n *\n * <example-url>../../iframe.html?id=number--basic</example-url>\n */\nexport declare class NumberComponent implements ControlValueAccessor {\n    protected i18n: I18n;\n    /**\n     * Variable used for creating unique ids for number input components.\n     */\n    static numberCount: number;\n    containerClass: boolean;\n    /**\n     * `light` or `dark` number input theme.\n     */\n    theme: \"light\" | \"dark\";\n    /**\n     * Set to `true` for a disabled number input.\n     */\n    disabled: boolean;\n    /**\n     * Set to `true` for a loading number component.\n     */\n    skeleton: boolean;\n    /**\n     * Set to `true` for an invalid number component.\n     */\n    invalid: boolean;\n    /**\n     * The unique id for the number component.\n     */\n    id: string;\n    /**\n     * Number input field render size\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Reflects the required attribute of the `input` element.\n     */\n    required: boolean;\n    /**\n     * Sets the value attribute on the `input` element.\n     */\n    value: any;\n    /**\n     * Sets the min attribute on the `input` element.\n     */\n    min: any;\n    /**\n     * Sets the max attribute on the `input` element.\n     */\n    max: any;\n    /**\n     * Sets the text inside the `label` tag.\n     */\n    label: string | TemplateRef<any>;\n    /**\n     * Sets the optional helper text.\n     */\n    helperText: string | TemplateRef<any>;\n    /**\n     * Sets the invalid text.\n     */\n    invalidText: string | TemplateRef<any>;\n    /**\n     * Sets the amount the number controls increment and decrement by.\n     */\n    step: number;\n    /**\n     * If `step` is a decimal, we may want precision to be set to go around floating point precision.\n     */\n    precision: number;\n    /**\n     * Emits event notifying other classes when a change in state occurs in the input.\n     */\n    change: EventEmitter<NumberChange>;\n    decrementLabel: string | Observable<string>;\n    incrementLabel: string | Observable<string>;\n    protected _value: number;\n    protected _decrementLabel: Overridable;\n    protected _incrementLabel: Overridable;\n    /**\n     * Creates an instance of `Number`.\n     */\n    constructor(i18n: I18n);\n    /**\n     * This is the initial value set to the component\n     * @param value The input value.\n     */\n    writeValue(value: any): void;\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the number input is touched.\n     */\n    registerOnTouched(fn: any): void;\n    focusOut(): void;\n    /**\n     * Sets the disabled state through the model\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Called when number input is blurred. Needed to properly implement `ControlValueAccessor`.\n     */\n    onTouched: () => any;\n    /**\n     * Method set in `registerOnChange` to propagate changes back to the form.\n     */\n    propagateChange: (_: any) => void;\n    /**\n     * Adds `step` to the current `value`.\n     */\n    onIncrement(): void;\n    /**\n     * Subtracts `step` to the current `value`.\n     */\n    onDecrement(): void;\n    getDecrementLabel(): Observable<string>;\n    getIncrementLabel(): Observable<string>;\n    /**\n     * Creates a class of `NumberChange` to emit the change in the `Number`.\n     */\n    emitChangeEvent(): void;\n    onNumberInputChange(event: any): void;\n    isTemplate(value: any): boolean;\n}\nexport { NumberComponent as Number };\n"]}