{"version":3,"file":"icon.service.d.ts","sources":["icon.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | icon.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * An object that represents a parsed icon\n */\nexport interface IconDescriptor {\n    /**\n     * The element to render. For the root this is `svg`\n     */\n    elem: string;\n    /**\n     * An object of attributes to apply to the element.\n     *\n     * The type here is non-exhaustive.\n     */\n    attrs: {\n        xmlns: string;\n        viewBox: string;\n        fill: string;\n        width: string;\n        height: string;\n        [x: string]: string;\n    };\n    /**\n     * The content (children) of the element as an array of `IconDescriptor`s\n     * (usually without a few fields, namely `name` and `size`)\n     */\n    content: IconDescriptor[];\n    /**\n     * The name of the icon.\n     *\n     * Needed by the icon service.\n     */\n    name: string;\n    /**\n     * The size of the icon in pixels.\n     *\n     * Needed by the icon service.\n     */\n    size: number;\n    /**\n     * Optional. A string representation of the compiled svg.\n     * If missing the icon service will add this.\n     */\n    svg?: string;\n}\n/**\n * Abstract class that represent a cache of icons.\n *\n * The actual caching mechanism will be implementation specific,\n * but it's likely a good idea to key by the icons name and/or size.\n * Icon name and size will always be strings, and they will be the two consistent\n * identifiers of an icon. For the purposes of storage additonal descriptor properties may\n * be used, but the name and size are the only ones guarenteed to be passed for lookup purposes.\n */\nexport declare abstract class IconCache {\n    /**\n     * Finds and returns an icon based on it's name and size\n     */\n    abstract get(name: string, size: string): object;\n    /**\n     * stores an icon descriptor to the cache\n     */\n    abstract set(name: string, size: string, descriptor: object): void;\n}\n/**\n * Custom error for when a name can't be found\n */\nexport declare class IconNameNotFoundError extends Error {\n    constructor(name: string);\n}\n/**\n * Custom error for when a specific size can't be found\n */\nexport declare class IconSizeNotFoundError extends Error {\n    constructor(size: string, name: string);\n}\n/**\n * Concrete implementation of `IconCache` as a simple in memory cache\n */\nexport declare class IconMemoryCache extends IconCache {\n    private iconMap;\n    get(name: string, size: string): object;\n    set(name: string, size: string, descriptor: object): void;\n}\n/**\n * The icon service is a singleton service responsible for registering and retriving icons from `@carbon/icons`.\n *\n * It's important to register icons before use. It's reccommended to register your icons early, likely in your app.component.\n *\n * To allow for improved tree shaking _do not_ import all the icons from `@carbon/icons` and register them.\n * Instead register only the icons in use by your application. If your application makes use of lazy loaded\n * modules you may also lazy load the icons used in that module by registering them early on in that module.\n *\n * `ngOnInit` should be sufficiantly early to register icons.\n *\n * Example:\n * ```\n * import { Accessibility16 } from \"@carbon/icons\";\n *\n * // ...\n *\n * class MyComponent implements OnInit {\n * \tconstructor(protected iconService: IconService) {}\n *\n * \t// ...\n *\n * \tngOnInit() {\n * \t\tthis.iconService.register(Accessibility16);\n * \t}\n *\n * \t// ...\n * }\n * ```\n *\n * If needed it is possible to register an icon under a different name, via `registerAs`.\n */\nexport declare class IconService {\n    private iconCache;\n    /**\n     * Registers an array of icons based on the metadata provided by `@carbon/cions`\n     */\n    registerAll(descriptors: object[]): void;\n    /**\n     * Registers an icon based on the metadata provided by `@carbon/icons`\n     */\n    register(descriptor: object): void;\n    /**\n     * Registers an icon based on a uniqe name and metadata provided by `@carbon/icons`\n     */\n    registerAs(name: string, descriptor: object): void;\n    /**\n     * Gets an icon, converts it to a string, and caches the result\n     */\n    get(name: string, size: string): IconDescriptor;\n    /**\n     * Configure various service settings (caching strategy ...)\n     */\n    configure(options: {\n        cache: IconCache;\n    }): void;\n}\n"]}