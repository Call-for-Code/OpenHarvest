{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | pagination.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { PaginationModel } from \"./pagination-model.class\";\nimport { EventEmitter } from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { ExperimentalService } from \"carbon-components-angular/experimental\";\nexport interface PaginationTranslations {\n    ITEMS_PER_PAGE: string;\n    OPEN_LIST_OF_OPTIONS: string;\n    BACKWARD: string;\n    FORWARD: string;\n    TOTAL_ITEMS_UNKNOWN: string;\n    TOTAL_ITEMS: string;\n    TOTAL_ITEM: string;\n    OF_LAST_PAGES: string;\n    OF_LAST_PAGE: string;\n}\n/**\n * Use pagination when you have multiple pages of data to handle.\n *\n * [See demo](../../?path=/story/pagination--basic)\n *\n * ```html\n * <ibm-pagination [model]=\"model\" (selectPage)=\"selectPage($event)\"></ibm-pagination>\n * ```\n *\n * In your `selectPage()` method set the `model.currentPage` to selected page, _after_\n * you load the page.\n *\n * ```typescript\n * selectPage(page) {\n * \t// ... your code to load the page goes here\n *\n * \tthis.model.currentPage = page;\n *\n * \t// ... anything you want to do after page selection changes goes here\n * }\n * ```\n *\n * <example-url>../../iframe.html?id=pagination--basic</example-url>\n */\nexport declare class Pagination {\n    protected i18n: I18n;\n    protected experimental: ExperimentalService;\n    static paginationCounter: number;\n    /**\n     * Set to `true` for a loading pagination component.\n     */\n    skeleton: boolean;\n    /**\n     * `PaginationModel` with the information about pages you're controlling.\n     */\n    model: PaginationModel;\n    /**\n     * Set to `true` to disable the backward/forward buttons.\n     */\n    disabled: boolean;\n    /**\n     * Set to `true` to disable the select box that changes the page.\n     */\n    pageInputDisabled: boolean;\n    /**\n     * Controls wether or not to show the page selects\n     */\n    showPageInput: boolean;\n    /**\n     * Set to `true` if the total number of items is unknown.\n     */\n    pagesUnknown: boolean;\n    pageSelectThreshold: number;\n    /**\n     * Expects an object that contains some or all of:\n     * ```\n     * {\n     *\t\t\"ITEMS_PER_PAGE\": \"Items per page:\",\n     *\t\t\"OPEN_LIST_OF_OPTIONS\": \"Open list of options\",\n     *\t\t\"BACKWARD\": \"Backward\",\n     *\t\t\"FORWARD\": \"Forward\",\n     *\t\t\"TOTAL_ITEMS_UNKNOWN\": \"{{start}}-{{end}} items\",\n     *\t\t\"TOTAL_ITEMS\": \"{{start}}-{{end}} of {{total}} items\",\n     *\t\t\"TOTAL_ITEM\": \"{{start}}-{{end}} of {{total}} item\",\n     *\t\t\"OF_LAST_PAGES\": \"of {{last}} pages\",\n     *\t\t\"OF_LAST_PAGE\": \"of {{last}} page\"\n     * }\n     * ```\n     */\n    translations: PaginationTranslations;\n    /**\n     * Options for items per page select\n     *\n     * A default array of options will be defined: [10, 20, 30, 40, 50]\n     */\n    itemsPerPageOptions: number[];\n    /**\n     * Emits the new page number.\n     *\n     * You should tie into this and update `model.currentPage` once the fresh\n     * data is finally loaded.\n     */\n    selectPage: EventEmitter<number>;\n    itemsPerPage: number;\n    currentPage: number;\n    readonly totalDataLength: number;\n    /**\n     * The last page number to display in the pagination view.\n     */\n    readonly lastPage: number;\n    readonly startItemIndex: number;\n    readonly endItemIndex: number;\n    /**\n     * The previous page number to navigate to, from the current page.\n     */\n    readonly previousPage: number;\n    /**\n     * The next page number to navigate to, from the current page.\n     */\n    readonly nextPage: number;\n    readonly pageOptions: any[];\n    itemsPerPageSelectId: string;\n    currentPageSelectId: string;\n    itemsPerPageText: Overridable;\n    optionsListText: Overridable;\n    backwardText: Overridable;\n    forwardText: Overridable;\n    totalItemsText: Overridable;\n    totalItemText: Overridable;\n    totalItemsUnknownText: Overridable;\n    pageText: Overridable;\n    ofLastPagesText: Overridable;\n    ofLastPageText: Overridable;\n    protected _pageOptions: any[];\n    constructor(i18n: I18n, experimental: ExperimentalService);\n}\n"]}