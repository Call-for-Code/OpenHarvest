{"version":3,"file":"pagination-nav.component.d.ts","sources":["pagination-nav.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | pagination-nav.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { PaginationModel } from \"../pagination-model.class\";\nimport { EventEmitter } from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { ExperimentalService } from \"carbon-components-angular/experimental\";\nexport interface PaginationNavTranslations {\n    NEXT: string;\n    PREVIOUS: string;\n}\n/**\n * Use pagination when you have multiple pages of data to handle.\n *\n * [See demo](../../?path=/story/pagination-nav--basic)\n *\n * ```html\n * <ibm-pagination-nav [model]=\"model\" (selectPage)=\"selectPage($event)\"></ibm-pagination-nav>\n * ```\n *\n * In your `selectPage()` method set the `model.currentPage` to selected page, _after_\n * you load the page.\n *\n * ```typescript\n * selectPage(page) {\n * \t// ... your code to load the page goes here\n *\n * \tthis.model.currentPage = page;\n *\n * \t// ... anything you want to do after page selection changes goes here\n * }\n * ```\n *\n * <example-url>../../iframe.html?id=pagination-nav--basic</example-url>\n */\nexport declare class PaginationNav {\n    protected i18n: I18n;\n    protected experimental: ExperimentalService;\n    static paginationCounter: number;\n    /**\n     * `PaginationNavModel` with the information about pages you're controlling.\n     */\n    model: PaginationModel;\n    /**\n     * Set to `true` to disable the backward/forward buttons.\n     */\n    disabled: boolean;\n    /**\n     * Number of items to show in pagination. Minimum is 4.\n     */\n    numOfItemsToShow: number;\n    /**\n     * Expects an object that contains some or all of:\n     * ```\n     * {\n     *\t\t\"NEXT\": \"Next\",\n     *\t\t\"PREVIOUS\": \"Previous\",\n     * }\n     * ```\n     */\n    translations: PaginationNavTranslations;\n    /**\n     * Emits the new page number.\n     *\n     * You should tie into this and update `model.currentPage` once the fresh\n     * data is finally loaded.\n     */\n    selectPage: EventEmitter<number>;\n    readonly totalNumbersArray: number[];\n    currentPage: number;\n    readonly totalDataLength: number;\n    readonly startOffset: 1 | 0;\n    readonly frontCuts: number;\n    readonly backCuts: number;\n    readonly leftArrowDisabled: boolean;\n    readonly rightArrowDisabled: boolean;\n    nextItemText: Overridable;\n    previousItemText: Overridable;\n    constructor(i18n: I18n, experimental: ExperimentalService);\n    handleOverflowSelection(page: any): void;\n    jumpToNext(): void;\n    jumpToPrevious(): void;\n    getPages(): number[];\n    private getCuts;\n}\n"]}