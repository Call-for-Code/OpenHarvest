{"version":3,"file":"checkbox.component.d.ts","sources":["checkbox.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | checkbox.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { CheckboxValue } from \"./checkbox.types\";\n/**\n * Defines the set of states for a checkbox component.\n */\nexport declare enum CheckboxState {\n    Init = 0,\n    Indeterminate = 1,\n    Checked = 2,\n    Unchecked = 3\n}\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\nexport declare class CheckboxChange {\n    /**\n     * Contains the `Checkbox` that has been changed.\n     */\n    source: Checkbox;\n    /**\n     * The state of the `Checkbox` encompassed in the `CheckboxChange` class.\n     */\n    checked: boolean;\n}\n/**\n * [See demo](../../?path=/story/checkbox--basic)\n *\n * <example-url>../../iframe.html?id=checkbox--basic</example-url>\n */\nexport declare class Checkbox implements ControlValueAccessor, AfterViewInit {\n    protected changeDetectorRef: ChangeDetectorRef;\n    /**\n     * Variable used for creating unique ids for checkbox components.\n     */\n    static checkboxCount: number;\n    /**\n     * Size of the checkbox.\n     *\n     * @deprecated since v4\n     */\n    size: \"sm\" | \"md\";\n    /**\n     * Set to `true` for checkbox to be rendered with nested styles.\n     *\n     * @deprecated since v4\n     */\n    nested: boolean;\n    /**\n     * Set to `true` for checkbox to be rendered without any classes on the host element.\n     */\n    inline: boolean;\n    /**\n     * Set to `true` for a disabled checkbox.\n     */\n    disabled: boolean;\n    /**\n     * Set to `true` for a loading checkbox.\n     */\n    skeleton: boolean;\n    /**\n     * Set to `true` to hide the checkbox labels.\n     */\n    hideLabel: boolean;\n    /**\n     * Sets the name attribute on the `input` element.\n     */\n    name: string;\n    /**\n     * The unique id for the checkbox component.\n     */\n    id: string;\n    /**\n     * Reflects the required attribute of the `input` element.\n     */\n    required: boolean;\n    /**\n     * Sets the value attribute on the `input` element.\n     */\n    value: CheckboxValue;\n    /**\n     * Used to set the `aria-label` attribute on the input element.\n     *\n     * @deprecated since v4 use the `ariaLabel` input instead\n     */\n    ariaLabel: string;\n    _ariaLabel: string;\n    /**\n     * Used to set the `aria-labelledby` attribute on the input element.\n     *\n     * @deprecated since v4 use the `ariaLabelledby` input instead\n     */\n    ariaLabelledby: string;\n    _ariaLabelledby: string;\n    /**\n     * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n     *\n     * Allows double binding with the `indeterminateChange` Output.\n     */\n    /**\n    * Reflects whether the checkbox state is indeterminate.\n    */\n    indeterminate: boolean;\n    /**\n     * Sets the `checked` state. `true` for checked, `false` for unchecked\n     *\n     * Allows double binding with the `checkedChange` Output.\n     */\n    /**\n    * Returns value `true` if state is selected for the checkbox.\n    */\n    checked: boolean;\n    readonly checkboxWrapperClass: boolean;\n    readonly formItemClass: boolean;\n    /**\n     * Emits click event.\n     */\n    click: EventEmitter<void>;\n    /**\n     * Emits event notifying other classes when a change in state occurs on a checkbox after a\n     * click.\n     *\n     * @deprecated since v4 use `checked` and `checkedChange` instead\n     */\n    change: EventEmitter<any>;\n    /**\n     * Emits an event when the value of the checkbox changes.\n     *\n     * Allows double biding with the `checked` Input.\n     */\n    checkedChange: EventEmitter<boolean>;\n    /**\n     * Emits event notifying other classes when a change in state occurs specifically\n     * on an indeterminate checkbox.\n     */\n    indeterminateChange: EventEmitter<boolean>;\n    /**\n     * Set to `true` if the input checkbox is selected (or checked).\n     */\n    _checked: boolean;\n    /**\n     * Set to `true` if the input checkbox is in state indeterminate.\n     */\n    _indeterminate: boolean;\n    /**\n     * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n     */\n    currentCheckboxState: CheckboxState;\n    /**\n     * Maintains a reference to the view DOM element of the `Checkbox`.\n     */\n    inputCheckbox: ElementRef;\n    /**\n     * Creates an instance of `Checkbox`.\n     */\n    constructor(changeDetectorRef: ChangeDetectorRef);\n    /**\n     * Toggle the selected state of the checkbox.\n     */\n    toggle(): void;\n    /**\n     * Writes a value from `ngModel` to the component.\n     *\n     * In this case the value is the `checked` property.\n     *\n     * @param value boolean, corresponds to the `checked` property.\n     */\n    writeValue(value: any): void;\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n    registerOnTouched(fn: any): void;\n    focusOut(): void;\n    /**\n     * Executes on the event of a change within `Checkbox` to block propagation.\n     */\n    onChange(event: Event): void;\n    /**\n     * Handles click events on the `Checkbox` and emits changes to other classes.\n     */\n    onClick(event: Event): void;\n    /**\n     * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n     */\n    onTouched: () => any;\n    /**\n     * Handles changes between checkbox states.\n     */\n    transitionCheckboxState(newState: CheckboxState): void;\n    /**\n     * Creates instance of `CheckboxChange` used to propagate the change event.\n     */\n    emitChangeEvent(): void;\n    /**\n     * Updates the checkbox if it is in the indeterminate state.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Method set in `registerOnChange` to propagate changes back to the form.\n     */\n    propagateChange: (_: any) => void;\n    /**\n     * Sets checked state and optionally resets indeterminate state.\n     */\n    private setChecked;\n}\n"]}