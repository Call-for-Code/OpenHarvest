{"version":3,"file":"dropdown.component.d.ts","sources":["dropdown.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | dropdown.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, ElementRef, OnInit, AfterContentInit, OnDestroy, TemplateRef, ApplicationRef, AfterViewInit } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { AbstractDropdownView } from \"./abstract-dropdown-view.class\";\nimport { I18n } from \"carbon-components-angular/i18n\";\nimport { ListItem } from \"./list-item.interface\";\nimport { DropdownService } from \"./dropdown.service\";\nimport { ElementService } from \"carbon-components-angular/utils\";\n/**\n * Drop-down lists enable users to select one or more items from a list.\n *\n * #### Opening behavior/List DOM placement\n * By default the dropdown will try to figure out the best placement for the dropdown list.\n *\n * If it's not contained within any scrolling elements, it will open inline, if it _is_\n * contained within a scrolling container it will try to open in the body, or an `ibm-placeholder`.\n *\n * To control this behavior you can use the `appendInline` input:\n * - `[appendInline]=\"null\"` is the default (auto detection)\n * - `[appendInline]=\"false\"` will always append to the body/`ibm-placeholder`\n * - `[appendInline]=\"true\"` will always append inline (next to the dropdown button)\n *\n * [See demo](../../?path=/story/dropdown--basic)\n *\n * <example-url>../../iframe.html?id=dropdown--basic</example-url>\n */\nexport declare class Dropdown implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n    protected elementRef: ElementRef;\n    protected i18n: I18n;\n    protected dropdownService: DropdownService;\n    protected appRef: ApplicationRef;\n    protected elementService: ElementService;\n    static dropdownCount: number;\n    id: string;\n    /**\n     * Label for the dropdown.\n     */\n    label: string | TemplateRef<any>;\n    /**\n     * Sets the optional helper text.\n     */\n    helperText: string | TemplateRef<any>;\n    /**\n     * Value displayed if no item is selected.\n     */\n    placeholder: string;\n    /**\n     * The selected value from the `Dropdown`. Can be a string or template.\n     */\n    displayValue: string | TemplateRef<any>;\n    /**\n     * Sets the optional clear button tooltip text.\n     */\n    clearText: string;\n    /**\n     * Size to render the dropdown field.\n     *\n     * @deprecated since v4\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Defines whether or not the `Dropdown` supports selecting multiple items as opposed to single\n     * item selection.\n     */\n    type: \"single\" | \"multi\";\n    /**\n     * `light` or `dark` dropdown theme\n     */\n    theme: \"light\" | \"dark\";\n    /**\n     * Set to `true` to disable the dropdown.\n     */\n    disabled: boolean;\n    /**\n     * Set to `true` for a loading dropdown.\n     */\n    skeleton: boolean;\n    /**\n     * Set to `true` for an inline dropdown.\n     */\n    inline: boolean;\n    /**\n     * Set to `true` for a dropdown without arrow key activation.\n     */\n    disableArrowKeys: boolean;\n    /**\n     * Set to `true` for invalid state.\n     */\n    invalid: boolean;\n    /**\n     * Value displayed if dropdown is in invalid state.\n     */\n    invalidText: string | TemplateRef<any>;\n    /**\n     * set to `true` to place the dropdown view inline with the component\n     */\n    appendInline: boolean;\n    /**\n     * Query string for the element that contains the `Dropdown`.\n     * Used to trigger closing the dropdown if it scrolls outside of the viewport of the `scrollableContainer`.\n     */\n    scrollableContainer: string;\n    /**\n     * Deprecated. Use `itemValueKey` instead.\n     * Specifies the property to be used as the return value to `ngModel`\n     * @deprecated since v4 use itemValueKey instead\n     */\n    value: string;\n    /**\n     * Specifies the property to be used as the return value to `ngModel`\n     */\n    itemValueKey: string;\n    /**\n     * Specify feedback (mode) of the selection.\n     * `top`: selected item jumps to top\n     * `fixed`: selected item stays at it's position\n     * `top-after-reopen`: selected item jump to top after reopen dropdown\n     */\n    selectionFeedback: \"top\" | \"fixed\" | \"top-after-reopen\";\n    /**\n     * Accessible label for the button that opens the dropdown list.\n     * Defaults to the `DROPDOWN.OPEN` value from the i18n service.\n     */\n    menuButtonLabel: any;\n    /**\n     * Provides the label for the \"# selected\" text.\n     * Defaults to the `DROPDOWN.SELECTED` value from the i18n service.\n     */\n    selectedLabel: any;\n    /**\n     * Overrides the automatic dropUp.\n     */\n    dropUp: boolean;\n    /**\n     * Emits selection events.\n     */\n    selected: EventEmitter<Object>;\n    /**\n     * Emits event notifying to other classes that the `Dropdown` has been closed (collapsed).\n     */\n    onClose: EventEmitter<any>;\n    /**\n     * Emits event notifying to other classes that the `Dropdown` has been closed (collapsed).\n     */\n    close: EventEmitter<any>;\n    /**\n     * Maintains a reference to the `AbstractDropdownView` object within the content DOM.\n     */\n    view: AbstractDropdownView;\n    /**\n     * Maintains a reference to the view DOM element of the `Dropdown` button.\n     */\n    dropdownButton: any;\n    /**\n     * ViewChid of the dropdown view.\n     */\n    dropdownMenu: any;\n    hostClass: boolean;\n    /**\n     * Set to `true` if the dropdown is closed (not expanded).\n     */\n    menuIsClosed: boolean;\n    /**\n     * controls whether the `drop-up` class is applied\n     */\n    _dropUp: boolean;\n    noop: any;\n    outsideClick: any;\n    outsideKey: any;\n    keyboardNav: any;\n    protected visibilitySubscription: Subscription;\n    protected onTouchedCallback: () => void;\n    protected writtenValue: any;\n    /**\n     * Creates an instance of Dropdown.\n     */\n    constructor(elementRef: ElementRef, i18n: I18n, dropdownService: DropdownService, appRef: ApplicationRef, elementService: ElementService);\n    /**\n     * Updates the `type` property in the `@ContentChild`.\n     * The `type` property specifies whether the `Dropdown` allows single selection or multi selection.\n     */\n    ngOnInit(): void;\n    /**\n     * Initializes classes and subscribes to events for single or multi selection.\n     */\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * Removing the `Dropdown` from the body if it is appended to the body.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Propagates the injected `value`.\n     */\n    writeValue(value: any): void;\n    onBlur(): void;\n    registerOnChange(fn: any): void;\n    /**\n     * Registering the function injected to control the touch use of the `Dropdown`.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * function passed in by `registerOnChange`\n     */\n    propagateChange: (_: any) => void;\n    /**\n     * `ControlValueAccessor` method to programmatically disable the dropdown.\n     *\n     * ex: `this.formGroup.get(\"myDropdown\").disable();`\n     *\n     * @param isDisabled `true` to disable the input\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Adds keyboard functionality for navigation, selection and closing of the `Dropdown`.\n     */\n    onKeyDown(event: KeyboardEvent): void;\n    closedDropdownNavigation(event: any): void;\n    /**\n     * Returns the display value if there is a selection and displayValue is set,\n     * if there is just a selection the ListItem content property will be returned,\n     * otherwise the placeholder will be returned.\n     */\n    getDisplayStringValue(): Observable<string>;\n    isRenderString(): boolean;\n    getRenderTemplateContext(): {\n        items: ListItem[];\n        item?: undefined;\n    } | {\n        item: ListItem;\n        items?: undefined;\n    } | {\n        items?: undefined;\n        item?: undefined;\n    };\n    getSelectedCount(): number;\n    clearSelected(): void;\n    /**\n     * Returns `true` if there is a value selected.\n     */\n    valueSelected(): boolean;\n    _noop(): void;\n    /**\n     * Handles clicks outside of the `Dropdown`.\n     */\n    _outsideClick(event: any): void;\n    _outsideKey(event: any): void;\n    /**\n     * Handles keyboard events so users are controlling the `Dropdown` instead of unintentionally controlling outside elements.\n     */\n    _keyboardNav(event: KeyboardEvent): void;\n    /**\n     * Creates the `Dropdown` list appending it to the dropdown parent object instead of the body.\n     */\n    _appendToDropdown(): void;\n    /**\n     * Creates the `Dropdown` list as an element that is appended to the DOM body.\n     */\n    _appendToBody(): void;\n    /**\n     * Detects whether or not the `Dropdown` list is visible within all scrollable parents.\n     * This can be overridden by passing in a value to the `dropUp` input.\n     */\n    _shouldDropUp(): boolean;\n    /**\n     * Expands the dropdown menu in the view.\n     */\n    openMenu(): void;\n    /**\n     * Collapsing the dropdown menu and removing unnecessary `EventListeners`.\n     */\n    closeMenu(): void;\n    /**\n     * Controls toggling menu states between open/expanded and closed/collapsed.\n     */\n    toggleMenu(): void;\n    isTemplate(value: any): boolean;\n    /**\n     * Controls when it's needed to apply the selection feedback\n     */\n    protected checkForReorder(): void;\n}\n"]}