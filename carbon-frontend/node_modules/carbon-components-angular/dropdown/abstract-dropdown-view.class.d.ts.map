{"version":3,"file":"abstract-dropdown-view.class.d.ts","sources":["abstract-dropdown-view.class.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | abstract-dropdown-view.class.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter } from \"@angular/core\";\nimport { ListItem } from \"./list-item.interface\";\nimport { Observable } from \"rxjs\";\n/**\n * A component that intends to be used within `Dropdown` must provide an implementation that extends this base class.\n * It also must provide the base class in the `@Component` meta-data.\n * ex: `providers: [{provide: AbstractDropdownView, useExisting: forwardRef(() => MyDropdownView)}]`\n */\nexport declare class AbstractDropdownView {\n    /**\n     * The items to be displayed in the list within the `AbstractDropDownView`.\n     */\n    items: Array<ListItem> | Observable<Array<ListItem>>;\n    /**\n     * Emits selection events to controlling classes\n     */\n    select: EventEmitter<{\n        item: ListItem;\n    } | ListItem[]>;\n    /**\n     * Event to suggest a blur on the view.\n     * Emits _after_ the first/last item has been focused.\n     * ex.\n     * ArrowUp -> focus first item\n     * ArrowUp -> emit event\n     *\n     * It's recommended that the implementing view include a specific type union of possible blurs\n     * ex. `@Output() blurIntent = new EventEmitter<\"top\" | \"bottom\">();`\n     */\n    blurIntent: EventEmitter<any>;\n    /**\n     * Specifies whether or not the `DropdownList` supports selecting multiple items as opposed to single\n     * item selection.\n     */\n    type: \"single\" | \"multi\";\n    /**\n     * Specifies the render size of the items within the `AbstractDropdownView`.\n     *\n     * @deprecated since v4\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.\n     */\n    getNextItem(): ListItem;\n    /**\n     * Returns a boolean if the currently selected item is preceded by another\n     */\n    hasNextElement(): boolean;\n    /**\n     * Returns the `HTMLElement` for the item that is subsequent to the selected item.\n     */\n    getNextElement(): HTMLElement;\n    /**\n     * Returns the `ListItem` that precedes the selected item within `DropdownList`.\n     */\n    getPrevItem(): ListItem;\n    /**\n     * Returns a boolean if the currently selected item is followed by another\n     */\n    hasPrevElement(): boolean;\n    /**\n     * Returns the `HTMLElement` for the item that precedes the selected item.\n     */\n    getPrevElement(): HTMLElement;\n    /**\n     * Returns the selected leaf level item(s) within the `DropdownList`.\n     */\n    getSelected(): ListItem[];\n    /**\n     * Returns the `ListItem` that is selected within `DropdownList`.\n     */\n    getCurrentItem(): ListItem;\n    /**\n     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.\n     */\n    getCurrentElement(): HTMLElement;\n    /**\n     * Guaranteed to return the current items as an Array.\n     */\n    getListItems(): Array<ListItem>;\n    /**\n     * Transforms array input list of items to the correct state by updating the selected item(s).\n     */\n    propagateSelected(value: Array<ListItem>): void;\n    /**\n     *\n     * @param value value to filter the list by\n     */\n    filterBy(value: string): void;\n    /**\n     * Initializes focus in the list\n     * In most cases this just calls `getCurrentElement().focus()`\n     */\n    initFocus(): void;\n    /**\n     * Subscribe the function passed to an internal observable that will resolve once the items are ready\n     */\n    onItemsReady(subcription: () => void): void;\n    /**\n     * Reorder selected items bringing them to the top of the list\n     */\n    reorderSelected(moveFocus?: boolean): void;\n}\n"]}