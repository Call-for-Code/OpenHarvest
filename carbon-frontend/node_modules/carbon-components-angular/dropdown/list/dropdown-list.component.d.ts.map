{"version":3,"file":"dropdown-list.component.d.ts","sources":["dropdown-list.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | dropdown-list.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { OnDestroy, EventEmitter, TemplateRef, AfterViewInit, ElementRef, QueryList } from \"@angular/core\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { I18n } from \"carbon-components-angular/i18n\";\nimport { AbstractDropdownView } from \"../abstract-dropdown-view.class\";\nimport { ListItem } from \"../list-item.interface\";\nimport { ScrollCustomEvent } from \"./scroll-custom-event.interface\";\n/**\n * ```html\n * <ibm-dropdown-list [items]=\"listItems\"></ibm-dropdown-list>\n * ```\n * ```typescript\n * listItems = [\n * \t{\n * \t\tcontent: \"item one\",\n * \t\tselected: false\n * \t},\n * \t{\n * \t\tcontent: \"item two\",\n * \t\tselected: false,\n * \t},\n * \t{\n * \t\tcontent: \"item three\",\n * \t\tselected: false\n * \t},\n * \t{\n * \t\tcontent: \"item four\",\n * \t\tselected: false\n * \t}\n * ];\n * ```\n */\nexport declare class DropdownList implements AbstractDropdownView, AfterViewInit, OnDestroy {\n    elementRef: ElementRef;\n    protected i18n: I18n;\n    ariaLabel: any;\n    /**\n     * The list items belonging to the `DropdownList`.\n     */\n    items: Array<ListItem> | Observable<Array<ListItem>>;\n    /**\n     * Template to bind to items in the `DropdownList` (optional).\n     */\n    listTpl: string | TemplateRef<any>;\n    /**\n     * Event to emit selection of a list item within the `DropdownList`.\n     */\n    select: EventEmitter<{\n        item: ListItem;\n        isUpdate?: boolean;\n    } | ListItem[]>;\n    /**\n     * Event to emit scroll event of a list within the `DropdownList`.\n     */\n    scroll: EventEmitter<ScrollCustomEvent>;\n    /**\n     * Event to suggest a blur on the view.\n     * Emits _after_ the first/last item has been focused.\n     * ex.\n     * ArrowUp -> focus first item\n     * ArrowUp -> emit event\n     *\n     * When this event fires focus should be placed on some element outside of the list - blurring the list as a result\n     */\n    blurIntent: EventEmitter<\"bottom\" | \"top\">;\n    /**\n     * Maintains a reference to the view DOM element for the unordered list of items within the `DropdownList`.\n     */\n    list: ElementRef;\n    /**\n     * Defines whether or not the `DropdownList` supports selecting multiple items as opposed to single\n     * item selection.\n     */\n    type: \"single\" | \"multi\";\n    /**\n     * Defines the rendering size of the `DropdownList` input component.\n     *\n     * @deprecated since v4\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Holds the list of items that will be displayed in the `DropdownList`.\n     * It differs from the the complete set of items when filtering is used (but\n     * it is always a subset of the total items in `DropdownList`).\n     */\n    displayItems: Array<ListItem>;\n    /**\n     * Maintains the index for the selected item within the `DropdownList`.\n     */\n    protected index: number;\n    /**\n     * An array holding the HTML list elements in the view.\n     */\n    protected listElementList: QueryList<ElementRef>;\n    /**\n     * Observable bound to keydown events to control filtering.\n     */\n    protected focusJump: any;\n    /**\n     * Tracks the current (if any) subscription to the items observable so we can clean up when the input is updated.\n     */\n    protected _itemsSubscription: Subscription;\n    /**\n     * Used to retain the original items passed to the setter.\n     */\n    protected _originalItems: Array<ListItem> | Observable<Array<ListItem>>;\n    /**\n     * Useful representation of the items, should be accessed via `getListItems`.\n     */\n    protected _items: Array<ListItem>;\n    /**\n     * Used to wait for items in case they are passed through an observable.\n     */\n    protected _itemsReady: Observable<boolean>;\n    /**\n     * Creates an instance of `DropdownList`.\n     */\n    constructor(elementRef: ElementRef, i18n: I18n);\n    /**\n     * Retrieves array of list items and index of the selected item after view has rendered.\n     * Additionally, any Observables for the `DropdownList` are initialized.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Removes any Observables on destruction of the component.\n     */\n    ngOnDestroy(): void;\n    doEmitSelect(isUpdate?: boolean): void;\n    /**\n     * Updates the displayed list of items and then retrieves the most current properties for the `DropdownList` from the DOM.\n     */\n    updateList(items: any): void;\n    /**\n     * Filters the items being displayed in the DOM list.\n     */\n    filterBy(query?: string): void;\n    /**\n     * Initializes (or re-initializes) the Observable that handles switching focus to an element based on\n     * key input matching the first letter of the item in the list.\n     */\n    setupFocusObservable(): void;\n    /**\n     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.\n     */\n    getNextItem(): ListItem;\n    /**\n     * Returns `true` if the selected item is not the last item in the `DropdownList`.\n     */\n    hasNextElement(): boolean;\n    /**\n     * Returns the `HTMLElement` for the item that is subsequent to the selected item.\n     */\n    getNextElement(): HTMLElement;\n    /**\n     * Returns the `ListItem` that precedes the selected item within `DropdownList`.\n     */\n    getPrevItem(): ListItem;\n    /**\n     * Returns `true` if the selected item is not the first in the list.\n     */\n    hasPrevElement(): boolean;\n    /**\n     * Returns the `HTMLElement` for the item that precedes the selected item.\n     */\n    getPrevElement(): HTMLElement;\n    /**\n     * Returns the `ListItem` that is selected within `DropdownList`.\n     */\n    getCurrentItem(): ListItem;\n    /**\n     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.\n     */\n    getCurrentElement(): HTMLElement;\n    /**\n     * Returns the items as an Array\n     */\n    getListItems(): Array<ListItem>;\n    /**\n     * Returns a list containing the selected item(s) in the `DropdownList`.\n     */\n    getSelected(): ListItem[];\n    /**\n     * Transforms array input list of items to the correct state by updating the selected item(s).\n     */\n    propagateSelected(value: Array<ListItem>): void;\n    /**\n     * Initializes focus in the list, effectively a wrapper for `getCurrentElement().focus()`\n     */\n    initFocus(): void;\n    /**\n     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.\n     */\n    doKeyDown(event: KeyboardEvent, item: ListItem): void;\n    /**\n     * Emits the selected item or items after a mouse click event has occurred.\n     */\n    doClick(event: any, item: any): void;\n    onItemFocus(index: any): void;\n    onItemBlur(index: any): void;\n    /**\n     * Emits the scroll event of the options list\n     */\n    emitScroll(event: any): void;\n    /**\n     * Subscribe the function passed to an internal observable that will resolve once the items are ready\n     */\n    onItemsReady(subcription: () => void): void;\n    reorderSelected(moveFocus?: boolean): void;\n}\n"]}