{"version":3,"file":"dropdown.service.d.ts","sources":["dropdown.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | dropdown.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { OnDestroy } from \"@angular/core\";\nimport { PlaceholderService } from \"carbon-components-angular/placeholder\";\nimport { Subscription } from \"rxjs\";\nimport { AnimationFrameService } from \"carbon-components-angular/utils\";\nexport declare class DropdownService implements OnDestroy {\n    protected placeholderService: PlaceholderService;\n    protected animationFrameService: AnimationFrameService;\n    offset: {\n        top?: number;\n        left?: number;\n    };\n    /**\n     * reference to the body appended menu\n     */\n    protected menuInstance: HTMLElement;\n    /**\n     * Maintains an Event Observable Subscription for the global requestAnimationFrame.\n     * requestAnimationFrame is tracked only if the `Dropdown` is appended to the body otherwise we don't need it\n     */\n    protected animationFrameSubscription: Subscription;\n    protected _offset: {\n        top: number;\n        left: number;\n    };\n    constructor(placeholderService: PlaceholderService, animationFrameService: AnimationFrameService);\n    /**\n     * Appends the menu to the body, or a `ibm-placeholder` (if defined)\n     *\n     * @param parentRef container to position relative to\n     * @param menuRef menu to be appended to body\n     * @param classList any extra classes we should wrap the container with\n     */\n    appendToBody(parentRef: HTMLElement, menuRef: HTMLElement, classList: any): HTMLElement;\n    /**\n     * Reattach the dropdown menu to the parent container\n     * @param hostRef container to append to\n     */\n    appendToDropdown(hostRef: HTMLElement): HTMLElement;\n    /**\n     * position an open dropdown relative to the given parentRef\n     */\n    updatePosition(parentRef: any): void;\n    ngOnDestroy(): void;\n    protected positionDropdown(parentRef: any, menuRef: any): void;\n}\n"]}