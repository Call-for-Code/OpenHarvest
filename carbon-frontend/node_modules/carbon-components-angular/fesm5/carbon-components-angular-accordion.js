/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-accordion.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, TemplateRef, EventEmitter, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

var AccordionItem = /** @class */ (function () {
    function AccordionItem() {
        this.context = null;
        this.id = "accordion-item-" + AccordionItem.accordionItemCount;
        this.skeleton = false;
        this.selected = new EventEmitter();
        this.itemClass = true;
        this.expanded = false;
        this.itemType = "list-item";
        this.role = "heading";
        this.ariaLevel = 3;
        AccordionItem.accordionItemCount++;
    }
    AccordionItem.prototype.toggleExpanded = function () {
        if (!this.skeleton) {
            this.expanded = !this.expanded;
            this.selected.emit({ id: this.id, expanded: this.expanded });
        }
    };
    AccordionItem.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    AccordionItem.accordionItemCount = 0;
    AccordionItem.decorators = [
        { type: Component, args: [{
                    selector: "ibm-accordion-item",
                    template: "\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-expanded]=\"expanded\"\n\t\t\t[attr.aria-controls]=\"id\"\n\t\t\t(click)=\"toggleExpanded()\"\n\t\t\tclass=\"bx--accordion__heading\">\n\t\t\t<svg ibmIcon=\"chevron--right\" size=\"16\" class=\"bx--accordion__arrow\"></svg>\n\t\t\t<p *ngIf=\"!isTemplate(title)\"\n\t\t\t\tclass=\"bx--accordion__title\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton__text': skeleton\n\t\t\t\t}\">\n\t\t\t\t{{!skeleton ? title : null}}\n\t\t\t</p>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(title)\"\n\t\t\t\t[ngTemplateOutlet]=\"title\"\n\t\t\t\t[ngTemplateOutletContext]=\"context\">\n\t\t\t</ng-template>\n\t\t</button>\n\t\t<div [id]=\"id\" class=\"bx--accordion__content\">\n\t\t\t<ng-content *ngIf=\"!skeleton; else skeletonTemplate\"></ng-content>\n\t\t\t<ng-template #skeletonTemplate>\n\t\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 90%\"></p>\n\t\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 80%\"></p>\n\t\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 95%\"></p>\n\t\t\t</ng-template>\n\t\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    AccordionItem.ctorParameters = function () { return []; };
    AccordionItem.propDecorators = {
        title: [{ type: Input }],
        context: [{ type: Input }],
        id: [{ type: Input }],
        skeleton: [{ type: Input }],
        selected: [{ type: Output }],
        itemClass: [{ type: HostBinding, args: ["class.bx--accordion__item",] }],
        expanded: [{ type: HostBinding, args: ["class.bx--accordion__item--active",] }, { type: Input }],
        itemType: [{ type: HostBinding, args: ["style.display",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        ariaLevel: [{ type: HostBinding, args: ["attr.aria-level",] }, { type: Input }]
    };
    return AccordionItem;
}());

/**
 * [See demo](../../?path=/story/accordion--basic)
 *
 * <example-url>../../iframe.html?id=accordion--basic</example-url>
 */
var Accordion = /** @class */ (function () {
    function Accordion() {
        this.align = "end";
        this._skeleton = false;
    }
    Object.defineProperty(Accordion.prototype, "skeleton", {
        get: function () {
            return this._skeleton;
        },
        set: function (value) {
            this._skeleton = value;
            this.updateChildren();
        },
        enumerable: true,
        configurable: true
    });
    Accordion.prototype.ngAfterContentInit = function () {
        this.updateChildren();
    };
    Accordion.prototype.updateChildren = function () {
        var _this = this;
        if (this.children) {
            this.children.toArray().forEach(function (child) { return child.skeleton = _this.skeleton; });
        }
    };
    Accordion.decorators = [
        { type: Component, args: [{
                    selector: "ibm-accordion",
                    template: "\n\t\t<ul class=\"bx--accordion\"\n\t\t\t[class.bx--accordion--end]=\"align == 'end'\"\n\t\t\t[class.bx--accordion--start]=\"align == 'start'\">\n\t\t\t<ng-content></ng-content>\n\t\t</ul>\n\t"
                }] }
    ];
    Accordion.propDecorators = {
        align: [{ type: Input }],
        children: [{ type: ContentChildren, args: [AccordionItem,] }],
        skeleton: [{ type: Input }]
    };
    return Accordion;
}());

var AccordionModule = /** @class */ (function () {
    function AccordionModule() {
    }
    AccordionModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        Accordion,
                        AccordionItem
                    ],
                    exports: [
                        Accordion,
                        AccordionItem
                    ],
                    imports: [
                        CommonModule,
                        IconModule
                    ]
                },] }
    ];
    return AccordionModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionItem, Accordion, AccordionModule };

//# sourceMappingURL=carbon-components-angular-accordion.js.map