/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-timepicker.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, Input, Output, EventEmitter, TemplateRef, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TimePickerSelectModule } from 'carbon-components-angular/timepicker-select';

/**
 * [See demo](../../?path=/story/time-picker--simple)
 *
 * <example-url>../../iframe.html?id=time-picker--simple</example-url>
 */
var TimePicker = /** @class */ (function () {
    function TimePicker() {
        this.invalid = false;
        this.placeholder = "hh:mm";
        this.pattern = "(1[012]|[0-9]):[0-5][0-9]";
        this.id = "timepicker-" + TimePicker.timePickerCount++;
        this.disabled = false;
        /**
         * Set to true for a loading select.
         */
        this.skeleton = false;
        /**
         * `light` or `dark` select theme
         */
        this.theme = "dark";
        this.valueChange = new EventEmitter();
        this.onChangeHandler = function (_) { };
        this.onTouchedHandler = function () { };
    }
    TimePicker.prototype.writeValue = function (value) {
        this.value = value;
    };
    TimePicker.prototype.registerOnChange = function (callback) {
        this.onChangeHandler = callback;
    };
    TimePicker.prototype.registerOnTouched = function (callback) {
        this.onTouchedHandler = callback;
    };
    TimePicker.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    TimePicker.prototype.onChange = function (event) {
        this.onChangeHandler(event.target.value);
        this.valueChange.emit(event.target.value);
    };
    TimePicker.prototype.focusOut = function () {
        this.onTouchedHandler();
    };
    TimePicker.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * Tracks the total number of selects instantiated. Used to generate unique IDs
     */
    TimePicker.timePickerCount = 0;
    TimePicker.decorators = [
        { type: Component, args: [{
                    selector: "ibm-timepicker",
                    template: "\n\t\t<label *ngIf=\"!skeleton && label\" [for]=\"id\" class=\"bx--label\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t</label>\n\t\t<div\n\t\t\tclass=\"bx--time-picker\"\n\t\t\t[ngClass]=\"{'bx--time-picker--invalid' : invalid}\">\n\t\t\t<div class=\"bx--time-picker__input\">\n\t\t\t\t<input\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--text-input--light': theme === 'light',\n\t\t\t\t\t\t'bx--skeleton': skeleton\n\t\t\t\t\t}\"\n\t\t\t\t\t[value]=\"value\"\n\t\t\t\t\t[placeholder]=\"placeholder\"\n\t\t\t\t\t[attr.data-invalid]=\"invalid ? true : undefined\"\n\t\t\t\t\t[pattern]=\"pattern\"\n\t\t\t\t\t[attr.id]=\"id\"\n\t\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t\tmaxlength=\"5\"\n\t\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclass=\"bx--time-picker__input-field bx--text-input\">\n\t\t\t</div>\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t\t<div *ngIf=\"invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePicker,
                            multi: true
                        }
                    ]
                }] }
    ];
    TimePicker.propDecorators = {
        invalid: [{ type: Input }],
        invalidText: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        pattern: [{ type: Input }],
        id: [{ type: Input }],
        disabled: [{ type: Input }],
        value: [{ type: Input }],
        skeleton: [{ type: Input }],
        theme: [{ type: Input }],
        valueChange: [{ type: Output }],
        focusOut: [{ type: HostListener, args: ["focusout",] }]
    };
    return TimePicker;
}());

var TimePickerModule = /** @class */ (function () {
    function TimePickerModule() {
    }
    TimePickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TimePicker
                    ],
                    exports: [
                        TimePicker
                    ],
                    imports: [
                        TimePickerSelectModule,
                        CommonModule
                    ]
                },] }
    ];
    return TimePickerModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TimePicker, TimePickerModule };

//# sourceMappingURL=carbon-components-angular-timepicker.js.map