/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-tiles.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Router } from '@angular/router';
import { merge } from 'carbon-components-angular/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Component, Input, Output, EventEmitter, Optional, ElementRef, ViewChild, HostListener, HostBinding, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';
import { LinkModule } from 'carbon-components-angular/link';

/**
 * Build application's clickable tiles using this component.
 *
 * ## Basic usage
 *
 * ```html
 * <ibm-clickable-tile>
 * 		tile content
 * </ibm-clickable-tile>
 * ```
 */
var ClickableTile = /** @class */ (function () {
    function ClickableTile(router) {
        this.router = router;
        /**
         * Sets the `href` attribute on the `ibm-clickable-tile` element.
         */
        this.href = "#";
        /**
         * Set to `true` to disable the clickable tile.
         */
        this.disabled = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
    }
    ClickableTile.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
    };
    ClickableTile.decorators = [
        { type: Component, args: [{
                    selector: "ibm-clickable-tile",
                    template: "\n\t<a\n\t\tibmLink\n\t\tclass=\"bx--tile bx--tile--clickable\"\n\t\ttabindex=\"0\"\n\t\t(click)=\"navigate($event)\"\n\t\t[href]=\"href\"\n\t\t[attr.target]=\"target\"\n\t\t[attr.aria-disabled]=\"disabled\">\n\t\t<ng-content></ng-content>\n\t</a>"
                }] }
    ];
    /** @nocollapse */
    ClickableTile.ctorParameters = function () { return [
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    ClickableTile.propDecorators = {
        href: [{ type: Input }],
        target: [{ type: Input }],
        disabled: [{ type: Input }],
        route: [{ type: Input }],
        routeExtras: [{ type: Input }],
        navigation: [{ type: Output }]
    };
    return ClickableTile;
}());

var ExpandableTile = /** @class */ (function () {
    function ExpandableTile(i18n, elementRef) {
        this.i18n = i18n;
        this.elementRef = elementRef;
        this.expanded = false;
        this.tileMaxHeight = 0;
        this.currentExpandedHeight = 0;
        this.element = this.elementRef.nativeElement;
        this.expand = this.i18n.getOverridable("TILES.EXPAND");
        this.collapse = this.i18n.getOverridable("TILES.COLLAPSE");
    }
    Object.defineProperty(ExpandableTile.prototype, "translations", {
        /**
         * Expects an object that contains some or all of:
         * ```
         * {
         *		"EXPAND": "Expand",
         *		"COLLAPSE": "Collapse",
         * }
         * ```
         */
        set: function (value) {
            var valueWithDefaults = merge(this.i18n.getMultiple("TILES"), value);
            this.expand.override(valueWithDefaults.EXPAND);
            this.collapse.override(valueWithDefaults.COLLAPSE);
        },
        enumerable: true,
        configurable: true
    });
    ExpandableTile.prototype.ngAfterContentInit = function () {
        this.updateMaxHeight();
    };
    Object.defineProperty(ExpandableTile.prototype, "expandedHeight", {
        get: function () {
            var tile = this.element.querySelector(".bx--tile");
            var tilePadding = parseInt(getComputedStyle(tile).paddingBottom, 10) + parseInt(getComputedStyle(tile).paddingTop, 10);
            var expandedHeight = this.tileMaxHeight + tilePadding;
            if (!isNaN(expandedHeight)) {
                this.currentExpandedHeight = expandedHeight;
            }
            return this.currentExpandedHeight;
        },
        enumerable: true,
        configurable: true
    });
    ExpandableTile.prototype.updateMaxHeight = function () {
        if (this.expanded) {
            this.tileMaxHeight = this.element.querySelector(".bx--tile-content").getBoundingClientRect().height;
        }
        else {
            this.tileMaxHeight = this.element.querySelector(".bx--tile-content__above-the-fold").getBoundingClientRect().height;
        }
    };
    ExpandableTile.prototype.onClick = function () {
        this.expanded = !this.expanded;
        this.updateMaxHeight();
    };
    ExpandableTile.decorators = [
        { type: Component, args: [{
                    selector: "ibm-expandable-tile",
                    template: "\n\t\t<button\n\t\t\tclass=\"bx--tile bx--tile--expandable\"\n\t\t\t[ngClass]=\"{'bx--tile--is-expanded' : expanded}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\ttype=\"button\"\n\t\t\t(click)=\"onClick()\">\n\t\t\t<div class=\"bx--tile__chevron\">\n\t\t\t\t<svg *ngIf=\"!expanded\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" [attr.title]=\"expand.subject | async\" role=\"img\">\n\t\t\t\t\t<title>{{expand.subject | async}}</title>\n\t\t\t\t\t<path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"/>\n\t\t\t\t</svg>\n\t\t\t\t<svg *ngIf=\"expanded\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" [attr.title]=\"collapse.subject | async\" role=\"img\">\n\t\t\t\t\t<title>{{collapse.subject | async}}</title>\n\t\t\t\t\t<path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"bx--tile-content\">\n\t\t\t\t<ng-content select=\".bx--tile-content__above-the-fold\"></ng-content>\n\t\t\t\t<ng-content select=\".bx--tile-content__below-the-fold\"></ng-content>\n\t\t\t</div>\n\t\t</button>\n\t"
                }] }
    ];
    /** @nocollapse */
    ExpandableTile.ctorParameters = function () { return [
        { type: I18n },
        { type: ElementRef }
    ]; };
    ExpandableTile.propDecorators = {
        expanded: [{ type: Input }],
        translations: [{ type: Input }]
    };
    return ExpandableTile;
}());

var SelectionTile = /** @class */ (function () {
    function SelectionTile(i18n) {
        this.i18n = i18n;
        /**
         * The unique id for the input.
         */
        this.id = "tile-" + SelectionTile.tileCount;
        /**
         * Internal event used to notify the containing `TileGroup` of changes.
         */
        this.change = new EventEmitter();
        /**
         * Set by the containing `TileGroup`. Used for the `name` property on the input.
         */
        this.name = "tile-group-unbound";
        /**
         * Defines whether or not the `SelectionTile` supports selecting multiple tiles as opposed to single
         * tile selection.
         */
        this.multiple = true; // Set to true because of the way tile group sets it up.
        // If an initial selected value is set before input exists, we save
        // the value and check again when input exists in `AfterViewInit`.
        this._selected = null;
        SelectionTile.tileCount++;
    }
    Object.defineProperty(SelectionTile.prototype, "selected", {
        get: function () {
            return this.input ? this.input.nativeElement.checked : false;
        },
        /**
         * Updating the state of the input to match the state of the parameter passed in.
         * Set to `true` if this tile should be selected.
         */
        set: function (value) {
            // If an initial selected value is set before input exists, we save
            // the value and check again when input exists in `AfterViewInit`.
            this._selected = value ? true : null;
            if (this.input) {
                this.input.nativeElement.checked = this._selected;
            }
        },
        enumerable: true,
        configurable: true
    });
    SelectionTile.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.input) {
            setTimeout(function () {
                _this.input.nativeElement.checked = _this._selected;
            });
        }
    };
    SelectionTile.prototype.keyboardInput = function (event) {
        if (event.key === "Enter" || event.key === "Spacebar" || event.key === " ") {
            this.selected = !this.selected;
            this.change.emit(event);
        }
    };
    SelectionTile.prototype.onChange = function (event) {
        this.change.emit(event);
    };
    SelectionTile.tileCount = 0;
    SelectionTile.decorators = [
        { type: Component, args: [{
                    selector: "ibm-selection-tile",
                    template: "\n\t\t<label\n\t\t\tclass=\"bx--tile bx--tile--selectable\"\n\t\t\ttabindex=\"0\"\n\t\t\t[for]=\"id\"\n\t\t\t[ngClass]=\"{'bx--tile--is-selected' : selected}\"\n\t\t\t[attr.aria-label]=\"i18n.get('TILES.TILE') | async\">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\ttabindex=\"-1\"\n\t\t\t\tclass=\"bx--tile-input\"\n\t\t\t\t[id]=\"id\"\n\t\t\t\t[type]=\"(multiple ? 'checkbox': 'radio')\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t(change)=\"onChange($event)\"/>\n\t\t\t<div class=\"bx--tile__checkmark\">\n\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n\t\t\t\t\t<path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm3.646-10.854L6.75 10.043 4.354 7.646l-.708.708 3.104 3.103 5.604-5.603-.708-.708z\"\n\t\t\t\t\t\tfill-rule=\"evenodd\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"bx--tile-content\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</label>\n\t"
                }] }
    ];
    /** @nocollapse */
    SelectionTile.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    SelectionTile.propDecorators = {
        id: [{ type: Input }],
        selected: [{ type: Input }],
        value: [{ type: Input }],
        change: [{ type: Output }],
        input: [{ type: ViewChild, args: ["input", { static: true },] }],
        keyboardInput: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return SelectionTile;
}());

var TileGroup = /** @class */ (function () {
    function TileGroup() {
        /**
         * The tile group `name`
         */
        this.name = "tile-group-" + TileGroup.tileGroupCount;
        /**
         * Set to `true` to support multiple tile selection
         */
        this.multiple = false;
        /**
         * Emits an event when the tile selection changes.
         *
         * Emits an object that looks like:
         * ```javascript
         * {
         * 	value: "something",
         * 	selected: true,
         * 	name: "tile-group-1"
         * }
         * ```
         */
        this.selected = new EventEmitter();
        this.tileGroupClass = true;
        this.unsubscribe$ = new Subject();
        this.unsubscribeTiles$ = new Subject();
        this.onChange = function (_) { };
        this.onTouched = function () { };
        TileGroup.tileGroupCount++;
    }
    TileGroup.prototype.ngAfterContentInit = function () {
        var _this = this;
        var updateTiles = function () {
            // remove old subscriptions
            _this.unsubscribeTiles$.next();
            // react to changes
            // setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError
            setTimeout(function () {
                _this.selectionTiles.forEach(function (tile) {
                    tile.name = _this.name;
                    tile.change
                        .pipe(takeUntil(_this.unsubscribeTiles$))
                        .subscribe(function () {
                        _this.selected.emit({
                            value: tile.value,
                            selected: tile.selected,
                            name: _this.name
                        });
                        _this.onChange(tile.value);
                    });
                    tile.multiple = _this.multiple;
                });
            });
        };
        updateTiles();
        this.selectionTiles.changes
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(function (_) { return updateTiles(); });
    };
    TileGroup.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
        // takes care of tile subscriptions when tile-group dies
        this.unsubscribeTiles$.next();
        this.unsubscribeTiles$.complete();
    };
    TileGroup.prototype.writeValue = function (value) {
        if (!this.selectionTiles) {
            return;
        }
        this.selectionTiles.forEach(function (tile) {
            if (tile.value === value) {
                tile.selected = true;
            }
            else {
                tile.selected = false;
            }
        });
    };
    TileGroup.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TileGroup.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TileGroup.tileGroupCount = 0;
    TileGroup.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tile-group",
                    template: "<ng-content select=\"ibm-selection-tile\"></ng-content>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TileGroup,
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    TileGroup.ctorParameters = function () { return []; };
    TileGroup.propDecorators = {
        name: [{ type: Input }],
        multiple: [{ type: Input }],
        selected: [{ type: Output }],
        tileGroupClass: [{ type: HostBinding, args: ["class.bx--tile-group",] }],
        selectionTiles: [{ type: ContentChildren, args: [SelectionTile,] }]
    };
    return TileGroup;
}());

/**
 * Build application's tiles using this component.
 *
 * [See demo](../../?path=/story/tiles--basic)
 *
 * ## Basic usage
 *
 * ```html
 * <ibm-tile>
 * 		tile content
 * </ibm-tile>
 * ```
 *
 * <example-url>../../iframe.html?id=tiles--basic</example-url>
 */
var Tile = /** @class */ (function () {
    function Tile() {
        this.tileClass = true;
        this.theme = "dark";
    }
    Object.defineProperty(Tile.prototype, "lightThemeEnabled", {
        get: function () {
            return this.theme === "light";
        },
        enumerable: true,
        configurable: true
    });
    Tile.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tile",
                    template: "<ng-content></ng-content>"
                }] }
    ];
    Tile.propDecorators = {
        tileClass: [{ type: HostBinding, args: ["class.bx--tile",] }],
        lightThemeEnabled: [{ type: HostBinding, args: ["class.bx--tile--light",] }],
        theme: [{ type: Input }]
    };
    return Tile;
}());

var TilesModule = /** @class */ (function () {
    function TilesModule() {
    }
    TilesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        Tile,
                        ClickableTile,
                        ExpandableTile,
                        SelectionTile,
                        TileGroup
                    ],
                    exports: [
                        Tile,
                        ClickableTile,
                        ExpandableTile,
                        SelectionTile,
                        TileGroup
                    ],
                    imports: [
                        CommonModule,
                        I18nModule,
                        LinkModule
                    ]
                },] }
    ];
    return TilesModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ClickableTile, ExpandableTile, SelectionTile, TileGroup, Tile, TilesModule };

//# sourceMappingURL=carbon-components-angular-tiles.js.map