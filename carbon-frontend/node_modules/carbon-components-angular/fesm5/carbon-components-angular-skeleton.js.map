{"version":3,"file":"carbon-components-angular-skeleton.js.map","sources":["ng://carbon-components-angular/skeleton/skeleton-placeholder.component.ts","ng://carbon-components-angular/skeleton/skeleton-text.component.ts","ng://carbon-components-angular/skeleton/skeleton.module.ts","ng://carbon-components-angular/skeleton/carbon-components-angular-skeleton.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-skeleton-placeholder\",\n\ttemplate: `\n\t\t<div class=\"bx--skeleton__placeholder\"></div>`\n})\nexport class SkeletonPlaceholder { }\n","import { Component, Input, OnChanges } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-skeleton-text\",\n\ttemplate: `\n\t\t<p\n\t\t\t*ngFor=\"let width of lineWidths\"\n\t\t\tclass=\"bx--skeleton__text\"\n\t\t\t[style.width]=\"width\">\n\t\t</p>\n\t`\n})\nexport class SkeletonText implements OnChanges {\n\t@Input() lines = 5;\n\n\t@Input() minLineWidth = 100;\n\n\t@Input() maxLineWidth = 300;\n\n\tlineWidths: Array<string>;\n\n\t/**\n\t * Returns a random width in pixels based off a min width, and a max width.\n\t */\n\tgetRandomInt(min, max) {\n\t\treturn `${Math.floor(Math.random() * (max - min + 1) + min) + \"px\"}`;\n\t}\n\n\tngOnChanges() {\n\t\t// Creates an array of length defined by input lines with content from\n\t\t// 0 to lines - 1, maps each value to a random width in pixels.\n\t\tthis.lineWidths =\n\t\t\tArray.from(Array(this.lines).keys())\n\t\t\t\t.map(num => this.getRandomInt(this.minLineWidth, this.maxLineWidth));\n\t}\n}\n","import { SkeletonPlaceholder } from \"./skeleton-placeholder.component\";\nimport { SkeletonText } from \"./skeleton-text.component\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n\tdeclarations: [\n\t\tSkeletonPlaceholder,\n\t\tSkeletonText\n\t],\n\texports: [\n\t\tSkeletonPlaceholder,\n\t\tSkeletonText\n\t],\n\timports: [\n\t\tCommonModule\n\t]\n})\nexport class SkeletonModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;IAEA;KAKoC;;gBALnC,SAAS,SAAC;oBACV,QAAQ,EAAE,0BAA0B;oBACpC,QAAQ,EAAE,uDACqC;iBAC/C;;IACkC,0BAAC;CALpC;;;ICAA;QAWU,UAAK,GAAG,CAAC,CAAC;QAEV,iBAAY,GAAG,GAAG,CAAC;QAEnB,iBAAY,GAAG,GAAG,CAAC;KAkB5B;;;;IAXA,mCAAY,GAAZ,UAAa,GAAG,EAAE,GAAG;QACpB,OAAO,MAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAE,CAAC;KACrE;IAED,kCAAW,GAAX;QAAA,iBAMC;;;QAHA,IAAI,CAAC,UAAU;YACd,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;iBAClC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAI,CAAC,YAAY,EAAE,KAAI,CAAC,YAAY,CAAC,GAAA,CAAC,CAAC;KACvE;;gBAhCD,SAAS,SAAC;oBACV,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE,sIAMT;iBACD;;;wBAEC,KAAK;+BAEL,KAAK;+BAEL,KAAK;;IAkBP,mBAAC;CAjCD;;;ICGA;KAa+B;;gBAb9B,QAAQ,SAAC;oBACT,YAAY,EAAE;wBACb,mBAAmB;wBACnB,YAAY;qBACZ;oBACD,OAAO,EAAE;wBACR,mBAAmB;wBACnB,YAAY;qBACZ;oBACD,OAAO,EAAE;wBACR,YAAY;qBACZ;iBACD;;IAC6B,qBAAC;CAb/B;;ACLA;;GAEG;;;;"}
