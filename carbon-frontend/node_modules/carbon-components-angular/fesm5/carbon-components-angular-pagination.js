/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-pagination.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';
import { ExperimentalService, ExperimentalModule } from 'carbon-components-angular/experimental';
import { merge } from 'carbon-components-angular/utils';
import { range } from 'carbon-components-angular/common';
import { __spread } from 'tslib';
import { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { IconModule } from 'carbon-components-angular/icon';
import { ButtonModule } from 'carbon-components-angular/forms';

var PaginationModel = /** @class */ (function () {
    function PaginationModel() {
        /**
         * Tracks the current page.
         */
        this.currentPage = 1;
        /**
         * Length of page.
         */
        /* tslint:disable-next-line*/
        this.pageLength = 10;
        /**
         * Absolute total number of items needed to paginate.
         */
        this.totalDataLength = 0;
    }
    return PaginationModel;
}());

/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/pagination--basic)
 *
 * ```html
 * <ibm-pagination [model]="model" (selectPage)="selectPage($event)"></ibm-pagination>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=pagination--basic</example-url>
 */
var Pagination = /** @class */ (function () {
    function Pagination(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` for a loading pagination component.
         */
        this.skeleton = false;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Set to `true` to disable the select box that changes the page.
         */
        this.pageInputDisabled = false;
        /**
         * Controls wether or not to show the page selects
         */
        this.showPageInput = true;
        /**
         * Set to `true` if the total number of items is unknown.
         */
        this.pagesUnknown = false;
        this.pageSelectThreshold = 1000;
        /**
         * Options for items per page select
         *
         * A default array of options will be defined: [10, 20, 30, 40, 50]
         */
        this.itemsPerPageOptions = [10, 20, 30, 40, 50];
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.itemsPerPageSelectId = "pagination-select-items-per-page-" + Pagination.paginationCounter;
        this.currentPageSelectId = "pagination-select-current-page-" + Pagination.paginationCounter;
        this.itemsPerPageText = this.i18n.getOverridable("PAGINATION.ITEMS_PER_PAGE");
        this.optionsListText = this.i18n.getOverridable("PAGINATION.OPEN_LIST_OF_OPTIONS");
        this.backwardText = this.i18n.getOverridable("PAGINATION.BACKWARD");
        this.forwardText = this.i18n.getOverridable("PAGINATION.FORWARD");
        this.totalItemsText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEMS");
        this.totalItemText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEM");
        this.totalItemsUnknownText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEMS_UNKNOWN");
        this.pageText = this.i18n.getOverridable("PAGINATION.PAGE");
        this.ofLastPagesText = this.i18n.getOverridable("PAGINATION.OF_LAST_PAGES");
        this.ofLastPageText = this.i18n.getOverridable("PAGINATION.OF_LAST_PAGE");
        this._pageOptions = [];
        Pagination.paginationCounter++;
    }
    Object.defineProperty(Pagination.prototype, "translations", {
        /**
         * Expects an object that contains some or all of:
         * ```
         * {
         *		"ITEMS_PER_PAGE": "Items per page:",
         *		"OPEN_LIST_OF_OPTIONS": "Open list of options",
         *		"BACKWARD": "Backward",
         *		"FORWARD": "Forward",
         *		"TOTAL_ITEMS_UNKNOWN": "{{start}}-{{end}} items",
         *		"TOTAL_ITEMS": "{{start}}-{{end}} of {{total}} items",
         *		"TOTAL_ITEM": "{{start}}-{{end}} of {{total}} item",
         *		"OF_LAST_PAGES": "of {{last}} pages",
         *		"OF_LAST_PAGE": "of {{last}} page"
         * }
         * ```
         */
        set: function (value) {
            var valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
            this.itemsPerPageText.override(valueWithDefaults.ITEMS_PER_PAGE);
            this.optionsListText.override(valueWithDefaults.OPEN_LIST_OF_OPTIONS);
            this.backwardText.override(valueWithDefaults.BACKWARD);
            this.forwardText.override(valueWithDefaults.FORWARD);
            this.totalItemsText.override(valueWithDefaults.TOTAL_ITEMS);
            this.totalItemText.override(valueWithDefaults.TOTAL_ITEM);
            this.totalItemsUnknownText.override(valueWithDefaults.TOTAL_ITEMS_UNKNOWN);
            this.pageText.override(valueWithDefaults.PAGE);
            this.ofLastPagesText.override(valueWithDefaults.OF_LAST_PAGES);
            this.ofLastPageText.override(valueWithDefaults.OF_LAST_PAGE);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "itemsPerPage", {
        get: function () {
            return this.model.pageLength;
        },
        set: function (value) {
            this.model.pageLength = Number(value);
            this.currentPage = 1; // reset page
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "currentPage", {
        get: function () {
            return this.model.currentPage;
        },
        set: function (value) {
            value = Number(value);
            // emits the value to allow the user to update current page
            // in the model once the page is loaded
            this.selectPage.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "totalDataLength", {
        get: function () {
            return this.model.totalDataLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "lastPage", {
        /**
         * The last page number to display in the pagination view.
         */
        get: function () {
            var last = Math.ceil(this.totalDataLength / this.itemsPerPage);
            return last > 0 ? last : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "startItemIndex", {
        get: function () {
            return this.endItemIndex > 0 ? (this.currentPage - 1) * this.itemsPerPage + 1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "endItemIndex", {
        get: function () {
            var projectedEndItemIndex = this.currentPage * this.itemsPerPage;
            return projectedEndItemIndex < this.totalDataLength ? projectedEndItemIndex : this.totalDataLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "previousPage", {
        /**
         * The previous page number to navigate to, from the current page.
         */
        get: function () {
            return this.currentPage <= 1 ? 1 : this.currentPage - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "nextPage", {
        /**
         * The next page number to navigate to, from the current page.
         */
        get: function () {
            var lastPage = this.lastPage;
            return this.currentPage >= lastPage ? lastPage : this.currentPage + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "pageOptions", {
        get: function () {
            if (this.totalDataLength && this._pageOptions.length !== this.totalDataLength) {
                this._pageOptions = Array(Math.ceil(this.totalDataLength / this.itemsPerPage));
            }
            return this._pageOptions;
        },
        enumerable: true,
        configurable: true
    });
    Pagination.paginationCounter = 0;
    Pagination.decorators = [
        { type: Component, args: [{
                    selector: "ibm-pagination",
                    template: "\n\t<div\n\t\tclass=\"bx--pagination\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--skeleton': skeleton\n\t\t}\">\n\t\t<!-- left skeleton div -->\n\t\t<div *ngIf=\"skeleton\" class=\"bx--pagination__left\">\n\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 70px\"></p>\n\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 35px\"></p>\n\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 105px\"></p>\n\t\t</div>\n\n\t\t<div *ngIf=\"!skeleton\" class=\"bx--pagination__left\">\n\t\t\t<ng-container *ngIf=\"showPageInput\">\n\t\t\t\t<label class=\"bx--pagination__text\" [for]=\"itemsPerPageSelectId\">\n\t\t\t\t\t{{itemsPerPageText.subject | async}}\n\t\t\t\t</label>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"bx--select bx--select--inline bx--select__item-count\"\n\t\t\t\t\t[class.bx--select--disabled]=\"pageInputDisabled\">\n\t\t\t\t\t<select\n\t\t\t\t\t\t[id]=\"itemsPerPageSelectId\"\n\t\t\t\t\t\t[(ngModel)]=\"itemsPerPage\"\n\t\t\t\t\t\t[disabled]=\"pageInputDisabled\"\n\t\t\t\t\t\tclass=\"bx--select-input\">\n\t\t\t\t\t\t<option\n\t\t\t\t\t\t\tclass=\"bx--select-option\"\n\t\t\t\t\t\t\t*ngFor=\"let option of itemsPerPageOptions\"\n\t\t\t\t\t\t\t[value]=\"option\">\n\t\t\t\t\t\t\t\t{{ option }}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<svg\n\t\t\t\t\t\tibmIcon=\"chevron--down\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tstyle=\"display: inherit\"\n\t\t\t\t\t\tclass=\"bx--select__arrow\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t[attr.ariaLabel]=\"optionsListText.subject | async\">\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\t\t\t<span *ngIf=\"!pagesUnknown && totalDataLength <= 1\" class=\"bx--pagination__text\" [ngStyle]=\"{'margin-left': showPageInput ? null : 0}\">\n\t\t\t\t{{totalItemText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex, total: totalDataLength } | async}}\n\t\t\t</span>\n\t\t\t<span *ngIf=\"!pagesUnknown && totalDataLength > 1\" class=\"bx--pagination__text\" [ngStyle]=\"{'margin-left': showPageInput ? null : 0}\">\n\t\t\t\t{{totalItemsText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex, total: totalDataLength } | async}}\n\t\t\t</span>\n\t\t\t<span *ngIf=\"pagesUnknown\" class=\"bx--pagination__text\" [ngStyle]=\"{'margin-left': showPageInput ? null : 0}\">\n\t\t\t\t{{totalItemsUnknownText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex } | async}}\n\t\t\t</span>\n\t\t</div>\n\n\t\t<!-- right skeleton div -->\n\t\t<div *ngIf=\"skeleton\" class=\"bx--pagination__right\">\n\t\t\t<p class=\"bx--skeleton__text\" style=\"width: 70px\"></p>\n\t\t</div>\n\n\t\t<div *ngIf=\"!skeleton\" class=\"bx--pagination__right\">\n\t\t\t<ng-container *ngIf=\"showPageInput\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"bx--select bx--select--inline bx--select__page-number\"\n\t\t\t\t\t[class.bx--select--disabled]=\"pageInputDisabled\">\n\t\t\t\t\t<label [for]=\"currentPageSelectId\" class=\"bx--label bx--visually-hidden\">{{itemsPerPageText.subject | async}}</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\t*ngIf=\"pageOptions.length > pageSelectThreshold\"\n\t\t\t\t\t\tstyle=\"padding-right: 1rem; margin-right: 1rem;\"\n\t\t\t\t\t\t[id]=\"currentPageSelectId\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t[max]=\"pageOptions.length\"\n\t\t\t\t\t\tclass=\"bx--select-input\"\n\t\t\t\t\t\t[(ngModel)]=\"currentPage\">\n\t\t\t\t\t<select\n\t\t\t\t\t\t*ngIf=\"pageOptions.length <= pageSelectThreshold\"\n\t\t\t\t\t\t[id]=\"currentPageSelectId\"\n\t\t\t\t\t\tclass=\"bx--select-input\"\n\t\t\t\t\t\t[disabled]=\"pageInputDisabled\"\n\t\t\t\t\t\t[(ngModel)]=\"currentPage\">\n\t\t\t\t\t\t<option *ngFor=\"let page of pageOptions; let i = index;\" class=\"bx--select-option\" [value]=\"i + 1\">{{i + 1}}</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"pageOptions.length <= 1000\"\n\t\t\t\t\t\tibmIcon=\"chevron--down\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tstyle=\"display: inherit;\"\n\t\t\t\t\t\tclass=\"bx--select__arrow\"\n\t\t\t\t\t\t[attr.ariaLabel]=\"optionsListText.subject | async\">\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\n\t\t\t<span *ngIf=\"!pagesUnknown && lastPage <= 1\" class=\"bx--pagination__text\">\n\t\t\t\t<ng-container *ngIf=\"!showPageInput\">{{currentPage}}</ng-container>\n\t\t\t\t{{ofLastPageText.subject | i18nReplace: {last: lastPage} | async}}\n\t\t\t</span>\n\t\t\t<span *ngIf=\"!pagesUnknown && lastPage > 1\" class=\"bx--pagination__text\">\n\t\t\t\t<ng-container *ngIf=\"!showPageInput\">{{currentPage}}</ng-container>\n\t\t\t\t{{ofLastPagesText.subject | i18nReplace: {last: lastPage} | async}}\n\t\t\t</span>\n\t\t\t<span *ngIf=\"pagesUnknown\" class=\"bx--pagination__text\">\n\t\t\t\t<ng-container *ngIf=\"!showPageInput\">{{currentPage}}</ng-container>\n\t\t\t\t{{pageText.subject | async}} {{currentPage}}\n\t\t\t</span>\n\t\t\t<div class=\"bx--pagination__control-buttons\">\n\t\t\t\t<button\n\t\t\t\t\tibmButton=\"ghost\"\n\t\t\t\t\ticonOnly=\"true\"\n\t\t\t\t\tclass=\"bx--pagination__button bx--pagination__button--backward\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--pagination__button--no-index': currentPage <= 1 || disabled\n\t\t\t\t\t}\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t[attr.aria-label]=\"backwardText.subject | async\"\n\t\t\t\t\t(click)=\"selectPage.emit(previousPage)\"\n\t\t\t\t\t[disabled]=\"(currentPage <= 1 || disabled ? true : null)\">\n\t\t\t\t\t<svg ibmIcon=\"caret--left\" size=\"16\"></svg>\n\t\t\t\t</button>\n\n\t\t\t\t<button\n\t\t\t\t\tibmButton=\"ghost\"\n\t\t\t\t\ticonOnly=\"true\"\n\t\t\t\t\tclass=\"\n\t\t\t\t\t\tbx--pagination__button\n\t\t\t\t\t\tbx--pagination__button--forward\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--pagination__button--no-index': currentPage >= lastPage || disabled\n\t\t\t\t\t}\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t[attr.aria-label]=\"forwardText.subject | async\"\n\t\t\t\t\t(click)=\"selectPage.emit(nextPage)\"\n\t\t\t\t\t[disabled]=\"(currentPage >= lastPage || disabled ? true : null)\">\n\t\t\t\t\t<svg ibmIcon=\"caret--right\" size=\"16\"></svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    Pagination.ctorParameters = function () { return [
        { type: I18n },
        { type: ExperimentalService }
    ]; };
    Pagination.propDecorators = {
        skeleton: [{ type: Input }],
        model: [{ type: Input }],
        disabled: [{ type: Input }],
        pageInputDisabled: [{ type: Input }],
        showPageInput: [{ type: Input }],
        pagesUnknown: [{ type: Input }],
        pageSelectThreshold: [{ type: Input }],
        translations: [{ type: Input }],
        itemsPerPageOptions: [{ type: Input }],
        selectPage: [{ type: Output }]
    };
    return Pagination;
}());

/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/pagination-nav--basic)
 *
 * ```html
 * <ibm-pagination-nav [model]="model" (selectPage)="selectPage($event)"></ibm-pagination-nav>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=pagination-nav--basic</example-url>
 */
var PaginationNav = /** @class */ (function () {
    function PaginationNav(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Number of items to show in pagination. Minimum is 4.
         */
        this.numOfItemsToShow = 4;
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.nextItemText = this.i18n.getOverridable("PAGINATION.NEXT");
        this.previousItemText = this.i18n.getOverridable("PAGINATION.PREVIOUS");
        PaginationNav.paginationCounter++;
    }
    Object.defineProperty(PaginationNav.prototype, "translations", {
        /**
         * Expects an object that contains some or all of:
         * ```
         * {
         *		"NEXT": "Next",
         *		"PREVIOUS": "Previous",
         * }
         * ```
         */
        set: function (value) {
            var valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
            this.nextItemText.override(valueWithDefaults.NEXT);
            this.previousItemText.override(valueWithDefaults.PREVIOUS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "totalNumbersArray", {
        get: function () {
            return range(this.totalDataLength + 1, 1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "currentPage", {
        get: function () {
            return this.model.currentPage;
        },
        set: function (value) {
            value = Number(value);
            // emits the value to allow the user to update current page
            // in the model once the page is loaded
            this.selectPage.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "totalDataLength", {
        get: function () {
            return this.model.totalDataLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "startOffset", {
        get: function () {
            return this.numOfItemsToShow <= 4 && this.currentPage > 1 ? 0 : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "frontCuts", {
        get: function () {
            var cuts = this.getCuts();
            return cuts.front;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "backCuts", {
        get: function () {
            var cuts = this.getCuts();
            return cuts.back;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "leftArrowDisabled", {
        get: function () {
            return this.disabled || this.currentPage === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "rightArrowDisabled", {
        get: function () {
            return this.disabled || this.currentPage === this.totalDataLength;
        },
        enumerable: true,
        configurable: true
    });
    PaginationNav.prototype.handleOverflowSelection = function (page) {
        if (typeof page === "number") {
            this.currentPage = page;
        }
    };
    PaginationNav.prototype.jumpToNext = function () {
        this.currentPage = this.currentPage < this.totalDataLength ? this.currentPage + 1 : this.totalDataLength;
    };
    PaginationNav.prototype.jumpToPrevious = function () {
        this.currentPage = this.currentPage > 1 ? this.currentPage - 1 : 1;
    };
    PaginationNav.prototype.getPages = function () {
        if (this.totalDataLength <= 1) {
            return null;
        }
        var cuts = this.getCuts();
        return this.totalNumbersArray.slice(this.startOffset + cuts.front, (1 + cuts.back) * -1);
    };
    PaginationNav.prototype.getCuts = function (splitPoint) {
        if (splitPoint === void 0) { splitPoint = null; }
        var page = this.currentPage - 1;
        var totalItems = this.totalDataLength;
        var itemsThatFit = this.numOfItemsToShow;
        if (itemsThatFit >= totalItems) {
            return {
                front: 0,
                back: 0
            };
        }
        var split = splitPoint || Math.ceil(itemsThatFit / 2) - 1;
        var frontHidden = page + 1 - split;
        var backHidden = totalItems - page - (itemsThatFit - split) + 1;
        if (frontHidden <= 1) {
            backHidden -= frontHidden <= 0 ? Math.abs(frontHidden) + 1 : 0;
            frontHidden = 0;
        }
        if (backHidden <= 1) {
            frontHidden -= backHidden <= 0 ? Math.abs(backHidden) + 1 : 0;
            backHidden = 0;
        }
        return {
            front: frontHidden,
            back: backHidden
        };
    };
    PaginationNav.paginationCounter = 0;
    PaginationNav.decorators = [
        { type: Component, args: [{
                    selector: "ibm-pagination-nav",
                    template: "\n\t<div>\n\t\t<div class=\"bx--pagination-nav\">\n\t\t\t<ul class=\"bx--pagination-nav__list\">\n\t\t\t\t<li class=\"bx--pagination-nav__list-item\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"bx--btn bx--btn--ghost bx--pagination-nav-previous\n\t\t\t\t\t\tbx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center\"\n\t\t\t\t\t\t[disabled]=\"leftArrowDisabled\"\n\t\t\t\t\t\t(click)=\"jumpToPrevious()\">\n\t\t\t\t\t\t<span class=\"bx--assistive-text\">{{previousItemText.subject | async}}</span>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tibmIcon=\"caret--left\"\n\t\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\t\tstyle=\"display: inherit\"\n\t\t\t\t\t\t\tclass=\"bx--btn__icon\">\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<ibm-pagination-nav-item\n\t\t\t\t\t*ngIf=\"this.numOfItemsToShow >= 5 || (this.numOfItemsToShow <= 4 && currentPage <= 1)\"\n\t\t\t\t\tpage=\"1\"\n\t\t\t\t\t(click)=\"currentPage = 1\"\n\t\t\t\t\t[isActive]=\"currentPage == 1\">\n\t\t\t\t</ibm-pagination-nav-item>\n\t\t\t\t<ibm-pagination-overflow\n\t\t\t\t\t*ngIf=\"frontCuts\"\n\t\t\t\t\t[count]=\"frontCuts\"\n\t\t\t\t\t[fromIndex]=\"startOffset\"\n\t\t\t\t\t(change)=\"handleOverflowSelection($event)\">\n\t\t\t\t</ibm-pagination-overflow>\n\t\t\t\t<ibm-pagination-nav-item\n\t\t\t\t\t*ngFor=\"let page of getPages();\"\n\t\t\t\t\t[page]=\"page\"\n\t\t\t\t\t(click)=\"currentPage = page\"\n\t\t\t\t\t[isActive]=\"currentPage == page\">\n\t\t\t\t</ibm-pagination-nav-item>\n\t\t\t\t<ibm-pagination-overflow\n\t\t\t\t\t*ngIf=\"backCuts\"\n\t\t\t\t\t[count]=\"backCuts\"\n\t\t\t\t\t[fromIndex]=\"totalNumbersArray.length - backCuts - 1\"\n\t\t\t\t\t(change)=\"handleOverflowSelection($event)\">\n\t\t\t\t</ibm-pagination-overflow>\n\t\t\t\t<ibm-pagination-nav-item\n\t\t\t\t\t*ngIf=\"totalDataLength > 1\"\n\t\t\t\t\t[page]=\"totalNumbersArray.length\"\n\t\t\t\t\t(click)=\"currentPage = totalNumbersArray.length\"\n\t\t\t\t\t[isActive]=\"currentPage == totalNumbersArray.length\">\n\t\t\t\t</ibm-pagination-nav-item>\n\t\t\t\t<li class=\"bx--pagination-nav__list-item\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"bx--btn bx--btn--ghost bx--pagination-nav-next\n\t\t\t\t\t\tbx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center\"\n\t\t\t\t\t\t[disabled]=\"rightArrowDisabled\"\n\t\t\t\t\t\t(click)=\"jumpToNext()\">\n\t\t\t\t\t\t<span class=\"bx--assistive-text\">{{nextItemText.subject | async}}</span>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tibmIcon=\"caret--right\"\n\t\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\t\tstyle=\"display: inherit\"\n\t\t\t\t\t\t\tclass=\"bx--btn__icon\">\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    PaginationNav.ctorParameters = function () { return [
        { type: I18n },
        { type: ExperimentalService }
    ]; };
    PaginationNav.propDecorators = {
        model: [{ type: Input }],
        disabled: [{ type: Input }],
        numOfItemsToShow: [{ type: Input }],
        translations: [{ type: Input }],
        selectPage: [{ type: Output }]
    };
    return PaginationNav;
}());

/**
 * Used to present a single navigation item in a pagination list
 *
 *  * ```html
 * <ibm-pagination-nav-item [page]="5" [isActive]="false" (click)="handleClick(value)"></ibm-pagination-nav-item>
 * ```
 */
var PaginationNavItem = /** @class */ (function () {
    function PaginationNavItem() {
        /**
         * The page for this component to dipslay
         */
        this.page = 0;
        /**
         * The state for this component to dipslay
         */
        this.isActive = false;
        /**
         * Emits click event
         */
        this.click = new EventEmitter();
    }
    PaginationNavItem.decorators = [
        { type: Component, args: [{
                    selector: "ibm-pagination-nav-item",
                    template: "\n\t\t<li class=\"bx--pagination-nav__list-item\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"bx--pagination-nav__page\"\n\t\t\t\t[ngClass]=\"{ 'bx--pagination-nav__page--active': isActive }\"\n\t\t\t\t(click)=\"click.emit(page)\">\n\t\t\t\t<span class=\"bx--pagination-nav__accessibility-label\">\n\t\t\t\t\t{{page}}\n\t\t\t\t</span>\n\t\t\t\t{{page}}\n\t\t\t</button>\n\t\t</li>\n\t"
                }] }
    ];
    /** @nocollapse */
    PaginationNavItem.ctorParameters = function () { return []; };
    PaginationNavItem.propDecorators = {
        page: [{ type: Input }],
        isActive: [{ type: Input }],
        click: [{ type: Output }]
    };
    return PaginationNavItem;
}());

/**
 * Used to present a selection of pages when there is an overflow
 * in the pagination list
 *
 * * ```html
 * <ibm-pagination-overflow [fromIndex]="5" [count]="30" (change)="handleChange(value)"></ibm-pagination-overflow>
 * ```
 */
var PaginationOverflow = /** @class */ (function () {
    function PaginationOverflow() {
        /**
         * Emits click event
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PaginationOverflow.prototype, "countAsArray", {
        get: function () {
            return __spread(Array(this.count));
        },
        enumerable: true,
        configurable: true
    });
    PaginationOverflow.prototype.handleChange = function (event) {
        event.target.value = "";
    };
    PaginationOverflow.decorators = [
        { type: Component, args: [{
                    selector: "ibm-pagination-overflow",
                    template: "\n\t\t<li class=\"bx--pagination-nav__list-item\" *ngIf=\"count > 1\">\n\t\t\t<div class=\"bx--pagination-nav__select\">\n\t\t\t<select\n\t\t\t\tclass=\"bx--pagination-nav__page bx--pagination-nav__page--select\" (change)=\"handleChange($event)\">\n\t\t\t\t<option value=\"\" hidden></option>\n\t\t\t\t<option\n\t\t\t\t(click)=\"change.emit(fromIndex + i + 1)\"\n\t\t\t\t*ngFor=\"let item of countAsArray; let i = index\">\n\t\t\t\t\t{{fromIndex + i + 1}}\n\t\t\t\t</option>\n\t\t\t</select>\n\t\t\t<div class=\"bx--pagination-nav__select-icon-wrapper\">\n\t\t\t\t<svg\n\t\t\t\t\tibmIcon=\"overflow-menu--horizontal\"\n\t\t\t\t\tsize=\"16\"\n\t\t\t\t\tstyle=\"display: inherit\"\n\t\t\t\t\tclass=\"bx--pagination-nav__select-icon\">\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t\t<ibm-pagination-nav-item *ngIf=\"count === 1\" [page]=\"fromIndex + 1\"></ibm-pagination-nav-item>\n\t"
                }] }
    ];
    /** @nocollapse */
    PaginationOverflow.ctorParameters = function () { return []; };
    PaginationOverflow.propDecorators = {
        fromIndex: [{ type: Input }],
        count: [{ type: Input }],
        change: [{ type: Output }]
    };
    return PaginationOverflow;
}());

var PaginationModule = /** @class */ (function () {
    function PaginationModule() {
    }
    PaginationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        Pagination,
                        PaginationNav,
                        PaginationNavItem,
                        PaginationOverflow
                    ],
                    exports: [
                        Pagination,
                        PaginationNav,
                        PaginationNavItem,
                        PaginationOverflow
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        I18nModule,
                        ExperimentalModule,
                        IconModule,
                        ButtonModule
                    ]
                },] }
    ];
    return PaginationModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { PaginationModel, Pagination, PaginationModule, PaginationNav, PaginationNavItem, PaginationOverflow };

//# sourceMappingURL=carbon-components-angular-pagination.js.map