/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-list.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, ElementRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * Applies list styling to the item it is used on. Best used with `li`s.
 */
var ListItemDirective = /** @class */ (function () {
    function ListItemDirective() {
        this.wrapper = true;
    }
    ListItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmListItem]"
                },] }
    ];
    ListItemDirective.propDecorators = {
        wrapper: [{ type: HostBinding, args: ["class.bx--list__item",] }]
    };
    return ListItemDirective;
}());

/**
 * Applies either ordered or unordered styling to the list container it is applied to.
 *
 * [See demo](../../?path=/story/list--basic)
 *
 * For `ul`s it will apply unordered list styles, and for `ol`s it will apply ordered list styles.
 *
 * If a `ul` or `ol` is nested within a `li` the directive will apply nested list styling.
 *
 * <example-url>../../iframe.html?id=list--basic</example-url>
 */
var List = /** @class */ (function () {
    function List(elementRef) {
        this.elementRef = elementRef;
    }
    Object.defineProperty(List.prototype, "ordered", {
        get: function () {
            if (this.nested) {
                return false;
            }
            return this.elementRef.nativeElement.tagName === "OL";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "unordered", {
        get: function () {
            if (this.nested) {
                return false;
            }
            return this.elementRef.nativeElement.tagName === "UL";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "nested", {
        get: function () {
            return !!(this.elementRef.nativeElement.parentElement && this.elementRef.nativeElement.parentElement.tagName === "LI");
        },
        enumerable: true,
        configurable: true
    });
    List.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmList]"
                },] }
    ];
    /** @nocollapse */
    List.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    List.propDecorators = {
        ordered: [{ type: HostBinding, args: ["class.bx--list--ordered",] }],
        unordered: [{ type: HostBinding, args: ["class.bx--list--unordered",] }],
        nested: [{ type: HostBinding, args: ["class.bx--list--nested",] }]
    };
    return List;
}());

var ListModule = /** @class */ (function () {
    function ListModule() {
    }
    ListModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ListItemDirective,
                        List
                    ],
                    exports: [
                        ListItemDirective,
                        List
                    ],
                    imports: [CommonModule]
                },] }
    ];
    return ListModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ListItemDirective, List, ListModule };

//# sourceMappingURL=carbon-components-angular-list.js.map