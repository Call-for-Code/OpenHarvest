/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-structured-list.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, HostBinding, Input, ContentChildren, HostListener, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * `ListColumn` represents a single column in a `StructuredList`.
 *
 * `ListColumn`s can be used in a `ListHeader` to specify the column headers, or in `ListRow`s to specify the column data.
 *
 * Example:
 * ```html
 * <ibm-list-column nowrap="true">Column 1</ibm-list-column>
 * ```
 */
var ListColumn = /** @class */ (function () {
    function ListColumn() {
        this.skeleton = false;
        this.isHeaderColumn = true;
        this.isBodyColumn = true;
        /**
         * Applies `white-space: nowrap` to the content of this `ListColumn`
         */
        this.nowrap = false;
    }
    ListColumn.decorators = [
        { type: Component, args: [{
                    selector: "ibm-list-column",
                    template: "\n\t\t<span *ngIf=\"skeleton\"></span>\n\t\t<ng-content></ng-content>\n\t"
                }] }
    ];
    ListColumn.propDecorators = {
        skeleton: [{ type: Input }],
        isHeaderColumn: [{ type: HostBinding, args: ["class.bx--structured-list-th",] }],
        isBodyColumn: [{ type: HostBinding, args: ["class.bx--structured-list-td",] }],
        nowrap: [{ type: HostBinding, args: ["class.bx--structured-list-content--nowrap",] }, { type: Input }]
    };
    return ListColumn;
}());

/**
 * `ListHeader` provides a container for the `ListColumn`s that make up the header of a structured list.
 *
 * Example:
 * ```html
 * 	<ibm-list-header>
 *		<ibm-list-column nowrap="true">Column 1</ibm-list-column>
 *		<ibm-list-column nowrap="true">Column 2</ibm-list-column>
 *		<ibm-list-column>Column 3</ibm-list-column>
 *	</ibm-list-header>
 * ```
 */
var ListHeader = /** @class */ (function () {
    function ListHeader() {
        this.wrapper = true;
        /**
         * Set by the containing `StructuredList`. Adds a dummy header for the selection column when set to true.
         */
        this.selection = false;
        this._skeleton = false;
    }
    Object.defineProperty(ListHeader.prototype, "skeleton", {
        get: function () {
            return this._skeleton;
        },
        set: function (value) {
            this._skeleton = value;
            this.updateChildren();
        },
        enumerable: true,
        configurable: true
    });
    ListHeader.prototype.ngAfterContentInit = function () {
        this.columns.forEach(function (column) {
            column.isBodyColumn = false;
            column.isHeaderColumn = true;
        });
        this.updateChildren();
    };
    ListHeader.prototype.updateChildren = function () {
        var _this = this;
        if (this.columns) {
            this.columns.toArray().forEach(function (child) { return child.skeleton = _this.skeleton; });
        }
    };
    ListHeader.decorators = [
        { type: Component, args: [{
                    selector: "ibm-list-header",
                    template: "\n\t\t<div class=\"bx--structured-list-row bx--structured-list-row--header-row\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"selection\" class=\"bx--structured-list-th\"></div>\n\t\t</div>\n\t"
                }] }
    ];
    ListHeader.propDecorators = {
        wrapper: [{ type: HostBinding, args: ["class.bx--structured-list-thead",] }],
        skeleton: [{ type: Input }],
        columns: [{ type: ContentChildren, args: [ListColumn,] }]
    };
    return ListHeader;
}());

/**
 * `ListRow` provides a container for the `ListColumn`s that make up the body of a structured list.
 *
 * Example:
 * ```html
 * 	<ibm-list-row>
 *		<ibm-list-column>Row 1</ibm-list-column>
 *		<ibm-list-column nowrap="true">Row One</ibm-list-column>
 *		<ibm-list-column>
 *			Lorem ipsum dolor sit amet,
 *			consectetur adipiscing elit. Nunc dui magna,
 *			finibus id tortor sed, aliquet bibendum augue.
 *			Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *			Pellentesque vulputate nisl a porttitor interdum.
 *		</ibm-list-column>
 *	</ibm-list-row>
 * ```
 */
var ListRow = /** @class */ (function () {
    function ListRow() {
        this.selected = false;
        /**
         * Internal event used to notify the containing `StructuredList` of changes.
         */
        this.change = new EventEmitter();
        /**
         * Set by the containing `StructuredList`. Enables or disables row level selection features.
         */
        this.selection = false;
        /**
         * Set by the containing `StructuredList`. When `selection = true`, used for the `name` property on the radio input.
         */
        this.name = "list";
        this.wrapper = true;
        this.tabindex = this.selection ? "0" : null;
    }
    ListRow.prototype.ngAfterContentInit = function () {
        this.columns.forEach(function (column) {
            column.isBodyColumn = true;
            column.isHeaderColumn = false;
        });
    };
    ListRow.prototype.onclick = function () {
        if (this.selection) {
            this.input.nativeElement.click();
        }
    };
    ListRow.prototype.onChange = function (event) {
        this.change.emit(event);
    };
    ListRow.decorators = [
        { type: Component, args: [{
                    selector: "ibm-list-row",
                    template: "\n\t\t<ng-content></ng-content>\n\t\t<ng-container *ngIf=\"selection\">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\ttabindex=\"-1\"\n\t\t\t\tclass=\"bx--structured-list-input\"\n\t\t\t\ttype=\"radio\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[title]=\"label\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t[checked]=\"selected\"/>\n\t\t\t<div class=\"bx--structured-list-td\">\n\t\t\t\t<svg ibmIcon=\"checkmark--filled\" size=\"16\" class=\"bx--structured-list-svg\"></svg>\n\t\t\t</div>\n\t\t</ng-container>\n\t"
                }] }
    ];
    ListRow.propDecorators = {
        selected: [{ type: Input }, { type: HostBinding, args: ["class.bx--structured-list-row--selected",] }],
        label: [{ type: Input }, { type: HostBinding, args: ["attr.aria-label",] }],
        value: [{ type: Input }],
        change: [{ type: Output }],
        wrapper: [{ type: HostBinding, args: ["class.bx--structured-list-row",] }],
        tabindex: [{ type: HostBinding, args: ["attr.tabindex",] }],
        columns: [{ type: ContentChildren, args: [ListColumn,] }],
        input: [{ type: ViewChild, args: ["input", { static: false },] }],
        onclick: [{ type: HostListener, args: ["click",] }]
    };
    return ListRow;
}());

/**
 * Structured Lists represent related tabular data. For larger datasets consider a full `Table`.
 *
 * [See demo](../../?path=/story/structured-list--basic)
 *
 * See [structured-list/usage](https://www.carbondesignsystem.com/components/structured-list/usage) for usage guidance.
 *
 * A basic structued list looks something like:
 * ```html
 *	<ibm-structured-list>
 *		<ibm-list-header>
 *			<ibm-list-column nowrap="true">Column 1</ibm-list-column>
 *			<ibm-list-column nowrap="true">Column 2</ibm-list-column>
 *			<ibm-list-column>Column 3</ibm-list-column>
 *		</ibm-list-header>
 *		<ibm-list-row>
 *			<ibm-list-column>Row 1</ibm-list-column>
 *			<ibm-list-column nowrap="true">Row One</ibm-list-column>
 *			<ibm-list-column>
 *				Lorem ipsum dolor sit amet,
 *				consectetur adipiscing elit. Nunc dui magna,
 *				finibus id tortor sed, aliquet bibendum augue.
 *				Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *				Pellentesque vulputate nisl a porttitor interdum.
 *			</ibm-list-column>
 *		</ibm-list-row>
 *		<ibm-list-row>
 *			<ibm-list-column>Row 2</ibm-list-column>
 *			<ibm-list-column nowrap="true">Row Two</ibm-list-column>
 *			<ibm-list-column>
 *				Lorem ipsum dolor sit amet,
 *				consectetur adipiscing elit. Nunc dui magna,
 *				finibus id tortor sed, aliquet bibendum augue.
 *				Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *				Pellentesque vulputate nisl a porttitor interdum.
 *			</ibm-list-column>
 *		</ibm-list-row>
 *	</ibm-structured-list>
 * ```
 *
 * <example-url>../../iframe.html?id=structured-list--basic</example-url>
 */
var StructuredList = /** @class */ (function () {
    function StructuredList() {
        /**
         * Set to `true` to enable radio like selection of the rows.
         */
        this.selection = false;
        /**
         * Set to `true` to apply a border and white background.
         */
        this.border = false;
        /**
         * Set to `true` to apply a condensed style to the headers and rows.
         */
        this.condensed = false;
        /**
         * Set to `true` to apply `white-space: nowrap` on _all_ conent.
         */
        this.nowrap = false;
        /**
         * Used when `selection = true` as the row radio group `name`
         */
        this.name = "structured-list-" + StructuredList.listCount++;
        /**
         * Emits an event when the row selection changes.
         *
         * Emits an object that looks like:
         * ```javascript
         * {
         * 	value: "something",
         * 	selected: true,
         * 	name: "structured-list-1"
         * }
         * ```
         */
        this.selected = new EventEmitter();
        this._skeleton = false;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(StructuredList.prototype, "skeleton", {
        /**
         * Returns the skeleton value in the `StructuredList` if there is one.
         */
        get: function () {
            return this._skeleton;
        },
        /**
         * Sets the skeleton value for all `ListHeader` to the skeleton value of `StructuredList`.
         */
        set: function (value) {
            this._skeleton = value;
            this.updateChildren();
        },
        enumerable: true,
        configurable: true
    });
    StructuredList.prototype.ngAfterContentInit = function () {
        var _this = this;
        var setSelection = function (rowOrHeader) {
            rowOrHeader.selection = _this.selection;
        };
        this.headers.forEach(setSelection);
        this.rows.forEach(function (row) {
            setSelection(row);
            row.name = _this.name;
            row.tabindex = _this.selection ? "0" : "null";
            row.change.subscribe(function () {
                _this.selected.emit({
                    value: row.value,
                    selected: row.selected,
                    name: _this.name
                });
                _this.onChange(row.value);
            });
        });
        this.updateChildren();
    };
    StructuredList.prototype.writeValue = function (value) {
        if (!this.rows) {
            return;
        }
        this.rows.forEach(function (row) {
            if (row.value === value) {
                row.selected = true;
            }
            else {
                row.selected = false;
            }
        });
    };
    StructuredList.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    StructuredList.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    StructuredList.prototype.updateChildren = function () {
        var _this = this;
        if (this.headers) {
            this.headers.toArray().forEach(function (child) { return child.skeleton = _this.skeleton; });
        }
    };
    /**
     * A counter to provide unique default values.
     */
    StructuredList.listCount = 0;
    StructuredList.decorators = [
        { type: Component, args: [{
                    selector: "ibm-structured-list",
                    template: "\n\t\t<section\n\t\t\tclass=\"bx--structured-list\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--structured-list--border': border,\n\t\t\t\t'bx--structured-list--selection': selection,\n\t\t\t\t'bx--structured-list--condensed': condensed,\n\t\t\t\t'bx--structured-list-content--nowrap': nowrap,\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content select=\"ibm-list-header\"></ng-content>\n\t\t\t<div class=\"bx--structured-list-tbody\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</section>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: StructuredList,
                            multi: true
                        }
                    ]
                }] }
    ];
    StructuredList.propDecorators = {
        selection: [{ type: Input }],
        border: [{ type: Input }],
        condensed: [{ type: Input }],
        nowrap: [{ type: Input }],
        name: [{ type: Input }],
        skeleton: [{ type: Input }],
        selected: [{ type: Output }],
        rows: [{ type: ContentChildren, args: [ListRow,] }],
        headers: [{ type: ContentChildren, args: [ListHeader,] }]
    };
    return StructuredList;
}());

var StructuredListModule = /** @class */ (function () {
    function StructuredListModule() {
    }
    StructuredListModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        StructuredList,
                        ListRow,
                        ListHeader,
                        ListColumn
                    ],
                    exports: [
                        StructuredList,
                        ListRow,
                        ListHeader,
                        ListColumn
                    ],
                    imports: [
                        CommonModule,
                        IconModule
                    ]
                },] }
    ];
    return StructuredListModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ListColumn, ListHeader, ListRow, StructuredList, StructuredListModule };

//# sourceMappingURL=carbon-components-angular-structured-list.js.map