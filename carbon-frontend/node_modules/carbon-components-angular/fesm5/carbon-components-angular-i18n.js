/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-i18n.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { __values, __read } from 'tslib';
import { BehaviorSubject, isObservable, iif } from 'rxjs';
import { map } from 'rxjs/operators';
import { merge } from 'carbon-components-angular/utils';
import { Injectable, Pipe, NgModule, SkipSelf, Optional } from '@angular/core';

var EN = {
    "BANNER": {
        "CLOSE_BUTTON": "Close alert banner"
    },
    "CALENDAR": {
        "MONTHS": {
            "JANUARY": "January",
            "FEBRUARY": "February",
            "MARCH": "March",
            "APRIL": "April",
            "MAY": "May",
            "JUNE": "June",
            "JULY": "July",
            "AUGUST": "August",
            "SEPTEMBER": "September",
            "OCTOBER": "October",
            "NOVEMBER": "November",
            "DECEMBER": "December"
        },
        "SHORTWEEKDAYS": {
            "SUNDAY": "Sun",
            "MONDAY": "Mon",
            "TUESDAY": "Tue",
            "WEDNESDAY": "Wed",
            "THURSDAY": "Thu",
            "FRIDAY": "Fri",
            "SATURDAY": "Sat"
        },
        "QUARTERS": [
            {
                "name": "Q1",
                "months": "January-March"
            },
            {
                "name": "Q2",
                "months": "April-June"
            },
            {
                "name": "Q3",
                "months": "July-September"
            },
            {
                "name": "Q4",
                "months": "October-December"
            }
        ]
    },
    "CODE_SNIPPET": {
        "CODE_SNIPPET_TEXT": "Code Snippet Text",
        "SHOW_MORE": "Show more",
        "SHOW_LESS": "Show less",
        "SHOW_MORE_ICON": "Show more icon",
        "COPY_CODE": "Copy code",
        "COPIED": "Copied!"
    },
    "COMBOBOX": {
        "PLACEHOLDER": "Filter...",
        "CLEAR_SELECTIONS": "Clear all selected items",
        "CLEAR_SELECTED": "Clear selected item",
        "A11Y": {
            "OPEN_MENU": "open menu",
            "CLOSE_MENU": "close menu",
            "CLEAR_SELECTIONS": "Clear all selected items",
            "CLEAR_SELECTED": "Clear Selection"
        }
    },
    "DIALOG": {
        "POPOVER": {
            "CLOSE": "Close popover"
        }
    },
    "DROPDOWN": {
        "OPEN": "Open menu",
        "SELECTED": "selected",
        "CLEAR": "Clear all selected items",
        "FILTER": {
            "SELECTED_ONLY": "Show selected only",
            "SEARCH": "Search",
            "NO_RESULTS": "No search results",
            "RESET_SEARCH": "Reset search"
        }
    },
    "DROPDOWN_LIST": {
        "LABEL": "Listbox"
    },
    "FILE_UPLOADER": {
        "CHECKMARK": "Checkmark",
        "CHECKMARK_TITLE": "File uploaded!",
        "OPEN": "Add file",
        "REMOVE_BUTTON": "Close button",
        "REMOVE_TITLE": "Delete File"
    },
    "LOADING": {
        "TITLE": "Loading"
    },
    "MODAL": {
        "CLOSE": "Close modal"
    },
    "NOTIFICATION": {
        "CLOSE_BUTTON": "Close alert notification"
    },
    "NUMBER": {
        "INCREMENT": "increment value",
        "DECREMENT": "decrement value"
    },
    "OVERFLOW_MENU": {
        "OVERFLOW": "Overflow"
    },
    "SEARCH": {
        "LABEL": "Search",
        "PLACEHOLDER": "Search",
        "CLEAR_BUTTON": "Clear search input",
        "TOOLBAR_SEARCH": "Toolbar search"
    },
    "PAGINATION": {
        "ITEMS_PER_PAGE": "Items per page:",
        "OPEN_LIST_OF_OPTIONS": "Open list of options",
        "BACKWARD": "Backward",
        "FORWARD": "Forward",
        "TOTAL_ITEMS_UNKNOWN": "{{start}}-{{end}} items",
        "TOTAL_ITEMS": "{{start}}-{{end}} of {{total}} items",
        "TOTAL_ITEM": "{{start}}-{{end}} of {{total}} item",
        "PAGE": "page",
        "OF_LAST_PAGES": "of {{last}} pages",
        "OF_LAST_PAGE": "of {{last}} page",
        "NEXT": "Next",
        "PREVIOUS": "Previous"
    },
    "TABLE": {
        "GO_TO_PAGE": "Go to page",
        "PREVIOUS_PAGE": "Previous page",
        "NEXT_PAGE": "Next page",
        "PREVIOUS_3": "Scroll to previous 3 pages",
        "NEXT_3": "Scroll to next 3 pages",
        "FILTER": "Filter",
        "END_OF_DATA": "You've reached the end of your content",
        "SCROLL_TOP": "Scroll to top",
        "CHECKBOX_HEADER": "Select all rows",
        "CHECKBOX_ROW": "Select {{value}}",
        "EXPAND_BUTTON": "Expand row",
        "SORT_DESCENDING": "Sort rows by this header in descending order",
        "SORT_ASCENDING": "Sort rows by this header in ascending order",
        "ROW": "row"
    },
    "TABLE_TOOLBAR": {
        "ACTION_BAR": "Table action bar",
        "BATCH_TEXT": "",
        "BATCH_TEXT_SINGLE": "1 item selected",
        "BATCH_TEXT_MULTIPLE": "{{count}} items selected",
        "CANCEL": "Cancel"
    },
    "TABS": {
        "BUTTON_ARIA_LEFT": "Go to the previous tab",
        "BUTTON_ARIA_RIGHT": "Go to the next tab"
    },
    "TILES": {
        "TILE": "tile",
        "EXPAND": "Expand",
        "COLLAPSE": "Collapse"
    },
    "TOGGLE": {
        "OFF": "Off",
        "ON": "On"
    },
    "UI_SHELL": {
        "SKIP_TO": "Skip to content",
        "HEADER": {
            "OPEN_MENU": "Open menu",
            "CLOSE_MENU": "Close menu"
        },
        "SIDE_NAV": {
            "LABEL": "Side navigation",
            "SWITCHER": "Switcher",
            "TOGGLE_OPEN": "Open",
            "TOGGLE_CLOSE": "Close"
        }
    }
};

/**
 * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.
 *
 * The keys specify the variable name in the string.
 *
 * Example:
 * ```typescript
 * service.set({ "TEST": "{{foo}} {{bar}}" });
 *
 * service.replace(service.get("TEST"), { foo: "test", bar: "asdf" })
 * ```
 *
 * Produces: `"test asdf"`
 *
 * @param subject the translation to replace variables on
 * @param variables object of variables to replace
 */
var replace = function (subject, variables) { return subject.pipe(map(function (str) {
    var e_1, _a;
    var keys = Object.keys(variables);
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            var value = variables[key];
            str = str.replace(new RegExp("{{\\s*" + key + "\\s*}}", "g"), value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return str;
})); };
/**
 * Represents an "overridable" translation value.
 *
 * Largely an internal usecase. There are situations where we want an `Observable` that
 * can emit events from a centralized source **OR** an `Observable` that will emit events
 * from a component local source. The key example being on/off text in a `Toggle` - In some cases
 * we want the `Toggle` to use `I18n`s global translations, but in others we'd prefer to use a local
 * override. We don't ever need to return to a non-overridden state, but we do need the ability to
 * switch _to_ an overridden sate.
 */
var Overridable = /** @class */ (function () {
    function Overridable(path, i18n) {
        this.path = path;
        this.i18n = i18n;
        /**
         * Our base non-overridden translation.
         */
        this.baseTranslation = this.i18n.get(this.path);
        /**
         * A boolean to flip between overridden and non-overridden states.
         */
        this.isOverridden = false;
        /**
         * ensure `$override` is initialized with the correct default value
         * in some cases `_value` can get changed for an `Observable` before `$override` is created
         */
        var value = this.i18n.getValueFromPath(this.path);
        this.$override = new BehaviorSubject(value);
        this._value = value;
    }
    Object.defineProperty(Overridable.prototype, "value", {
        /**
         * The raw value of the translation. Defaults to the string value, but will return the value passed to `override`
         *
         * @readonly
         */
        get: function () {
            return this._value;
        },
        set: function (v) {
            this.override(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Overridable.prototype, "subject", {
        /**
         * The translation subject. Returns either a stream of overridden values, or our base translation values.
         *
         * @readonly
         */
        get: function () {
            var _this = this;
            /**
             * since inputs are bound on template instantiation (and thusly will always have _some_ value)
             * We can use a simple boolean and the `iif` function to determine which subject to return on subscription
             */
            return iif(function () { return _this.isOverridden; }, this.$override, this.baseTranslation);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Takes a string or an `Observable` that emits strings.
     * Overrides the value provided by the `I18n` service.
     */
    Overridable.prototype.override = function (value) {
        var _this = this;
        this.isOverridden = true;
        // To ensure that there are not multiple subscriptions created for the same observable, we
        // unsubscribe if a subscription already exists for an observable before creating a new one.
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
        this._value = value;
        if (isObservable(value)) {
            this.subscription = value.subscribe(function (v) {
                _this.$override.next(v);
            });
        }
        else {
            this.$override.next(value);
        }
    };
    return Overridable;
}());
/**
 * The I18n service is a minimal internal singleton service used to supply our components with translated strings.
 *
 * All the components that support I18n also support directly passed strings.
 * Usage of I18n is optional, and it is not recommended for application use (libraries like ngx-translate
 * are a better choice)
 *
 */
var I18n = /** @class */ (function () {
    function I18n() {
        this.translationStrings = EN;
        this.translations = new Map();
        this.locale = new BehaviorSubject("en");
    }
    /**
     * Sets the locale and optionally the translation strings. Locale is used by components that
     * are already locale aware (datepicker for example) while the translation strings are used
     * for components that are not.
     *
     * Locales set here will override locales/languages set in components
     * @param language an ISO 639-1 language code - https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
     * @param strings an object of strings, optional
     */
    I18n.prototype.setLocale = function (language, strings) {
        this.locale.next(language);
        if (strings) {
            this.set(strings);
        }
    };
    /**
     * Returns the current locale
     */
    I18n.prototype.getLocale = function () {
        return this.locale.value;
    };
    /**
     * Returns an observable that resolves to the current locale, and will update when changed
     */
    I18n.prototype.getLocaleObservable = function () {
        return this.locale.asObservable();
    };
    /**
     * Set/update the translations from an object. Also notifies all participating components of the update.
     *
     * @param strings an object of strings, should follow the same format as src/i18n/en.json
     */
    I18n.prototype.set = function (strings) {
        var e_2, _a;
        this.translationStrings = merge({}, EN, strings);
        // iterate over all our tracked translations and update each observable
        var translations = Array.from(this.translations);
        try {
            for (var translations_1 = __values(translations), translations_1_1 = translations_1.next(); !translations_1_1.done; translations_1_1 = translations_1.next()) {
                var _b = __read(translations_1_1.value, 2), path = _b[0], subject = _b[1];
                subject.next(this.getValueFromPath(path));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (translations_1_1 && !translations_1_1.done && (_a = translations_1.return)) _a.call(translations_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * When a path is specified returns an observable that will resolve to the translation string value.
     *
     * Returns the full translations object if path is not specified.
     *
     * @param path optional, looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.get = function (path) {
        if (!path) {
            return this.translationStrings;
        }
        return this.getSubject(path);
    };
    /**
     * Returns all descendents of some path fragment as an object.
     *
     * @param partialPath a path fragment, for example `"NOTIFICATION"`
     */
    I18n.prototype.getMultiple = function (partialPath) {
        var e_3, _a;
        var values = this.getValueFromPath(partialPath);
        var subjects = {};
        try {
            for (var _b = __values(Object.keys(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (values[key] === Object(values[key])) {
                    subjects[key] = this.getMultiple(partialPath + "." + key);
                }
                else {
                    subjects[key] = this.getSubject(partialPath + "." + key);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return subjects;
    };
    /**
     * Returns an instance of `Overridable` that can be used to optionally override the value provided by `I18n`
     * @param path looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.getOverridable = function (path) {
        return new Overridable(path, this);
    };
    /**
     * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.
     *
     * The keys specify the variable name in the string.
     *
     * Example:
     * ```
     * service.set({ "TEST": "{{foo}} {{bar}}" });
     *
     * service.replace(service.get("TEST"), { foo: "test", bar: "asdf" })
     * ```
     *
     * Produces: `"test asdf"`
     *
     * @param subject the translation to replace variables on
     * @param variables object of variables to replace
     */
    I18n.prototype.replace = function (subject, variables) {
        return replace(subject, variables);
    };
    /**
     * Trys to resolve a value from the provided path.
     *
     * @param path looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.getValueFromPath = function (path) {
        var e_4, _a;
        var value = this.translationStrings;
        try {
            for (var _b = __values(path.split(".")), _c = _b.next(); !_c.done; _c = _b.next()) {
                var segment = _c.value;
                if (value[segment] !== undefined && value[segment] !== null) {
                    value = value[segment];
                }
                else {
                    throw new Error("no key " + segment + " at " + path);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return value;
    };
    /**
     * Helper method that returns an observable from the internal cache based on the path
     *
     * @param path looks like `"NOTIFICATION.CLOSE_BUTTON"`
     */
    I18n.prototype.getSubject = function (path) {
        try {
            // we run this here to validate the path exists before adding it to the translation map
            var value = this.getValueFromPath(path);
            if (this.translations.has(path)) {
                return this.translations.get(path);
            }
            var translation = new BehaviorSubject(value);
            this.translations.set(path, translation);
            return translation;
        }
        catch (error) {
            console.error(error);
        }
    };
    I18n.decorators = [
        { type: Injectable }
    ];
    return I18n;
}());

var ReplacePipe = /** @class */ (function () {
    function ReplacePipe() {
    }
    ReplacePipe.prototype.transform = function (value, variables) {
        return replace(value, variables);
    };
    ReplacePipe.decorators = [
        { type: Pipe, args: [{
                    name: "i18nReplace"
                },] }
    ];
    return ReplacePipe;
}());

// either provides a new instance of I18n, or returns the parent
function I18N_SERVICE_PROVIDER_FACTORY(parentService) {
    return parentService || new I18n();
}
// I18n should provide a single instance of itself to ensure that translations are consistent through the app
var I18N_SERVICE_PROVIDER = {
    provide: I18n,
    deps: [[new Optional(), new SkipSelf(), I18n]],
    useFactory: I18N_SERVICE_PROVIDER_FACTORY
};
var I18nModule = /** @class */ (function () {
    function I18nModule() {
    }
    I18nModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ReplacePipe],
                    exports: [ReplacePipe],
                    providers: [
                        I18n,
                        I18N_SERVICE_PROVIDER
                    ]
                },] }
    ];
    return I18nModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { I18n, replace, Overridable, ReplacePipe, I18N_SERVICE_PROVIDER_FACTORY, I18N_SERVICE_PROVIDER, I18nModule };

//# sourceMappingURL=carbon-components-angular-i18n.js.map