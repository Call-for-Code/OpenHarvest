{"version":3,"file":"carbon-components-angular-tiles.js.map","sources":["ng://carbon-components-angular/tiles/clickable-tile.component.ts","ng://carbon-components-angular/tiles/expandable-tile.component.ts","ng://carbon-components-angular/tiles/selection-tile.component.ts","ng://carbon-components-angular/tiles/tile-group.component.ts","ng://carbon-components-angular/tiles/tile.component.ts","ng://carbon-components-angular/tiles/tiles.module.ts","ng://carbon-components-angular/tiles/carbon-components-angular-tiles.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tOptional\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\n/**\n * Build application's clickable tiles using this component.\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-clickable-tile>\n * \t\ttile content\n * </ibm-clickable-tile>\n * ```\n */\n@Component({\n\tselector: \"ibm-clickable-tile\",\n\ttemplate: `\n\t<a\n\t\tibmLink\n\t\tclass=\"bx--tile bx--tile--clickable\"\n\t\ttabindex=\"0\"\n\t\t(click)=\"navigate($event)\"\n\t\t[href]=\"href\"\n\t\t[attr.target]=\"target\"\n\t\t[attr.aria-disabled]=\"disabled\">\n\t\t<ng-content></ng-content>\n\t</a>`\n})\nexport class ClickableTile {\n\t/**\n\t * Sets the `href` attribute on the `ibm-clickable-tile` element.\n\t */\n\t@Input() href = \"#\";\n\n\t/**\n\t * Sets the `target` attribute on the `ibm-clickable-tile` element.\n\t */\n\t@Input() target: string;\n\n\t/**\n\t * Set to `true` to disable the clickable tile.\n\t */\n\t@Input() disabled = false;\n\n\t/**\n\t * Array of commands to send to the router when the link is activated\n\t * See: https://angular.io/api/router/Router#navigate\n\t */\n\t@Input() route: any[];\n\n\t/**\n\t * Router options. Used in conjunction with `route`\n\t * See: https://angular.io/api/router/Router#navigate\n\t */\n\t@Input() routeExtras: any;\n\n\t/**\n\t * Emits the navigation status promise when the link is activated\n\t */\n\t@Output() navigation = new EventEmitter<Promise<boolean>>();\n\n\tconstructor(@Optional() protected router: Router) {}\n\n\tnavigate(event) {\n\t\tif (this.router && this.route) {\n\t\t\tevent.preventDefault();\n\t\t\tconst status = this.router.navigate(this.route, this.routeExtras);\n\t\t\tthis.navigation.emit(status);\n\t\t}\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tElementRef,\n\tAfterContentInit\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { merge } from \"carbon-components-angular/utils\";\n\nexport interface ExpandableTileTranslations {\n\tEXPAND: string;\n\tCOLLAPSE: string;\n}\n\n@Component({\n\tselector: \"ibm-expandable-tile\",\n\ttemplate: `\n\t\t<button\n\t\t\tclass=\"bx--tile bx--tile--expandable\"\n\t\t\t[ngClass]=\"{'bx--tile--is-expanded' : expanded}\"\n\t\t\t[ngStyle]=\"{'max-height': expandedHeight + 'px'}\"\n\t\t\ttype=\"button\"\n\t\t\t(click)=\"onClick()\">\n\t\t\t<div class=\"bx--tile__chevron\">\n\t\t\t\t<svg *ngIf=\"!expanded\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" [attr.title]=\"expand.subject | async\" role=\"img\">\n\t\t\t\t\t<title>{{expand.subject | async}}</title>\n\t\t\t\t\t<path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"/>\n\t\t\t\t</svg>\n\t\t\t\t<svg *ngIf=\"expanded\" width=\"12\" height=\"7\" viewBox=\"0 0 12 7\" [attr.title]=\"collapse.subject | async\" role=\"img\">\n\t\t\t\t\t<title>{{collapse.subject | async}}</title>\n\t\t\t\t\t<path fill-rule=\"nonzero\" d=\"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"bx--tile-content\">\n\t\t\t\t<ng-content select=\".bx--tile-content__above-the-fold\"></ng-content>\n\t\t\t\t<ng-content select=\".bx--tile-content__below-the-fold\"></ng-content>\n\t\t\t</div>\n\t\t</button>\n\t`\n})\nexport class ExpandableTile implements AfterContentInit {\n\t@Input() expanded = false;\n\t/**\n\t * Expects an object that contains some or all of:\n\t * ```\n\t * {\n\t *\t\t\"EXPAND\": \"Expand\",\n\t *\t\t\"COLLAPSE\": \"Collapse\",\n\t * }\n\t * ```\n\t */\n\t@Input()\n\tset translations(value: ExpandableTileTranslations) {\n\t\tconst valueWithDefaults = merge(this.i18n.getMultiple(\"TILES\"), value);\n\t\tthis.expand.override(valueWithDefaults.EXPAND);\n\t\tthis.collapse.override(valueWithDefaults.COLLAPSE);\n\t}\n\n\ttileMaxHeight = 0;\n\tcurrentExpandedHeight = 0;\n\telement = this.elementRef.nativeElement;\n\n\texpand = this.i18n.getOverridable(\"TILES.EXPAND\");\n\tcollapse = this.i18n.getOverridable(\"TILES.COLLAPSE\");\n\n\tconstructor(protected i18n: I18n, protected elementRef: ElementRef) {}\n\n\tngAfterContentInit() {\n\t\tthis.updateMaxHeight();\n\t}\n\n\tget expandedHeight() {\n\t\tconst tile = this.element.querySelector(\".bx--tile\");\n\t\tconst tilePadding\n\t\t\t= parseInt(getComputedStyle(tile).paddingBottom, 10) + parseInt(getComputedStyle(tile).paddingTop, 10);\n\t\tconst expandedHeight = this.tileMaxHeight + tilePadding;\n\t\tif (!isNaN(expandedHeight)) {\n\t\t\tthis.currentExpandedHeight = expandedHeight;\n\t\t}\n\t\treturn this.currentExpandedHeight;\n\t}\n\n\tupdateMaxHeight() {\n\t\tif (this.expanded) {\n\t\t\tthis.tileMaxHeight = this.element.querySelector(\".bx--tile-content\").getBoundingClientRect().height;\n\t\t} else {\n\t\t\tthis.tileMaxHeight = this.element.querySelector(\".bx--tile-content__above-the-fold\").getBoundingClientRect().height;\n\t\t}\n\t}\n\n\tonClick() {\n\t\tthis.expanded = !this.expanded;\n\t\tthis.updateMaxHeight();\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tViewChild,\n\tHostListener,\n\tAfterViewInit\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { I18n } from \"carbon-components-angular/i18n\";\n\n@Component({\n\tselector: \"ibm-selection-tile\",\n\ttemplate: `\n\t\t<label\n\t\t\tclass=\"bx--tile bx--tile--selectable\"\n\t\t\ttabindex=\"0\"\n\t\t\t[for]=\"id\"\n\t\t\t[ngClass]=\"{'bx--tile--is-selected' : selected}\"\n\t\t\t[attr.aria-label]=\"i18n.get('TILES.TILE') | async\">\n\t\t\t<input\n\t\t\t\t#input\n\t\t\t\ttabindex=\"-1\"\n\t\t\t\tclass=\"bx--tile-input\"\n\t\t\t\t[id]=\"id\"\n\t\t\t\t[type]=\"(multiple ? 'checkbox': 'radio')\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t(change)=\"onChange($event)\"/>\n\t\t\t<div class=\"bx--tile__checkmark\">\n\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n\t\t\t\t\t<path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm3.646-10.854L6.75 10.043 4.354 7.646l-.708.708 3.104 3.103 5.604-5.603-.708-.708z\"\n\t\t\t\t\t\tfill-rule=\"evenodd\"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"bx--tile-content\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</label>\n\t`\n})\nexport class SelectionTile implements AfterViewInit {\n\tstatic tileCount = 0;\n\t/**\n\t * The unique id for the input.\n\t */\n\t@Input() id = `tile-${SelectionTile.tileCount}`;\n\t/**\n\t * Updating the state of the input to match the state of the parameter passed in.\n\t * Set to `true` if this tile should be selected.\n\t */\n\t@Input() set selected(value: boolean) {\n\t\t// If an initial selected value is set before input exists, we save\n\t\t// the value and check again when input exists in `AfterViewInit`.\n\t\tthis._selected = value ? true : null;\n\t\tif (this.input) {\n\t\t\tthis.input.nativeElement.checked = this._selected;\n\t\t}\n\t}\n\n\tget selected() {\n\t\treturn this.input ? this.input.nativeElement.checked : false;\n\t}\n\t/**\n\t * The value for the tile. Returned via `ngModel` or `selected` event on the containing `TileGroup`.\n\t */\n\t@Input() value: string;\n\t/**\n\t * Internal event used to notify the containing `TileGroup` of changes.\n\t */\n\t@Output() change: EventEmitter<Event> = new EventEmitter();\n\n\t/**\n\t * Set by the containing `TileGroup`. Used for the `name` property on the input.\n\t */\n\tname = \"tile-group-unbound\";\n\t/**\n\t * Defines whether or not the `SelectionTile` supports selecting multiple tiles as opposed to single\n\t * tile selection.\n\t */\n\tmultiple = true;\t// Set to true because of the way tile group sets it up.\n\t\t\t\t\t\t// If it is first undefined then set to true, the type will change from radio to checkbox and deselects the inputs.\n\n\t// @ts-ignore\n\t@ViewChild(\"input\", { static: true }) input;\n\n\t// If an initial selected value is set before input exists, we save\n\t// the value and check again when input exists in `AfterViewInit`.\n\tprotected _selected = null;\n\n\tconstructor(public i18n: I18n) {\n\t\tSelectionTile.tileCount++;\n\t}\n\n\tngAfterViewInit() {\n\t\tif (this.input) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.input.nativeElement.checked = this._selected;\n\t\t\t});\n\t\t}\n\t}\n\n\t@HostListener(\"keydown\", [\"$event\"])\n\tkeyboardInput(event) {\n\t\tif (event.key === \"Enter\" || event.key === \"Spacebar\" || event.key === \" \") {\n\t\t\tthis.selected = !this.selected;\n\t\t\tthis.change.emit(event);\n\t\t}\n\t}\n\n\tonChange(event) {\n\t\tthis.change.emit(event);\n\t}\n}\n\n\n","import {\n\tComponent,\n\tAfterContentInit,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding,\n\tContentChildren,\n\tQueryList,\n\tOnDestroy\n} from \"@angular/core\";\nimport { SelectionTile } from \"./selection-tile.component\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { TileSelection } from \"./tile-selection.interface\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\n@Component({\n\tselector: \"ibm-tile-group\",\n\ttemplate: `<ng-content select=\"ibm-selection-tile\"></ng-content>`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: TileGroup,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class TileGroup implements AfterContentInit, OnDestroy {\n\tstatic tileGroupCount = 0;\n\t/**\n\t * The tile group `name`\n\t */\n\t@Input() name = `tile-group-${TileGroup.tileGroupCount}`;\n\t/**\n\t * Set to `true` to support multiple tile selection\n\t */\n\t@Input() multiple = false;\n\n\t/**\n\t * Emits an event when the tile selection changes.\n\t *\n\t * Emits an object that looks like:\n\t * ```javascript\n\t * {\n\t * \tvalue: \"something\",\n\t * \tselected: true,\n\t * \tname: \"tile-group-1\"\n\t * }\n\t * ```\n\t */\n\t@Output() selected: EventEmitter<TileSelection> = new EventEmitter();\n\n\t@HostBinding(\"class.bx--tile-group\") tileGroupClass = true;\n\n\t@ContentChildren(SelectionTile) selectionTiles: QueryList<SelectionTile>;\n\n\tprotected unsubscribe$ = new Subject<void>();\n\tprotected unsubscribeTiles$ = new Subject<void>();\n\n\tconstructor() {\n\t\tTileGroup.tileGroupCount++;\n\t}\n\n\tonChange = (_: any) => { };\n\n\tonTouched = () => { };\n\n\tngAfterContentInit() {\n\t\tconst updateTiles = () => {\n\t\t\t// remove old subscriptions\n\t\t\tthis.unsubscribeTiles$.next();\n\n\t\t\t// react to changes\n\t\t\t// setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.selectionTiles.forEach(tile => {\n\t\t\t\t\ttile.name = this.name;\n\t\t\t\t\ttile.change\n\t\t\t\t\t\t.pipe(takeUntil(this.unsubscribeTiles$))\n\t\t\t\t\t\t.subscribe(() => {\n\t\t\t\t\t\t\tthis.selected.emit({\n\t\t\t\t\t\t\t\tvalue: tile.value,\n\t\t\t\t\t\t\t\tselected: tile.selected,\n\t\t\t\t\t\t\t\tname: this.name\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.onChange(tile.value);\n\t\t\t\t\t\t});\n\t\t\t\t\ttile.multiple = this.multiple;\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\tupdateTiles();\n\n\t\tthis.selectionTiles.changes\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe(_ => updateTiles());\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\t// takes care of tile subscriptions when tile-group dies\n\t\tthis.unsubscribeTiles$.next();\n\t\tthis.unsubscribeTiles$.complete();\n\t}\n\n\twriteValue(value: any) {\n\t\tif (!this.selectionTiles) { return; }\n\t\tthis.selectionTiles.forEach(tile => {\n\t\t\tif (tile.value === value) {\n\t\t\t\ttile.selected = true;\n\t\t\t} else {\n\t\t\t\ttile.selected = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterOnChange(fn: any) {\n\t\tthis.onChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n}\n","import {\n\tComponent,\n\tHostBinding,\n\tInput\n} from \"@angular/core\";\n\n/**\n * Build application's tiles using this component.\n *\n * [See demo](../../?path=/story/tiles--basic)\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-tile>\n * \t\ttile content\n * </ibm-tile>\n * ```\n *\n * <example-url>../../iframe.html?id=tiles--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-tile\",\n\ttemplate: `<ng-content></ng-content>`\n})\nexport class Tile {\n\t@HostBinding(\"class.bx--tile\") tileClass = true;\n\n\t@HostBinding(\"class.bx--tile--light\") get lightThemeEnabled() {\n\t\treturn this.theme === \"light\";\n\t}\n\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { Tile } from \"./tile.component\";\nimport { ClickableTile } from \"./clickable-tile.component\";\nimport { ExpandableTile } from \"./expandable-tile.component\";\nimport { SelectionTile } from \"./selection-tile.component\";\nimport { TileGroup } from \"./tile-group.component\";\nimport { I18nModule } from \"carbon-components-angular/i18n\";\nimport { LinkModule } from \"carbon-components-angular/link\";\n\n@NgModule({\n\tdeclarations: [\n\t\tTile,\n\t\tClickableTile,\n\t\tExpandableTile,\n\t\tSelectionTile,\n\t\tTileGroup\n\t],\n\texports: [\n\t\tTile,\n\t\tClickableTile,\n\t\tExpandableTile,\n\t\tSelectionTile,\n\t\tTileGroup\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tI18nModule,\n\t\tLinkModule\n\t]\n})\nexport class TilesModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
