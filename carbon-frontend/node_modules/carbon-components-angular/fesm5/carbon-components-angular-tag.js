/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-tag.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { __extends } from 'tslib';
import { Component, Input, HostBinding, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * Component that represents a tag for labelling/categorizing using keywords
 *
 * [See demo](../../?path=/story/tag--basic)
 *
 * <example-url>../../iframe.html?id=tag--basic</example-url>
 */
var Tag = /** @class */ (function () {
    function Tag() {
        /**
         * type of the tag determines the styling
         *
         * Reference `TagType` for v9 applications, and `TagTypeExperimental` for v10/v9 experimental mode applications
         */
        this.type = "gray";
        this.class = "";
    }
    Object.defineProperty(Tag.prototype, "attrClass", {
        get: function () {
            return "bx--tag bx--tag--" + this.type + " " + this.class;
        },
        enumerable: true,
        configurable: true
    });
    Tag.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tag",
                    template: "<ng-content></ng-content>"
                }] }
    ];
    Tag.propDecorators = {
        type: [{ type: Input }],
        class: [{ type: Input }],
        attrClass: [{ type: HostBinding, args: ["attr.class",] }]
    };
    return Tag;
}());

var TagFilter = /** @class */ (function (_super) {
    __extends(TagFilter, _super);
    function TagFilter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.closeButtonLabel = "Clear Filter";
        /**
         * Function for close/delete the tag
         */
        _this.close = new EventEmitter();
        /**
         * We need to stop the immedate propagation of click on the close button
         * to prevent undesired effects when used within dialogs.
         *
         * We need to emit a click event on close to allow for clicks to be listened
         * to on the immediate close button element. `action` distinguishes between clicks on
         * the tag vs. clicks on the close button.
         */
        _this.click = new EventEmitter();
        return _this;
    }
    TagFilter.prototype.onClick = function (event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "click" });
    };
    TagFilter.prototype.onClose = function (event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "close" });
        this.close.emit();
    };
    Object.defineProperty(TagFilter.prototype, "attrClass", {
        get: function () {
            return "bx--tag bx--tag--filter bx--tag--" + this.type + " " + this.class;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagFilter.prototype, "attrAriaLabel", {
        get: function () {
            return ((this.title || "") + " " + this.closeButtonLabel).trim();
        },
        enumerable: true,
        configurable: true
    });
    TagFilter.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tag-filter",
                    template: "\n\t\t<span\n\t\t\tclass=\"bx--tag__label\"\n\t\t\t[attr.title]=\"title ? title : null\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t\t<ng-content></ng-content>\n\t\t</span>\n\t\t<button\n\t\t\tclass=\"bx--tag__close-icon\"\n\t\t\t(click)=\"onClose($event)\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[title]=\"closeButtonLabel\">\n\t\t\t<span class=\"bx--visually-hidden\">{{closeButtonLabel}}</span>\n\t\t\t<svg ibmIcon=\"close\" size=\"16\"></svg>\n\t\t</button>\n\t"
                }] }
    ];
    TagFilter.propDecorators = {
        closeButtonLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        title: [{ type: Input }],
        close: [{ type: Output }],
        click: [{ type: Output }],
        attrClass: [{ type: HostBinding, args: ["attr.class",] }],
        attrAriaLabel: [{ type: HostBinding, args: ["attr.aria-label",] }]
    };
    return TagFilter;
}(Tag));

var TagModule = /** @class */ (function () {
    function TagModule() {
    }
    TagModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [Tag, TagFilter],
                    exports: [Tag, TagFilter],
                    imports: [CommonModule, IconModule]
                },] }
    ];
    return TagModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TagFilter, Tag, TagModule };

//# sourceMappingURL=carbon-components-angular-tag.js.map