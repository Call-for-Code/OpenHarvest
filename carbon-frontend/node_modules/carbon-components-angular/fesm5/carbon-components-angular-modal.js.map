{"version":3,"file":"carbon-components-angular-modal.js.map","sources":["ng://carbon-components-angular/modal/base-modal.class.ts","ng://carbon-components-angular/modal/alert-modal.component.ts","ng://carbon-components-angular/modal/alert-modal.interface.ts","ng://carbon-components-angular/modal/modal-footer.component.ts","ng://carbon-components-angular/modal/modal-header.component.ts","ng://carbon-components-angular/modal/modal.service.ts","ng://carbon-components-angular/modal/modal.component.ts","ng://carbon-components-angular/modal/overlay.component.ts","ng://carbon-components-angular/modal/modal-content.directive.ts","ng://carbon-components-angular/modal/modal-content-text.directive.ts","ng://carbon-components-angular/modal/modal-header-heading.directive.ts","ng://carbon-components-angular/modal/modal-header-label.directive.ts","ng://carbon-components-angular/modal/modal.module.ts","ng://carbon-components-angular/modal/carbon-components-angular-modal.ts"],"sourcesContent":["import {\n\tOutput,\n\tEventEmitter,\n\tInput,\n\tDirective\n} from \"@angular/core\";\n\n/**\n * Extend `BaseModal` in your custom modal implementations to ensure consistent close behavior.\n *\n * `ModalService` depends on the `close` event to correctly clean up the component.\n */\n@Directive({ selector: \"[ibmBaseModal]\" })\nexport class BaseModal {\n\t/**\n\t * Base event emitter to propagate close events\n\t */\n\t@Output() close = new EventEmitter();\n\n\t/**\n\t * Controls the open state of the modal\n\t */\n\t@Input() open = false;\n\n\t/**\n\t * Default method to handle closing the modal\n\t */\n\tcloseModal(): void {\n\t\tthis.close.emit();\n\t}\n}\n","import {\n\tComponent,\n\tInject,\n\tViewChild,\n\tAfterViewInit,\n\tOptional\n} from \"@angular/core\";\nimport { BaseModal } from \"./base-modal.class\";\n\n/**\n * Component to create standard modals for presenting content or asking for user's input.\n * It can show as a passive modal showing only text or show as a transactional modal with\n * multiple buttons for different actions for the user to choose from.\n *\n * Using a modal in your application requires `ibm-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n * ```html\n * <ibm-placeholder></ibm-placeholder>\n * ```\n *\n * Example of opening the modal:\n *\n * ```typescript\n * \\@Component({\n *  selector: \"app-modal-demo\",\n *  template: `\n *   <button class=\"btn--primary\" (click)=\"openModal()\">Open modal</button>\n *   <ibm-placeholder></ibm-placeholder>`\n * })\n * export class ModalDemo {\n * \topenModal() {\n * \t\tthis.modalService.show({\n *\t\t\tmodalType: \"default\",\n *\t\t\tlabel: \"optional header text\",\n *\t\t\ttitle: \"Modal title\",\n *\t\t\ttext: \"Modal text\",\n *\t\t\tbuttons: [{\n *\t\t\t\ttext: \"Button text\",\n *\t\t\t\ttype: \"primary\",\n *\t\t\t\tclick: clickFunction\n *\t\t\t}]\n *\t\t});\n * \t}\n * }\n * ```\n */\n@Component({\n\tselector: \"ibm-alert-modal\",\n\ttemplate: `\n\t\t<ibm-modal\n\t\t\t[size]=\"size\"\n\t\t\t[theme]=\"type\"\n\t\t\t[ariaLabel]=\"title\"\n\t\t\t[hasScrollingContent]=\"hasScrollingContent\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelected)=\"dismissModal('overlay')\">\n\t\t\t<ibm-modal-header (closeSelect)=\"dismissModal('close')\">\n\t\t\t\t<p ibmModalHeaderLabel class=\"bx--type-delta\">{{label}}</p>\n\t\t\t\t<p ibmModalHeaderHeading class=\"bx--type-beta\">{{title}}</p>\n\t\t\t</ibm-modal-header>\n\t\t\t<div ibmModalContent #modalContent>\n\t\t\t\t<p [innerHTML]=\"content\"></p>\n\t\t\t</div>\n\t\t\t<ibm-modal-footer *ngIf=\"buttons.length > 0\">\n\t\t\t\t<ng-container *ngFor=\"let button of buttons; let i = index\">\n\t\t\t\t\t<button\n\t\t\t\t\t\t[ibmButton]=\"button.type\"\n\t\t\t\t\t\t(click)=\"buttonClicked(i)\"\n\t\t\t\t\t\t[id]=\"button.id\"\n\t\t\t\t\t\t[attr.modal-primary-focus]=\"(button.type.indexOf('primary') !== -1 ? '' : null)\">\n\t\t\t\t\t\t{{button.text}}\n\t\t\t\t\t</button>\n\t\t\t\t</ng-container>\n\t\t\t</ibm-modal-footer>\n\t\t</ibm-modal>\n\t`\n})\nexport class AlertModal extends BaseModal implements AfterViewInit {\n\t// @ts-ignore\n\t@ViewChild(\"modalContent\", { static: true }) modalContent;\n\t/**\n\t * Creates an instance of `AlertModal`.\n\t */\n\tconstructor(\n\t\t@Optional() @Inject(\"type\") public type = \"default\",\n\t\t@Optional() @Inject(\"label\") public label: string,\n\t\t@Optional() @Inject(\"title\") public title: string,\n\t\t@Optional() @Inject(\"content\") public content: string,\n\t\t@Optional() @Inject(\"size\") public size: string,\n\t\t@Optional() @Inject(\"hasScrollingContent\") public hasScrollingContent: boolean = null,\n\t\t@Optional() @Inject(\"buttons\") public buttons = [],\n\t\t@Optional() @Inject(\"close\") public onClose: Function\n\t) {\n\t\tsuper();\n\t\tfor (let i = 0; i < this.buttons.length; i++) {\n\t\t\tconst button = this.buttons[i];\n\t\t\tif (!button.id) {\n\t\t\t\tbutton.id = `alert-modal-button-${i}`;\n\t\t\t}\n\t\t\tif (!button.type) {\n\t\t\t\tbutton.type = \"secondary\";\n\t\t\t}\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\t\tif (!this.modalContent) { return false; }\n\t\tconst element = this.modalContent.nativeElement;\n\t\tif (element.scrollHeight > element.clientHeight) {\n\t\t\telement.tabIndex = 0;\n\t\t} else {\n\t\t\telement.tabIndex = -1;\n\t\t}\n\t}\n\n\tbuttonClicked(buttonIndex) {\n\t\tconst button = this.buttons[buttonIndex];\n\t\tif (button.click) {\n\t\t\tbutton.click();\n\t\t}\n\n\t\tthis.closeModal();\n\t}\n\n\tdismissModal(trigger) {\n\t\tif (this.onClose && this.onClose(trigger) === false) {\n\t\t\treturn;\n\t\t}\n\t\tthis.closeModal();\n\t}\n}\n","export enum AlertModalType {\n\tdefault = \"default\",\n\tdanger = \"danger\"\n}\n\nexport interface AlertModalData {\n\t/**\n\t * type of the modal\n\t */\n\ttype?: AlertModalType;\n\t/**\n\t * Additional label shown over the modal\n\t */\n\tlabel?: string;\n\t/**\n\t * Primary title for the modal\n\t */\n\ttitle?: string;\n\t/**\n\t * Content for the modal body, could include HTML tags\n\t */\n\tcontent?: string;\n\t/**\n\t * Size of the modal to display.\n\t */\n\tsize?: \"xs\" | \"sm\" | \"lg\";\n\t/**\n\t * Array of `ModalButton`s\n\t */\n\tbuttons?: Array<ModalButton>;\n\t/**\n\t * Specify whether the modal contains scrolling content. This property overrides the automatic detection\n\t * of the existence of scrolling content. Set this property to `true` to force overflow indicator to\n\t * show up or to `false` to force overflow indicator to disappear.\n\t * It is set to `null` by default which indicates not to override automatic detection.\n\t */\n\thasScrollingContent?: boolean;\n\t/**\n\t * Callback for non-specific close events. `return false;` to prevent the modal from closing\n\t * Property trigger has a value of `overlay` or `close`\n\t */\n\tclose?: (trigger?: \"overlay\" | \"close\") => boolean;\n}\n\nexport enum ModalButtonType {\n\tprimary = \"primary\",\n\tsecondary = \"secondary\",\n\ttertiary = \"tertiary\",\n\tghost = \"ghost\",\n\tdanger = \"danger\",\n\tdanger_primary = \"danger--primary\"\n}\n\nexport interface ModalButton {\n\t/**\n\t * Display value of the button\n\t */\n\ttext: string;\n\t/**\n\t * Optional unique ID for the button\n\t */\n\tid?: string;\n\t/**\n\t * Button type\n\t */\n\ttype?: ModalButtonType;\n\t/**\n\t * Callback for the button `click` event\n\t */\n\tclick?: Function;\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-modal-footer\",\n\ttemplate: `\n\t\t<footer class=\"bx--modal-footer\">\n\t\t\t<ng-content></ng-content>\n\t\t</footer>\n\t`\n})\nexport class ModalFooter {}\n","import {\n\tComponent,\n\tOutput,\n\tEventEmitter,\n\tInput\n} from \"@angular/core\";\nimport { I18n } from \"carbon-components-angular/i18n\";\nimport { ExperimentalService } from \"carbon-components-angular/experimental\";\n\n/**\n * ***Inputs***\n * ```html\n * <ibm-modal-header>Header text</ibm-modal-header>\n * ```\n *\n * ***Outputs***\n * ```html\n * <ibm-modal-header (closeSelect)=\"closeModal()\">Header text</ibm-modal-header>\n * ```\n */\n@Component({\n\tselector: \"ibm-modal-header\",\n\ttemplate: `\n\t\t<header class=\"{{theme}} bx--modal-header\">\n\t\t\t<ng-content></ng-content>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"bx--modal-close\"\n\t\t\t\t(click)=\"onClose()\">\n\t\t\t\t<span class=\"bx--assistive-text\">{{ closeLabel }}</span>\n\t\t\t\t<svg ibmIcon=\"close\" size=\"20\" class=\"bx--modal-close__icon\"></svg>\n\t\t\t</button>\n\t\t</header>\n\n\t`\n})\nexport class ModalHeader {\n\t/**\n\t * Sets the style on the modal heading based on its category.\n\t */\n\t@Input() theme = \"default\";\n\t/**\n\t * Accessible label for the header close button.\n\t * Defaults to the `MODAL.CLOSE` value from the i18n service.\n\t */\n\t@Input() closeLabel = this.i18n.get().MODAL.CLOSE;\n\n\t/**\n\t * To emit the event of clicking on the close icon within the modal.\n\t */\n\t@Output() closeSelect = new EventEmitter();\n\n\tconstructor(protected i18n: I18n, protected experimental: ExperimentalService) {}\n\n\t/**\n\t * Handles click for the close icon button within the `Modal`.\n\t */\n\tpublic onClose() {\n\t\tthis.closeSelect.emit();\n\t}\n}\n","import {\n\tComponentFactoryResolver,\n\tComponentRef,\n\tInjector\n} from \"@angular/core\";\nimport { Modal } from \"./modal.component\";\nimport { ReplaySubject } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { AlertModal } from \"./alert-modal.component\";\nimport { AlertModalData } from \"./alert-modal.interface\";\nimport { PlaceholderService } from \"carbon-components-angular/placeholder\";\nimport { tap, delay } from \"rxjs/operators\";\n\n\n/**\n * Modal service handles instantiating and destroying modal instances.\n * Uses PlaceholderService to track open instances, and for it's placeholder view reference.\n */\n@Injectable()\nexport class ModalService {\n\t// track all our open modals\n\tprotected static modalList: Array<ComponentRef<any>> = [];\n\n\t/**\n\t * Creates an instance of `ModalService`.\n\t */\n\tconstructor(public resolver: ComponentFactoryResolver, public placeholderService: PlaceholderService) {}\n\n\t/**\n\t * Creates and renders the modal component that is passed in.\n\t * `inputs` is an optional parameter of `data` that can be passed to the `Modal` component.\n\t */\n\tcreate<T>(data: {component: any, inputs?: any}): ComponentRef<any> {\n\t\tlet defaults = {inputs: {}};\n\t\tdata = Object.assign({}, defaults, data);\n\n\t\tconst inputProviders = Object.keys(data.inputs).map(inputName => ({\n\t\t\tprovide: inputName,\n\t\t\tuseValue: data.inputs[inputName]\n\t\t}));\n\t\tconst injector = Injector.create(inputProviders);\n\t\tconst factory = this.resolver.resolveComponentFactory(data.component);\n\t\tlet focusedElement = document.activeElement as HTMLElement;\n\n\t\tlet component = this.placeholderService.createComponent(factory, injector);\n\n\t\tsetTimeout(() => {\n\t\t\tcomponent.instance.open = true;\n\t\t});\n\n\t\tcomponent[\"previouslyFocusedElement\"] = focusedElement;  // used to return focus to previously focused element\n\n\t\tcomponent.instance.close.pipe(\n\t\t\t// trigger the close animation\n\t\t\ttap(() => {\n\t\t\t\tcomponent.instance.open = false;\n\t\t\t}),\n\t\t\t// delay closing by an arbitrary amount to allow the animation to finish\n\t\t\tdelay(150)\n\t\t).subscribe(() => {\n\t\t\tthis.placeholderService.destroyComponent(component);\n\t\t\t// filter out our component\n\t\t\tModalService.modalList = ModalService.modalList.filter(c => c !== component);\n\t\t});\n\n\t\tcomponent.onDestroy(() => {\n\t\t\tfocusedElement.focus();\n\t\t});\n\n\t\tModalService.modalList.push(component);\n\n\t\treturn component;\n\t}\n\n\t/**\n\t * Creates and renders a new alert modal component.\n\t * @param data You can pass in:\n\t * `type` - \"default\" | \"danger\" = \"default\",\n\t * `label` - a label shown over the title,\n\t * `title` - modal's title,\n\t * `content` - modal's content, could include HTML tags.\n\t * `buttons` is an array of objects\n\t * `close` custom close function\n\t * ```\n\t * {\n\t * \t\ttext: \"Button text\",\n\t * \t\ttype: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\" | \"danger--primary\" = \"primary\",\n\t * \t\tclick: clickFunction,\n\t * }\n\t * ```\n\t */\n\tshow(data: AlertModalData) {\n\t\treturn this.create({\n\t\t\tcomponent: AlertModal,\n\t\t\tinputs: {\n\t\t\t\ttype: data.type,\n\t\t\t\tlabel: data.label,\n\t\t\t\ttitle: data.title,\n\t\t\t\tcontent: data.content,\n\t\t\t\thasScrollingContent: data.hasScrollingContent || null,\n\t\t\t\tsize: data.size,\n\t\t\t\tbuttons: data.buttons || [],\n\t\t\t\tclose: data.close || (() => {})\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Destroys the modal on the supplied index.\n\t * When called without parameters it destroys the most recently created/top most modal.\n\t */\n\tdestroy(index = -1) {\n\t\t// return if nothing to destroy because it's already destroyed\n\t\tif (index >= ModalService.modalList.length || ModalService.modalList.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t// on negative index destroy the last on the list (top modal)\n\t\tif (index < 0) {\n\t\t\tindex = ModalService.modalList.length - 1;\n\t\t}\n\n\t\tthis.placeholderService.destroyComponent(ModalService.modalList[index]);\n\t\tModalService.modalList.splice(index, 1);\n\t}\n}\n\n","import { ModalService } from \"./modal.service\";\nimport {\n\tAfterViewInit,\n\tComponent,\n\tEventEmitter,\n\tHostListener,\n\tInput,\n\tOutput,\n\tElementRef,\n\tViewChild,\n\tSimpleChanges,\n\tOnChanges\n} from \"@angular/core\";\nimport { cycleTabs, getFocusElementList } from \"carbon-components-angular/common\";\n\n/**\n * Component to create modals for presenting content.\n *\n * [See demo](../../?path=/story/modal--basic)\n *\n * Using a modal in your application requires `ibm-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n```html\n<ibm-placeholder></ibm-placeholder>\n```\n *\n * A more complete example for `Modal` is given as follows:\n *\n * Example modal definition:\n *\n```typescript\n@Component({\n\tselector: \"app-sample-modal\",\n\ttemplate: `\n\t\t\t\t<ibm-modal size=\"xl\" (overlaySelected)=\"closeModal()\">\n\t\t\t\t\t<ibm-modal-header (closeSelect)=\"closeModal()\">Header text</ibm-modal-header>\n\t\t\t\t\t\t<section class=\"modal-body\">\n\t\t\t\t\t\t\t<h1>Sample modal works.</h1>\n\t\t\t\t\t\t\t<button class=\"btn--icon-link\" nPopover=\"Hello there\" title=\"Popover title\" placement=\"right\" appendInline=\"true\">\n\t\t\t\t\t\t\t\t<svg ibmIcon=\"info\" size=\"sm\"></ibm-icon>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{{modalText}}\n\t\t\t\t\t\t</section>\n\t\t\t\t\t<ibm-modal-footer><button ibmButton=\"primary\" (click)=\"closeModal()\">Close</button></ibm-modal-footer>\n\t\t\t\t</ibm-modal>`,\n\tstyleUrls: [\"./sample-modal.component.scss\"]\n})\nexport class SampleModal extends BaseModal {\n\tmodalText: string;\n\tconstructor(protected injector: Injector) {\n\t\tsuper();\n\t\tthis.modalText = this.injector.get(\"modalText\");\n\t}\n}\n```\n *\n * Example of opening the modal:\n *\n```typescript\n@Component({\n\tselector: \"app-modal-demo\",\n\ttemplate: `\n\t\t\t\t<button ibmButton=\"primary\" (click)=\"openModal('drill')\">Drill-down modal</button>\n\t\t\t\t<ibm-placeholder></ibm-placeholder>`\n})\nexport class ModalDemo {\n\topenModal() {\n\t\tthis.modalService.create({component: SampleModal, inputs: {modalText: \"Hello universe.\"}});\n\t}\n}\n```\n *\n * <example-url>../../iframe.html?id=modal--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-modal\",\n\ttemplate: `\n\t\t<ibm-overlay\n\t\t\t[theme]=\"theme\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelect)=\"overlaySelected.emit()\">\n\t\t\t<div\n\t\t\t\tclass=\"bx--modal-container\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--modal-container--xs': size === 'xs',\n\t\t\t\t\t'bx--modal-container--sm': size === 'sm',\n\t\t\t\t\t'bx--modal-container--lg': size === 'lg'\n\t\t\t\t}\"\n\t\t\t\trole=\"dialog\"\n\t\t\t\taria-modal=\"true\"\n\t\t\t\tstyle=\"z-index:1;\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\t#modal>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t\t<div\n\t\t\t\t\t*ngIf=\"hasScrollingContent !== null ? hasScrollingContent : shouldShowScrollbar\"\n\t\t\t\t\tclass=\"bx--modal-content--overflow-indicator\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ibm-overlay>\n\t`\n})\nexport class Modal implements AfterViewInit, OnChanges {\n\t/**\n\t * Size of the modal to display.\n\t */\n\t@Input() size: \"xs\" | \"sm\" | \"lg\";\n\t/**\n\t * Classification of the modal.\n\t */\n\t@Input() theme: \"default\" | \"danger\" = \"default\";\n\n\t/**\n\t * Label for the modal.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() set modalLabel(value: string) {\n\t\tthis.ariaLabel = value;\n\t}\n\n\tget modalLabel() {\n\t\treturn this.ariaLabel;\n\t}\n\n\t@Input() ariaLabel = \"default\";\n\n\t/**\n\t * Controls the visibility of the modal when used directly in a template\n\t */\n\t@Input() open = false;\n\n\t/**\n\t * The element that triggers the modal, which should receive focus when the modal closes\n\t */\n\t@Input() trigger: HTMLElement;\n\n\t/**\n\t * Specify whether the modal contains scrolling content. This property overrides the automatic\n\t * detection of the existence of scrolling content. Set this property to `true` to force\n\t * overflow indicator to show up or to `false` to force overflow indicator to disappear.\n\t * It is set to `null` by default which indicates not to override automatic detection.\n\t */\n\t@Input() hasScrollingContent: boolean = null;\n\n\t/**\n\t * Emits event when click occurs within `n-overlay` element. This is to track click events occurring outside bounds of the `Modal` object.\n\t */\n\t@Output() overlaySelected = new EventEmitter();\n\t/**\n\t * To emit the closing event of the modal window.\n\t */\n\t@Output() close = new EventEmitter();\n\t/**\n\t * Maintains a reference to the view DOM element of the `Modal`.\n\t */\n\t// @ts-ignore\n\t@ViewChild(\"modal\", { static: true }) modal: ElementRef;\n\n\t/**\n\t * An element should have 'modal-primary-focus' as an attribute to receive initial focus within the `Modal` component.\n\t */\n\tselectorPrimaryFocus = \"[modal-primary-focus]\";\n\n\t/**\n\t * Creates an instance of `Modal`.\n\t */\n\tconstructor(public modalService: ModalService) {}\n\n\tngOnChanges({ open }: SimpleChanges) {\n\t\tif (open) {\n\t\t\tif (open.currentValue) {\n\t\t\t\t// `100` is just enough time to allow the modal\n\t\t\t\t// to become visible, so that we can set focus\n\t\t\t\tsetTimeout(() => this.focusInitialElement(), 100);\n\t\t\t} else if (this.trigger) {\n\t\t\t\tthis.trigger.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set document focus to be on the modal component after it is initialized.\n\t */\n\tngAfterViewInit() {\n\t\tthis.focusInitialElement();\n\t}\n\n\t/**\n\t * Handle keyboard events to close modal and tab through the content within the modal.\n\t */\n\t@HostListener(\"keydown\", [\"$event\"])\n\thandleKeyboardEvent(event: KeyboardEvent) {\n\t\tswitch (event.key) {\n\t\t\tcase \"Escape\": {\n\t\t\t\tevent.stopImmediatePropagation();  // prevents events being fired for multiple modals if more than 2 open\n\t\t\t\tthis.modalService.destroy();  // destroy top (latest) modal\n\t\t\t\tthis.close.emit();\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase \"Tab\": {\n\t\t\t\tcycleTabs(event, this.modal.nativeElement);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This detects whether or not the modal contains scrolling content.\n\t *\n\t * To force trigger a detection (ie. on window resize), change or reset the value of the modal content.\n\t *\n\t * Use the `hasScrollingContent` input to manually override the overflow indicator.\n\t */\n\tget shouldShowScrollbar() {\n\t\tconst modalContent = this.modal ? this.modal.nativeElement.querySelector(\".bx--modal-content\") : null;\n\t\tif (modalContent) {\n\t\t\tconst modalContentHeight = modalContent.getBoundingClientRect().height;\n\t\t\tconst modalContentScrollHeight = modalContent.scrollHeight;\n\t\t\treturn modalContentScrollHeight > modalContentHeight;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprotected focusInitialElement() {\n\t\tconst primaryFocusElement = this.modal.nativeElement.querySelector(this.selectorPrimaryFocus);\n\t\tif (primaryFocusElement && primaryFocusElement.focus) {\n\t\t\tsetTimeout(() => primaryFocusElement.focus());\n\t\t} else if (getFocusElementList(this.modal.nativeElement).length > 0) {\n\t\t\tsetTimeout(() => getFocusElementList(this.modal.nativeElement)[0].focus());\n\t\t} else {\n\t\t\tsetTimeout(() => this.modal.nativeElement.focus());\n\t\t}\n\t}\n}\n","import {\n\tComponent,\n\tOutput,\n\tEventEmitter,\n\tViewChild,\n\tElementRef,\n\tInput\n} from \"@angular/core\";\n\n\n/**\n * Component for the overlay object that acts as a backdrop to the `Modal` component.\n *\n * The main purpose for this component is to be able to handle click events that fall outside\n * the bounds of the `Modal` component.\n */\n@Component({\n\tselector: \"ibm-overlay\",\n\ttemplate: `\n\t\t<section\n\t\t\tclass=\"bx--modal bx--modal-tall\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--modal--danger': theme === 'danger',\n\t\t\t\t'is-visible': open\n\t\t\t}\"\n\t\t\t(click)=\"overlayClick($event)\"\n\t\t\t#overlay>\n\t\t\t<ng-content></ng-content>\n\t\t</section>\n\t`\n})\nexport class Overlay {\n\t/**\n\t * Classification of the modal.\n\t */\n\t@Input() theme: \"default\" | \"danger\" = \"default\";\n\t@Input() open = false;\n\t/**\n\t * To emit the event where the user selects the overlay behind the `Modal`.\n\t */\n\t@Output() overlaySelect = new EventEmitter();\n\t/**\n\t * Maintains a reference to the view DOM element of the `Overlay`.\n\t */\n\t// @ts-ignore\n\t@ViewChild(\"overlay\", { static: true }) overlay: ElementRef;\n\n\t/**\n\t * Handles the user clicking on the `Overlay` which resides outside the `Modal` object.\n\t */\n\toverlayClick(event) {\n\t\tif (event.target !== this.overlay.nativeElement) { return; }\n\t\tevent.stopPropagation();\n\t\tthis.overlaySelect.emit(event);\n\t}\n\n}\n","import { Directive, HostBinding, Input } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmModalContent]\"\n})\nexport class ModalContent {\n\t@HostBinding(\"class.bx--modal-content\") modalContentClass = true;\n\t/**\n\t * Provide whether the modal content has a form element.\n\t * If `true` is used here, non-form child content should have `bx--modal-content__regular-content` class.\n\t */\n\t@HostBinding(\"class.bx--modal-content--with-form\") @Input() hasForm = false;\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmModalContentText]\"\n})\nexport class ModalContentText {\n\t@HostBinding(\"class.bx--modal-content__text\") modalContentTextClass = true;\n}\n","import { Directive, HostBinding, Input } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmModalHeaderHeading]\"\n})\nexport class ModalHeaderHeading {\n\t@HostBinding(\"class.bx--modal-header__heading\") modalHeaderHeadingClass = true;\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmModalHeaderLabel]\"\n})\nexport class ModalHeaderLabel {\n\t@HostBinding(\"class.bx--modal-header__label\") modalHeaderLabelClass = true;\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { ModalService } from \"./modal.service\";\nimport { Modal } from \"./modal.component\";\nimport { ModalFooter } from \"./modal-footer.component\";\nimport { Overlay } from \"./overlay.component\";\nimport { ModalHeader } from \"./modal-header.component\";\nimport { AlertModal } from \"./alert-modal.component\";\nimport { ButtonModule } from \"carbon-components-angular/forms\";\nimport { I18nModule } from \"carbon-components-angular/i18n\";\nimport { PlaceholderModule } from \"carbon-components-angular/placeholder\";\nimport { ExperimentalModule } from \"carbon-components-angular/experimental\";\nimport { ModalContent } from \"./modal-content.directive\";\nimport { ModalContentText } from \"./modal-content-text.directive\";\nimport { ModalHeaderHeading } from \"./modal-header-heading.directive\";\nimport { ModalHeaderLabel } from \"./modal-header-label.directive\";\nimport { BaseModal } from \"./base-modal.class\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tAlertModal,\n\t\tModal,\n\t\tModalHeader,\n\t\tModalFooter,\n\t\tOverlay,\n\t\tModalContent,\n\t\tModalContentText,\n\t\tModalHeaderHeading,\n\t\tModalHeaderLabel,\n\t\tBaseModal\n\t],\n\texports: [\n\t\tAlertModal,\n\t\tModal,\n\t\tModalHeader,\n\t\tModalFooter,\n\t\tModalContent,\n\t\tModalContentText,\n\t\tModalHeaderHeading,\n\t\tModalHeaderLabel,\n\t\tBaseModal\n\t],\n\tentryComponents: [\n\t\tAlertModal,\n\t\tModal,\n\t\tModalFooter,\n\t\tModalHeader\n\t],\n\tproviders: [ ModalService ],\n\timports: [\n\t\tCommonModule,\n\t\tButtonModule,\n\t\tI18nModule,\n\t\tPlaceholderModule,\n\t\tExperimentalModule,\n\t\tIconModule\n\t]\n})\nexport class ModalModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__extends"],"mappings":"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"}
