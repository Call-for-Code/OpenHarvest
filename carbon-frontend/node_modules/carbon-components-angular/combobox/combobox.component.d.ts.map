{"version":3,"file":"combobox.component.d.ts","sources":["combobox.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | combobox.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { OnChanges, ElementRef, EventEmitter, AfterViewInit, AfterContentInit, TemplateRef, OnDestroy } from \"@angular/core\";\nimport { AbstractDropdownView, DropdownService } from \"carbon-components-angular/dropdown\";\nimport { ListItem } from \"carbon-components-angular/dropdown\";\nimport { DocumentService } from \"carbon-components-angular/utils\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { Observable } from \"rxjs\";\n/**\n * ComboBoxes are similar to dropdowns, except a combobox provides an input field for users to search items and (optionally) add their own.\n * Multi-select comboboxes also provide \"pills\" of selected items.\n *\n * [See demo](../../?path=/story/combobox--basic)\n *\n * <example-url>../../iframe.html?id=combobox--basic</example-url>\n */\nexport declare class ComboBox implements OnChanges, AfterViewInit, AfterContentInit, OnDestroy {\n    protected elementRef: ElementRef;\n    protected documentService: DocumentService;\n    protected dropdownService: DropdownService;\n    protected i18n: I18n;\n    /**\n     * Text to show when nothing is selected.\n     */\n    placeholder: string | Observable<string>;\n    /**\n     * Value to display for accessibility purposes on the combobox control menu when closed\n     */\n    openMenuAria: string | Observable<string>;\n    /**\n     * Value to display for accessibility purposes on the combobox control menu when opened\n     */\n    closeMenuAria: string | Observable<string>;\n    /**\n     * Value to display on the clear selections icon, when multi is selected\n     */\n    clearSelectionsTitle: string | Observable<string>;\n    /**\n     * Value to display for accessibility purposes to clear selections, when multi is selected\n     */\n    clearSelectionsAria: string | Observable<string>;\n    /**\n     * Value to display on the clear the selected item icon, when single is selected\n     */\n    clearSelectionTitle: string | Observable<string>;\n    /**\n     * Value to display for accessibility purposes on the clear the selected item icon, when single is selected\n     */\n    clearSelectionAria: string | Observable<string>;\n    static comboBoxCount: number;\n    id: string;\n    /**\n     * List of items to fill the content with.\n     *\n     * **Example:**\n     * ```javascript\n     * items = [\n     *\t\t{\n     *\t\t\tcontent: \"Abacus\",\n     *\t\t\tselected: false\n     *\t\t},\n     *\t\t{\n     *\t\t\tcontent: \"Byte\",\n     *\t\t\tselected: false,\n     *\t\t},\n     *\t\t{\n     *\t\t\tcontent: \"Computer\",\n     *\t\t\tselected: false\n     *\t\t},\n     *\t\t{\n     *\t\t\tcontent: \"Digital\",\n     *\t\t\tselected: false\n     *\t\t}\n     * ];\n     * ```\n     *\n     */\n    items: Array<ListItem>;\n    /**\n     * Combo box type (supporting single or multi selection of items).\n     */\n    type: \"single\" | \"multi\";\n    /**\n     * Combo box render size.\n     *\n     * @deprecated since v4\n     */\n    size: \"sm\" | \"md\" | \"xl\";\n    /**\n     * Specifies the property to be used as the return value to `ngModel`\n     */\n    itemValueKey: string;\n    /**\n     * Label for the combobox.\n     */\n    label: string | TemplateRef<any>;\n    /**\n     * Sets the optional helper text.\n     */\n    helperText: string | TemplateRef<any>;\n    /**\n     * set to `true` to place the dropdown view inline with the component\n     */\n    appendInline: boolean;\n    /**\n     * Set to `true` for invalid state.\n     */\n    invalid: boolean;\n    /**\n     * Value displayed if dropdown is in invalid state.\n     */\n    invalidText: string | TemplateRef<any>;\n    /**\n     * Max length value to limit input characters\n     */\n    maxLength: number;\n    /**\n     * `light` or `dark` dropdown theme\n     */\n    theme: \"light\" | \"dark\";\n    /**\n     * Specify feedback (mode) of the selection.\n     * `top`: selected item jumps to top\n     * `fixed`: selected item stays at its position\n     * `top-after-reopen`: selected item jump to top after reopen dropdown\n     */\n    selectionFeedback: \"top\" | \"fixed\" | \"top-after-reopen\";\n    /**\n     * Specify autocomplete attribute of text input\n     */\n    autocomplete: string;\n    /**\n     * Set to `true` to disable combobox.\n     */\n    disabled: boolean;\n    /**\n     * Emits a ListItem\n     *\n     * Example:\n     * ```javascript\n     * {\n     * \t\tcontent: \"one\",\n     * \t\tselected: true\n     * }\n     * ```\n     */\n    selected: EventEmitter<ListItem | ListItem[]>;\n    /**\n     * Intended to be used to add items to the list.\n     *\n     * Emits an event that includes the current item list, the suggested index for the new item, and a simple ListItem\n     *\n     * Example:\n     * ```javascript\n     *\t{\n     *\t\titems: [{content: \"one\", selected: true}, {content: \"two\", selected: true}],\n     *\t\tindex: 1,\n     *\t\tvalue: {\n     *\t\t\tcontent: \"some user string\",\n     *\t\t\tselected: false\n     *\t\t}\n     *\t}\n     * ```\n     *\n     *\n     * Example:\n     * ```javascript\n     * {\n     *\tafter: 1,\n     *\tvalue: \"some user string\"\n     * }\n     * ```\n     */\n    submit: EventEmitter<{\n        items: ListItem[];\n        index: number;\n        value: {\n            content: string;\n            selected: boolean;\n        };\n    }>;\n    /** emits an empty event when the menu is closed */\n    close: EventEmitter<void>;\n    /** emits the search string from the input */\n    search: EventEmitter<string>;\n    /** ContentChild reference to the instantiated dropdown list */\n    view: AbstractDropdownView;\n    dropdownMenu: any;\n    input: ElementRef;\n    listbox: ElementRef;\n    hostClass: boolean;\n    display: string;\n    open: boolean;\n    showClearButton: boolean;\n    /** Selected items for multi-select combo-boxes. */\n    pills: any[];\n    /** used to update the displayValue */\n    selectedValue: string;\n    keyboardNav: any;\n    protected noop: any;\n    protected onTouchedCallback: () => void;\n    protected propagateChangeCallback: (_: any) => void;\n    protected _placeholder: Overridable;\n    protected _closeMenuAria: Overridable;\n    protected _openMenuAria: Overridable;\n    protected _clearSelectionsTitle: Overridable;\n    protected _clearSelectionsAria: Overridable;\n    protected _clearSelectionTitle: Overridable;\n    protected _clearSelectionAria: Overridable;\n    /**\n     * Creates an instance of ComboBox.\n     */\n    constructor(elementRef: ElementRef, documentService: DocumentService, dropdownService: DropdownService, i18n: I18n);\n    /**\n     * Lifecycle hook.\n     * Updates pills if necessary.\n     *\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * Sets initial state that depends on child components\n     * Subscribes to select events and handles focus/filtering/initial list updates\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Binds event handlers against the rendered view\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Removing the `Dropdown` from the body if it is appended to the body.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Handles `Escape/Tab` key closing the dropdown, and arrow up/down focus to/from the dropdown list.\n     */\n    hostkeys(ev: KeyboardEvent): void;\n    _noop(): void;\n    writeValue(value: any): void;\n    onBlur(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    /**\n     * `ControlValueAccessor` method to programmatically disable the combobox.\n     *\n     * ex: `this.formGroup.get(\"myCoolCombobox\").disable();`\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Called by `n-pill-input` when the selected pills have changed.\n     */\n    updatePills(): void;\n    clearSelected(): void;\n    /**\n     * Closes the dropdown and emits the close event.\n     */\n    closeDropdown(): void;\n    /**\n     * Opens the dropdown.\n     */\n    openDropdown(): void;\n    /**\n     * Toggles the dropdown.\n     */\n    toggleDropdown(): void;\n    /**\n     * Sets the list group filter, and manages single select item selection.\n     */\n    onSearch(searchString: any, shouldEmitSearch?: boolean): void;\n    /**\n     * Intended to be used to add items to the list.\n     */\n    onSubmit(event: KeyboardEvent): void;\n    clearInput(event: any): void;\n    isTemplate(value: any): boolean;\n    /**\n     * Handles keyboard events so users are controlling the `Dropdown` instead of unintentionally controlling outside elements.\n     */\n    _keyboardNav(event: KeyboardEvent): void;\n    /**\n     * Creates the `Dropdown` list as an element that is appended to the DOM body.\n     */\n    _appendToBody(): void;\n    /**\n     * Creates the `Dropdown` list appending it to the dropdown parent object instead of the body.\n     */\n    _appendToDropdown(): void;\n    protected updateSelected(): void;\n    protected checkForReorder(): void;\n}\n"]}