{"version":3,"file":"placeholder.service.d.ts","sources":["placeholder.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | placeholder.service.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ComponentRef, ViewContainerRef, ComponentFactory, Injector } from \"@angular/core\";\n/**\n * Singleton service used to register the container for out-of-flow components to insert into.\n * Also used to insert/remove components from that view.\n */\nexport declare class PlaceholderService {\n    /**\n     * Main `ViewContainerRef` to insert components into\n     */\n    protected viewContainerRef: ViewContainerRef;\n    /**\n     * Map of id's to secondary `ViewContainerRef`s\n     */\n    protected viewContainerMap: Map<any, ViewContainerRef>;\n    /**\n     * Used by `Placeholder` to register view-container reference.\n     */\n    registerViewContainerRef(vcRef: ViewContainerRef, id?: any): void;\n    /**\n     * Creates and returns component in the view.\n     */\n    createComponent(componentFactory: ComponentFactory<any>, injector: Injector, id?: any): ComponentRef<any>;\n    destroyComponent(component: ComponentRef<any>): void;\n    hasComponentRef(component: ComponentRef<any>, id?: any): boolean;\n    hasPlaceholderRef(id?: any): boolean;\n    appendElement(element: HTMLElement, id?: any): HTMLElement;\n    removeElement(element: HTMLElement, id?: any): HTMLElement;\n    hasElement(element: HTMLElement, id?: any): boolean;\n}\n"]}