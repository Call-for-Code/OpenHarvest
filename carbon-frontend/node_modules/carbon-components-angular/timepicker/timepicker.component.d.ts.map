{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | timepicker.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, TemplateRef } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\n/**\n * [See demo](../../?path=/story/time-picker--simple)\n *\n * <example-url>../../iframe.html?id=time-picker--simple</example-url>\n */\nexport declare class TimePicker implements ControlValueAccessor {\n    /**\n     * Tracks the total number of selects instantiated. Used to generate unique IDs\n     */\n    static timePickerCount: number;\n    invalid: boolean;\n    invalidText: string | TemplateRef<any>;\n    label: string | TemplateRef<any>;\n    placeholder: string;\n    pattern: string;\n    id: string;\n    disabled: boolean;\n    value: string;\n    /**\n     * Set to true for a loading select.\n     */\n    skeleton: boolean;\n    /**\n     * `light` or `dark` select theme\n     */\n    theme: \"light\" | \"dark\";\n    valueChange: EventEmitter<string>;\n    writeValue(value: string): void;\n    registerOnChange(callback: any): void;\n    registerOnTouched(callback: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    onChange(event: any): void;\n    focusOut(): void;\n    isTemplate(value: any): boolean;\n    protected onChangeHandler: (_: any) => void;\n    protected onTouchedHandler: () => void;\n}\n"]}