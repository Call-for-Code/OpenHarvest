{"version":3,"file":"table.component.d.ts","sources":["table.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | table.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ApplicationRef, EventEmitter, ElementRef, AfterViewInit, TemplateRef, OnDestroy } from \"@angular/core\";\nimport { Subscription, Observable } from \"rxjs\";\nimport { TableModel } from \"./table-model.class\";\nimport { TableItem } from \"./table-item.class\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { DataGridInteractionModel } from \"./data-grid-interaction-model.class\";\nimport { TableRowSize } from \"./table.types\";\n/**\n * Build your table with this component by extending things that differ from default.\n *\n * [See demo](../../?path=/story/table--basic)\n *\n * Instead of the usual write-your-own-html approach you had with `<table>`,\n * carbon table uses model-view-controller approach.\n *\n * Here, you create a view (with built-in controller) and provide it a model.\n * Changes you make to the model are reflected in the view. Provide same model you use\n * in the table to the `<ibm-pagination>` components.\n * They provide a different view over the same data.\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-table [model]=\"model\"></ibm-table>\n * ```\n *\n * ```typescript\n * public model = new TableModel();\n *\n * this.model.data = [\n * \t[new TableItem({data: \"asdf\"}), new TableItem({data: \"qwer\"})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"zwer\"})],\n * \t[new TableItem({data: \"bsdf\"}), new TableItem({data: \"swer\"})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"twer\"})]\n * ];\n * ```\n *\n * ## Customization\n *\n * If you have custom data in your table, you need a way to display it. You can do that\n * by providing a template to `TableItem`.\n *\n * ```html\n * <ng-template #customTableItemTemplate let-data=\"data\">\n * \t<a [routerLink]=\"data.link\">{{data.name}} {{data.surname}}</a>\n * </ng-template>\n * ```\n *\n * ```typescript\n * customTableItemTemplate: TemplateRef<any>;\n *\n * this.customModel.data = [\n * \t[new TableItem({data: \"asdf\"}), new TableItem({data: {name: \"Lessy\", link: \"/table\"}, template: this.customTableItemTemplate})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"swer\"})],\n * \t[new TableItem({data: \"bsdf\"}), new TableItem({data: {name: \"Alice\", surname: \"Bob\"}, template: this.customTableItemTemplate})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"twer\"})],\n * ];\n * ```\n *\n * ### Sorting and filtering\n *\n * In case you need custom sorting and/or filtering you should subclass `TableHeaderItem`\n * and override needed functions.\n *\n * ```typescript\n * class FilterableHeaderItem extends TableHeaderItem {\n * \t// custom filter function\n * \tfilter(item: TableItem): boolean {\n * \t\tif (typeof item.data === \"string\" && item.data.toLowerCase().indexOf(this.filterData.data.toLowerCase()) >= 0 ||\n * \t\titem.data.name && item.data.name.toLowerCase().indexOf(this.filterData.data.toLowerCase()) >= 0 ||\n * \t\titem.data.surname && item.data.surname.toLowerCase().indexOf(this.filterData.data.toLowerCase()) >= 0) {\n * \t\t\treturn false;\n * \t\t}\n * \t\treturn true;\n * \t}\n *\n * \tset filterCount(n) {}\n * \tget filterCount() {\n * \t\treturn (this.filterData && this.filterData.data && this.filterData.data.length > 0) ? 1 : 0;\n * \t}\n *\n * \t// used for custom sorting\n * \tcompare(one: TableItem, two: TableItem) {\n * \t\tconst stringOne = (one.data.name || one.data.surname || one.data).toLowerCase();\n * \t\tconst stringTwo = (two.data.name || two.data.surname || two.data).toLowerCase();\n *\n * \t\tif (stringOne > stringTwo) {\n * \t\t\treturn 1;\n * \t\t} else if (stringOne < stringTwo) {\n * \t\t\treturn -1;\n * \t\t} else {\n * \t\t\treturn 0;\n * \t\t}\n * \t}\n * }\n * ```\n *\n * If you want to do your sorting on the backend or query for sorted data as a result of user\n * clicking the table header, check table [`sort`](#sort) output documentation\n *\n * See `TableHeaderItem` class for more information.\n *\n * ## No data template\n *\n * When table has no data to show, it can show a message you provide it instead.\n *\n * ```html\n * <ibm-table [model]=\"model\">No data.</ibm-table>\n * ```\n *\n * ... will show `No data.` message, but you can get creative and provide any template you want\n * to replace table's default `tbody`.\n *\n * ## Use pagination as table footer\n *\n * ```html\n * <ibm-pagination [model]=\"model\" (selectPage)=\"selectPage($event)\"></ibm-pagination>\n * ```\n *\n * `selectPage()` function should fetch the data from backend, create new `data`, apply it to `model.data`,\n * and update `model.currentPage`.\n *\n * If the data your server returns is a two dimensional array of objects, it would look something like this:\n *\n * ```typescript\n * selectPage(page) {\n * \tthis.getPage(page).then((data: Array<Array<any>>) => {\n * \t\t// set the data and update page\n * \t\tthis.model.data = this.prepareData(data);\n * \t\tthis.model.currentPage = page;\n * \t});\n * }\n *\n * protected prepareData(data: Array<Array<any>>) {\n * \t// create new data from the service data\n * \tlet newData = [];\n * \tdata.forEach(dataRow => {\n * \t\tlet row = [];\n * \t\tdataRow.forEach(dataElement => {\n * \t\t\trow.push(new TableItem({\n * \t\t\t\tdata: dataElement,\n * \t\t\t\ttemplate: typeof dataElement === \"string\" ? undefined : this.paginationTableItemTemplate\n * \t\t\t\t// your template can handle all the data types so you don't have to conditionally set it\n * \t\t\t\t// you can also set different templates for different columns based on index\n * \t\t\t}));\n * \t\t});\n * \t\tnewData.push(row);\n * \t});\n * \treturn newData;\n * }\n * ```\n *\n * <example-url>../../iframe.html?id=table--basic</example-url>\n */\nexport declare class Table implements AfterViewInit, OnDestroy {\n    protected elementRef: ElementRef;\n    protected applicationRef: ApplicationRef;\n    protected i18n: I18n;\n    /**\n     * Creates a skeleton model with a row and column count specified by the user\n     *\n     * Example:\n     *\n     * ```typescript\n     * this.model = Table.skeletonModel(5, 5);\n     * ```\n     */\n    static skeletonModel(rowCount: number, columnCount: number): TableModel;\n    static setTabIndex(element: HTMLElement, index: -1 | 0): void;\n    static focus(element: HTMLElement): void;\n    /**\n     * `TableModel` with data the table is to display.\n     */\n    model: TableModel;\n    /**\n     * Size of the table rows.\n     */\n    size: TableRowSize;\n    /**\n     * Set to `true` for a loading table.\n     */\n    skeleton: boolean;\n    /**\n     * Set to `true` for a data grid with keyboard interactions.\n     */\n    isDataGrid: boolean;\n    /**\n     * Setting sortable to false will disable all headers including headers which are sortable. Is is\n     * possible to set the sortable state on the header item to disable/enable sorting for only some headers.\n     */\n    sortable: boolean;\n    noBorder: boolean;\n    /**\n     * Controls whether to show the selection checkboxes column or not.\n     */\n    showSelectionColumn: boolean;\n    /**\n     * Controls whether to enable multiple or single row selection.\n     */\n    enableSingleSelect: boolean;\n    /**\n     * Distance (in px) from the bottom that view has to reach before\n     * `scrollLoad` event is emitted.\n     */\n    scrollLoadDistance: number;\n    /**\n     * Set to `true` to enable users to resize columns.\n     *\n     * Works for columns with width set in pixels.\n     *\n     */\n    columnsResizable: boolean;\n    /**\n     * Set to `true` to enable users to drag and drop columns.\n     *\n     * Changing the column order in table changes table model. Be aware of it when you add additional data\n     * to the model.\n     *\n     */\n    columnsDraggable: boolean;\n    expandButtonAriaLabel: string | Observable<string>;\n    sortDescendingLabel: string | Observable<string>;\n    sortAscendingLabel: string | Observable<string>;\n    /**\n     * Expects an object that contains some or all of:\n     * ```\n     * {\n     *\t\t\"FILTER\": \"Filter\",\n     *\t\t\"END_OF_DATA\": \"You've reached the end of your content\",\n     *\t\t\"SCROLL_TOP\": \"Scroll to top\",\n     *\t\t\"CHECKBOX_HEADER\": \"Select all rows\",\n     *\t\t\"CHECKBOX_ROW\": \"Select row\"\n     * }\n     * ```\n     */\n    translations: any;\n    /**\n     * Set to `false` to remove table rows (zebra) stripes.\n     */\n    striped: boolean;\n    /**\n     * Set to `true` to stick the header to the top of the table\n     */\n    stickyHeader: boolean;\n    /**\n     * Set footer template to customize what is displayed in the tfoot section of the table\n     */\n    footerTemplate: TemplateRef<any>;\n    /**\n     * Used to populate the row selection checkbox label with a useful value if set.\n     *\n     * Example:\n     * ```\n     * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n     * <!-- results in aria-label=\"Select first column value\"\n     * (where \"first column value\" is the value of the first column in the row -->\n     * ```\n     */\n    selectionLabelColumn: number;\n    /**\n     * Emits an index of the column that wants to be sorted.\n     *\n     * If no observers are provided (default), table will attempt to do a simple sort of the data loaded\n     * into the model.\n     *\n     * If an observer is provided, table will not attempt any sorting of its own and it is up to the observer\n     * to sort the table. This is what you typically want if you're using a backend query to get the sorted\n     * data or want to sort data across multiple pages.\n     *\n     * Usage:\n     *\n     * ```typescript\n     * @Component({\n     * \tselector: \"app-table\",\n     * \ttemplate: `\n     * \t\t<ibm-table\n     * \t\t\t[model]=\"model\"\n     * \t\t\t(sort)=\"simpleSort($event)\">\n     * \t\t\tNo data.\n     * \t\t</ibm-table>\n     * \t`\n     * })\n     * export class TableApp implements OnInit, OnChanges {\n     * \t@Input() model = new TableModel();\n     *\n     * \tngOnInit() {\n     * \t\tthis.model.header = [\n     * \t\t\tnew TableHeaderItem({ data: \"Name\" }),\n     * \t\t\tnew TableHeaderItem({ data: \"hwer\" })\n     * \t\t];\n     *\n     * \t\tthis.model.data = [\n     * \t\t\t[new TableItem({ data: \"Name 1\" }), new TableItem({ data: \"qwer\" })],\n     * \t\t\t[new TableItem({ data: \"Name 3\" }), new TableItem({ data: \"zwer\" })],\n     * \t\t\t[new TableItem({ data: \"Name 2\" }), new TableItem({ data: \"swer\" })],\n     * \t\t\t[new TableItem({ data: \"Name 4\" }), new TableItem({data: \"twer\"})],\n     * \t\t\t[new TableItem({ data: \"Name 5\" }), new TableItem({data: \"twer\"})],\n     * \t\t\t[new TableItem({ data: \"Name 6\" }), new TableItem({data: \"twer\"})]\n     * \t\t];\n     * \t}\n     *\n     * \tsimpleSort(index: number) {\n     * \t\t// this function does a simple sort, which is the default for the table and if that's\n     * \t\t// all you want, you don't need to do this.\n     *\n     * \t\t// here you can query your backend and update the model.data based on the result\n     * \t\tif (this.model.header[index].sorted) {\n     * \t\t\t// if already sorted flip sorting direction\n     * \t\t\tthis.model.header[index].ascending = this.model.header[index].descending;\n     * \t\t}\n     * \t\tthis.model.sort(index);\n     * \t}\n     * }\n     * ```\n     */\n    sort: EventEmitter<number>;\n    /**\n     * Emits if all rows are selected.\n     *\n     * @param model\n     */\n    selectAll: EventEmitter<Object>;\n    /**\n     * Emits if all rows are deselected.\n     *\n     * @param model\n     */\n    deselectAll: EventEmitter<Object>;\n    /**\n     * Emits if a single row is selected.\n     *\n     * @param ({model: this.model, selectedRowIndex: index})\n     */\n    selectRow: EventEmitter<Object>;\n    /**\n     * Emits if a single row is deselected.\n     *\n     * @param ({model: this.model, deselectedRowIndex: index})\n     */\n    deselectRow: EventEmitter<Object>;\n    /**\n     * Emits if a row item excluding expandButtons, checkboxes, or radios is clicked.\n     */\n    rowClick: EventEmitter<number>;\n    /**\n     * Emits when table requires more data to be loaded.\n     */\n    scrollLoad: EventEmitter<TableModel>;\n    /**\n     * Controls if all checkboxes are viewed as selected.\n     */\n    selectAllCheckbox: boolean;\n    /**\n     * Controls the indeterminate state of the header checkbox.\n     */\n    selectAllCheckboxSomeSelected: boolean;\n    readonly noData: boolean;\n    isColumnDragging: boolean;\n    columnDraggedHoverIndex: number;\n    columnDraggedPosition: string;\n    protected _model: TableModel;\n    protected _isDataGrid: boolean;\n    protected isViewReady: boolean;\n    protected subscriptions: Subscription;\n    protected positionSubscription: Subscription;\n    protected interactionModel: DataGridInteractionModel;\n    protected interactionPositionSubscription: Subscription;\n    protected _expandButtonAriaLabel: Overridable;\n    protected _sortDescendingLabel: Overridable;\n    protected _sortAscendingLabel: Overridable;\n    protected _checkboxHeaderLabel: Overridable;\n    protected _checkboxRowLabel: Overridable;\n    protected _endOfDataText: Overridable;\n    protected _scrollTopText: Overridable;\n    protected _filterTitle: Overridable;\n    protected columnResizeWidth: number;\n    protected columnResizeMouseX: number;\n    protected mouseMoveSubscription: Subscription;\n    protected mouseUpSubscription: Subscription;\n    /**\n     * Creates an instance of Table.\n     */\n    constructor(elementRef: ElementRef, applicationRef: ApplicationRef, i18n: I18n);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    enableDataGridInteractions(): void;\n    disableDataGridInteractions(): void;\n    onSelectAll(): void;\n    onDeselectAll(): void;\n    onSelectRow(event: any): void;\n    onRowClick(index: number): void;\n    updateSelectAllCheckbox(): void;\n    resetTabIndex(newTabIndex?: number): void;\n    columnResizeStart(event: any, column: any): void;\n    columnResizeProgress(event: any, column: any): void;\n    columnResizeEnd(event: any, column: any): void;\n    /**\n     * Triggered when the user scrolls on the `<tbody>` element.\n     * Emits the `scrollLoad` event.\n     */\n    onScroll(event: any): void;\n    columnDragStart(event: any, columnIndex: any): void;\n    columnDragEnd(event: any, columnIndex: any): void;\n    columnDragEnter(event: any, position: any, columnIndex: any): void;\n    columnDragLeave(event: any, position: any, columnIndex: any): void;\n    columnDragover(event: any, position: any, columnIndex: any): void;\n    columnDrop(event: any, position: any, columnIndex: any): void;\n    doSort(index: number): void;\n    /**\n     * Triggered when the user scrolls on the `<tbody>` element.\n     * Emits the `scrollLoad` event.\n     */\n    scrollToTop(event: any): void;\n    getSelectionLabelValue(row: TableItem[]): {\n        value: any;\n    };\n    getExpandButtonAriaLabel(): Observable<string>;\n    getSortDescendingLabel(): Observable<string>;\n    getSortAscendingLabel(): Observable<string>;\n    getCheckboxHeaderLabel(): Observable<string>;\n    getCheckboxRowLabel(): Observable<string>;\n    getEndOfDataText(): Observable<string>;\n    getScrollTopText(): Observable<string>;\n    getFilterTitle(): Observable<string>;\n}\n"]}