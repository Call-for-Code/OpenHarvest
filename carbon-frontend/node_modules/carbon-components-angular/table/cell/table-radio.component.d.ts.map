{"version":3,"file":"table-radio.component.d.ts","sources":["table-radio.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | table-radio.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter } from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { TableItem } from \"../table-item.class\";\nimport { Observable } from \"rxjs\";\nexport declare class TableRadio {\n    protected i18n: I18n;\n    row: any[];\n    selected: boolean;\n    label: string | Observable<string>;\n    /**\n     * Used to populate the row selection checkbox label with a useful value if set.\n     *\n     * Example:\n     * ```\n     * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n     * <!-- results in aria-label=\"Select first column value\"\n     * (where \"first column value\" is the value of the first column in the row -->\n     * ```\n     */\n    selectionLabelColumn: number;\n    skeleton: boolean;\n    /**\n     * Emits if a single row is selected.\n     */\n    change: EventEmitter<{}>;\n    protected _label: Overridable;\n    constructor(i18n: I18n);\n    getSelectionLabelValue(row: TableItem[]): {\n        value: any;\n    };\n    getLabel(): Observable<string>;\n}\n"]}