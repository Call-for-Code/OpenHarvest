/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-timepicker.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, Input, Output, EventEmitter, TemplateRef, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TimePickerSelectModule } from 'carbon-components-angular/timepicker-select';

/**
 * [See demo](../../?path=/story/time-picker--simple)
 *
 * <example-url>../../iframe.html?id=time-picker--simple</example-url>
 */
class TimePicker {
    constructor() {
        this.invalid = false;
        this.placeholder = "hh:mm";
        this.pattern = "(1[012]|[0-9]):[0-5][0-9]";
        this.id = `timepicker-${TimePicker.timePickerCount++}`;
        this.disabled = false;
        /**
         * Set to true for a loading select.
         */
        this.skeleton = false;
        /**
         * `light` or `dark` select theme
         */
        this.theme = "dark";
        this.valueChange = new EventEmitter();
        this.onChangeHandler = (_) => { };
        this.onTouchedHandler = () => { };
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(callback) {
        this.onChangeHandler = callback;
    }
    registerOnTouched(callback) {
        this.onTouchedHandler = callback;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onChange(event) {
        this.onChangeHandler(event.target.value);
        this.valueChange.emit(event.target.value);
    }
    focusOut() {
        this.onTouchedHandler();
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
/**
 * Tracks the total number of selects instantiated. Used to generate unique IDs
 */
TimePicker.timePickerCount = 0;
TimePicker.decorators = [
    { type: Component, args: [{
                selector: "ibm-timepicker",
                template: `
		<label *ngIf="!skeleton && label" [for]="id" class="bx--label">
			<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
			<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
		</label>
		<div
			class="bx--time-picker"
			[ngClass]="{'bx--time-picker--invalid' : invalid}">
			<div class="bx--time-picker__input">
				<input
					[ngClass]="{
						'bx--text-input--light': theme === 'light',
						'bx--skeleton': skeleton
					}"
					[value]="value"
					[placeholder]="placeholder"
					[attr.data-invalid]="invalid ? true : undefined"
					[pattern]="pattern"
					[attr.id]="id"
					[disabled]="disabled"
					maxlength="5"
					(change)="onChange($event)"
					type="text"
					class="bx--time-picker__input-field bx--text-input">
			</div>
			<ng-content></ng-content>
		</div>
		<div *ngIf="invalid" class="bx--form-requirement">
			<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
			<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
		</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimePicker,
                        multi: true
                    }
                ]
            }] }
];
TimePicker.propDecorators = {
    invalid: [{ type: Input }],
    invalidText: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    pattern: [{ type: Input }],
    id: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    skeleton: [{ type: Input }],
    theme: [{ type: Input }],
    valueChange: [{ type: Output }],
    focusOut: [{ type: HostListener, args: ["focusout",] }]
};

class TimePickerModule {
}
TimePickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TimePicker
                ],
                exports: [
                    TimePicker
                ],
                imports: [
                    TimePickerSelectModule,
                    CommonModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { TimePicker, TimePickerModule };

//# sourceMappingURL=carbon-components-angular-timepicker.js.map