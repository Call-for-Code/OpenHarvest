/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-pagination.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';
import { ExperimentalService, ExperimentalModule } from 'carbon-components-angular/experimental';
import { merge } from 'carbon-components-angular/utils';
import { range } from 'carbon-components-angular/common';
import { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { IconModule } from 'carbon-components-angular/icon';
import { ButtonModule } from 'carbon-components-angular/forms';

class PaginationModel {
    constructor() {
        /**
         * Tracks the current page.
         */
        this.currentPage = 1;
        /**
         * Length of page.
         */
        /* tslint:disable-next-line*/
        this.pageLength = 10;
        /**
         * Absolute total number of items needed to paginate.
         */
        this.totalDataLength = 0;
    }
}

/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/pagination--basic)
 *
 * ```html
 * <ibm-pagination [model]="model" (selectPage)="selectPage($event)"></ibm-pagination>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=pagination--basic</example-url>
 */
class Pagination {
    constructor(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` for a loading pagination component.
         */
        this.skeleton = false;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Set to `true` to disable the select box that changes the page.
         */
        this.pageInputDisabled = false;
        /**
         * Controls wether or not to show the page selects
         */
        this.showPageInput = true;
        /**
         * Set to `true` if the total number of items is unknown.
         */
        this.pagesUnknown = false;
        this.pageSelectThreshold = 1000;
        /**
         * Options for items per page select
         *
         * A default array of options will be defined: [10, 20, 30, 40, 50]
         */
        this.itemsPerPageOptions = [10, 20, 30, 40, 50];
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.itemsPerPageSelectId = `pagination-select-items-per-page-${Pagination.paginationCounter}`;
        this.currentPageSelectId = `pagination-select-current-page-${Pagination.paginationCounter}`;
        this.itemsPerPageText = this.i18n.getOverridable("PAGINATION.ITEMS_PER_PAGE");
        this.optionsListText = this.i18n.getOverridable("PAGINATION.OPEN_LIST_OF_OPTIONS");
        this.backwardText = this.i18n.getOverridable("PAGINATION.BACKWARD");
        this.forwardText = this.i18n.getOverridable("PAGINATION.FORWARD");
        this.totalItemsText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEMS");
        this.totalItemText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEM");
        this.totalItemsUnknownText = this.i18n.getOverridable("PAGINATION.TOTAL_ITEMS_UNKNOWN");
        this.pageText = this.i18n.getOverridable("PAGINATION.PAGE");
        this.ofLastPagesText = this.i18n.getOverridable("PAGINATION.OF_LAST_PAGES");
        this.ofLastPageText = this.i18n.getOverridable("PAGINATION.OF_LAST_PAGE");
        this._pageOptions = [];
        Pagination.paginationCounter++;
    }
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"ITEMS_PER_PAGE": "Items per page:",
     *		"OPEN_LIST_OF_OPTIONS": "Open list of options",
     *		"BACKWARD": "Backward",
     *		"FORWARD": "Forward",
     *		"TOTAL_ITEMS_UNKNOWN": "{{start}}-{{end}} items",
     *		"TOTAL_ITEMS": "{{start}}-{{end}} of {{total}} items",
     *		"TOTAL_ITEM": "{{start}}-{{end}} of {{total}} item",
     *		"OF_LAST_PAGES": "of {{last}} pages",
     *		"OF_LAST_PAGE": "of {{last}} page"
     * }
     * ```
     */
    set translations(value) {
        const valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
        this.itemsPerPageText.override(valueWithDefaults.ITEMS_PER_PAGE);
        this.optionsListText.override(valueWithDefaults.OPEN_LIST_OF_OPTIONS);
        this.backwardText.override(valueWithDefaults.BACKWARD);
        this.forwardText.override(valueWithDefaults.FORWARD);
        this.totalItemsText.override(valueWithDefaults.TOTAL_ITEMS);
        this.totalItemText.override(valueWithDefaults.TOTAL_ITEM);
        this.totalItemsUnknownText.override(valueWithDefaults.TOTAL_ITEMS_UNKNOWN);
        this.pageText.override(valueWithDefaults.PAGE);
        this.ofLastPagesText.override(valueWithDefaults.OF_LAST_PAGES);
        this.ofLastPageText.override(valueWithDefaults.OF_LAST_PAGE);
    }
    get itemsPerPage() {
        return this.model.pageLength;
    }
    set itemsPerPage(value) {
        this.model.pageLength = Number(value);
        this.currentPage = 1; // reset page
    }
    get currentPage() {
        return this.model.currentPage;
    }
    set currentPage(value) {
        value = Number(value);
        // emits the value to allow the user to update current page
        // in the model once the page is loaded
        this.selectPage.emit(value);
    }
    get totalDataLength() {
        return this.model.totalDataLength;
    }
    /**
     * The last page number to display in the pagination view.
     */
    get lastPage() {
        const last = Math.ceil(this.totalDataLength / this.itemsPerPage);
        return last > 0 ? last : 1;
    }
    get startItemIndex() {
        return this.endItemIndex > 0 ? (this.currentPage - 1) * this.itemsPerPage + 1 : 0;
    }
    get endItemIndex() {
        const projectedEndItemIndex = this.currentPage * this.itemsPerPage;
        return projectedEndItemIndex < this.totalDataLength ? projectedEndItemIndex : this.totalDataLength;
    }
    /**
     * The previous page number to navigate to, from the current page.
     */
    get previousPage() {
        return this.currentPage <= 1 ? 1 : this.currentPage - 1;
    }
    /**
     * The next page number to navigate to, from the current page.
     */
    get nextPage() {
        const lastPage = this.lastPage;
        return this.currentPage >= lastPage ? lastPage : this.currentPage + 1;
    }
    get pageOptions() {
        if (this.totalDataLength && this._pageOptions.length !== this.totalDataLength) {
            this._pageOptions = Array(Math.ceil(this.totalDataLength / this.itemsPerPage));
        }
        return this._pageOptions;
    }
}
Pagination.paginationCounter = 0;
Pagination.decorators = [
    { type: Component, args: [{
                selector: "ibm-pagination",
                template: `
	<div
		class="bx--pagination"
		[ngClass]="{
			'bx--skeleton': skeleton
		}">
		<!-- left skeleton div -->
		<div *ngIf="skeleton" class="bx--pagination__left">
			<p class="bx--skeleton__text" style="width: 70px"></p>
			<p class="bx--skeleton__text" style="width: 35px"></p>
			<p class="bx--skeleton__text" style="width: 105px"></p>
		</div>

		<div *ngIf="!skeleton" class="bx--pagination__left">
			<ng-container *ngIf="showPageInput">
				<label class="bx--pagination__text" [for]="itemsPerPageSelectId">
					{{itemsPerPageText.subject | async}}
				</label>
				<div
					class="bx--select bx--select--inline bx--select__item-count"
					[class.bx--select--disabled]="pageInputDisabled">
					<select
						[id]="itemsPerPageSelectId"
						[(ngModel)]="itemsPerPage"
						[disabled]="pageInputDisabled"
						class="bx--select-input">
						<option
							class="bx--select-option"
							*ngFor="let option of itemsPerPageOptions"
							[value]="option">
								{{ option }}
						</option>
					</select>
					<svg
						ibmIcon="chevron--down"
						size="16"
						style="display: inherit"
						class="bx--select__arrow"
						aria-hidden="true"
						[attr.ariaLabel]="optionsListText.subject | async">
					</svg>
				</div>
			</ng-container>
			<span *ngIf="!pagesUnknown && totalDataLength <= 1" class="bx--pagination__text" [ngStyle]="{'margin-left': showPageInput ? null : 0}">
				{{totalItemText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex, total: totalDataLength } | async}}
			</span>
			<span *ngIf="!pagesUnknown && totalDataLength > 1" class="bx--pagination__text" [ngStyle]="{'margin-left': showPageInput ? null : 0}">
				{{totalItemsText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex, total: totalDataLength } | async}}
			</span>
			<span *ngIf="pagesUnknown" class="bx--pagination__text" [ngStyle]="{'margin-left': showPageInput ? null : 0}">
				{{totalItemsUnknownText.subject | i18nReplace:{start: startItemIndex, end: endItemIndex } | async}}
			</span>
		</div>

		<!-- right skeleton div -->
		<div *ngIf="skeleton" class="bx--pagination__right">
			<p class="bx--skeleton__text" style="width: 70px"></p>
		</div>

		<div *ngIf="!skeleton" class="bx--pagination__right">
			<ng-container *ngIf="showPageInput">
				<div
					class="bx--select bx--select--inline bx--select__page-number"
					[class.bx--select--disabled]="pageInputDisabled">
					<label [for]="currentPageSelectId" class="bx--label bx--visually-hidden">{{itemsPerPageText.subject | async}}</label>
					<input
						*ngIf="pageOptions.length > pageSelectThreshold"
						style="padding-right: 1rem; margin-right: 1rem;"
						[id]="currentPageSelectId"
						type="number"
						min="1"
						[max]="pageOptions.length"
						class="bx--select-input"
						[(ngModel)]="currentPage">
					<select
						*ngIf="pageOptions.length <= pageSelectThreshold"
						[id]="currentPageSelectId"
						class="bx--select-input"
						[disabled]="pageInputDisabled"
						[(ngModel)]="currentPage">
						<option *ngFor="let page of pageOptions; let i = index;" class="bx--select-option" [value]="i + 1">{{i + 1}}</option>
					</select>
					<svg
						*ngIf="pageOptions.length <= 1000"
						ibmIcon="chevron--down"
						size="16"
						style="display: inherit;"
						class="bx--select__arrow"
						[attr.ariaLabel]="optionsListText.subject | async">
					</svg>
				</div>
			</ng-container>

			<span *ngIf="!pagesUnknown && lastPage <= 1" class="bx--pagination__text">
				<ng-container *ngIf="!showPageInput">{{currentPage}}</ng-container>
				{{ofLastPageText.subject | i18nReplace: {last: lastPage} | async}}
			</span>
			<span *ngIf="!pagesUnknown && lastPage > 1" class="bx--pagination__text">
				<ng-container *ngIf="!showPageInput">{{currentPage}}</ng-container>
				{{ofLastPagesText.subject | i18nReplace: {last: lastPage} | async}}
			</span>
			<span *ngIf="pagesUnknown" class="bx--pagination__text">
				<ng-container *ngIf="!showPageInput">{{currentPage}}</ng-container>
				{{pageText.subject | async}} {{currentPage}}
			</span>
			<div class="bx--pagination__control-buttons">
				<button
					ibmButton="ghost"
					iconOnly="true"
					class="bx--pagination__button bx--pagination__button--backward"
					[ngClass]="{
						'bx--pagination__button--no-index': currentPage <= 1 || disabled
					}"
					tabindex="0"
					[attr.aria-label]="backwardText.subject | async"
					(click)="selectPage.emit(previousPage)"
					[disabled]="(currentPage <= 1 || disabled ? true : null)">
					<svg ibmIcon="caret--left" size="16"></svg>
				</button>

				<button
					ibmButton="ghost"
					iconOnly="true"
					class="
						bx--pagination__button
						bx--pagination__button--forward"
					[ngClass]="{
						'bx--pagination__button--no-index': currentPage >= lastPage || disabled
					}"
					tabindex="0"
					[attr.aria-label]="forwardText.subject | async"
					(click)="selectPage.emit(nextPage)"
					[disabled]="(currentPage >= lastPage || disabled ? true : null)">
					<svg ibmIcon="caret--right" size="16"></svg>
				</button>
			</div>
		</div>
	</div>
	`
            }] }
];
/** @nocollapse */
Pagination.ctorParameters = () => [
    { type: I18n },
    { type: ExperimentalService }
];
Pagination.propDecorators = {
    skeleton: [{ type: Input }],
    model: [{ type: Input }],
    disabled: [{ type: Input }],
    pageInputDisabled: [{ type: Input }],
    showPageInput: [{ type: Input }],
    pagesUnknown: [{ type: Input }],
    pageSelectThreshold: [{ type: Input }],
    translations: [{ type: Input }],
    itemsPerPageOptions: [{ type: Input }],
    selectPage: [{ type: Output }]
};

/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/pagination-nav--basic)
 *
 * ```html
 * <ibm-pagination-nav [model]="model" (selectPage)="selectPage($event)"></ibm-pagination-nav>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=pagination-nav--basic</example-url>
 */
class PaginationNav {
    constructor(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Number of items to show in pagination. Minimum is 4.
         */
        this.numOfItemsToShow = 4;
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.nextItemText = this.i18n.getOverridable("PAGINATION.NEXT");
        this.previousItemText = this.i18n.getOverridable("PAGINATION.PREVIOUS");
        PaginationNav.paginationCounter++;
    }
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"NEXT": "Next",
     *		"PREVIOUS": "Previous",
     * }
     * ```
     */
    set translations(value) {
        const valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
        this.nextItemText.override(valueWithDefaults.NEXT);
        this.previousItemText.override(valueWithDefaults.PREVIOUS);
    }
    get totalNumbersArray() {
        return range(this.totalDataLength + 1, 1);
    }
    get currentPage() {
        return this.model.currentPage;
    }
    set currentPage(value) {
        value = Number(value);
        // emits the value to allow the user to update current page
        // in the model once the page is loaded
        this.selectPage.emit(value);
    }
    get totalDataLength() {
        return this.model.totalDataLength;
    }
    get startOffset() {
        return this.numOfItemsToShow <= 4 && this.currentPage > 1 ? 0 : 1;
    }
    get frontCuts() {
        const cuts = this.getCuts();
        return cuts.front;
    }
    get backCuts() {
        const cuts = this.getCuts();
        return cuts.back;
    }
    get leftArrowDisabled() {
        return this.disabled || this.currentPage === 1;
    }
    get rightArrowDisabled() {
        return this.disabled || this.currentPage === this.totalDataLength;
    }
    handleOverflowSelection(page) {
        if (typeof page === "number") {
            this.currentPage = page;
        }
    }
    jumpToNext() {
        this.currentPage = this.currentPage < this.totalDataLength ? this.currentPage + 1 : this.totalDataLength;
    }
    jumpToPrevious() {
        this.currentPage = this.currentPage > 1 ? this.currentPage - 1 : 1;
    }
    getPages() {
        if (this.totalDataLength <= 1) {
            return null;
        }
        const cuts = this.getCuts();
        return this.totalNumbersArray.slice(this.startOffset + cuts.front, (1 + cuts.back) * -1);
    }
    getCuts(splitPoint = null) {
        const page = this.currentPage - 1;
        const totalItems = this.totalDataLength;
        const itemsThatFit = this.numOfItemsToShow;
        if (itemsThatFit >= totalItems) {
            return {
                front: 0,
                back: 0
            };
        }
        const split = splitPoint || Math.ceil(itemsThatFit / 2) - 1;
        let frontHidden = page + 1 - split;
        let backHidden = totalItems - page - (itemsThatFit - split) + 1;
        if (frontHidden <= 1) {
            backHidden -= frontHidden <= 0 ? Math.abs(frontHidden) + 1 : 0;
            frontHidden = 0;
        }
        if (backHidden <= 1) {
            frontHidden -= backHidden <= 0 ? Math.abs(backHidden) + 1 : 0;
            backHidden = 0;
        }
        return {
            front: frontHidden,
            back: backHidden
        };
    }
}
PaginationNav.paginationCounter = 0;
PaginationNav.decorators = [
    { type: Component, args: [{
                selector: "ibm-pagination-nav",
                template: `
	<div>
		<div class="bx--pagination-nav">
			<ul class="bx--pagination-nav__list">
				<li class="bx--pagination-nav__list-item">
					<button
						class="bx--btn bx--btn--ghost bx--pagination-nav-previous
						bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center"
						[disabled]="leftArrowDisabled"
						(click)="jumpToPrevious()">
						<span class="bx--assistive-text">{{previousItemText.subject | async}}</span>
						<svg
							ibmIcon="caret--left"
							size="16"
							style="display: inherit"
							class="bx--btn__icon">
						</svg>
					</button>
				</li>
				<ibm-pagination-nav-item
					*ngIf="this.numOfItemsToShow >= 5 || (this.numOfItemsToShow <= 4 && currentPage <= 1)"
					page="1"
					(click)="currentPage = 1"
					[isActive]="currentPage == 1">
				</ibm-pagination-nav-item>
				<ibm-pagination-overflow
					*ngIf="frontCuts"
					[count]="frontCuts"
					[fromIndex]="startOffset"
					(change)="handleOverflowSelection($event)">
				</ibm-pagination-overflow>
				<ibm-pagination-nav-item
					*ngFor="let page of getPages();"
					[page]="page"
					(click)="currentPage = page"
					[isActive]="currentPage == page">
				</ibm-pagination-nav-item>
				<ibm-pagination-overflow
					*ngIf="backCuts"
					[count]="backCuts"
					[fromIndex]="totalNumbersArray.length - backCuts - 1"
					(change)="handleOverflowSelection($event)">
				</ibm-pagination-overflow>
				<ibm-pagination-nav-item
					*ngIf="totalDataLength > 1"
					[page]="totalNumbersArray.length"
					(click)="currentPage = totalNumbersArray.length"
					[isActive]="currentPage == totalNumbersArray.length">
				</ibm-pagination-nav-item>
				<li class="bx--pagination-nav__list-item">
					<button
						class="bx--btn bx--btn--ghost bx--pagination-nav-next
						bx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center"
						[disabled]="rightArrowDisabled"
						(click)="jumpToNext()">
						<span class="bx--assistive-text">{{nextItemText.subject | async}}</span>
						<svg
							ibmIcon="caret--right"
							size="16"
							style="display: inherit"
							class="bx--btn__icon">
						</svg>
					</button>
				</li>
			</ul>
		</div>
	</div>
	`
            }] }
];
/** @nocollapse */
PaginationNav.ctorParameters = () => [
    { type: I18n },
    { type: ExperimentalService }
];
PaginationNav.propDecorators = {
    model: [{ type: Input }],
    disabled: [{ type: Input }],
    numOfItemsToShow: [{ type: Input }],
    translations: [{ type: Input }],
    selectPage: [{ type: Output }]
};

/**
 * Used to present a single navigation item in a pagination list
 *
 *  * ```html
 * <ibm-pagination-nav-item [page]="5" [isActive]="false" (click)="handleClick(value)"></ibm-pagination-nav-item>
 * ```
 */
class PaginationNavItem {
    constructor() {
        /**
         * The page for this component to dipslay
         */
        this.page = 0;
        /**
         * The state for this component to dipslay
         */
        this.isActive = false;
        /**
         * Emits click event
         */
        this.click = new EventEmitter();
    }
}
PaginationNavItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-pagination-nav-item",
                template: `
		<li class="bx--pagination-nav__list-item">
			<button
				type="button"
				class="bx--pagination-nav__page"
				[ngClass]="{ 'bx--pagination-nav__page--active': isActive }"
				(click)="click.emit(page)">
				<span class="bx--pagination-nav__accessibility-label">
					{{page}}
				</span>
				{{page}}
			</button>
		</li>
	`
            }] }
];
/** @nocollapse */
PaginationNavItem.ctorParameters = () => [];
PaginationNavItem.propDecorators = {
    page: [{ type: Input }],
    isActive: [{ type: Input }],
    click: [{ type: Output }]
};

/**
 * Used to present a selection of pages when there is an overflow
 * in the pagination list
 *
 * * ```html
 * <ibm-pagination-overflow [fromIndex]="5" [count]="30" (change)="handleChange(value)"></ibm-pagination-overflow>
 * ```
 */
class PaginationOverflow {
    constructor() {
        /**
         * Emits click event
         */
        this.change = new EventEmitter();
    }
    get countAsArray() {
        return [...Array(this.count)];
    }
    handleChange(event) {
        event.target.value = "";
    }
}
PaginationOverflow.decorators = [
    { type: Component, args: [{
                selector: "ibm-pagination-overflow",
                template: `
		<li class="bx--pagination-nav__list-item" *ngIf="count > 1">
			<div class="bx--pagination-nav__select">
			<select
				class="bx--pagination-nav__page bx--pagination-nav__page--select" (change)="handleChange($event)">
				<option value="" hidden></option>
				<option
				(click)="change.emit(fromIndex + i + 1)"
				*ngFor="let item of countAsArray; let i = index">
					{{fromIndex + i + 1}}
				</option>
			</select>
			<div class="bx--pagination-nav__select-icon-wrapper">
				<svg
					ibmIcon="overflow-menu--horizontal"
					size="16"
					style="display: inherit"
					class="bx--pagination-nav__select-icon">
				</svg>
			</div>
			</div>
		</li>
		<ibm-pagination-nav-item *ngIf="count === 1" [page]="fromIndex + 1"></ibm-pagination-nav-item>
	`
            }] }
];
/** @nocollapse */
PaginationOverflow.ctorParameters = () => [];
PaginationOverflow.propDecorators = {
    fromIndex: [{ type: Input }],
    count: [{ type: Input }],
    change: [{ type: Output }]
};

class PaginationModule {
}
PaginationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    Pagination,
                    PaginationNav,
                    PaginationNavItem,
                    PaginationOverflow
                ],
                exports: [
                    Pagination,
                    PaginationNav,
                    PaginationNavItem,
                    PaginationOverflow
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    I18nModule,
                    ExperimentalModule,
                    IconModule,
                    ButtonModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { PaginationModel, Pagination, PaginationModule, PaginationNav, PaginationNavItem, PaginationOverflow };

//# sourceMappingURL=carbon-components-angular-pagination.js.map