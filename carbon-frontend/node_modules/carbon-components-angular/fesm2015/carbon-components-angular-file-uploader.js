/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-file-uploader.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18n } from 'carbon-components-angular/i18n';
import { Component, Input, Output, ViewChild, EventEmitter, TemplateRef, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ButtonModule } from 'carbon-components-angular/button';
import { LoadingModule } from 'carbon-components-angular/loading';
import { IconModule } from 'carbon-components-angular/icon';

const noop = () => { };
/**
 * [See demo](../../?path=/story/file-uploader--basic)
 *
 * <example-url>../../iframe.html?id=file-uploader--basic</example-url>
 */
class FileUploader {
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * Accessible text for the button that opens the upload window.
         *
         * Defaults to the `FILE_UPLOADER.OPEN` value from the i18n service
         */
        this.buttonText = this.i18n.get().FILE_UPLOADER.OPEN;
        /**
         * Type set for button
         */
        this.buttonType = "primary";
        /**
         * Specify the types of files that the input should be able to receive
         */
        this.accept = [];
        /**
         * Set to `false` to tell the component to only accept a single file on upload.
         *
         * Defaults to `true`. Accepts multiple files.
         */
        this.multiple = true;
        /**
         * Set to `true` for a loading file uploader.
         */
        this.skeleton = false;
        /**
         * Set to `true` to enable drag and drop.
         */
        this.drop = false;
        /**
         * Provides a unique id for the underlying <input> node
         */
        this.fileUploaderId = `file-uploader-${FileUploader.fileUploaderCount}`;
        /**
         * The list of files that have been submitted to be uploaded
         */
        this.files = new Set();
        /**
         * Set to `true` to disable upload button
         */
        this.disabled = false;
        this.filesChange = new EventEmitter();
        /**
         * Controls the state of the drag and drop file container
         */
        this.dragOver = false;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        FileUploader.fileUploaderCount++;
    }
    /**
     * Specifies the property to be used as the return value to `ngModel`
     */
    get value() {
        return this.files;
    }
    set value(v) {
        if (v !== this.files) {
            this.files = v;
            this.onChangeCallback(v);
        }
    }
    onBlur() {
        this.onTouchedCallback();
    }
    get fileList() {
        return Array.from(this.fileInput.nativeElement.files);
    }
    /**
     * Propagates the injected `value`.
     */
    writeValue(value) {
        if (value !== this.value) {
            this.files = value;
        }
    }
    createFileItem(file) {
        return {
            uploaded: false,
            state: "edit",
            invalid: false,
            invalidText: "",
            file: file
        };
    }
    onFilesAdded() {
        if (!this.multiple) {
            this.files.clear();
        }
        for (let file of this.fileList) {
            const fileItem = this.createFileItem(file);
            this.files.add(fileItem);
        }
        this.filesChange.emit(this.files);
        this.value = this.files;
    }
    onDragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        this.dragOver = true;
    }
    onDragLeave(event) {
        event.stopPropagation();
        event.preventDefault();
        this.dragOver = false;
    }
    onDrop(event) {
        event.stopPropagation();
        event.preventDefault();
        const transferredFiles = Array.from(event.dataTransfer.files);
        transferredFiles.filter(({ name, type }) => {
            // Get the file extension and add a "." to the beginning.
            const fileExtension = name.split(".").pop().replace(/^/, ".");
            // Check if the accept array contains the mime type or extension of the file.
            return this.accept.includes(type) || this.accept.includes(fileExtension) || !this.accept.length;
        }).forEach(file => {
            if (!this.files.size || this.multiple) {
                const fileItem = this.createFileItem(file);
                this.files.add(fileItem);
            }
        });
        this.filesChange.emit(this.files);
        this.value = this.files;
        this.dragOver = false;
    }
    removeFile(fileItem) {
        if (this.files) {
            this.files.delete(fileItem);
        }
        this.fileInput.nativeElement.value = "";
        this.filesChange.emit(this.files);
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    /**
     * Registers the injected function to control the touch use of the `FileUploader`.
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
}
/**
 * Counter used to create unique ids for file-uploader components
 */
FileUploader.fileUploaderCount = 0;
FileUploader.decorators = [
    { type: Component, args: [{
                selector: "ibm-file-uploader",
                template: `
		<ng-container *ngIf="!skeleton; else skeletonTemplate">
			<label [for]="fileUploaderId" class="bx--file--label">{{title}}</label>
			<p class="bx--label-description">{{description}}</p>
			<div class="bx--file">
				<label
					*ngIf="drop"
					class="bx--file-browse-btn"
					(keyup.enter)="fileInput.click()"
					(keyup.space)="fileInput.click()"
					[ngClass]="{'bx--file-browse-btn--disabled': disabled}"
					tabindex="0">
					<div
						class="bx--file__drop-container"
						[ngClass]="{'bx--file__drop-container--drag-over': dragOver}"
						role="button"
						(click)="fileInput.click()"
						[attr.for]="fileUploaderId"
						(dragover)="onDragOver($event)"
						(dragleave)="onDragLeave($event)"
						(drop)="onDrop($event)">
						<ng-container *ngIf="!isTemplate(dropText)">{{dropText}}</ng-container>
						<ng-template *ngIf="isTemplate(dropText)" [ngTemplateOutlet]="dropText"></ng-template>
					</div>
				</label>
				<button
					*ngIf="!drop"
					type="button"
					[ibmButton]="buttonType"
					(click)="fileInput.click()"
					[attr.for]="fileUploaderId"
					[size]="size"
					[disabled]="disabled">
					{{buttonText}}
				</button>
				<input
					#fileInput
					type="file"
					class="bx--file-input"
					[accept]="accept"
					[id]="fileUploaderId"
					[multiple]="multiple"
					tabindex="-1"
					(change)="onFilesAdded()"
					[disabled]="disabled"/>
				<div class="bx--file-container">
					<ng-container *ngFor="let fileItem of files">
						<ibm-file [fileItem]="fileItem" (remove)="removeFile(fileItem)"></ibm-file>
						<div *ngIf="fileItem.invalid" class="bx--form-requirement">
							{{fileItem.invalidText}}
						</div>
					</ng-container>
				</div>
			</div>
		</ng-container>

		<ng-template #skeletonTemplate>
			<div class="bx--skeleton__text" style="width: 100px"></div>
			<div class="bx--skeleton__text" style="width: 225px"></div>
			<button ibmButton skeleton="true"></button>
		</ng-template>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: FileUploader,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
FileUploader.ctorParameters = () => [
    { type: I18n }
];
FileUploader.propDecorators = {
    buttonText: [{ type: Input }],
    buttonType: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    accept: [{ type: Input }],
    multiple: [{ type: Input }],
    skeleton: [{ type: Input }],
    size: [{ type: Input }],
    drop: [{ type: Input }],
    dropText: [{ type: Input }],
    fileUploaderId: [{ type: Input }],
    fileInput: [{ type: ViewChild, args: ["fileInput", { static: false },] }],
    files: [{ type: Input }],
    disabled: [{ type: Input }],
    filesChange: [{ type: Output }]
};

class FileComponent {
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * Accessible translations for the close and complete icons
         */
        this.translations = this.i18n.get().FILE_UPLOADER;
        this.remove = new EventEmitter();
        this.selectedFile = true;
    }
    get isInvalidText() {
        return this.fileItem.invalidText;
    }
    ngOnDestroy() {
        this.remove.emit();
    }
}
FileComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-file",
                template: `
		<p class="bx--file-filename">{{fileItem.file.name}}</p>
		<span
			*ngIf="fileItem.state === 'edit'"
			class="bx--file__state-container"
			(click)="remove.emit()"
			(keyup.enter)="remove.emit()"
			(keyup.space)="remove.emit()"
			tabindex="0">
			<svg
				*ngIf="isInvalidText"
				ibmIcon="warning--filled"
				class="bx--file--invalid"
				size="16">
			</svg>
			<svg
				ibmIcon="close"
				size="16"
				class="bx--file-close"
				[ariaLabel]="translations.REMOVE_BUTTON">
			</svg>
		</span>
		<span *ngIf="fileItem.state === 'upload'">
			<div class="bx--inline-loading__animation">
				<ibm-loading size="sm"></ibm-loading>
			</div>
		</span>
		<span
			*ngIf="fileItem.state === 'complete'"
			class="bx--file__state-container"
			tabindex="0">

			<svg
				ibmIcon="checkmark--filled"
				size="16"
				class="bx--file-complete"
				[ariaLabel]="translations.CHECKMARK">
			</svg>
		</span>
	`
            }] }
];
/** @nocollapse */
FileComponent.ctorParameters = () => [
    { type: I18n }
];
FileComponent.propDecorators = {
    translations: [{ type: Input }],
    fileItem: [{ type: Input }],
    remove: [{ type: Output }],
    selectedFile: [{ type: HostBinding, args: ["class.bx--file__selected-file",] }],
    isInvalidText: [{ type: HostBinding, args: ["class.bx--file__selected-file--invalid",] }]
};

class FileUploaderModule {
}
FileUploaderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FileUploader, FileComponent],
                exports: [FileUploader, FileComponent],
                imports: [
                    CommonModule,
                    ButtonModule,
                    LoadingModule,
                    IconModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { FileUploader, FileComponent, FileUploaderModule };

//# sourceMappingURL=carbon-components-angular-file-uploader.js.map