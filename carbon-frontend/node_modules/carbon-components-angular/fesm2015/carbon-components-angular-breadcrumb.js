/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-breadcrumb.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { DomSanitizer } from '@angular/platform-browser';
import { Router } from '@angular/router';
import { Component, HostBinding, Input, Output, EventEmitter, Optional, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DialogModule } from 'carbon-components-angular/dialog';

class BreadcrumbItemComponent {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this.skeleton = false;
        this.ariaCurrent = "page";
        this.current = false;
        this.itemClass = true;
    }
    set href(v) {
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    useTemplate() {
        return this.skeleton || this._href || this.route;
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
BreadcrumbItemComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-breadcrumb-item",
                template: `
	<a
		class="bx--link"
		[href]="(skeleton ? '/#' : href)"
		(click)="navigate($event)"
		[attr.aria-current]="(current ? ariaCurrent : null)"
		*ngIf="useTemplate(); else content">
		<ng-container *ngTemplateOutlet="content"></ng-container>
	</a>
	<ng-template #content>
		<ng-content></ng-content>
	</ng-template>`
            }] }
];
/** @nocollapse */
BreadcrumbItemComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
BreadcrumbItemComponent.propDecorators = {
    href: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    navigation: [{ type: Output }],
    skeleton: [{ type: Input }],
    ariaCurrent: [{ type: Input }],
    current: [{ type: HostBinding, args: ["class.bx--breadcrumb-item--current",] }, { type: Input }],
    itemClass: [{ type: HostBinding, args: ["class.bx--breadcrumb-item",] }]
};

const MINIMUM_OVERFLOW_THRESHOLD = 4;
/**
 *  [See demo](../../?path=/story/breadcrumb--basic)
 *
 * <example-url>../../iframe.html?id=breadcrumb--basic</example-url>
 */
class Breadcrumb {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        this.noTrailingSlash = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._skeleton = false;
    }
    set skeleton(value) {
        this._skeleton = value;
        this.updateChildren();
    }
    get skeleton() {
        return this._skeleton;
    }
    set threshold(threshold) {
        this._threshold = threshold;
        if (isNaN(threshold) || threshold < MINIMUM_OVERFLOW_THRESHOLD) {
            this._threshold = MINIMUM_OVERFLOW_THRESHOLD;
        }
    }
    get threshold() {
        return this._threshold;
    }
    get shouldShowContent() {
        return !this.items;
    }
    get shouldShowOverflow() {
        if (!this.items) {
            return false;
        }
        return this.items.length > this.threshold;
    }
    get first() {
        return this.shouldShowOverflow ? this.items[0] : null;
    }
    get overflowItems() {
        return this.shouldShowOverflow ? this.items.slice(1, this.items.length - 2) : [];
    }
    get secondLast() {
        return this.shouldShowOverflow ? this.items[this.items.length - 2] : null;
    }
    get last() {
        return this.shouldShowOverflow ? this.items[this.items.length - 1] : null;
    }
    ngAfterContentInit() {
        this.updateChildren();
    }
    navigate(event, item) {
        if (this.router && item.route) {
            event.preventDefault();
            const status = this.router.navigate(item.route, item.routeExtras);
            this.navigation.emit(status);
        }
    }
    updateChildren() {
        if (this.children) {
            this.children.toArray().forEach(child => child.skeleton = this.skeleton);
        }
    }
}
Breadcrumb.decorators = [
    { type: Component, args: [{
                selector: "ibm-breadcrumb",
                template: `
	<nav #nav class="bx--breadcrumb"
		[ngClass]="{
			'bx--skeleton' : skeleton,
			'bx--breadcrumb--no-trailing-slash' : noTrailingSlash
		}"
		[attr.aria-label]="ariaLabel">
		<ng-template [ngIf]="shouldShowContent">
			<ng-content></ng-content>
		</ng-template>
		<ng-template [ngIf]="!shouldShowOverflow">
			<ibm-breadcrumb-item
				*ngFor="let item of items"
				[href]="item.href"
				[route]="item.route"
				[routeExtras]="item.routeExtras"
				[current]="item.current"
				[ariaCurrent]="item.ariaCurrent"
				(navigation)="navigation.emit($event)">
				<ng-container *ngIf="!item.template">{{item.content}}</ng-container>
				<ng-template
					*ngIf="item.template"
					[ngTemplateOutlet]="item.template"
					[ngTemplateOutletContext]="{ $implicit: item }">
				</ng-template>
			</ibm-breadcrumb-item>
		</ng-template>
		<ng-template [ngIf]="shouldShowOverflow">
			<ibm-breadcrumb-item
				[href]="first?.href"
				[route]="first?.route"
				[routeExtras]="first?.routeExtras"
				[current]="first?.current"
				[ariaCurrent]="first?.ariaCurrent"
				(navigation)="navigation.emit($event)">
				<ng-container *ngIf="!first?.template">{{first?.content}}</ng-container>
				<ng-template
					*ngIf="first?.template"
					[ngTemplateOutlet]="first?.template"
					[ngTemplateOutletContext]="{ $implicit: first }">
				</ng-template>
			</ibm-breadcrumb-item>
			<ibm-breadcrumb-item>
				<ibm-overflow-menu>
					<li class="bx--overflow-menu-options__option"
						*ngFor="let item of overflowItems">
						<a class="bx--overflow-menu-options__btn"
							href="{{item?.href}}"
							(click)="navigate($event, item)"
							style="text-decoration: none;">
							<ng-container *ngIf="!item?.template">{{item?.content}}</ng-container>
							<ng-template
								*ngIf="item?.template"
								[ngTemplateOutlet]="item?.template"
								[ngTemplateOutletContext]="{ $implicit: item }">
							</ng-template>
						</a>
					</li>
				</ibm-overflow-menu>
			</ibm-breadcrumb-item>
			<ibm-breadcrumb-item
				[href]="secondLast?.href"
				[route]="secondLast?.route"
				[routeExtras]="secondLast?.routeExtras"
				[current]="secondLast?.current"
				[ariaCurrent]="secondLast?.ariaCurrent"
				(navigation)="navigation.emit($event)">
				<ng-container *ngIf="!secondLast?.template">{{secondLast?.content}}</ng-container>
				<ng-template
					*ngIf="secondLast?.template"
					[ngTemplateOutlet]="secondLast?.template"
					[ngTemplateOutletContext]="{ $implicit: secondLast }">
				</ng-template>
			</ibm-breadcrumb-item>
			<ibm-breadcrumb-item
				[href]="last?.href"
				[route]="last?.route"
				[routeExtras]="last?.routeExtras"
				[current]="last?.current"
				[ariaCurrent]="last?.ariaCurrent"
				(navigation)="navigation.emit($event)">
				<ng-container *ngIf="!last?.template">{{last?.content}}</ng-container>
				<ng-template
					*ngIf="last?.template"
					[ngTemplateOutlet]="last?.template"
					[ngTemplateOutletContext]="{ $implicit: last }">
				</ng-template>
			</ibm-breadcrumb-item>
		</ng-template>
	</nav>`
            }] }
];
/** @nocollapse */
Breadcrumb.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
Breadcrumb.propDecorators = {
    children: [{ type: ContentChildren, args: [BreadcrumbItemComponent,] }],
    items: [{ type: Input }],
    noTrailingSlash: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    skeleton: [{ type: Input }],
    threshold: [{ type: Input }],
    navigation: [{ type: Output }]
};

class BreadcrumbModule {
}
BreadcrumbModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    Breadcrumb,
                    BreadcrumbItemComponent
                ],
                exports: [
                    Breadcrumb,
                    BreadcrumbItemComponent
                ],
                imports: [
                    CommonModule,
                    DialogModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { Breadcrumb, BreadcrumbItemComponent, BreadcrumbModule };

//# sourceMappingURL=carbon-components-angular-breadcrumb.js.map