/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-inline-loading.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

var InlineLoadingState;
(function (InlineLoadingState) {
    /** It hides the whole component. */
    InlineLoadingState["Hidden"] = "hidden";
    /** It shows the `loadingText` but no loading animation. */
    InlineLoadingState["Inactive"] = "inactive";
    /** It shows the `loadingText` with loading animation. */
    InlineLoadingState["Active"] = "active";
    /** It shows the `successText` with a success state. */
    InlineLoadingState["Finished"] = "finished";
    /** It shows the `errorText` with an error state. */
    InlineLoadingState["Error"] = "error";
})(InlineLoadingState || (InlineLoadingState = {}));
/**
 * [See demo](../../?path=/story/inline-loading--basic)
 *
 * <example-url>../../iframe.html?id=inline-loading--basic</example-url>
 */
class InlineLoading {
    constructor() {
        this.InlineLoadingState = InlineLoadingState;
        /**
         * Specify the text description for the loading state.
         */
        this.state = InlineLoadingState.Active;
        /**
         * Provide a delay for the `setTimeout` for success.
         */
        this.successDelay = 1500;
        /**
         * Emits event after the success state is active
         */
        this.onSuccess = new EventEmitter();
        this.loadingClass = true;
    }
    /**
     * set to `false` to stop the loading animation
     */
    get isActive() {
        return this.state === InlineLoadingState.Active;
    }
    set isActive(active) {
        this.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;
    }
    /**
     * Returns value `true` if the component is in the success state.
     */
    get success() {
        return this.state === InlineLoadingState.Finished;
    }
    /**
     * Set the component's state to match the parameter and emits onSuccess if it exits.
     */
    set success(success) {
        this.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;
        if (this.state === InlineLoadingState.Finished) {
            setTimeout(() => {
                this.onSuccess.emit();
            }, this.successDelay);
        }
    }
}
InlineLoading.decorators = [
    { type: Component, args: [{
                selector: "ibm-inline-loading",
                template: `
		<div *ngIf="state !== InlineLoadingState.Hidden"
			class="bx--inline-loading__animation">
			<div
				*ngIf="state === InlineLoadingState.Inactive || state === InlineLoadingState.Active"
				class="bx--loading bx--loading--small"
				[ngClass]="{
					'bx--loading--stop': state === InlineLoadingState.Inactive
				}">
				<svg class="bx--loading__svg" viewBox="-75 -75 150 150">
					<circle class="bx--loading__background" cx="0" cy="0" r="30" />
					<circle class="bx--loading__stroke" cx="0" cy="0" r="30" />
				</svg>
			</div>
			<svg
				*ngIf="state === InlineLoadingState.Finished"
				ibmIcon="checkmark--filled"
				size="16"
				class="bx--inline-loading__checkmark-container">
			</svg>
			<svg
				*ngIf="state === InlineLoadingState.Error"
				ibmIcon="error--filled"
				size="16"
				class="bx--inline-loading--error">
			</svg>
		</div>
		<p
			*ngIf="state === InlineLoadingState.Inactive || state === InlineLoadingState.Active"
			class="bx--inline-loading__text">{{loadingText}}</p>
		<p *ngIf="state === InlineLoadingState.Finished" class="bx--inline-loading__text">{{successText}}</p>
		<p *ngIf="state === InlineLoadingState.Error" class="bx--inline-loading__text">{{errorText}}</p>
	`
            }] }
];
InlineLoading.propDecorators = {
    state: [{ type: Input }],
    loadingText: [{ type: Input }],
    successText: [{ type: Input }],
    successDelay: [{ type: Input }],
    errorText: [{ type: Input }],
    isActive: [{ type: Input }],
    success: [{ type: Input }],
    onSuccess: [{ type: Output }],
    loadingClass: [{ type: HostBinding, args: ["class.bx--inline-loading",] }]
};

class InlineLoadingModule {
}
InlineLoadingModule.decorators = [
    { type: NgModule, args: [{
                declarations: [InlineLoading],
                exports: [InlineLoading],
                imports: [CommonModule, IconModule]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { InlineLoading, InlineLoadingState, InlineLoadingModule };

//# sourceMappingURL=carbon-components-angular-inline-loading.js.map