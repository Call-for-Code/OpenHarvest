/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-ui-shell.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { IconModule } from 'carbon-components-angular/icon';
import { Subscription } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';
import { Router, RouterModule } from '@angular/router';
import { Component, Input, Optional, Output, EventEmitter, TemplateRef, HostListener, ElementRef, HostBinding, NgModule, ViewEncapsulation, ContentChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { I18n, I18nModule } from 'carbon-components-angular/i18n';

/**
 * A fixed header and navigation.
 * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
 * and global actions (generally in the form of `Panel`s).
 *
 * [See demo](../../?path=/story/ui-shell--header)
 *
 * <example-url>../../iframe.html?id=ui-shell--header</example-url>
 */
class Header {
    constructor(i18n, domSanitizer, router) {
        this.i18n = i18n;
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Top level branding. Defaults to "IBM"
         */
        this.brand = "IBM";
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    /**
     * Optional link for the header
     */
    set href(v) {
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
Header.decorators = [
    { type: Component, args: [{
                selector: "ibm-header",
                template: `
		<header
			class="bx--header"
			[attr.aria-label]="brand + ' ' + name">
			<a
				*ngIf="skipTo"
				class="bx--skip-to-content"
				[href]="skipTo"
				tabindex="0">
				{{ i18n.get("UI_SHELL.SKIP_TO") | async }}
			</a>
			<ng-content select="ibm-hamburger"></ng-content>
			<ng-template
				*ngIf="isTemplate(brand)"
				[ngTemplateOutlet]="brand">
			</ng-template>
			<ng-container *ngIf="!isTemplate(brand)" [ngSwitch]="useRouter">
				<a
					*ngSwitchCase="false"
					class="bx--header__name"
					[href]="href"
					(click)="navigate($event)">
					<span class="bx--header__name--prefix">{{brand}}&nbsp;</span>
					{{name}}
				</a>
				<a
					*ngSwitchCase="true"
					class="bx--header__name"
					[routerLink]="route">
					<span class="bx--header__name--prefix">{{brand}}&nbsp;</span>
					{{name}}
				</a>
			</ng-container>
			<ng-content></ng-content>
		</header>
	`
            }] }
];
/** @nocollapse */
Header.ctorParameters = () => [
    { type: I18n },
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
Header.propDecorators = {
    skipTo: [{ type: Input }],
    name: [{ type: Input }],
    brand: [{ type: Input }],
    href: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    useRouter: [{ type: Input }],
    navigation: [{ type: Output }]
};

/**
 * Individual item in the header. May be used a direct child of `HeaderNavigation` or `HeaderMenu`
 */
class HeaderItem {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
HeaderItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-item",
                template: `
		<li style="height: 100%">
			<ng-container [ngSwitch]="useRouter">
				<ng-template #content><ng-content></ng-content></ng-template>
				<a
					*ngSwitchCase="false"
					class="bx--header__menu-item"
					role="menuitem"
					tabindex="0"
					[ngClass]="{'bx--header__menu-item--current' : isCurrentPage}"
					[href]="href"
					(click)="navigate($event)">
					<ng-container *ngTemplateOutlet="content"></ng-container>
				</a>
				<a
					*ngSwitchCase="true"
					class="bx--header__menu-item"
					role="menuitem"
					[routerLinkActive]="['bx--header__menu-item--current']"
					tabindex="0"
					[ngClass]="{'bx--header__menu-item--current' : isCurrentPage}"
					[routerLink]="route"
					[routerLinkActive]="activeLinkClass">
					<ng-container *ngTemplateOutlet="content"></ng-container>
				</a>
			</ng-container>
		</li>
	`
            }] }
];
/** @nocollapse */
HeaderItem.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
HeaderItem.propDecorators = {
    href: [{ type: Input }],
    useRouter: [{ type: Input }],
    activeLinkClass: [{ type: Input }],
    isCurrentPage: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    navigation: [{ type: Output }]
};

/**
 * Dropdown menu container for navigation items.
 */
class HeaderMenu {
    constructor(domSanitizer, elementRef) {
        this.domSanitizer = domSanitizer;
        this.elementRef = elementRef;
        this.trigger = "click";
        this.expanded = false;
        this._href = "javascript:void(0)";
    }
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    onClick() {
        if (this.trigger === "click") {
            this.expanded = !this.expanded;
        }
    }
    onMouseOver() {
        if (this.trigger === "mouseover") {
            this.expanded = true;
        }
    }
    onMouseOut() {
        if (this.trigger === "mouseover") {
            this.expanded = false;
        }
    }
    onFocusOut(event) {
        if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {
            this.expanded = false;
        }
    }
}
HeaderMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-menu",
                template: `
		<li
			class="bx--header__submenu"
			style="height: 100%">
			<a
				class="bx--header__menu-item bx--header__menu-title"
				[href]="href"
				role="menuitem"
				tabindex="0"
				aria-haspopup="true"
				[attr.aria-expanded]="expanded">
				{{title}}
				<ng-template *ngIf="icon; else defaultIcon" [ngTemplateOutlet]="icon"></ng-template>
				<ng-template #defaultIcon>
					<svg class="bx--header__menu-arrow" width="12" height="7" aria-hidden="true">
						<path d="M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z" />
					</svg>
				</ng-template>
			</a>
			<ul class="bx--header__menu" role="menu" [attr.aria-label]="title">
				<ng-content></ng-content>
				<ng-container *ngFor="let headerItem of headerItems">
					<ibm-header-item
						[href]="headerItem.href"
						[route]="headerItem.route"
						[routeExtras]="headerItem.routeExtras">
						{{ headerItem.content }}
					</ibm-header-item>
				</ng-container>
			</ul>
		</li>
	`
            }] }
];
/** @nocollapse */
HeaderMenu.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef }
];
HeaderMenu.propDecorators = {
    title: [{ type: Input }],
    href: [{ type: Input }],
    trigger: [{ type: Input }],
    headerItems: [{ type: Input }],
    icon: [{ type: Input }],
    onClick: [{ type: HostListener, args: ["click",] }],
    onMouseOver: [{ type: HostListener, args: ["mouseover",] }],
    onMouseOut: [{ type: HostListener, args: ["mouseout",] }],
    onFocusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }]
};

/**
 * Container for header navigation items
 */
class HeaderNavigation {
    constructor() {
        this.height = 100;
    }
}
HeaderNavigation.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-navigation",
                template: `
		<nav class="bx--header__nav" [attr.aria-label]="ariaLabel">
			<ul class="bx--header__menu-bar" role="menubar">
				<ng-content></ng-content>
				<ng-container *ngFor="let navigationItem of navigationItems">
					<ibm-header-item
						*ngIf="navigationItem.type === 'item'"
						[href]="navigationItem.href"
						[route]="navigationItem.route"
						[routeExtras]="navigationItem.routeExtras">
						{{ navigationItem.content }}
					</ibm-header-item>
					<ibm-header-menu
						*ngIf="navigationItem.type === 'menu'"
						[href]="navigationItem.href"
						[title]="navigationItem.title"
						[trigger]="navigationItem.trigger ? navigationItem.trigger : 'click'"
						[headerItems]="navigationItem.menuItems">
					</ibm-header-menu>
				</ng-container>
			</ul>
		</nav>
	`
            }] }
];
HeaderNavigation.propDecorators = {
    height: [{ type: HostBinding, args: ["style.height.%",] }],
    ariaLabel: [{ type: Input }],
    navigationItems: [{ type: Input }]
};

/**
 * Container for `HeaderAction`s.
 */
class HeaderGlobal {
    constructor() {
        this.hostClass = true;
    }
}
HeaderGlobal.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-global",
                template: `
		<ng-content></ng-content>
	`
            }] }
];
HeaderGlobal.propDecorators = {
    hostClass: [{ type: HostBinding, args: ["class.bx--header__global",] }]
};

/**
 * Contained by `HeaderGlobal`. Generally used to trigger `Panel`s
 */
class HeaderAction {
    constructor() {
        /**
         * Title. Populates the aria-label as well as the browser `title` tooltip
         */
        this.title = "";
        /**
         * Toggles the active state. May be used to toggle a `Panel`s active state.
         */
        this.active = false;
        /**
         * "Change" emitter to allow double binding to the `active` Input.
         */
        this.activeChange = new EventEmitter();
        /**
         * Emits when the action has been clicked.
         */
        this.selected = new EventEmitter();
    }
    onClick() {
        this.active = !this.active;
        this.selected.emit(this.active);
        this.activeChange.emit(this.active);
    }
}
HeaderAction.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-action",
                template: `
		<button
			class="bx--header__action"
			[ngClass]="{
				'bx--header__action--active': active
			}"
			[title]="title"
			[attr.aria-label]="ariaLabel"
			(click)="onClick()">
			<ng-content></ng-content>
		</button>
	`
            }] }
];
HeaderAction.propDecorators = {
    title: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    active: [{ type: Input }],
    activeChange: [{ type: Output }],
    selected: [{ type: Output }]
};

/**
 * A toggle for the side navigation
 */
class Hamburger {
    constructor(i18n) {
        this.i18n = i18n;
        /**
         * Controls the active/selected state for the `Hamburger` menu.
         */
        this.active = false;
        /**
         * `EventEmitter` to notify parent components of menu click events.
         */
        this.selected = new EventEmitter();
    }
    /**
     * Emit the Hamburger click event upwards.
     */
    doClick() {
        this.selected.emit(this.active);
    }
}
Hamburger.decorators = [
    { type: Component, args: [{
                selector: "ibm-hamburger",
                template: `
		<button
			type="button"
			(click)="doClick()"
			[ngClass]="{'bx--header__action--active': active}"
			class="bx--header__menu-trigger bx--header__action bx--header__menu-toggle"
			[attr.aria-label]="active
				? (i18n.get('UI_SHELL.HEADER.CLOSE_MENU') | async)
				: (i18n.get('UI_SHELL.HEADER.OPEN_MENU') | async)"
			[attr.title]="active
				? (i18n.get('UI_SHELL.HEADER.CLOSE_MENU') | async)
				: (i18n.get('UI_SHELL.HEADER.OPEN_MENU') | async)">
			<svg *ngIf="!active" ibmIcon="menu" size="20"></svg>
			<svg *ngIf="active" ibmIcon="close" size="20"></svg>
		</button>
	`
            }] }
];
/** @nocollapse */
Hamburger.ctorParameters = () => [
    { type: I18n }
];
Hamburger.propDecorators = {
    active: [{ type: Input }],
    selected: [{ type: Output }]
};

class HeaderModule {
}
HeaderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    Header,
                    HeaderItem,
                    HeaderMenu,
                    HeaderNavigation,
                    HeaderGlobal,
                    HeaderAction,
                    Hamburger
                ],
                imports: [
                    CommonModule,
                    I18nModule,
                    IconModule,
                    RouterModule
                ],
                exports: [
                    Header,
                    HeaderItem,
                    HeaderMenu,
                    HeaderNavigation,
                    HeaderGlobal,
                    HeaderAction,
                    Hamburger
                ]
            },] }
];

/**
 * `Sidenav` is a fixed left navigation that may contain `SideNavItem`s or `SideNavMenu`s
 *
 * [See demo](../../?path=/story/ui-shell--side-navigation)
 *
 * <example-url>../../iframe.html?id=ui-shell--side-navigation</example-url>
 */
class SideNav {
    constructor(i18n) {
        this.i18n = i18n;
        this.role = "complementary";
        this.hostClass = true;
        this.ariaLabel = "Side navigation";
        /**
         * Controls the expanded (`true`) or collapsed (`false`) state when on a small screen.
         */
        this.expanded = true;
        /**
         * Controls the hidden (`true`) or visible (`false`) state
         */
        this.hidden = false;
        this.rail = false;
        this.ux = true;
        this.allowExpansion = false;
    }
    toggle() {
        this.expanded = !this.expanded;
    }
}
SideNav.decorators = [
    { type: Component, args: [{
                selector: "ibm-sidenav",
                template: `
		<nav class="bx--side-nav__navigation" role="navigation" [attr.aria-label]="ariaLabel">
			<ng-content select="ibm-sidenav-header"></ng-content>
			<ul class="bx--side-nav__items">
				<div
					class="bx--side-nav__header-navigation bx--side-nav__header-divider">
					<ng-container *ngFor="let navigationItem of navigationItems">
						<ibm-sidenav-item
							*ngIf="navigationItem.type === 'item'"
							[href]="navigationItem.href"
							[route]="navigationItem.route"
							[routeExtras]="navigationItem.routeExtras">
							{{ navigationItem.content }}
						</ibm-sidenav-item>
						<ibm-sidenav-menu
							*ngIf="navigationItem.type === 'menu'"
							[title]="navigationItem.title"
							[menuItems]="navigationItem.menuItems">
						</ibm-sidenav-menu>
					</ng-container>
				</div>
				<ng-content></ng-content>
			</ul>
			<footer class="bx--side-nav__footer">
				<button
					*ngIf="allowExpansion"
					class="bx--side-nav__toggle"
					type="button"
					[title]="(expanded ? i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_CLOSE') : i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_OPEN')) | async"
					(click)="toggle()">
					<div class="bx--side-nav__icon">
						<svg
							*ngIf="expanded"
							focusable="false"
							preserveAspectRatio="xMidYMid meet"
							style="will-change: transform;"
							xmlns="http://www.w3.org/2000/svg"
							width="20"
							height="20"
							viewBox="0 0 32 32"
							aria-hidden="true">
							<path d="M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4l6.6 6.6L8 22.6 9.4 24l6.6-6.6 6.6 6.6 1.4-1.4-6.6-6.6L24 9.4z"></path>
						</svg>
						<svg
							*ngIf="!expanded"
							focusable="false"
							preserveAspectRatio="xMidYMid meet"
							style="will-change: transform;"
							xmlns="http://www.w3.org/2000/svg"
							width="20"
							height="20"
							viewBox="0 0 32 32"
							aria-hidden="true">
							<path d="M22 16L12 26l-1.4-1.4 8.6-8.6-8.6-8.6L12 6z"></path>
						</svg>
					</div>
					<span class="bx--assistive-text">
						{{(expanded ? i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_CLOSE') : i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_OPEN')) | async}}
					</span>
				</button>
			</footer>
		</nav>
	`,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SideNav.ctorParameters = () => [
    { type: I18n }
];
SideNav.propDecorators = {
    role: [{ type: HostBinding, args: ["attr.role",] }],
    hostClass: [{ type: HostBinding, args: ["class.bx--side-nav",] }],
    ariaLabel: [{ type: HostBinding, args: ["attr.aria-label",] }, { type: Input }],
    expanded: [{ type: HostBinding, args: ["class.bx--side-nav--expanded",] }, { type: Input }],
    hidden: [{ type: HostBinding, args: ["class.bx--side-nav--hidden",] }, { type: Input }],
    rail: [{ type: HostBinding, args: ["class.bx--side-nav--rail",] }, { type: Input }],
    ux: [{ type: HostBinding, args: ["class.bx--side-nav--ux",] }],
    allowExpansion: [{ type: Input }],
    navigationItems: [{ type: Input }]
};

/**
 * `SideNavItem` can either be a child of `SideNav` or `SideNavMenu`
 */
class SideNavItem {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Toggles the active (current page) state for the link.
         */
        this.active = false;
        this.isSubMenu = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        /**
         * Emits when `active` input is changed. This is mainly used to indicate to any parent menu items that a
         * child sidenav item is active or not active.
         */
        this.selected = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    /**
     * Link for the item. NOTE: *do not* pass unsafe or untrusted values, this has the potential to open you up to XSS attacks
     */
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    ngOnChanges(changes) {
        if (changes.active) {
            this.selected.emit(this.active);
        }
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
SideNavItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-sidenav-item",
                template: `
		<li [ngClass]="{
			'bx--side-nav__item': !isSubMenu,
			'bx--side-nav__menu-item': isSubMenu
		}"
		[attr.role]="(isSubMenu ? 'listitem' : null)">
			<a
				class="bx--side-nav__link"
				[href]="href"
				[attr.role]="(isSubMenu ? 'menuitem' : null)"
				[attr.aria-current]="(active ? 'page' : null)"
				[title]="title"
				(click)="navigate($event)">
				<div *ngIf="!isSubMenu" class="bx--side-nav__icon">
					<ng-content select="svg, [icon]"></ng-content>
				</div>
				<span class="bx--side-nav__link-text">
					<ng-content></ng-content>
				</span>
			</a>
		</li>
	`
            }] }
];
/** @nocollapse */
SideNavItem.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
SideNavItem.propDecorators = {
    href: [{ type: Input }],
    active: [{ type: Input }],
    route: [{ type: Input }],
    isSubMenu: [{ type: Input }],
    routeExtras: [{ type: Input }],
    title: [{ type: Input }],
    navigation: [{ type: Output }],
    selected: [{ type: Output }]
};

/**
 * `SideNavMenu` provides a method to group `SideNavItem`s under a common heading.
 */
class SideNavMenu {
    constructor() {
        /**
         * Controls the visibility of the child `SideNavItem`s
         */
        this.expanded = false;
        /**
         * Controls the active status indicator on the menu if there is an active
         * child sidenav item.
         */
        this.hasActiveChild = false;
        this.activeItemsSubscription = new Subscription();
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.sidenavItems.forEach(item => {
                item.isSubMenu = true;
                this.findActiveChildren();
                const activeItemSubscription = item.selected.subscribe(() => {
                    this.findActiveChildren();
                });
                this.activeItemsSubscription.add(activeItemSubscription);
            });
            this.sidenavItems.changes.subscribe(() => {
                this.sidenavItems.forEach(item => {
                    item.isSubMenu = true;
                    this.findActiveChildren();
                    const activeItemSubscription = item.selected.subscribe(() => {
                        this.findActiveChildren();
                    });
                    this.activeItemsSubscription.add(activeItemSubscription);
                });
            });
        });
    }
    ngOnDestroy() {
        this.activeItemsSubscription.unsubscribe();
    }
    toggle() {
        this.expanded = !this.expanded;
    }
    findActiveChildren() {
        if (this.sidenavItems.some(item => item.active)) {
            this.hasActiveChild = true;
        }
        else {
            this.hasActiveChild = false;
        }
    }
}
SideNavMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-sidenav-menu",
                template: `
		<li
			class="bx--side-nav__item bx--side-nav__item--icon"
			[ngClass]="{ 'bx--side-nav__item--active': hasActiveChild }">
			<button
				(click)="toggle()"
				class="bx--side-nav__submenu"
				aria-haspopup="true"
				[attr.aria-expanded]="expanded"
				type="button">
				<div class="bx--side-nav__icon">
					<ng-content select="[icon]"></ng-content>
				</div>
				<span class="bx--side-nav__submenu-title">{{title}}</span>
				<div class="bx--side-nav__icon bx--side-nav__icon--small bx--side-nav__submenu-chevron">
					<svg
						focusable="false"
						preserveAspectRatio="xMidYMid meet"
						style="will-change: transform;"
						xmlns="http://www.w3.org/2000/svg"
						width="20"
						height="20"
						viewBox="0 0 32 32"
						aria-hidden="true">
						<path d="M16 22L6 12l1.4-1.4 8.6 8.6 8.6-8.6L26 12z"></path>
					</svg>
				</div>
			</button>
			<ul class="bx--side-nav__menu" role="menu">
				<ng-content></ng-content>
				<ng-container *ngFor="let menuItem of menuItems">
					<ibm-sidenav-item
						[href]="menuItem.href"
						[route]="menuItem.route"
						[routeExtras]="menuItem.routeExtras"
						[isSubMenu]="true">
						{{ menuItem.content }}
					</ibm-sidenav-item>
				</ng-container>
			</ul>
		</li>
	`
            }] }
];
SideNavMenu.propDecorators = {
    title: [{ type: Input }],
    expanded: [{ type: Input }],
    hasActiveChild: [{ type: Input }],
    menuItems: [{ type: Input }],
    sidenavItems: [{ type: ContentChildren, args: [SideNavItem,] }]
};

class SideNavModule {
}
SideNavModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SideNav,
                    SideNavItem,
                    SideNavMenu
                ],
                imports: [CommonModule, I18nModule],
                exports: [
                    SideNav,
                    SideNavItem,
                    SideNavMenu
                ]
            },] }
];

/**
 * `Panel` is a component that can be used to display content on the right side of the screen.
 * `Panel`s are generally activated by and linked to a `HeaderAction` component.
 */
class Panel {
    constructor() {
        /**
         * Controls the visibility of the panel
         */
        this.expanded = false;
        this.ariaLabel = "Header panel";
    }
}
Panel.decorators = [
    { type: Component, args: [{
                selector: "ibm-panel",
                template: `
		<div
			class="bx--panel--overlay"
			[attr.aria-label]="ariaLabel"
			[ngClass]="{
				'bx--panel--expanded': expanded
			}">
			<ng-content></ng-content>
		</div>
	`
            }] }
];
Panel.propDecorators = {
    expanded: [{ type: Input }],
    ariaLabel: [{ type: Input }]
};

/**
 * Container for switcher items.
 *
 * ```html
 * <ibm-switcher-list>
 * 	<ibm-switcher-list-item>one</ibm-switcher-list-item>
 * 	<ibm-switcher-list-item [active]="true">two</ibm-switcher-list-item>
 * 	<ibm-switcher-list-item>three</ibm-switcher-list-item>
 * </ibm-switcher-list>
 * ```
 */
class SwitcherList {
}
SwitcherList.decorators = [
    { type: Component, args: [{
                selector: "ibm-switcher-list",
                template: `
		<ul class="bx--switcher">
			<ng-content></ng-content>
		</ul>
	`
            }] }
];

/**
 * Represents an item in a switcher list.
 */
class SwitcherListItem {
    constructor(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Enables the "active" state for an item. Commonly used to indicate the current page or selection.
         */
        this.active = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this.itemClass = true;
        this.itemRole = "listitem";
        this._href = "javascript:void(0)";
        this._target = "";
    }
    /**
     * Optional link for the underlying anchor.
     */
    set href(value) {
        this._href = value;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    /**
     * Optional target for the underlying anchor.
     */
    set target(value) {
        this._target = value;
    }
    get target() {
        return this._target;
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
SwitcherListItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-switcher-list-item",
                template: `
		<a
			class="bx--switcher__item-link"
			[ngClass]="{
				'bx--switcher__item-link--selected': active
			}"
			[href]="href"
			[target]="target"
			(click)="navigate($event)">
			<ng-content></ng-content>
		</a>
	`
            }] }
];
/** @nocollapse */
SwitcherListItem.ctorParameters = () => [
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
SwitcherListItem.propDecorators = {
    active: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    href: [{ type: Input }],
    navigation: [{ type: Output }],
    target: [{ type: Input }],
    itemClass: [{ type: HostBinding, args: ["class.bx--switcher__item",] }],
    itemRole: [{ type: HostBinding, args: ["attr.role",] }]
};

class PanelModule {
}
PanelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    Panel,
                    SwitcherList,
                    SwitcherListItem
                ],
                imports: [CommonModule, I18nModule],
                exports: [
                    Panel,
                    SwitcherList,
                    SwitcherListItem
                ]
            },] }
];

class UIShellModule {
}
UIShellModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    I18nModule,
                    HeaderModule,
                    SideNavModule,
                    PanelModule
                ],
                exports: [
                    HeaderModule,
                    SideNavModule,
                    PanelModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { Header, HeaderItem, HeaderMenu, HeaderNavigation, HeaderGlobal, HeaderAction, Hamburger, HeaderModule, SideNav, SideNavItem, SideNavMenu, SideNavModule, Panel, SwitcherList, SwitcherListItem, PanelModule, UIShellModule };

//# sourceMappingURL=carbon-components-angular-ui-shell.js.map