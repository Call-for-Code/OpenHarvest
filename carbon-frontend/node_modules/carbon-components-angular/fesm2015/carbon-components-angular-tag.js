/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-tag.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * Component that represents a tag for labelling/categorizing using keywords
 *
 * [See demo](../../?path=/story/tag--basic)
 *
 * <example-url>../../iframe.html?id=tag--basic</example-url>
 */
class Tag {
    constructor() {
        /**
         * type of the tag determines the styling
         *
         * Reference `TagType` for v9 applications, and `TagTypeExperimental` for v10/v9 experimental mode applications
         */
        this.type = "gray";
        this.class = "";
    }
    get attrClass() {
        return `bx--tag bx--tag--${this.type} ${this.class}`;
    }
}
Tag.decorators = [
    { type: Component, args: [{
                selector: "ibm-tag",
                template: `<ng-content></ng-content>`
            }] }
];
Tag.propDecorators = {
    type: [{ type: Input }],
    class: [{ type: Input }],
    attrClass: [{ type: HostBinding, args: ["attr.class",] }]
};

class TagFilter extends Tag {
    constructor() {
        super(...arguments);
        this.closeButtonLabel = "Clear Filter";
        /**
         * Function for close/delete the tag
         */
        this.close = new EventEmitter();
        /**
         * We need to stop the immedate propagation of click on the close button
         * to prevent undesired effects when used within dialogs.
         *
         * We need to emit a click event on close to allow for clicks to be listened
         * to on the immediate close button element. `action` distinguishes between clicks on
         * the tag vs. clicks on the close button.
         */
        this.click = new EventEmitter();
    }
    onClick(event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "click" });
    }
    onClose(event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "close" });
        this.close.emit();
    }
    get attrClass() {
        return `bx--tag bx--tag--filter bx--tag--${this.type} ${this.class}`;
    }
    get attrAriaLabel() {
        return `${this.title || ""} ${this.closeButtonLabel}`.trim();
    }
}
TagFilter.decorators = [
    { type: Component, args: [{
                selector: "ibm-tag-filter",
                template: `
		<span
			class="bx--tag__label"
			[attr.title]="title ? title : null"
			(click)="onClick($event)">
			<ng-content></ng-content>
		</span>
		<button
			class="bx--tag__close-icon"
			(click)="onClose($event)"
			[disabled]="disabled"
			[title]="closeButtonLabel">
			<span class="bx--visually-hidden">{{closeButtonLabel}}</span>
			<svg ibmIcon="close" size="16"></svg>
		</button>
	`
            }] }
];
TagFilter.propDecorators = {
    closeButtonLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    title: [{ type: Input }],
    close: [{ type: Output }],
    click: [{ type: Output }],
    attrClass: [{ type: HostBinding, args: ["attr.class",] }],
    attrAriaLabel: [{ type: HostBinding, args: ["attr.aria-label",] }]
};

class TagModule {
}
TagModule.decorators = [
    { type: NgModule, args: [{
                declarations: [Tag, TagFilter],
                exports: [Tag, TagFilter],
                imports: [CommonModule, IconModule]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { TagFilter, Tag, TagModule };

//# sourceMappingURL=carbon-components-angular-tag.js.map