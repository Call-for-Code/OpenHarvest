/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-accordion.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, TemplateRef, EventEmitter, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';

class AccordionItem {
    constructor() {
        this.context = null;
        this.id = `accordion-item-${AccordionItem.accordionItemCount}`;
        this.skeleton = false;
        this.selected = new EventEmitter();
        this.itemClass = true;
        this.expanded = false;
        this.itemType = "list-item";
        this.role = "heading";
        this.ariaLevel = 3;
        AccordionItem.accordionItemCount++;
    }
    toggleExpanded() {
        if (!this.skeleton) {
            this.expanded = !this.expanded;
            this.selected.emit({ id: this.id, expanded: this.expanded });
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
AccordionItem.accordionItemCount = 0;
AccordionItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-accordion-item",
                template: `
		<button
			type="button"
			[attr.aria-expanded]="expanded"
			[attr.aria-controls]="id"
			(click)="toggleExpanded()"
			class="bx--accordion__heading">
			<svg ibmIcon="chevron--right" size="16" class="bx--accordion__arrow"></svg>
			<p *ngIf="!isTemplate(title)"
				class="bx--accordion__title"
				[ngClass]="{
					'bx--skeleton__text': skeleton
				}">
				{{!skeleton ? title : null}}
			</p>
			<ng-template
				*ngIf="isTemplate(title)"
				[ngTemplateOutlet]="title"
				[ngTemplateOutletContext]="context">
			</ng-template>
		</button>
		<div [id]="id" class="bx--accordion__content">
			<ng-content *ngIf="!skeleton; else skeletonTemplate"></ng-content>
			<ng-template #skeletonTemplate>
				<p class="bx--skeleton__text" style="width: 90%"></p>
				<p class="bx--skeleton__text" style="width: 80%"></p>
				<p class="bx--skeleton__text" style="width: 95%"></p>
			</ng-template>
		</div>
	`
            }] }
];
/** @nocollapse */
AccordionItem.ctorParameters = () => [];
AccordionItem.propDecorators = {
    title: [{ type: Input }],
    context: [{ type: Input }],
    id: [{ type: Input }],
    skeleton: [{ type: Input }],
    selected: [{ type: Output }],
    itemClass: [{ type: HostBinding, args: ["class.bx--accordion__item",] }],
    expanded: [{ type: HostBinding, args: ["class.bx--accordion__item--active",] }, { type: Input }],
    itemType: [{ type: HostBinding, args: ["style.display",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    ariaLevel: [{ type: HostBinding, args: ["attr.aria-level",] }, { type: Input }]
};

/**
 * [See demo](../../?path=/story/accordion--basic)
 *
 * <example-url>../../iframe.html?id=accordion--basic</example-url>
 */
class Accordion {
    constructor() {
        this.align = "end";
        this._skeleton = false;
    }
    set skeleton(value) {
        this._skeleton = value;
        this.updateChildren();
    }
    get skeleton() {
        return this._skeleton;
    }
    ngAfterContentInit() {
        this.updateChildren();
    }
    updateChildren() {
        if (this.children) {
            this.children.toArray().forEach(child => child.skeleton = this.skeleton);
        }
    }
}
Accordion.decorators = [
    { type: Component, args: [{
                selector: "ibm-accordion",
                template: `
		<ul class="bx--accordion"
			[class.bx--accordion--end]="align == 'end'"
			[class.bx--accordion--start]="align == 'start'">
			<ng-content></ng-content>
		</ul>
	`
            }] }
];
Accordion.propDecorators = {
    align: [{ type: Input }],
    children: [{ type: ContentChildren, args: [AccordionItem,] }],
    skeleton: [{ type: Input }]
};

class AccordionModule {
}
AccordionModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    Accordion,
                    AccordionItem
                ],
                exports: [
                    Accordion,
                    AccordionItem
                ],
                imports: [
                    CommonModule,
                    IconModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionItem, Accordion, AccordionModule };

//# sourceMappingURL=carbon-components-angular-accordion.js.map