{"version":3,"file":"carbon-components-angular-notification.js.map","sources":["ng://carbon-components-angular/notification/notification-display.service.ts","ng://carbon-components-angular/notification/notification-subtitle.directive.ts","ng://carbon-components-angular/notification/notification-title.directive.ts","ng://carbon-components-angular/notification/notification.component.ts","ng://carbon-components-angular/notification/toast.component.ts","ng://carbon-components-angular/notification/toast-title.directive.ts","ng://carbon-components-angular/notification/toast-subtitle.directive.ts","ng://carbon-components-angular/notification/toast-caption.directive.ts","ng://carbon-components-angular/notification/notification.service.ts","ng://carbon-components-angular/notification/notification.module.ts","ng://carbon-components-angular/notification/carbon-components-angular-notification.ts"],"sourcesContent":["import {\n\tInjectable,\n\tApplicationRef\n} from \"@angular/core\";\n\n@Injectable()\nexport class NotificationDisplayService {\n\tconstructor(protected applicationRef: ApplicationRef) {}\n\n\t/**\n\t * Programatically closes notification based on `notificationRef`.\t *\n\t */\n\tclose(notificationRef: any) {\n\t\tif (notificationRef.hostView) {\n\t\t\tsetTimeout( () => {\n\t\t\t\tthis.applicationRef.detachView(notificationRef.hostView);\n\t\t\t\tnotificationRef.destroy();\n\t\t\t}, 200);\n\t\t}\n\t}\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmNotificationSubtitle]\"\n})\nexport class NotificationSubtitle {\n\t@HostBinding(\"class.bx--inline-notification__subtitle\") baseClass = true;\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmNotificationTitle]\"\n})\nexport class NotificationTitle {\n\t@HostBinding(\"class.bx--inline-notification__title\") baseClass = true;\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tComponentRef,\n\tViewChild,\n\tHostBinding\n} from \"@angular/core\";\n\nimport { NotificationContent } from \"./notification-content.interface\";\nimport { I18n } from \"carbon-components-angular/i18n\";\nimport { NotificationDisplayService } from \"./notification-display.service\";\nimport { of, isObservable, Subject } from \"rxjs\";\n\n/**\n * Notification messages are displayed toward the top of the UI and do not interrupt userâs work.\n *\n * [See demo](../../?path=/story/notification--basic)\n *\n * <example-url>../../iframe.html?id=notification--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-notification\",\n\ttemplate: `\n\t\t<div class=\"bx--inline-notification__details\">\n\t\t\t<svg\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'error'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'warning'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'success'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\tibmIcon=\"information--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t*ngIf=\"notificationObj.type === 'info'\"\n\t\t\t\tclass=\"bx--inline-notification__icon\">\n\t\t\t</svg>\n\t\t\t<div class=\"bx--inline-notification__text-wrapper\">\n\t\t\t\t<p *ngIf=\"!notificationObj.template\" ibmNotificationTitle [innerHTML]=\"notificationObj.title\"></p>\n\t\t\t\t<div *ngIf=\"!notificationObj.template\" ibmNotificationSubtitle>\n\t\t\t\t\t<span [innerHTML]=\"notificationObj.message\"></span>\n\t\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t\t<a ibmLink [href]=\"link.href\"> {{link.text}}</a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</div>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t\t</div>\n\t\t</div>\n\t\t<div *ngFor=\"let action of notificationObj.actions\">\n\t\t\t<button\n\t\t\t\t(click)=\"onClick(action, $event)\"\n\t\t\t\tibmButton=\"ghost\"\n\t\t\t\tsize=\"sm\"\n\t\t\t\tclass=\"bx--inline-notification__action-button\"\n\t\t\t\ttype=\"button\">\n\t\t\t\t{{action.text}}\n\t\t\t</button>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\t(click)=\"onClose()\"\n\t\t\tclass=\"bx--inline-notification__close-button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel | async\"\n\t\t\ttype=\"button\">\n\t\t\t<svg ibmIcon=\"close\" size=\"16\" class=\"bx--inline-notification__close-icon\"></svg>\n\t\t</button>\n\t`\n})\nexport class Notification {\n\tprivate static notificationCount = 0;\n\t/**\n\t * Can have `type`, `title`, and `message` members.\n\t *\n\t * `type` can be one of `\"info\"`, `\"warning\"`, `\"error\"`, `\"success\"`\n\t *\n\t * `message` is the message to display\n\t */\n\t@Input() get notificationObj(): NotificationContent {\n\t\treturn this._notificationObj;\n\t}\n\tset notificationObj(obj: NotificationContent) {\n\t\tif (obj.closeLabel) {\n\t\t\tobj.closeLabel = of(obj.closeLabel);\n\t\t}\n\t\tthis._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);\n\t}\n\n\t/**\n\t * Emits on close.\n\t */\n\t@Output() close: EventEmitter<any> = new EventEmitter();\n\n\tcomponentRef: ComponentRef<Notification>;\n\n\t// @ts-ignore\n\t@ViewChild(\"notification\", { static: false }) notification;\n\n\t@HostBinding(\"attr.id\") notificationID = `notification-${Notification.notificationCount++}`;\n\t@HostBinding(\"class.bx--inline-notification\") notificationClass = true;\n\t@HostBinding(\"attr.role\") role = \"alert\";\n\n\t@HostBinding(\"class.bx--inline-notification--error\") get isError() { return this.notificationObj.type === \"error\"; }\n\t@HostBinding(\"class.bx--inline-notification--info\") get isInfo() { return this.notificationObj.type === \"info\"; }\n\t@HostBinding(\"class.bx--inline-notification--success\") get isSuccess() { return this.notificationObj.type === \"success\"; }\n\t@HostBinding(\"class.bx--inline-notification--warning\") get isWarning() { return this.notificationObj.type === \"warning\"; }\n\t@HostBinding(\"class.bx--inline-notification--low-contrast\") get isLowContrast() { return this.notificationObj.lowContrast; }\n\t@HostBinding(\"class.bx--inline-notification--hide-close-button\") get isCloseHidden() { return !this._notificationObj.showClose; }\n\n\tprotected defaultNotificationObj = {\n\t\ttitle: \"\",\n\t\tmessage: \"\",\n\t\ttype: \"info\",\n\t\tshowClose: true,\n\t\tcloseLabel: this.i18n.get(\"NOTIFICATION.CLOSE_BUTTON\")\n\t};\n\tprotected _notificationObj: NotificationContent = Object.assign({}, this.defaultNotificationObj);\n\n\tconstructor(protected notificationDisplayService: NotificationDisplayService, protected i18n: I18n) {}\n\n\t/**\n\t * Emits close event.\n\t */\n\tonClose() {\n\t\tthis.close.emit();\n\t}\n\n\tonClick(action, event) {\n\t\tif (!action.click) {\n\t\t\treturn;\n\t\t}\n\t\tif (isObservable(action.click)) {\n\t\t\t(action.click as Subject<{event: Event, action: any}>).next({event, action});\n\t\t} else {\n\t\t\taction.click({event, action});\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tthis.notificationDisplayService.close(this);\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOnInit,\n\tHostBinding\n} from \"@angular/core\";\n\nimport { ToastContent } from \"./notification-content.interface\";\nimport { Notification } from \"./notification.component\";\nimport { ExperimentalService } from \"carbon-components-angular/experimental\";\nimport { NotificationDisplayService } from \"./notification-display.service\";\nimport { I18n } from \"carbon-components-angular/i18n\";\n\n/**\n * Toast messages are displayed toward the top of the UI and do not interrupt userâs work.\n *\n * [See demo](../../?path=/story/notification--toast)\n *\n * <example-url>../../iframe.html?id=notification--toast</example-url>\n */\n@Component({\n\tselector: \"ibm-toast\",\n\ttemplate: `\n\t\t<svg\n\t\t\tibmIcon=\"error--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'error'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"warning--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'warning'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'success'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"information--filled\"\n\t\t\tsize=\"16\"\n\t\t\t*ngIf=\"notificationObj.type === 'info'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<div class=\"bx--toast-notification__details\">\n\t\t\t<h3 *ngIf=\"!notificationObj.template\" ibmToastTitle [innerHTML]=\"notificationObj.title\"></h3>\n\t\t\t<div *ngIf=\"!notificationObj.template\" ibmToastSubtitle>\n\t\t\t\t<span [innerHTML]=\"notificationObj.subtitle\"></span>\n\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t<a ibmLink [href]=\"link.href\"> {{link.text}}</a>\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\t\t\t<p *ngIf=\"!notificationObj.template\" ibmToastCaption [innerHTML]=\"notificationObj.caption\"></p>\n\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\tclass=\"bx--toast-notification__close-button\"\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel\"\n\t\t\t(click)=\"onClose()\">\n\t\t\t<svg ibmIcon=\"close\" size=\"16\" class=\"bx--toast-notification__close-icon\"></svg>\n\t\t</button>\n\t`\n})\nexport class Toast extends Notification implements OnInit {\n\tprivate static toastCount = 0;\n\t/**\n\t * Can have `type`, `title`, `subtitle`, and `caption` members.\n\t *\n\t * `type` can be one of `\"error\"`, `\"info\"`, `\"warning\"`, or `\"success\"`\n\t */\n\t@Input() notificationObj: ToastContent;\n\n\t@HostBinding(\"attr.id\") toastID = `toast-${Toast.toastCount++}`;\n\t@HostBinding(\"class.bx--toast-notification\") toastClass = true;\n\t@HostBinding(\"attr.role\") role = \"alert\";\n\n\t@HostBinding(\"class.bx--toast-notification--error\") get isError() { return this.notificationObj[\"type\"] === \"error\"; }\n\t@HostBinding(\"class.bx--toast-notification--info\") get isInfo() { return this.notificationObj[\"type\"] === \"info\"; }\n\t@HostBinding(\"class.bx--toast-notification--success\") get isSuccess() { return this.notificationObj[\"type\"] === \"success\"; }\n\t@HostBinding(\"class.bx--toast-notification--warning\") get isWarning() { return this.notificationObj[\"type\"] === \"warning\"; }\n\t@HostBinding(\"class.bx--toast-notification--low-contrast\") get isLowContrast() { return this.notificationObj.lowContrast; }\n\n\tconstructor(\n\t\tprotected notificationDisplayService: NotificationDisplayService,\n\t\tprotected i18n: I18n,\n\t\tprotected experimental: ExperimentalService) {\n\t\tsuper(notificationDisplayService, i18n);\n\t\t// disable inline notification styles\n\t\tthis.notificationClass = false;\n\t}\n\n\tngOnInit() {\n\t\tif (!this.notificationObj.closeLabel) {\n\t\t\tthis.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;\n\t\t}\n\t}\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmToastTitle]\"\n})\nexport class ToastTitle {\n\t@HostBinding(\"class.bx--toast-notification__title\") baseClass = true;\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmToastSubtitle]\"\n})\nexport class ToastSubtitle {\n\t@HostBinding(\"class.bx--toast-notification__subtitle\") baseClass = true;\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmToastCaption]\"\n})\nexport class ToastCaption {\n\t@HostBinding(\"class.bx--toast-notification__caption\") baseClass = true;\n}\n","import {\n\tApplicationRef,\n\tComponentFactory,\n\tComponentFactoryResolver,\n\tComponentRef,\n\tEventEmitter,\n\tInjectable,\n\tInjector,\n\tOnDestroy,\n\tNgZone\n} from \"@angular/core\";\n\nimport { NotificationContent, ToastContent } from \"./notification-content.interface\";\nimport { Notification } from \"./notification.component\";\nimport { Toast } from \"./toast.component\";\n\n/**\n * Provides a way to use the notification component.\n *\n * Notifications are displayed toward the top of the UI and do not interrupt the userâs work.\n */\n@Injectable()\nexport class NotificationService implements OnDestroy {\n\t/**\n\t * An array containing `ComponentRef`s to all the notifications this service instance\n\t * is responsible for.\n\t *\n\t */\n\tpublic notificationRefs = new Array<ComponentRef<any>>();\n\tpublic onClose: EventEmitter<any> = new EventEmitter();\n\n\t/**\n\t * Constructs NotificationService.\n\t *\n\t * @param injector\n\t * @param componentFactoryResolver\n\t * @param applicationRef\n\t */\n\tconstructor(\n\t\tprotected injector: Injector,\n\t\tprotected componentFactoryResolver: ComponentFactoryResolver,\n\t\tprotected applicationRef: ApplicationRef,\n\t\tprotected ngZone: NgZone) {\n\t}\n\n\t/**\n\t * Shows the notification based on the `notificationObj`.\n\t *\n\t * @param notificationObj Can have `type`, `message`, `target`, `duration` and `smart` members.\n\t *\n\t * **Members:**\n\t *\n\t * * `type` can be one of `\"info\"`, `\"warning\"`, `\"danger\"`, `\"success\"`\n\t * * `message` is message for notification to display\n\t * * `target` is css selector defining an element to append notification to. If not provided,\n\t * `showNotification()` creates a place for the notification in `body`\n\t * * `duration` is number of ms to close the notification after. If used in combination with `smart`,\n\t * it's added to the calculated timeout\n\t * * `smart`, set to `true` if you want to use smart notification.\n\t *\n\t * **Example:**\n\t * ```typescript\n\t * // Info notification, saying \"Sample message.\" added to the element with id notification-container\n\t * // uses smart timeout with added duration of 1 second.\n\t * {\n\t *\ttype: \"info\",\n\t *\tmessage: \"Sample message.\",\n\t *\ttarget: \"#notification-container\",\n\t *\tduration: 1000,\n\t *\tsmart: true\n\t * }\n\t * ```\n\t *\n\t * @param [notificationComp=Notification] If provided, used to resolve component factory\n\t */\n\tshowNotification(notificationObj: NotificationContent | ToastContent, notificationComp = Notification) {\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(notificationComp);\n\n\t\tlet notificationRef = componentFactory.create(this.injector);\n\t\tnotificationRef.instance.notificationObj = notificationObj as any; // typescript isn't being very smart here, so we type to any\n\t\tthis.notificationRefs.push(notificationRef);\n\n\t\tthis.onClose = notificationRef.instance.close;\n\t\tthis.applicationRef.attachView(notificationRef.hostView);\n\n\t\tif (notificationObj.target) {\n\t\t\tdocument.querySelector(notificationObj.target).appendChild(notificationRef.location.nativeElement);\n\t\t} else {\n\t\t\tlet body = document.querySelector(\"body\");\n\n\t\t\t// get or create a container for alert list\n\t\t\tlet notificationClassName = \"notification-overlay\";\n\t\t\tlet notificationList = body.querySelector(`.${notificationClassName}`);\n\t\t\tif (!notificationList) {\n\t\t\t\tnotificationList = document.createElement(\"div\");\n\t\t\t\tnotificationList.className = notificationClassName;\n\t\t\t\tbody.appendChild(notificationList);\n\t\t\t}\n\n\t\t\t// add the notification to the top of the list\n\t\t\tif (notificationList.firstChild) {\n\t\t\t\tnotificationList.insertBefore(notificationRef.location.nativeElement, notificationList.firstChild);\n\t\t\t} else {\n\t\t\t\tnotificationList.appendChild(notificationRef.location.nativeElement);\n\t\t\t}\n\t\t}\n\n\t\tif (notificationObj.duration && notificationObj.duration > 0) {\n\t\t\tthis.ngZone.runOutsideAngular(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.ngZone.run(() => {\n\t\t\t\t\t\tthis.close(notificationRef);\n\t\t\t\t\t});\n\t\t\t\t}, notificationObj.duration);\n\t\t\t});\n\t\t}\n\n\t\tif (notificationObj.smart) {\n\t\t\tthis.ngZone.runOutsideAngular(() => {\n\t\t\t\t// let it disappear after calculated timeout\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.ngZone.run(() => {\n\t\t\t\t\t\tthis.close(notificationRef);\n\t\t\t\t\t});\n\t\t\t\t}, this.getSmartTimeout(notificationObj));\n\t\t\t});\n\t\t}\n\n\t\tthis.onClose.subscribe(() => {\n\t\t\tthis.close(notificationRef);\n\t\t});\n\n\t\tnotificationRef.instance.componentRef = notificationRef;\n\t\treturn notificationRef.instance;\n\t}\n\n\tshowToast(notificationObj: NotificationContent | ToastContent, notificationComp = Toast) {\n\t\treturn this.showNotification(notificationObj, notificationComp as any);\n\t}\n\n\t/**\n\t * Programatically closes notification based on `notificationRef`.\n\t *\n\t * @param notificationRef `ComponentRef` of a notification or `Notification` component you wish to close\n\t */\n\tclose(notificationRef: any) {\n\t\tif (notificationRef) {\n\t\t\tif (notificationRef instanceof Notification) {\n\t\t\t\tthis.close(notificationRef.componentRef);\n\t\t\t} else {\n\t\t\t\tthis.applicationRef.detachView(notificationRef.hostView);\n\t\t\t\tnotificationRef.destroy();\n\t\t\t\tconst index = this.notificationRefs.indexOf(notificationRef);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tthis.notificationRefs.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the amount of time user needs to read the message in the notification.\n\t *\n\t * @param notificationObj Same object used to instantiate notification.\n\t *\n\t * In addition to `type` and `message` members, use `duration` member to add\n\t * some extra time (in ms) to timeout if you need to.\n\t * @returns calculated timeout (in ms) for smart notification\n\t */\n\tgetSmartTimeout(notificationObj): number {\n\t\t// calculate timeout\n\t\tlet timeout = 600; // start with reaction time\n\n\t\t// custom duration\n\t\ttimeout += notificationObj.duration || 0;\n\n\t\t// message type\n\t\tswitch (notificationObj.type) {\n\t\t\tcase \"info\":\n\t\t\tcase \"success\":\n\t\t\tdefault: {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"danger\": {\n\t\t\t\ttimeout += 3000;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"warning\": {\n\t\t\t\ttimeout += 1500;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// message length\n\t\t// average reader reads around 200 words per minute, or it takes them ~0.3s per word\n\t\t// let's use 1.5 factor for below average speed readers and have 0.45s per word\n\t\tlet wordCount = notificationObj.message.trim().split(/\\s+/).length;\n\t\ttimeout += wordCount * 450;\n\n\t\treturn timeout;\n\t}\n\n\t/**\n\t * OnDestroy hook.\n\t *\n\t * Destroys all living notifications it is responsible for.\n\t *\n\t */\n\tngOnDestroy() {\n\t\tif (this.notificationRefs.length > 0) {\n\t\t\tfor (let i = 0; i < this.notificationRefs.length; i++) {\n\t\t\t\tlet notificationRef = this.notificationRefs[i];\n\t\t\t\tthis.applicationRef.detachView(notificationRef.hostView);\n\t\t\t\tnotificationRef.destroy();\n\t\t\t}\n\t\t\tthis.notificationRefs.length = 0;\n\t\t}\n\t}\n}\n","import { NgModule } from \"@angular/core\";\nimport { ButtonModule } from \"carbon-components-angular/button\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { Toast } from \"./toast.component\";\nimport { ToastTitle } from \"./toast-title.directive\";\nimport { ToastSubtitle } from \"./toast-subtitle.directive\";\nimport { ToastCaption } from \"./toast-caption.directive\";\nimport { NotificationTitle } from \"./notification-title.directive\";\nimport { NotificationSubtitle } from \"./notification-subtitle.directive\";\nimport { Notification } from \"./notification.component\";\nimport { NotificationService } from \"./notification.service\";\nimport { NotificationDisplayService } from \"./notification-display.service\";\nimport { I18nModule } from \"carbon-components-angular/i18n\";\nimport { ExperimentalModule } from \"carbon-components-angular/experimental\";\nimport { LinkModule } from \"carbon-components-angular/link\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tNotification,\n\t\tToast,\n\t\tToastTitle,\n\t\tToastSubtitle,\n\t\tToastCaption,\n\t\tNotificationTitle,\n\t\tNotificationSubtitle\n\t],\n\texports: [\n\t\tNotification,\n\t\tToast,\n\t\tToastTitle,\n\t\tToastSubtitle,\n\t\tToastCaption,\n\t\tNotificationTitle,\n\t\tNotificationSubtitle\n\t],\n\tentryComponents: [Notification, Toast],\n\timports: [\n\t\tButtonModule,\n\t\tCommonModule,\n\t\tI18nModule,\n\t\tExperimentalModule,\n\t\tLinkModule,\n\t\tIconModule\n\t],\n\tproviders: [NotificationService, NotificationDisplayService]\n})\nexport class NotificationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
