/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-input.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Directive, HostBinding, Input, Component, TemplateRef, ViewChild, ContentChild, NgModule } from '@angular/core';
import { IconModule } from 'carbon-components-angular/icon';

/**
 * A directive for applying styling to an input element.
 *
 * Example:
 *
 * ```html
 * <input ibmText/>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
 */
class TextInput {
    constructor() {
        /**
         * `light` or `dark` input theme
         */
        this.theme = "dark";
        /**
         * Input field render size
         */
        this.size = "md";
        this.inputClass = true;
        this.invalid = false;
        this.skeleton = false;
    }
    get isSizeXl() {
        return this.size === "xl";
    }
    get isSizeSm() {
        return this.size === "sm";
    }
    get isLightTheme() {
        return this.theme === "light";
    }
}
TextInput.decorators = [
    { type: Directive, args: [{
                selector: "[ibmText]"
            },] }
];
TextInput.propDecorators = {
    theme: [{ type: Input }],
    size: [{ type: Input }],
    inputClass: [{ type: HostBinding, args: ["class.bx--text-input",] }],
    isSizeXl: [{ type: HostBinding, args: ["class.bx--text-input--xl",] }],
    isSizeSm: [{ type: HostBinding, args: ["class.bx--text-input--sm",] }],
    invalid: [{ type: HostBinding, args: ["class.bx--text-input--invalid",] }, { type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    isLightTheme: [{ type: HostBinding, args: ["class.bx--text-input--light",] }]
};

/**
 * A directive for applying styling to a textarea element.
 *
 * Example:
 *
 * ```html
 * <textarea ibmTextArea></textarea>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.
 */
class TextArea {
    constructor() {
        /**
         * `light` or `dark` input theme
         */
        this.theme = "dark";
        this.baseClass = true;
        this.invalid = false;
        this.skeleton = false;
    }
    get isLightTheme() {
        return this.theme === "light";
    }
}
TextArea.decorators = [
    { type: Directive, args: [{
                selector: "[ibmTextArea]"
            },] }
];
TextArea.propDecorators = {
    theme: [{ type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--text-area",] }],
    invalid: [{ type: HostBinding, args: ["class.bx--text-area--invalid",] }, { type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    isLightTheme: [{ type: HostBinding, args: ["class.bx--text-area--light",] }]
};

/**
 * [See demo](../../?path=/story/input--label)
 *
 * ```html
 * <ibm-label labelState="success">
 * 	<label label>Field with success</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="warning">
 * 	<label label>Field with warning</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="error">
 * 	<label label>Field with error</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 * ```
 *
 * <example-url>../../iframe.html?id=input--label</example-url>
 */
class Label {
    /**
     * Creates an instance of Label.
     */
    constructor() {
        /**
         * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with
         * its input counterpart through the 'for' attribute.
         */
        this.labelInputID = "ibm-label-" + Label.labelCounter;
        /**
         * The class of the wrapper
         */
        this.wrapperClass = "bx--text-input__field-wrapper";
        /**
         * State of the `Label` will determine the styles applied.
         */
        this.labelState = "";
        /**
         * Set to `true` for a loading label.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid label component.
         */
        this.invalid = false;
        this.labelClass = true;
        Label.labelCounter++;
    }
    /**
     * Update wrapper class if a textarea is hosted.
     */
    ngAfterContentInit() {
        if (this.textArea) {
            this.wrapperClass = "bx--text-area__wrapper";
        }
    }
    /**
     * Sets the id on the input item associated with the `Label`.
     */
    ngAfterViewInit() {
        if (this.wrapper) {
            const inputElement = this.wrapper.nativeElement.querySelector("input,textarea,div");
            if (inputElement) {
                inputElement.setAttribute("id", this.labelInputID);
            }
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
/**
 * Used to build the id of the input item associated with the `Label`.
 */
Label.labelCounter = 0;
Label.decorators = [
    { type: Component, args: [{
                selector: "ibm-label",
                template: `
		<label
			[for]="labelInputID"
			[attr.aria-label]="ariaLabel"
			class="bx--label"
			[ngClass]="{
				'bx--skeleton': skeleton
			}">
			<ng-content></ng-content>
		</label>
		<div [class]="wrapperClass" [attr.data-invalid]="(invalid ? true : null)" #wrapper>
			<svg
				*ngIf="invalid"
				ibmIcon="warning--filled"
				size="16"
				class="bx--text-input__invalid-icon bx--text-area__invalid-icon">
			</svg>
			<ng-content select="input,textarea,div"></ng-content>
		</div>
		<div *ngIf="!skeleton && helperText && !invalid" class="bx--form__helper-text">
			<ng-container *ngIf="!isTemplate(helperText)">{{helperText}}</ng-container>
			<ng-template *ngIf="isTemplate(helperText)" [ngTemplateOutlet]="helperText"></ng-template>
		</div>
		<div *ngIf="invalid" class="bx--form-requirement">
			<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
			<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
		</div>
	`
            }] }
];
/** @nocollapse */
Label.ctorParameters = () => [];
Label.propDecorators = {
    labelState: [{ type: Input }],
    skeleton: [{ type: Input }],
    helperText: [{ type: Input }],
    invalidText: [{ type: Input }],
    invalid: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    wrapper: [{ type: ViewChild, args: ["wrapper", { static: false },] }],
    textArea: [{ type: ContentChild, args: [TextArea, { static: false },] }],
    labelClass: [{ type: HostBinding, args: ["class.bx--form-item",] }]
};

// modules
class InputModule {
}
InputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    Label,
                    TextInput,
                    TextArea
                ],
                exports: [
                    Label,
                    TextInput,
                    TextArea
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    IconModule
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { TextInput, InputModule, Label, TextArea };

//# sourceMappingURL=carbon-components-angular-input.js.map