{"version":3,"file":"carbon-components-angular-checkbox.js.map","sources":["ng://carbon-components-angular/checkbox/checkbox.component.ts","ng://carbon-components-angular/checkbox/checkbox.module.ts","ng://carbon-components-angular/checkbox/carbon-components-angular-checkbox.ts"],"sourcesContent":["import {\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tEventEmitter,\n\tInput,\n\tOutput,\n\tViewChild,\n\tHostBinding,\n\tHostListener\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\nimport { CheckboxValue } from \"./checkbox.types\";\n\n/**\n * Defines the set of states for a checkbox component.\n */\nexport enum CheckboxState {\n\tInit,\n\tIndeterminate,\n\tChecked,\n\tUnchecked\n}\n\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\nexport class CheckboxChange {\n\t/**\n\t * Contains the `Checkbox` that has been changed.\n\t */\n\tsource: Checkbox;\n\t/**\n\t * The state of the `Checkbox` encompassed in the `CheckboxChange` class.\n\t */\n\tchecked: boolean;\n}\n\n/**\n * [See demo](../../?path=/story/checkbox--basic)\n *\n * <example-url>../../iframe.html?id=checkbox--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-checkbox\",\n\ttemplate: `\n\t\t<div class=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t[attr.aria-checked]=\"(indeterminate ? 'mixed' : checked)\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"bx--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'bx--visually-hidden' : hideLabel}\" class=\"bx--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: Checkbox,\n\t\t\tmulti: true\n\t\t}\n\t],\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Checkbox implements ControlValueAccessor, AfterViewInit {\n\t/**\n\t * Variable used for creating unique ids for checkbox components.\n\t */\n\tstatic checkboxCount = 0;\n\n\t/**\n\t * Size of the checkbox.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() size: \"sm\" | \"md\" = \"md\";\n\t/**\n\t * Set to `true` for checkbox to be rendered with nested styles.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() nested: boolean;\n\t/**\n\t * Set to `true` for checkbox to be rendered without any classes on the host element.\n\t */\n\t@Input() inline = false;\n\t/**\n\t * Set to `true` for a disabled checkbox.\n\t */\n\t@Input() disabled = false;\n\t/**\n\t * Set to `true` for a loading checkbox.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Set to `true` to hide the checkbox labels.\n\t */\n\t@Input() hideLabel = false;\n\t/**\n\t * Sets the name attribute on the `input` element.\n\t */\n\t@Input() name: string;\n\t/**\n\t * The unique id for the checkbox component.\n\t */\n\t@Input() id = `checkbox-${Checkbox.checkboxCount}`;\n\t/**\n\t * Reflects the required attribute of the `input` element.\n\t */\n\t@Input() required: boolean;\n\t/**\n\t * Sets the value attribute on the `input` element.\n\t */\n\t@Input() value: CheckboxValue;\n\t/**\n\t * Used to set the `aria-label` attribute on the input element.\n\t *\n\t * @deprecated since v4 use the `ariaLabel` input instead\n\t */\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"aria-label\") set ariaLabel(value: string) {\n\t\tthis._ariaLabel = value;\n\t}\n\n\tget ariaLabel() {\n\t\treturn this._ariaLabel;\n\t}\n\n\t// TODO: drop the `_`\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"ariaLabel\") _ariaLabel = \"\";\n\n\t/**\n\t * Used to set the `aria-labelledby` attribute on the input element.\n\t *\n\t * @deprecated since v4 use the `ariaLabelledby` input instead\n\t */\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"aria-labelledby\") set ariaLabelledby(value: string) {\n\t\tthis._ariaLabelledby = value;\n\t}\n\n\tget ariaLabelledby() {\n\t\treturn this._ariaLabelledby;\n\t}\n\n\t// TODO: drop the `_`\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"ariaLabelledby\") _ariaLabelledby: string;\n\n\t/**\n\t * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n\t *\n\t * Allows double binding with the `indeterminateChange` Output.\n\t */\n\t@Input() set indeterminate(indeterminate: boolean) {\n\t\tif (indeterminate === this._indeterminate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._indeterminate = indeterminate;\n\n\t\tif (this._indeterminate) {\n\t\t\tthis.transitionCheckboxState(CheckboxState.Indeterminate);\n\t\t} else {\n\t\t\tthis.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n\t\t}\n\n\t\tthis.inputCheckbox.nativeElement.indeterminate = indeterminate;\n\t\tthis.changeDetectorRef.markForCheck();\n\t\tthis.indeterminateChange.emit(this._indeterminate);\n\t}\n\n\t/**\n\t * Reflects whether the checkbox state is indeterminate.\n\t */\n\tget indeterminate() {\n\t\treturn this._indeterminate;\n\t}\n\n\t/**\n\t * Sets the `checked` state. `true` for checked, `false` for unchecked\n\t *\n\t * Allows double binding with the `checkedChange` Output.\n\t */\n\t@Input() set checked (checked: boolean) {\n\t\tthis.setChecked(checked, false);\n\t}\n\n\t/**\n\t * Returns value `true` if state is selected for the checkbox.\n\t */\n\tget checked() {\n\t\treturn this._checked;\n\t}\n\n\t@HostBinding(\"class.bx--checkbox-wrapper\") get checkboxWrapperClass() {\n\t\treturn !this.inline;\n\t}\n\t@HostBinding(\"class.bx--form-item\") get formItemClass() {\n\t\treturn !this.inline;\n\t}\n\n\t/**\n\t * Emits click event.\n\t */\n\t@Output() click = new EventEmitter<void>();\n\t/**\n\t * Emits event notifying other classes when a change in state occurs on a checkbox after a\n\t * click.\n\t *\n\t * @deprecated since v4 use `checked` and `checkedChange` instead\n\t */\n\t@Output() change = new EventEmitter<any>();\n\n\t/**\n\t * Emits an event when the value of the checkbox changes.\n\t *\n\t * Allows double biding with the `checked` Input.\n\t */\n\t@Output() checkedChange = new EventEmitter<boolean>();\n\n\t/**\n\t * Emits event notifying other classes when a change in state occurs specifically\n\t * on an indeterminate checkbox.\n\t */\n\t@Output() indeterminateChange = new EventEmitter<boolean>();\n\n\t/**\n\t * Set to `true` if the input checkbox is selected (or checked).\n\t */\n\t_checked = false;\n\t/**\n\t * Set to `true` if the input checkbox is in state indeterminate.\n\t */\n\t_indeterminate = false;\n\n\t/**\n\t * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n\t */\n\tcurrentCheckboxState = CheckboxState.Init;\n\n\t/**\n\t * Maintains a reference to the view DOM element of the `Checkbox`.\n\t */\n\t// @ts-ignore\n\t@ViewChild(\"inputCheckbox\", { static: false }) inputCheckbox: ElementRef;\n\n\t/**\n\t * Creates an instance of `Checkbox`.\n\t */\n\tconstructor(protected changeDetectorRef: ChangeDetectorRef) {\n\t\tCheckbox.checkboxCount++;\n\t}\n\n\t/**\n\t * Toggle the selected state of the checkbox.\n\t */\n\tpublic toggle() {\n\t\t// Flip checked and reset indeterminate\n\t\tthis.setChecked(!this.checked, true);\n\t}\n\n\t/**\n\t * Writes a value from `ngModel` to the component.\n\t *\n\t * In this case the value is the `checked` property.\n\t *\n\t * @param value boolean, corresponds to the `checked` property.\n\t */\n\tpublic writeValue(value: any) {\n\t\t// Set checked and reset indeterminate\n\t\tthis.setChecked(!!value, true);\n\t}\n\n\t/**\n\t * Sets a method in order to propagate changes back to the form.\n\t */\n\tpublic registerOnChange(fn: any) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\t/**\n\t * Registers a callback to be triggered when the control has been touched.\n\t * @param fn Callback to be triggered when the checkbox is touched.\n\t */\n\tpublic registerOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\t@HostListener(\"focusout\")\n\tfocusOut() {\n\t\tthis.onTouched();\n\t}\n\n\t/**\n\t * Executes on the event of a change within `Checkbox` to block propagation.\n\t */\n\tonChange(event: Event) {\n\t\tevent.stopPropagation();\n\t}\n\n\t/**\n\t * Handles click events on the `Checkbox` and emits changes to other classes.\n\t */\n\tonClick(event: Event) {\n\t\tif (this.click.observers.length) {\n\t\t\t// Disable default checkbox activation behavior which flips checked and resets indeterminate.\n\t\t\t// This allows the parent component to control the checked/indeterminate properties.\n\t\t\tevent.preventDefault();\n\t\t\tthis.click.emit();\n\t\t\treturn;\n\t\t}\n\t\tif (!this.disabled) {\n\t\t\tthis.toggle();\n\t\t\tthis.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n\t\t\tthis.emitChangeEvent();\n\t\t}\n\t}\n\n\n\t/**\n\t * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n\t */\n\tonTouched: () => any = () => {};\n\n\t/**\n\t * Handles changes between checkbox states.\n\t */\n\ttransitionCheckboxState(newState: CheckboxState) {\n\t\tthis.currentCheckboxState = newState;\n\t}\n\n\t/**\n\t * Creates instance of `CheckboxChange` used to propagate the change event.\n\t */\n\temitChangeEvent() {\n\t\t/* begin deprecation */\n\t\tlet event = new CheckboxChange();\n\t\tevent.source = this;\n\t\tevent.checked = this.checked;\n\t\tthis.change.emit(event);\n\t\t/* end deprecation */\n\n\t\tthis.checkedChange.emit(this.checked);\n\t\tthis.propagateChange(this.checked);\n\t}\n\n\t/**\n\t * Updates the checkbox if it is in the indeterminate state.\n\t */\n\tngAfterViewInit() {\n\t\tif (this.indeterminate) {\n\t\t\tthis.inputCheckbox.nativeElement.indeterminate = true;\n\t\t}\n\t}\n\n\t/**\n\t * Method set in `registerOnChange` to propagate changes back to the form.\n\t */\n\tpropagateChange = (_: any) => {};\n\n\t/**\n\t * Sets checked state and optionally resets indeterminate state.\n\t */\n\tprivate setChecked(checked: boolean, resetIndeterminate: boolean) {\n\t\tif (checked === this._checked) {\n\t\t\treturn;\n\t\t}\n\t\tthis._checked = checked;\n\t\t// Reset indeterminate if requested\n\t\tif (resetIndeterminate && this._indeterminate) {\n\t\t\tthis._indeterminate = false;\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tthis.indeterminateChange.emit(this._indeterminate);\n\t\t\t});\n\t\t}\n\t\tthis.changeDetectorRef.markForCheck();\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { Checkbox } from \"./checkbox.component\";\n\n@NgModule({\n\tdeclarations: [\n\t\tCheckbox\n\t],\n\texports: [\n\t\tCheckbox\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule\n\t]\n})\nexport class CheckboxModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
