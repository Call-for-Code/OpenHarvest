{"version":3,"file":"label.component.d.ts","sources":["label.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | label.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AfterViewInit, ElementRef, TemplateRef, AfterContentInit } from \"@angular/core\";\nimport { TextArea } from \"./text-area.directive\";\n/**\n * [See demo](../../?path=/story/input--label)\n *\n * ```html\n * <ibm-label labelState=\"success\">\n * \t<label label>Field with success</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n *\n * <ibm-label labelState=\"warning\">\n * \t<label label>Field with warning</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n *\n * <ibm-label labelState=\"error\">\n * \t<label label>Field with error</label>\n * \t<input type=\"text\" class=\"input-field\">\n * </ibm-label>\n * ```\n *\n * <example-url>../../iframe.html?id=input--label</example-url>\n */\nexport declare class Label implements AfterContentInit, AfterViewInit {\n    /**\n     * Used to build the id of the input item associated with the `Label`.\n     */\n    static labelCounter: number;\n    /**\n     * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with\n     * its input counterpart through the 'for' attribute.\n     */\n    labelInputID: string;\n    /**\n     * The class of the wrapper\n     */\n    wrapperClass: string;\n    /**\n     * State of the `Label` will determine the styles applied.\n     */\n    labelState: \"success\" | \"warning\" | \"error\" | \"\";\n    /**\n     * Set to `true` for a loading label.\n     */\n    skeleton: boolean;\n    /**\n     * Optional helper text that appears under the label.\n     */\n    helperText: string | TemplateRef<any>;\n    /**\n     * Sets the invalid text.\n     */\n    invalidText: string | TemplateRef<any>;\n    /**\n     * Set to `true` for an invalid label component.\n     */\n    invalid: boolean;\n    /**\n     * Set the arialabel for label\n     */\n    ariaLabel: string;\n    wrapper: ElementRef<HTMLDivElement>;\n    textArea: TextArea;\n    labelClass: boolean;\n    /**\n     * Creates an instance of Label.\n     */\n    constructor();\n    /**\n     * Update wrapper class if a textarea is hosted.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Sets the id on the input item associated with the `Label`.\n     */\n    ngAfterViewInit(): void;\n    isTemplate(value: any): boolean;\n}\n"]}