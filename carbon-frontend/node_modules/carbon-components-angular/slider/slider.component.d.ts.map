{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | slider.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter, AfterViewInit, ElementRef, TemplateRef, QueryList } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { EventService } from \"carbon-components-angular/utils\";\n/**\n * Used to select from ranges of values. [See here](https://www.carbondesignsystem.com/components/slider/usage) for usage information.\n *\n * [See demo](../../?path=/story/slider--advanced)\n *\n * The simplest possible slider usage looks something like:\n * ```html\n * <ibm-slider></ibm-slider>\n * ```\n *\n * That will render a slider without labels or alternative value input. Labels can be provided by\n * elements with `[minLabel]` and `[maxLabel]` attributes, and an `input` (may use the `ibmInput` directive) can be supplied\n * for use as an alternative value field.\n *\n * ex:\n * ```html\n * <!-- full example -->\n * <ibm-slider>\n *\t\t<span minLabel>0GB</span>\n *\t\t<span maxLabel>100GB</span>\n *\t\t<input/>\n *\t</ibm-slider>\n * <!-- with just an input -->\n * <ibm-slider>\n *\t\t<input/>\n *\t</ibm-slider>\n * <!-- with just one label -->\n * <ibm-slider>\n *\t\t<span maxLabel>Maximum</span>\n *\t</ibm-slider>\n * ```\n *\n * Slider supports `NgModel` by default, as well as two way binding to the `value` input.\n *\n * <example-url>../../iframe.html?id=slider--advanced</example-url>\n */\nexport declare class Slider implements AfterViewInit, ControlValueAccessor {\n    protected elementRef: ElementRef;\n    protected eventService: EventService;\n    /** Used to generate unique IDs */\n    private static count;\n    /** The lower bound of our range */\n    min: any;\n    /** The upper bound of our range */\n    max: any;\n    /** The interval for our range */\n    step: number;\n    /** Set the initial value. Available for two way binding */\n    value: any;\n    /** Base ID for the slider. The min and max labels get IDs `${this.id}-bottom-range` and `${this.id}-top-range` respectively */\n    id: string;\n    /** Value used to \"multiply\" the `step` when using arrow keys to select values */\n    shiftMultiplier: number;\n    /** Set to `true` for a loading slider */\n    skeleton: boolean;\n    /** Sets the text inside the `label` tag */\n    label: string | TemplateRef<any>;\n    /** Set to `true` for a slider without arrow key interactions. */\n    disableArrowKeys: boolean;\n    /** Disables the range visually and functionally */\n    disabled: any;\n    /** Emits every time a new value is selected */\n    valueChange: EventEmitter<number | number[]>;\n    hostClass: boolean;\n    thumbs: QueryList<ElementRef>;\n    track: ElementRef;\n    filledTrack: ElementRef;\n    range: ElementRef;\n    bottomRangeId: string;\n    topRangeId: string;\n    fractionComplete: number;\n    protected isMouseDown: boolean;\n    protected inputs: HTMLInputElement[];\n    protected _min: number;\n    protected _max: number;\n    protected _value: number[];\n    protected _previousValue: number[];\n    protected _disabled: boolean;\n    protected _focusedThumbIndex: number;\n    constructor(elementRef: ElementRef, eventService: EventService);\n    ngAfterViewInit(): void;\n    trackThumbsBy(index: number, item: any): number;\n    /** Send changes back to the model */\n    propagateChange: (_: any) => void;\n    /** Register a change propagation function for `ControlValueAccessor` */\n    registerOnChange(fn: any): void;\n    /** Callback to notify the model when our input has been touched */\n    onTouched: () => any;\n    /** Register a callback to notify when our input has been touched */\n    registerOnTouched(fn: any): void;\n    /** Receives a value from the model */\n    writeValue(v: any): void;\n    /**\n     * Returns the amount of \"completeness\" of a value as a fraction of the total track width\n     */\n    getFractionComplete(value: number): number;\n    /** Helper function to return the CSS transform `scaleX` function */\n    scaleX(complete: any): string;\n    /** Converts a given px value to a \"real\" value in our range */\n    convertToValue(pxAmount: any): number;\n    /** Converts a given \"real\" value to a px value we can update the view with */\n    convertToPx(value: any): any;\n    /**\n     * Increments the value by the step value, or the step value multiplied by the `multiplier` argument.\n     *\n     * @argument multiplier Defaults to `1`, multiplied with the step value.\n     */\n    incrementValue(multiplier?: number, index?: number): void;\n    /**\n     * Decrements the value by the step value, or the step value multiplied by the `multiplier` argument.\n     *\n     * @argument multiplier Defaults to `1`, multiplied with the step value.\n     */\n    decrementValue(multiplier?: number, index?: number): void;\n    /**\n     * Determines if the slider is in range mode.\n     */\n    isRange(): boolean;\n    /**\n     * Range mode only.\n     * Updates the track width to span from the low thumb to the high thumb\n     */\n    updateTrackRangeWidth(): void;\n    /** Change handler for the optional input */\n    onChange(event: any, index: any): void;\n    /** Handles clicks on the range track, and setting the value to it's \"real\" equivalent */\n    onClick(event: any): void;\n    /** Focus handler for the optional input */\n    onFocus({ target }: {\n        target: any;\n    }): void;\n    /** Mouse move handler. Responsible for updating the value and visual selection based on mouse movement */\n    onMouseMove(event: any): void;\n    /**\n     * Enables the `onMouseMove` handler\n     *\n     * @param {boolean} thumb If true then `thumb` is clicked down, otherwise `thumb2` is clicked down.\n     */\n    onMouseDown(event: any, index?: number): void;\n    /** Disables the `onMouseMove` handler */\n    onMouseUp(): void;\n    /**\n     * Calls `incrementValue` for ArrowRight and ArrowUp, `decrementValue` for ArrowLeft and ArrowDown.\n     *\n     * @param {boolean} thumb If true then `thumb` is pressed down, otherwise `thumb2` is pressed down.\n     */\n    onKeyDown(event: KeyboardEvent, index?: number): void;\n    isTemplate(value: any): boolean;\n    /** Get optional input fields */\n    protected getInputs(): HTMLInputElement[];\n}\n"]}