{"version":3,"file":"radio-group.component.d.ts","sources":["radio-group.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n *\n * carbon-angular v0.0.0 | radio-group.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AfterContentInit, EventEmitter, QueryList, AfterViewInit } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { Radio } from \"./radio.component\";\nimport { RadioChange } from \"./radio-change.class\";\n/**\n * [See demo](../../?path=/story/radio--basic)\n *\n * class: RadioGroup\n *\n * selector: `ibm-radio-group`\n *\n * source: `src/forms/radio.component.ts`\n *\n *\n * Ex:\n * ```html\n * <ibm-radio-group [(ngModel)]=\"radio\">\n * \t<ibm-radio *ngFor=\"let one of manyRadios\" [value]=\"one\">\n *\t\tRadio {{one}}\n * \t</ibm-radio>\n * </ibm-radio-group>\n *\n * Radio selected: {{radio}}\n * ```\n *\n * ```typescript\n * manyRadios = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n * ```\n *\n * Also see: [`Radio`](#ibm-radio)\n *\n * <example-url>../../iframe.html?id=radio--basic</example-url>\n */\nexport declare class RadioGroup implements AfterContentInit, AfterViewInit, ControlValueAccessor {\n    /**\n     * Used for creating the `RadioGroup` 'name' property dynamically.\n     */\n    static radioGroupCount: number;\n    orientation: \"horizontal\" | \"vertical\";\n    labelPlacement: \"right\" | \"left\";\n    /**\n     * Used to set the `aria-label` attribute on the radio group element.\n     */\n    ariaLabel: string;\n    /**\n     * Used to set the `aria-labelledby` attribute on the radio group element.\n     */\n    ariaLabelledby: string;\n    /**\n     * Emits event notifying other classes of a change using a `RadioChange` class.\n     */\n    change: EventEmitter<RadioChange>;\n    /**\n     * The `Radio` input items in the `RadioGroup`.\n     */\n    radios: QueryList<Radio>;\n    /**\n     * Sets the passed in `Radio` item as the selected input within the `RadioGroup`.\n     */\n    /**\n    * Returns the `Radio` that is selected within the `RadioGroup`.\n    */\n    selected: Radio | null;\n    /**\n     * Sets the value/state of the selected `Radio` within the `RadioGroup` to the passed in value.\n     */\n    /**\n    * Returns the value/state of the selected `Radio` within the `RadioGroup`.\n    */\n    value: any;\n    /**\n     * Replaces the name associated with the `RadioGroup` with the provided parameter.\n     */\n    /**\n    * Returns the associated name of the `RadioGroup`.\n    */\n    name: string;\n    /**\n     * Set to true to disable the whole radio group\n     */\n    disabled: boolean;\n    /**\n     * Returns the skeleton value in the `RadioGroup` if there is one.\n     */\n    /**\n    * Sets the skeleton value for all `Radio` to the skeleton value of `RadioGroup`.\n    */\n    skeleton: any;\n    /**\n     * Binds 'bx--form-item' value to the class for `RadioGroup`.\n     */\n    radioButtonGroupClass: boolean;\n    /**\n     * To track whether the `RadioGroup` has been initialized.\n     */\n    protected isInitialized: boolean;\n    /**\n     * Reflects whether or not the input is disabled and cannot be selected.\n     */\n    protected _disabled: boolean;\n    /**\n     * Reflects whether or not the dropdown is loading.\n     */\n    protected _skeleton: boolean;\n    /**\n     * The value of the selected option within the `RadioGroup`.\n     */\n    protected _value: any;\n    /**\n     * The `Radio` within the `RadioGroup` that is selected.\n     */\n    protected _selected: Radio;\n    /**\n     * The name attribute associated with the `RadioGroup`.\n     */\n    protected _name: string;\n    /**\n     * Updates the selected `Radio` to be checked (selected).\n     */\n    checkSelectedRadio(): void;\n    /**\n     * Use the value of the `RadioGroup` to update the selected radio to the right state (selected state).\n     */\n    updateSelectedRadioFromValue(): void;\n    /**\n     * Creates a class of `RadioChange` to emit the change in the `RadioGroup`.\n     */\n    emitChangeEvent(event: RadioChange): void;\n    /**\n     * Synchronizes radio properties.\n     */\n    updateRadios(): void;\n    /**\n     * Updates the value of the `RadioGroup` using the provided parameter.\n     */\n    writeValue(value: any): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * Used to set method to propagate changes back to the form.\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Needed to properly implement ControlValueAccessor.\n     */\n    onTouched: () => any;\n    /**\n     * Method set in registerOnChange to propagate changes back to the form.\n     */\n    propagateChange: (_: any) => void;\n    protected updateChildren(): void;\n    protected updateRadioChangeHandler(): void;\n}\n"]}