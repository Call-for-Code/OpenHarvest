{"version":3,"file":"radio.component.d.ts","sources":["radio.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | radio.component.d.ts\n *\n * Copyright 2014, 2021 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { EventEmitter } from \"@angular/core\";\nimport { RadioChange } from \"./radio-change.class\";\n/**\n * class: Radio (extends Checkbox)\n *\n * selector: `n-radio`\n *\n * source: `src/forms/radio.component.ts`\n *\n * ```html\n * <ibm-radio [(ngModel)]=\"radioState\">Radio</ibm-radio>\n * ```\n *\n * Also see: [`RadioGroup`](#ibm-radio-group)\n */\nexport declare class Radio {\n    /**\n     * Used to dynamically create unique ids for the `Radio`.\n     */\n    static radioCount: number;\n    checked: boolean;\n    name: string;\n    disabled: boolean;\n    labelPlacement: \"right\" | \"left\";\n    ariaLabelledby: string;\n    /**\n     * Used to set the `aria-label` attribute on the input label.\n     */\n    ariaLabel: string;\n    /**\n     * Sets the HTML required attribute\n     */\n    required: boolean;\n    /**\n     * The value of the `Radio`.\n     */\n    value: string;\n    /**\n     * Set to `true` for a loading table.\n     */\n    skeleton: boolean;\n    /**\n     * The id for the `Radio`.\n     */\n    id: string;\n    /**\n     * emits when the state of the radio changes\n     */\n    change: EventEmitter<RadioChange>;\n    hostClass: boolean;\n    readonly labelLeft: boolean;\n    protected _labelledby: string;\n    /**\n     * Handler provided by the `RadioGroup` to bubble events up\n     */\n    radioChangeHandler: (event: RadioChange) => void;\n    /**\n     * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.\n     * Emits the changes of both the `RadioGroup` and `Radio`.\n     */\n    onChange(event: Event): void;\n    onClick(event: Event): void;\n    /**\n     * Method called by `RadioGroup` with a callback function to bubble `RadioChange` events\n     * @param fn callback that expects a `RadioChange` as an argument\n     */\n    registerRadioChangeHandler(fn: (event: RadioChange) => void): void;\n}\n"]}